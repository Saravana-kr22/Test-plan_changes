{
    "OnOff": [
        {
            "Test Case Name": "4.1.1. [TC-OO-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-OO-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to on/off cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OO.S.A0000(OnOff)",
                    "OO.S.A4000(GlobalSceneControl)",
                    "OO.S.A4001(OnTime)",
                    "OO.S.A4001(OnTime)",
                    "OO.S.A4001(OnTime)",
                    "OO.S.A4001(OnTime)",
                    "OO.S.A4002(OffWaitTime)",
                    "OO.S.A4001(OffWaitTime)",
                    "OO.S.A4001(OffWaitTime)",
                    "OO.S.A4001(OffWaitTime)",
                    "OO.S.A4003(StartUpOnOff)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theOnOff attributefrom the DUT",
                    "TH reads theGlobalSceneControl attributefrom the DUT",
                    "TH reads theOnTime attributefrom the DUT",
                    "TH writes theOnTime attributeas 30",
                    "TH reads theOnTime attributefrom the DUT",
                    "TH writes theOnTime attributeas 'initial-On-time' to restore the original value",
                    "TH reads theOffWaitTime attributefrom the DUT",
                    "TH writes theOffWaitTime attributeas 30",
                    "TH reads theOffWaitTime attributefrom the DUT",
                    "TH writes theOffWaitTime attributeas 'initial-Off-waittime' to restore the original value",
                    "TH reads theStartUpOnOff attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with a uint16 value.Save the value as 'initial-On-time'",
                    "Verify that the DUT sends success response",
                    "Verify that the DUT responds with value 30",
                    "Verify that the DUT sends success response",
                    "Verify that the DUT responds with a uint16 value.Save the value as 'initial-Off-waittime'",
                    "Verify that the DUT sends success response",
                    "Verify that the DUT responds with value 30",
                    "Verify that the DUT sends success response",
                    "Verify that the DUT responds with an enum8 value or NULL."
                ]
            }
        },
        {
            "Test Case Name": "4.1.2. [TC-OO-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-OO-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the on/off cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "6a",
                    "6b",
                    "6c",
                    "6d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C02.Rsp(Toggle)",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C02.Rsp(Toggle)",
                    "OO.S.A0000(OnOff)",
                    "OO.M.ManuallyControlled",
                    "OO.M.ManuallyControlled, OO.S.A0000(OnOff)",
                    "OO.M.ManuallyControlled",
                    "OO.M.ManuallyControlled, OO.S.A0000(OnOff)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sendsOff commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsOff commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsOff commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsToggle commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "TH sendsToggle commandto DUT",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "Operate on device to setOnOff attributemanually to on",
                    "after a few seconds, TH readsOnOff attributefrom DUT",
                    "Operate on device to setOnOff attributemanually to off",
                    "after a few seconds, TH readsOnOff attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be FALSE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be TRUE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value remains TRUE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be FALSE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value remains FALSE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be TRUE",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be FALSE",
                    "",
                    "Value has to be TRUE",
                    "",
                    "Value has to be FALSE"
                ]
            }
        },
        {
            "Test Case Name": "4.1.3. [TC-OO-2.3] Secondary functionality with server as DUT",
            "Test Case ID": "TC-OO-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality of the on/off cluster server.\nThis test case is only required if the Level Control for Lighting feature is supported (OO.S.F00(LT)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "6a",
                    "6b",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "8",
                    "9a",
                    "9b",
                    "10a",
                    "10b",
                    "10c",
                    "10d",
                    "10e",
                    "11a",
                    "11b",
                    "12a",
                    "12b",
                    "13a",
                    "13b",
                    "14a",
                    "14b",
                    "14c",
                    "15",
                    "16a",
                    "16b",
                    "17a",
                    "17b",
                    "17c",
                    "17d",
                    "18a",
                    "18b",
                    "19a",
                    "19b",
                    "19c",
                    "20a",
                    "20b",
                    "21a",
                    "21b",
                    "22a",
                    "22b",
                    "23a",
                    "23b",
                    "23c",
                    "23d",
                    "24a",
                    "24b",
                    "24c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C40.Rsp(OffWithEffect)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C41.Rsp(OnWithRecallGlobalScene)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C40.Rsp(OffWithEffect)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C40.Rsp(OffWithEffect)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.C41.Rsp(OnWithRecallGlobalScene)",
                    "OO.S.A0000(OnOff) OO.S.A4000(GlobalSceneControl)",
                    "OO.S.A4001(OnTime) OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff) OO.S.A4001(OnTime) OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C40.Rsp(OffWithEffect)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)",
                    "OO.S.C42.Rsp(OnWithTimedOff)",
                    "OO.S.A0000(OnOff) OO.S.A4001(OnTime) OO.S.A4002(OffWaitTime)",
                    "OO.S.A0000(OnOff)OO.S.A4001(OnTime)OO.S.A4002(OffWaitTime)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sendsOn commandto DUT",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOffWithEffect commandto DUT with EffectIdentifier and EffectVariant both set to 0x00",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOnWithRecallGlobalScene commandto DUT",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOffWithEffect commandto DUT with EffectIdentifier and EffectVariant both set to 0x00",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOffWithEffect commandto DUT with EffectIdentifier set to 0x01 (dying light) and EffectVariant set to 0x00",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH sendsOnWithRecallGlobalScene commandto DUT",
                    "after a few seconds, TH readsOnOff attributeandGlobalSceneControl attributefrom DUT",
                    "TH readsOnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOffWithEffect commandto DUT with EffectIdentifier and EffectVariant both set to 0x00",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOn commandto DUT",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH sendsOff commandto DUT",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 30s, TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x01 (AcceptOnlyWhenOn 1)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 40s, TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s,  TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOff commandto DUT",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "After 10s, TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOn commandto DUT",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 10s, TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "TH sendsOff commandto DUT",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 40s, TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "TH sendsOnWithTimedOff commandto DUT withOnOffControl: 0x00 (AcceptOnlyWhenOn 0)OnTime: 0x012c (30s)OffTime: 0x012c (30s)",
                    "Immediately TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT",
                    "After 40s, TH readsOnOff attribute,OnTime attributeandOffWaitTime attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE. The value of GlobalSceneControl has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE. The value of GlobalSceneControl has to be FALSE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE. The value of GlobalSceneControl has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE. The value of GlobalSceneControl has to be FALSE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE. The value of GlobalSceneControl has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE. The value of GlobalSceneControl has to be FALSE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE. The value of GlobalSceneControl has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE. The value of GlobalSceneControl has to be TRUE.",
                    "The value of OnTime has to be 0x0000. The value of OffWaitTime has to be 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x00c8. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be 0x01.The value of OnTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be approximately equal to 0x00c8. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x00c8. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be TRUE.The value of OnTime has to be approximately equal to 0x012c. The tolerance is PIXIT.OO.MaxCommunicationTurnaround.The value of OffWaitTime has to be 0x012c.",
                    "The value of OnOff has to be FALSE.The value of OnTime has to be 0x0000.The value of OffWaitTime has to be equal to 0x0000."
                ]
            }
        },
        {
            "Test Case Name": "4.1.4. [TC-OO-2.4] Startup functionality with server as DUT",
            "Test Case ID": "TC-OO-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the startup functionality of the on/off cluster server.\nThis test case is only required if the Level Control for Lighting feature is supported (OO.S.F00(LT)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "5g",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "6i"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.A4003(StartUpOnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)",
                    "OO.S.A4003(StartUpOnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)",
                    "OO.S.A4003(StartUpOnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)",
                    "OO.S.A4003(StartUpOnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)",
                    "OO.S.C00.Rsp(Off)",
                    "OO.S.A0000(OnOff)",
                    "",
                    "",
                    "OO.S.A0000(OnOff)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sendsOn commandto DUT",
                    "TH writes a value of 0 toStartUpOnOff attributeof DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "TH writes a value of 1 toStartUpOnOff attributeof DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "TH writes a value of 2 toStartUpOnOff attributeof DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "TH writes NULL toStartUpOnOff attributeof DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "TH sendsOff commandto DUT",
                    "TH reads theOnOff attributefrom the DUT",
                    "Power off  DUT",
                    "Power on  DUT",
                    "TH reads theOnOff attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "The value of OnOff has to be FALSE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "The value of OnOff has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "The value of OnOff has to be FALSE.",
                    "",
                    "",
                    "The value of OnOff has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "The value of OnOff has to be TRUE.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "The value of OnOff has to be FALSE.",
                    "",
                    "",
                    "The value of OnOff has to be FALSE."
                ]
            }
        },
        {
            "Test Case Name": "4.1.5. [TC-OO-2.5]  DeadFrontBehaviour Feature with DUT as Server - REMOVED",
            "Test Case ID": "TC-OO-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DeadFrontBehaviour Feature of the on/off cluster server.\nThis test case is only required if the DeadFrontBehaviour feature DF is supported.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "OO.S.C00.Rsp(Off)",
                    "LVL.S.C04.Rsp(MoveToLevelWithOnOff)",
                    "LVL.S.A0000(CurrentLevel)",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)"
                ],
                "Test Step": [
                    "TH reads theFeatureMapattribute from DUT",
                    "Activate the Subscription between DUT and TH for theCurrentLevel attributefrom the Level Cluster",
                    "TH sendsOff commandto the On/Off Cluster of DUT on PIXIT.OO.ENDPOINTNote: OnOff attribute should be FALSE for the cluster to exhibit dead front behavior",
                    "TH sends a MoveWithOnOff command to the Level Control Cluster of DUT on PIXIT.OO.ENDPOINT, with MoveMode =0x00 (up) and Rate =10 (units/s)",
                    "TH reads CurrentLevel attribute from the Level Control Cluster of DUT on PIXIT.OO.ENDPOINT",
                    "TH sendsOn commandto the On/Off Cluster  of DUT on PIXIT.OO.ENDPOINTNote: DUT stops executing the dead front behavior.",
                    "TH sends a MoveToLevel command to Level Control Cluster of DUT on PIXIT.OO.ENDPOINT, with Level =50 and TransitionTime =0 (immediate)"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds withFeatureMapattribute with Bit 2(OFFONLY) set to zero",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that DUT responds with INVALID_IN_STATE status code as it is executing the dead front",
                    "Verify that TH is able to read the _CurrentLevel successfully from the DUT when executing the dead front",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that there is a report data message sent from the DUT for the changed value of the attribute CurrentLevel."
                ]
            }
        },
        {
            "Test Case Name": "4.1.6. [TC-OO-2.6]  OffOnly Feature with  DUT as Server",
            "Test Case ID": "TC-OO-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the OffOnly Feature of the on/off cluster server.\nThis test case is only required if the OffOnly feature OFFONLY is supported.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OO.S.C01.Rsp(On)",
                    "OO.S.C02.Rsp(Toggle)"
                ],
                "Test Step": [
                    "TH reads theFeatureMapattribute from DUT",
                    "TH sendsOn commandto the On/Off Cluster of DUT on PIXIT.OO.ENDPOINT",
                    "TH sendsToggle commandto the On/Off Cluster of DUT on PIXIT.OO.ENDPOINT"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds withFeatureMapattribute with Bit 2(OFFONLY) set to 1",
                    "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)",
                    "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)"
                ]
            }
        },
        {
            "Test Case Name": "4.2.1. [TC-OO-3.2] Functionality with client as DUT",
            "Test Case ID": "TC-OO-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the On/Off cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "OO.C.C00.Tx(Off)",
                    "OO.C.C01.Tx(On)",
                    "OO.C.C02.Tx(Toggle)",
                    "OO.C.C40.Tx(OffWithEffect)",
                    "OO.C.C41.Tx(OnWithRecallGlobalScene)",
                    "OO.C.C42.Tx(OnWithTimedOff)"
                ],
                "Test Step": [
                    "DUT issues an Off command to the Test Harness.",
                    "DUT issues an On command to the Test Harness.",
                    "DUT issues an Toggle command to the Test Harness.",
                    "DUT issues an OffWithEffect command to the Test Harness.",
                    "DUT issues an OnWithRecallGlobalScene command to the Test Harness.",
                    "DUT issues an OnWithTimedOff command to the Test Harness."
                ],
                "Expected Outcome": [
                    "If OO.C.C00.Tx(Off), Test Harness receives the Off command from the DUT. The command has no parameters.",
                    "If OO.C.C01.Tx(On), Test Harness receives the On command from the DUT. The command has no parameters.",
                    "If OO.C.C02.Tx(Toggle), Test Harness receives the Toggle command from the DUT. The command has no parameters.",
                    "If OO.C.C40.Tx(OffWithEffect), Test Harness receives the OffWithEffect command from the DUT. Verify the command has two parameters:ID 0 (EffectIdentifier): the type is a uint8, the value has to be 0 or 1.ID 1 (EffectVariant): the type is a uint8. If EffectIdentifier is 0 the value of EffectVariant has to be 0, 1 or 2. If EffectIdentifier is 1 the value of EffectVariant has to be 0.",
                    "If OO.C.C41.Tx(OnWithRecallGlobalScene), Test Harness receives the OnWithRecallGlobalScene command from the DUT. The command has no parameters.",
                    "If OO.C.C42.Tx(OnWithTimedOff), Test Harness receives the OnWithTimedOff command from the DUT. Verify the command has three parameters:ID 0 (OnOffControl): the type is a map8, the value has to be 0x00 or 0x01.ID 1 (OnTime): the type is a uint16.ID 2 (OffWaitTime): the type is a uint16."
                ]
            }
        }
    ],
    "Electrical_Energy_Measurement": [
        {
            "Test Case Name": "9.1.1. [TC-EEM-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-EEM-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bits set:\n                                                                                             - bit 0: SHALL be 1 if and only if EEM.S.F00(IMPE)\n                                                                                             - bit 1: SHALL be 1 if and only if EEM.S.F01(EXPE)\n                                                                                             - bit 2: SHALL be 1 if and only if EEM.S.F02(CUME)\n                                                                                             - bit 3: SHALL be 1 if and only if EEM.S.F03(PERE)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes\n                                                                                             The list SHALL include all the mandatory entries:- 0x00000xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0001: SHALL be included if (EEM.S.F00(IMPE) & EEM.S.F02(CUME)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0002: SHALL be included if (EEM.S.F01(EXPE) & EEM.S.F02(CUME)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0003: SHALL be included if (EEM.S.F00(IMPE) & EEM.S.F03(PERE)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0004: SHALL be included if (EEM.S.F01(EXPE) & EEM.S.F03(PERE)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0005: SHALL be included if (EEM.S.F02(CUME) & EEM.S.A0005(CumulativeEnergyReset)) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:\n                                                                                             The list includes entries based on feature support:- 0x0000: SHALL be included if EEM.S.F02(CUME) and SHALL NOT be included otherwise.- 0x0001: SHALL be included if EEM.S.F03(PERE) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:\n                                                                                             This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:\n                                                                                             This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "9.1.2. [TC-EEM-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-EEM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Electrical Energy Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "{REF_EEM_SA_ACCURACY}",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_IMPORTED}",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_EXPORTED}",
                    "{REF_EEM_SA_PERIODIC_ENERGY_IMPORTED}",
                    "{REF_EEM_SA_PERIODIC_ENERGY_EXPORTED}",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_RESET}"
                ],
                "PICS": [
                    "",
                    "EEM.S.A0000(Accuracy)",
                    "EEM.S.A0001(CumulativeEnergyImported)",
                    "EEM.S.A0002(CumulativeEnergyExported)",
                    "EEM.S.A0003(PeriodicEnergyImported)",
                    "EEM.S.A0004(PeriodicEnergyExported)",
                    "EEM.S.A0005(CumulativeEnergyReset)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAccuracyattribute.",
                    "TH reads from the DUT theCumulativeEnergyImportedattribute.",
                    "TH reads from the DUT theCumulativeEnergyExportedattribute.",
                    "TH reads from the DUT thePeriodicEnergyImportedattribute.",
                    "TH reads from the DUT thePeriodicEnergyExportedattribute.",
                    "TH reads from the DUT theCumulativeEnergyResetattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a MeasurementAccuracyStruct value.",
                    "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "Verify that the DUT response contains either null or an EnergyMeasurementStruct value.",
                    "Verify that the DUT response contains either null or a CumulativeEnergyResetStruct value."
                ]
            }
        },
        {
            "Test Case Name": "9.1.3. [TC-EEM-2.2] Optional cumulative imported energy attributes with DUT as Server",
            "Test Case ID": "TC-EEM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Electrical Energy Measurement cluster attribute read commands.\nThis test case is only required if the CUME and IMPE features are supported (EEM.S.F02(CUME) and EEM.S.F00(IMPE)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4a",
                    "5",
                    "5a",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_IMPORTED}",
                    "",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_IMPORTED}",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "",
                    "EEM.S.A0001(CumulativeEnergyImported)",
                    "",
                    "EEM.S.A0001(CumulativeEnergyImported)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "Wait 3 seconds",
                    "TH reads from the DUT theCumulativeEnergyImportedattribute.",
                    "Wait 3 seconds",
                    "TH reads from the DUT theCumulativeEnergyImportedattribute.",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be greater than value measure in step 4a.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "9.1.4. [TC-EEM-2.3] Optional cumulative exported energy attributes with DUT as Server",
            "Test Case ID": "TC-EEM-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Electrical Energy Measurement cluster attribute read commands.\nThis test case is only required if the CUME and EXPE features are supported (EEM.S.F02(CUME) and EEM.S.F01(EXPE)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4a",
                    "5",
                    "5a",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_EXPORTED}",
                    "",
                    "{REF_EEM_SA_CUMULATIVE_ENERGY_EXPORTED}",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "",
                    "EEM.S.A0002(CumulativeEnergyExported)",
                    "",
                    "EEM.S.A0002(CumulativeEnergyExported)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Generator Test 3kW Event",
                    "Wait 6 seconds",
                    "TH reads from the DUT theCumulativeEnergyExportedattribute.",
                    "Wait 6 seconds",
                    "TH reads from the DUT theCumulativeEnergyExportedattribute.",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for for Stop Fake Readings Test Event"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be greater than the value measure in step 4a.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "9.1.5. [TC-EEM-2.4] Optional periodic imported energy attributes with DUT as Server",
            "Test Case ID": "TC-EEM-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Electrical Energy Measurement cluster attribute read commands.\nThis test case is only required if the PERE and IMPE features are supported (EEM.S.F03(PERE) and EEM.S.F00(IMPE)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4a",
                    "5",
                    "5a",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "{REF_EEM_SA_PERIODIC_ENERGY_IMPORTED}",
                    "",
                    "{REF_EEM_SA_PERIODIC_ENERGY_IMPORTED}",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "",
                    "EEM.S.A0003(PeriodicEnergyImported)",
                    "",
                    "EEM.S.A0003(PeriodicEnergyImported)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "Wait 3 seconds",
                    "TH reads from the DUT thePeriodicEnergyImportedattribute.",
                    "Wait 3 seconds",
                    "TH reads from the DUT thePeriodicEnergyImportedattribute.",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be different from the value measure in step 4a.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "9.1.6. [TC-EEM-2.5] Optional periodic exported energy attributes with DUT as Server",
            "Test Case ID": "TC-EEM-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Electrical Energy Measurement cluster attribute read commands.\nThis test case is only required if the PERE and EXPE features are supported (EEM.S.F03(PERE) and EEM.S.F01(EXPE)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4a",
                    "5",
                    "5a",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "{REF_EEM_SA_PERIODIC_ENERGY_EXPORTED}",
                    "",
                    "{REF_EEM_SA_PERIODIC_ENERGY_EXPORTED}",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "",
                    "EEM.S.A0004(PeriodicEnergyExported)",
                    "",
                    "EEM.S.A0004(PeriodicEnergyExported)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Start Fake Generator Test 3kW Event",
                    "Wait 6 seconds",
                    "TH reads from the DUT thePeriodicEnergyExportedattribute.",
                    "Wait 6 seconds",
                    "TH reads from the DUT thePeriodicEnergyExportedattribute.",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEM.TEST_EVENT_TRIGGER for Stop Fake Readings Test Event"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be different from the value measure in step 4a.",
                    ""
                ]
            }
        }
    ],
    "Electrical_Power_Measurement": [
        {
            "Test Case Name": "14.1.1. [TC-EPM-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-EPM-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bits set:\n                                                                                             - bit 0: SHALL be 1 if and only if EPM.S.F00(DIRC)\n                                                                                             - bit 1: SHALL be 1 if and only if EPM.S.F01(ALTC)\n                                                                                             - bit 2: SHALL be 1 if and only if EPM.S.F02(POLY)\n                                                                                             - bit 3: SHALL be 1 if and only if EPM.S.F03(HARM)\n                                                                                             - bit 4: SHALL be 1 if and only if EPM.S.F04(PWRQ)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes\n                                                                                             The list SHALL include all the mandatory entries:- 0x0000, 0x0001, 0x0002, 0x00080xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0003: SHALL be included if and only if EPM.S.A0003(Ranges)The list MAY include these optional entries:- 0x0004: SHALL be included if and only if EPM.S.A0004(Voltage)The list MAY include these optional entries:- 0x0005: SHALL be included if and only if EPM.S.A0005(ActiveCurrent)The list includes entries based on feature support:- 0x0006: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A0006(ReactiveCurrent)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0007: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A0007(ApparentCurrent)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0009: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A0009(ReactivePower)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000A: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A000a(ApparentPower)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000B: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A000b(RMSVoltage)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000C: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A000c(RMSCurrent)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000D: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A000d(RMSPower)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000E: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A000e(Frequency)) and SHALL NOT be included otherwise.\n                                                                                             - 0x000F: SHALL be included if EPM.S.F03(HARM) and SHALL NOT be included otherwise.\n                                                                                             - 0x0010: SHALL be included if EPM.S.F04(PWRQ) and SHALL NOT be included otherwise.\n                                                                                             - 0x0011: SHALL be included if (EPM.S.F01(ALTC) & EPM.S.A0011(PowerFactor)) and SHALL NOT be included otherwise.\n                                                                                             - 0x0012: SHALL be included if (EPM.S.F02(POLY) & EPM.S.A0012(NeutralCurrent)) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:\n                                                                                             The list includes entries based on feature support:- 0x0000: SHALL be included if EPM.S.A0003(Ranges) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:\n                                                                                             This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:\n                                                                                             This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "14.1.2. [TC-EPM-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-EPM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Electrical Power Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20"
                ],
                "Ref": [
                    "",
                    "{REF_EPM_SA_POWER_MODE}",
                    "{REF_EPM_SA_NUMBER_OF_MEASUREMENT_TYPES}",
                    "{REF_EPM_SA_ACCURACY}",
                    "{REF_EPM_SA_RANGES}",
                    "{REF_EPM_SA_VOLTAGE}",
                    "{REF_EPM_SA_ACTIVE_CURRENT}",
                    "{REF_EPM_SA_REACTIVE_CURRENT}",
                    "{REF_EPM_SA_APPARENT_CURRENT}",
                    "{REF_EPM_SA_ACTIVE_POWER}",
                    "{REF_EPM_SA_REACTIVE_POWER}",
                    "{REF_EPM_SA_APPARENT_POWER}",
                    "{REF_EPM_SA_RMS_VOLTAGE}",
                    "{REF_EPM_SA_RMS_CURRENT}",
                    "{REF_EPM_SA_RMS_POWER}",
                    "{REF_EPM_SA_FREQUENCY}",
                    "{REF_EPM_SA_HARMONIC_CURRENTS}",
                    "{REF_EPM_SA_HARMONIC_PHASES}",
                    "{REF_EPM_SA_POWER_FACTOR}",
                    "{REF_EPM_SA_NEUTRAL_CURRENT}"
                ],
                "PICS": [
                    "",
                    "EPM.S.A0000(PowerMode)",
                    "EPM.S.A0001(NumberOfMeasurementTypes)",
                    "EPM.S.A0002(Accuracy)",
                    "EPM.S.A0003(Ranges)",
                    "EPM.S.A0004(Voltage)",
                    "EPM.S.A0005(ActiveCurrent)",
                    "EPM.S.A0006(ReactiveCurrent)",
                    "EPM.S.A0007(ApparentCurrent)",
                    "EPM.S.A0008(ActivePower)",
                    "EPM.S.A0009(ReactivePower)",
                    "EPM.S.A000a(ApparentPower)",
                    "EPM.S.A000b(RMSVoltage)",
                    "EPM.S.A000c(RMSCurrent)",
                    "EPM.S.A000d(RMSPower)",
                    "EPM.S.A000e(Frequency)",
                    "EPM.S.A000f(HarmonicCurrents)",
                    "EPM.S.A0010(HarmonicPhases)",
                    "EPM.S.A0011(PowerFactor)",
                    "EPM.S.A0012(NeutralCurrent)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT thePowerModeattribute.",
                    "TH reads from the DUT theNumberOfMeasurementTypesattribute.",
                    "TH reads from the DUT theAccuracyattribute.",
                    "TH reads from the DUT theRangesattribute.",
                    "TH reads from the DUT theVoltageattribute.",
                    "TH reads from the DUT theActiveCurrentattribute.",
                    "TH reads from the DUT theReactiveCurrentattribute.",
                    "TH reads from the DUT theApparentCurrentattribute.",
                    "TH reads from the DUT theActivePowerattribute.",
                    "TH reads from the DUT theReactivePowerattribute.",
                    "TH reads from the DUT theApparentPowerattribute.",
                    "TH reads from the DUT theRMSVoltageattribute.",
                    "TH reads from the DUT theRMSCurrentattribute.",
                    "TH reads from the DUT theRMSPowerattribute.",
                    "TH reads from the DUT theFrequencyattribute.",
                    "TH reads from the DUT theHarmonicCurrentsattribute.",
                    "TH reads from the DUT theHarmonicPhasesattribute.",
                    "TH reads from the DUT thePowerFactorattribute.",
                    "TH reads from the DUT theNeutralCurrentattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an enum8 value.",
                    "Verify that the DUT response contains an uint8 value.",
                    "- Verify that the DUT response contains a list of MeasurementAccuracyStruct entries\n                                                                                                                                                     - Verify that the list has between 1 and NumberOfMeasurementTypes entries",
                    "- Verify that the DUT response contains a list of MeasurementRangeStruct entries\n                                                                                                                                                     - Verify that the list has between 0 and NumberOfMeasurementTypes entries",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of 0 to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of 0 to 1000000",
                    "- Verify that the DUT response contains a list of HarmonicMeasurementStruct entries",
                    "- Verify that the DUT response contains a list of HarmonicMeasurementStruct entries",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -10000 to 10000",
                    "Verify that the DUT response contains either null or an int64 value. Value has to be between a range of -262to 262"
                ]
            }
        },
        {
            "Test Case Name": "14.1.3. [TC-EPM-2.2] Primary functionality with DUT as Server",
            "Test Case ID": "TC-EPM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Electrical Power Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "5a",
                    "5b",
                    "5c",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "{REF_PWR_SA_ACTIVE_POWER}",
                    "{REF_PWR_SA_ACTIVE_CURRENT}",
                    "{REF_PWR_SA_VOLTAGE}",
                    "",
                    "{REF_PWR_SA_ACTIVE_POWER}",
                    "{REF_PWR_SA_ACTIVE_CURRENT}",
                    "{REF_PWR_SA_VOLTAGE}",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "",
                    "EPM.S.A0008(ActivePower)",
                    "EPM.S.A0005(ActiveCurrent)",
                    "EPM.S.A0004(Voltage)",
                    "",
                    "EPM.S.A0008(ActivePower)",
                    "EPM.S.A0005(ActiveCurrent)",
                    "EPM.S.A0004(Voltage)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EPM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EPM.TEST_EVENT_TRIGGER for Start Fake Load Test 1kW Event",
                    "Wait 3 seconds",
                    "TH reads from the DUT theActivePowerattribute.",
                    "TH reads from the DUT theActiveCurrentattribute.",
                    "TH reads from the DUT theVoltageattribute.",
                    "Wait 3 seconds",
                    "TH reads from the DUT theActivePowerattribute.",
                    "TH reads from the DUT theActiveCurrentattribute.",
                    "TH reads from the DUT theVoltageattribute.",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EPM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EPM.TEST_EVENT_TRIGGER for  Stop Fake Readings Event"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "",
                    "Verify the read is successful and that the value is between 980'000 and 1'020'000 mW. Note the value read.",
                    "Verify the read is successful and that the value is between 3'848 and 4'848 mA. Note the value read.",
                    "Verify the read is successful and that the value is between 229'000 and 231'000 mV. Note the value read.",
                    "",
                    "Verify the read is successful and that the value is between 980'000 and 1'020'000 mW, and the value is different from the value read in step 4a.",
                    "Verify the read is successful and that the value is between 3'848 and 4'848 mA, and the value is different from the value read in step 4b.",
                    "Verify the read is successful and that the value is between 229'000 and 231'000 mV, and the value is different from the value read in step 4c.",
                    ""
                ]
            }
        }
    ],
    "Temperature_Measurement": [
        {
            "Test Case Name": "17.1.1. [TC-TMP-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-TMP-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the Temperature Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "TestStep": [
                    "Commissioning, already done",
                    "Set default boundsmin_bound= -27315,max_bound= 32767",
                    "TH reads the MinMeasuredValue attribute from the DUT and saves asmin_measured_value. Ifmin_measured_valueis not null, setmin_boundtomin_measured_value",
                    "TH reads the MaxMeasuredValue attribute from the DUT and saves asmax_measured_value. Ifmax_measured_valueis not null, setmax_boundto `max_measured_value",
                    "Ifmin_measured_valueis not null, verify min measured value range",
                    "TH reads the MeasuredValue attribute from the DUT",
                    "TH reads the Tolerance attribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify thatmax_measured_valueis either null or an int16 where min_bound <max_measured_value\u2264 32767.",
                    "Verify that -27315 \u2264min_measured_value<max_bound",
                    "Verify that the DUT response contains either null or a int16 wheremin_bound\u2264 MeasuredValue \u2264max_bound.",
                    "Verify that Tolerance is in the range of 0 to 2048 inclusive."
                ]
            }
        },
        {
            "Test Case Name": "17.1.2. [TC-TMP-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-TMP-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Temperature Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "2.3.4.2",
                    "2.3.4.3",
                    "2.3.4.1,\n    2.3.4.2,\n    2.3.4.3",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TMP.S.A0001(MinMeasuredValue)",
                    "TMP.S.A0002(MaxMeasuredValue)",
                    "TMP.S.A0000(MeasuredValue)",
                    "TMP.M.ManuallyControlled",
                    "TMP.S.A0000(MeasuredValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH readsMinMeasuredValueattribute from DUT",
                    "TH readsMaxMeasuredValueattribute from DUT",
                    "TH readsMeasuredValueattribute from DUT",
                    "Operate on device to change the temperature significantly",
                    "after a few seconds, TH readsMeasuredValueattribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify thatMeasuredValueattribute is in range ofMinMeasuredValueattribute andMaxMeasuredValueattribute.",
                    "",
                    "Value has to be different"
                ]
            }
        }
    ],
    "Relative_Humidity_Measurement": [
        {
            "Test Case Name": "20.1.1. [TC-RH-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-RH-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the Relative Humidity Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "2.6.4.2",
                    "2.6.4.3",
                    "2.6.4.1",
                    "2.6.4.4"
                ],
                "PICS": [
                    "",
                    "RH.S.A0001(MinMeasuredValue)",
                    "RH.S.A0002(MaxMeasuredValue)",
                    "RH.S.A0000(MeasuredValue)",
                    "RH.S.A0003(Tolerance)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads theMinMeasuredValue attributefrom the DUT.",
                    "TH reads theMaxMeasuredValue attributefrom the DUT.",
                    "TH reads theMeasuredValue attributefrom the DUT.",
                    "TH reads theTolerance attributefrom the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains eithernullora uint16 where0 \u2264MinMeasuredValue\u2264 9999.Note the value for usage in later steps as RHmin.IfMinMeasuredValueis null note 0.",
                    "Verify that the DUT response contains eithernullora uint16 whereRHmin<MaxMeasuredValue\u2264 10000.Note the value for usage in later steps as RHmax.IfMaxMeasuredValueis null note 10000.",
                    "Verify that the DUT response contains eithernullora uint16 whereRHmin\u2264MeasuredValue\u2264 RHmax.",
                    "Verify that the DUT responds with a uint16 value. Its value should be in the range of 0 and 2048."
                ]
            }
        },
        {
            "Test Case Name": "20.1.2. [TC-RH-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-RH-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Relative Humidity Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "2.6.4.2",
                    "2.6.4.3",
                    "2.6.4.1,\n    2.6.4.2,\n    2.6.4.3",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "RH.S.A0001(MinMeasuredValue)",
                    "RH.S.A0002(MaxMeasuredValue)",
                    "RH.S.A0000(MeasuredValue)",
                    "RH.M.ManuallyControlled",
                    "RH.S.A0000(MeasuredValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH readsMinMeasuredValue attributefrom DUT.",
                    "TH readsMaxMeasuredValue attributefrom DUT.",
                    "TH readsMeasuredValue attributefrom DUT.",
                    "Operate on device to change the humidity significantly.",
                    "after a few seconds, TH readsMeasuredValue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify thatMeasuredValue attributeis in range ofMinMeasuredValue attributeandMaxMeasuredValue attribute.",
                    "",
                    "Value has to be different."
                ]
            }
        }
    ],
    "Thermostat_User_Interface_Configuration": [
        {
            "Test Case Name": "23.1.1. [TC-TSUIC-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-TSUIC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the Thermostat User Interface Configuration cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "4.5.5.1",
                    "4.5.5.2",
                    "4.5.5.3"
                ],
                "PICS": [
                    "",
                    "TSUIC.S.A0000(TemperatureDisplayMode)",
                    "TSUIC.S.A0001(KeypadLockout)",
                    "TSUIC.S.A0002(ScheduleProgrammingVisibility)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theTemperatureDisplayModeattribute from the DUT",
                    "TH reads theKeypadLockoutattribute from the DUT",
                    "TH reads theScheduleProgrammingVisibilityattribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds with an enum8 value. Its value should be in the range of 0 and 1",
                    "Verify that the DUT responds with an enum8 value. Its value should be in the range of 0 and 5",
                    "Verify that the DUT responds with an enum8 value. Its value should be in the range of 0 and 1"
                ]
            }
        },
        {
            "Test Case Name": "23.1.2. [TC-TSUIC-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-TSUIC-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Thermostat User Interface Configuration cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "3g",
                    "3h",
                    "3i",
                    "3j",
                    "3k",
                    "3l",
                    "3m",
                    "3n",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f"
                ],
                "Ref": [
                    "",
                    "4.5.5.1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "4.5.5.2",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "4.5.5.3",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TSUIC.S.A0000(TemperatureDisplayMode)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TSUIC.S.A0001(KeypadLockout)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TSUIC.S.A0002(ScheduleProgrammingVisibility)",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH writes a value of 0 toTemperatureDisplayMode attributeof DUT",
                    "TH reads theTemperatureDisplayMode attributeof DUT",
                    "TH writes a value of 1 toTemperatureDisplayMode attributeof DUT",
                    "TH reads theTemperatureDisplayMode attributeof DUT",
                    "TH writes a value of greater than 1 toTemperatureDisplayMode attributeof DUT",
                    "TH reads theTemperatureDisplayMode attributeof DUT",
                    "TH writes a value of 0 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 1 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 2 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 3 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 4 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 5 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of greater than 5 toKeypadLockout attributeof DUT",
                    "TH reads theKeypadLockout attributeof DUT",
                    "TH writes a value of 0 toScheduleProgrammingVisibility attributeof DUT",
                    "TH reads theScheduleProgrammingVisibility attributeof DUT",
                    "TH writes a value of 1 toScheduleProgrammingVisibility attributeof DUT",
                    "TH reads theScheduleProgrammingVisibility attributeof DUT",
                    "TH writes a value of greater than 1 toScheduleProgrammingVisibility attributeof DUT",
                    "TH reads theScheduleProgrammingVisibility attributeof DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Temperature displayed in \u00b0C.",
                    "Verify that the TemperatureDisplayMode attribute has the value 0.",
                    "Temperature displayed in \u00b0F.",
                    "Verify that the TemperatureDisplayMode attribute has the value 1.",
                    "DUT should return an error CONSTRAINT_ERROR (0x87).",
                    "Verify that the TemperatureDisplayMode attribute still has the value 1.",
                    "All functionality available to the user.",
                    "Verify that the KeypadLockout attribute has the value 0.",
                    "Level 1 reduced functionality.",
                    "Verify that the KeypadLockout attribute has the value 1.",
                    "Level 2 reduced functionality.",
                    "Verify that the KeypadLockout attribute has the value 2.",
                    "Level 3 reduced functionality.",
                    "Verify that the KeypadLockout attribute has the value 3.",
                    "Level 4 reduced functionality.",
                    "Verify that the KeypadLockout attribute has the value 4.",
                    "Least functionality available to the user.",
                    "Verify that the KeypadLockout attribute has the value 5.",
                    "DUT should return an error CONSTRAINT_ERROR (0x87).",
                    "Verify that the KeypadLockout attribute still has the value 5.",
                    "Local schedule programming functionality is enabled at the thermostat.",
                    "Verify that the ScheduleProgrammingVisibility attribute has the value 0",
                    "Local schedule programming functionality is disabled at the thermostat.",
                    "Verify that the ScheduleProgrammingVisibility attribute has the value 1.",
                    "DUT should return an error CONSTRAINT_ERROR (0x87).",
                    "Verify that the ScheduleProgrammingVisibility attribute still has the value 1."
                ]
            }
        }
    ],
    "Pump_Configuration_and_Control": [
        {
            "Test Case Name": "26.1.1. [TC-PCC-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-PCC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 4.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if PCC.S.F00(PRSCONST)- bit 1: SHALL be 1 if and only if PCC.S.F01(PRSCOMP)- bit 2: SHALL be 1 if and only if PCC.S.F02(FLW)- bit 3: SHALL be 1 if and only if PCC.S.F03(SPD)- bit 4: SHALL be 1 if and only if PCC.S.F04(TEMP)- bit 5: SHALL be 1 if and only if PCC.S.F05(AUTO)- bit 6: SHALL be 1 if and only if PCC.S.F06(LOCAL)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x0001, 0x0002, 0x0011, 0x0012, 0x0013, 0x0020,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0010: SHALL be included if and only if PCC.S.A0010(PumpStatus)- 0x0014: SHALL be included if and only if PCC.S.A0014(Speed)- 0x0015: SHALL be included if and only if PCC.S.A0015(LifetimeRunningHours)- 0x0016: SHALL be included if and only if PCC.S.A0016(Power)- 0x0017: SHALL be included if and only if PCC.S.A0017(LifetimeEnergyConsumed)- 0x0021: SHALL be included if and only if PCC.S.A0021(ControlMode)The list includes entries based on feature support:- 0x0003: SHALL be included if PCC.S.F00(PRSCONST)\nor (PCC.S.F05(AUTO) & PCC.S.A0003(MinConstPressure))\nand SHALL NOT be included otherwise.- 0x0004: SHALL be included if PCC.S.F00(PRSCONST)\nor (PCC.S.F05(AUTO) & PCC.S.A0004(MaxConstPressure))\nand SHALL NOT be included otherwise.- 0x0005: SHALL be included if PCC.S.F01(PRSCOMP)\nor (PCC.S.F05(AUTO) & PCC.S.A0005(MinCompPressure))\nand SHALL NOT be included otherwise.- 0x0006: SHALL be included if PCC.S.F01(PRSCOMP)\nor (PCC.S.F05(AUTO) & PCC.S.A0006(MaxCompPressure))\nand SHALL NOT be included otherwise.- 0x0007: SHALL be included if PCC.S.F03(SPD)\nor (PCC.S.F05(AUTO) & PCC.S.A0007(MinConstSpeed))\nand SHALL NOT be included otherwise.- 0x0008: SHALL be included if PCC.S.F03(SPD)\nor (PCC.S.F05(AUTO) & PCC.S.A0008(MaxConstSpeed))\nand SHALL NOT be included otherwise.- 0x0009: SHALL be included if PCC.S.F02(FLW)\nor (PCC.S.F05(AUTO) & PCC.S.A0009(MinConstFlow))\nand SHALL NOT be included otherwise.- 0x000a: SHALL be included if PCC.S.F02(FLW)\nor (PCC.S.F05(AUTO) & PCC.S.A000a(MaxConstFlow))\nand SHALL NOT be included otherwise.- 0x000b: SHALL be included if PCC.S.F04(TEMP)\nor (PCC.S.F05(AUTO) & PCC.S.A000b(MinConstTemp))\nand SHALL NOT be included otherwise.- 0x000c: SHALL be included if PCC.S.F04(TEMP)\nor (PCC.S.F05(AUTO) & PCC.S.A000c(MaxConstTemp))\nand SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:The list MAY include these optional entries:- 0x00: SHALL be included if and only if PCC.S.E00(SupplyVoltageLow)- 0x01: SHALL be included if and only if PCC.S.E01(SupplyVoltageHigh)- 0x02: SHALL be included if and only if PCC.S.E02(PowerMissingPhase)- 0x03: SHALL be included if and only if PCC.S.E03(SystemPressureLow)- 0x04: SHALL be included if and only if PCC.S.E04(SystemPressureHigh)- 0x05: SHALL be included if and only if PCC.S.E05(DryRunning)- 0x06: SHALL be included if and only if PCC.S.E06(MotorTemperatureHigh)- 0x07: SHALL be included if and only if PCC.S.E07(PumpMotorFatalFailure)- 0x08: SHALL be included if and only if PCC.S.E08(ElectronicTemperatureHigh)- 0x09: SHALL be included if and only if PCC.S.E09(PumpBlocked)- 0x0a: SHALL be included if and only if PCC.S.E0a(SensorFailure)- 0x0b: SHALL be included if and only if PCC.S.E0b(ElectronicNonFatalFailure)- 0x0c: SHALL be included if and only if PCC.S.E0c(ElectronicFatalFailure)- 0x0d: SHALL be included if and only if PCC.S.E0d(GeneralFault)- 0x0e: SHALL be included if and only if PCC.S.E0e(Leakage)- 0x0f: SHALL be included if and only if PCC.S.E0f(AirDetection)- 0x10: SHALL be included if and only if PCC.S.E10(TurbineOperation)",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "26.2.1. [TC-PCC-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-PCC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Pump Configuration and Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "",
                    "AC.4.2.7.1",
                    "AC.4.2.7.2",
                    "AC.4.2.7.3",
                    "AC.4.2.7.4",
                    "AC.4.2.7.5",
                    "AC.4.2.7.6",
                    "AC.4.2.7.7",
                    "AC.4.2.7.8",
                    "AC.4.2.7.9",
                    "AC.4.2.7.10",
                    "AC.4.2.7.11",
                    "AC.4.2.7.12",
                    "AC.4.2.7.13",
                    "AC.4.2.7.14",
                    "AC.4.2.7.15",
                    "AC.4.2.7.16",
                    "AC.4.2.7.17",
                    "AC.4.2.7.18",
                    "AC.4.2.7.19",
                    "AC.4.2.7.20",
                    "AC.4.2.7.21",
                    "AC.4.2.7.22",
                    "AC.4.2.7.23"
                ],
                "PICS": [
                    "",
                    "PCC.S.A0000(MaxPressure)",
                    "PCC.S.A0001(MaxSpeed)",
                    "PCC.S.A0002(MaxFlow)",
                    "PCC.S.A0003(MinConstPressure)",
                    "PCC.S.A0004(MaxConstPressure)",
                    "PCC.S.A0005(MinCompPressure)",
                    "PCC.S.A0006(MaxCompPressure)",
                    "PCC.S.A0007(MinConstSpeed)",
                    "PCC.S.A0008(MaxConstSpeed)",
                    "PCC.S.A0009(MinConstFlow)",
                    "PCC.S.A000a(MaxConstFlow)",
                    "PCC.S.A000b(MinConstTemp)",
                    "PCC.S.A000c(MaxConstTemp)",
                    "PCC.S.A0010(PumpStatus)",
                    "PCC.S.A0011(EffectiveOperationMode)",
                    "PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.A0013(Capacity)",
                    "PCC.S.A0014(Speed)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0016(Power)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0020(OperationMode)",
                    "PCC.S.A0021(ControlMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMaxPressureattribute.",
                    "TH reads from the DUT theMaxSpeedattribute.",
                    "TH reads from the DUT theMaxFlowattribute.",
                    "TH reads from the DUT theMinConstPressureattribute.",
                    "TH reads from the DUT theMaxConstPressureattribute.",
                    "TH reads from the DUT theMinCompPressureattribute.",
                    "TH reads from the DUT theMaxCompPressureattribute.",
                    "TH reads from the DUT theMinConstSpeedattribute.",
                    "TH reads from the DUT theMaxConstSpeedattribute.",
                    "TH reads from the DUT theMinConstFlowattribute.",
                    "TH reads from the DUT theMaxConstFlowattribute.",
                    "TH reads from the DUT theMinConstTempattribute.",
                    "TH reads from the DUT theMaxConstTempattribute.",
                    "TH reads from the DUT thePumpStatusattribute.",
                    "TH reads from the DUT theEffectiveOperationModeattribute.",
                    "TH reads from the DUT theEffectiveControlModeattribute.",
                    "TH reads from the DUT theCapacityattribute.",
                    "TH reads from the DUT theSpeedattribute.",
                    "TH reads from the DUT theLifetimeRunningHoursattribute.",
                    "TH reads from the DUT thePowerattribute.",
                    "TH reads from the DUT theLifetimeEnergyConsumedattribute.",
                    "TH reads from the DUT theOperationModeattribute.",
                    "TH reads from the DUT theControlModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains a map16 value. Value has to be between a range of 0 and 8.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 7.",
                    "Verify that the DUT response contains an int16 value. Value has to be between a range of -32768 and 32767.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 65535.",
                    "Verify that the DUT response contains a uint24 value. Value has to be between a range of 0 and 16777215.",
                    "Verify that the DUT response contains a uint24 value. Value has to be between a range of 0 and 16777215.",
                    "Verify that the DUT response contains a uint32 value. Value has to be between a range of 0 and 4294967295.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 7."
                ]
            }
        },
        {
            "Test Case Name": "26.2.2. [TC-PCC-2.2] Operation Mode with Server as DUT",
            "Test Case ID": "TC-PCC-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the EffectiveOperationMode Attribute of the Pump Configuration and Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "AC.4.2.7.22",
                    "AC.4.2.7.15",
                    "AC.4.2.7.22",
                    "AC.4.2.7.15",
                    "AC.4.2.7.22",
                    "AC.4.2.7.15",
                    "AC.4.2.7.22",
                    "AC.4.2.7.15"
                ],
                "PICS": [
                    "",
                    "PCC.S.A0020(OperationMode)",
                    "PCC.S.A0011(EffectiveOperationMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0020(OperationMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0011(EffectiveOperationMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0020(OperationMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0011(EffectiveOperationMode)",
                    "PCC.S.F06(LOCAL) & PCC.S.A0020(OperationMode)",
                    "PCC.S.F06(LOCAL) & PCC.S.A0011(EffectiveOperationMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH write 0 (Normal) to theOperationModeattribute to DUT.",
                    "TH reads from the DUT theEffectiveOperationModeattribute.",
                    "TH write 1 (Minimum) to theOperationModeattribute to DUT.",
                    "TH reads from the DUT theEffectiveOperationModeattribute.",
                    "TH write 2 (Maximum) to theOperationModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveOperationModeattribute.",
                    "TH write 3 (Local) to theOperationModeattribute to DUT.",
                    "TH reads from the DUT theEffectiveOperationModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 0 (Normal).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 1 (Minimum).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 2 (Maximum).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 3 (Local)."
                ]
            }
        },
        {
            "Test Case Name": "26.2.3. [TC-PCC-2.3] Control Mode with Server as DUT",
            "Test Case ID": "TC-PCC-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the EffectiveControlMode Attribute of the Pump Configuration and Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "7a",
                    "7b",
                    "8a",
                    "8b"
                ],
                "Ref": [
                    "",
                    "AC.4.2.7.22",
                    "AC.4.2.7.15",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16",
                    "AC.4.2.7.23",
                    "AC.4.2.7.16"
                ],
                "PICS": [
                    "",
                    "PCC.S.A0020(OperationMode)",
                    "PCC.S.A0011(EffectiveOperationMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F03(SPD) & PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.F00(PRSCONST) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F00(PRSCONST) & PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.F01(PRSCOMP) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F01(PRSCOMP) & PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.F02(FLW) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F02(FLW) & PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.F04(TEMP) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F04(TEMP) & PCC.S.A0012(EffectiveControlMode)",
                    "PCC.S.F05(AUTO) & PCC.S.A0021(ControlMode)",
                    "PCC.S.F05(AUTO) & PCC.S.A0012(EffectiveControlMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH write 0 (Normal) to theOperationModeattribute to DUT.",
                    "TH reads from the DUT theEffectiveOperationModeattribute.",
                    "TH write 0 (ConstantSpeed) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveControlModeattribute.",
                    "TH write 1 (ConstantPressure) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveControlModeattribute.",
                    "TH write 2 (ProportionalPressure) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveControlModeattribute.",
                    "TH write 3 (ConstantFlow) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT the _EffectiveControlMode attribute.",
                    "TH write 5 (ConstantTemperature) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveControlModeattribute.",
                    "TH write 7 (Automatic) to theControlModeattribute to DUT one at a time.",
                    "TH reads from the DUT theEffectiveControlModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 0 (Normal).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 0 (ConstantSpeed).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 1 (ConstantPressure).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 2 (ProportionalPressure).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 3 (ConstantFlow).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 5 (ConstantTemperature).",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned attribute is 7 (Automatic)."
                ]
            }
        },
        {
            "Test Case Name": "26.2.4. [TC-PCC-2.4] Life Time Counters with Server as DUT",
            "Test Case ID": "TC-PCC-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LifetimeRunningHours and LifetimeEnergyConsumed attributes of the Pump Configuration and Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "7a",
                    "7b"
                ],
                "Ref": [
                    "",
                    "AC.4.2.7.19",
                    "AC.4.2.7.19",
                    "AC.4.2.7.19",
                    "AC.4.2.7.19",
                    "AC.4.2.7.19",
                    "AC.4.2.7.19",
                    "AC.4.2.7.21",
                    "AC.4.2.7.21",
                    "AC.4.2.7.21",
                    "AC.4.2.7.21",
                    "AC.4.2.7.21",
                    "AC.4.2.7.21"
                ],
                "PICS": [
                    "",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0015(LifetimeRunningHours)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)",
                    "PCC.S.A0017(LifetimeEnergyConsumed)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH write 1 to theLifetimeRunningHoursattribute of DUT.",
                    "TH reads from the DUT theLifetimeRunningHoursattribute.",
                    "TH write 2 to theLifetimeRunningHoursattribute of DUT.",
                    "TH reads from the DUT theLifetimeRunningHoursattribute.",
                    "TH write 3 to theLifetimeRunningHoursattribute of DUT.",
                    "TH reads from the DUT theLifetimeRunningHoursattribute.",
                    "TH write 1 to theLifetimeEnergyConsumedattribute of DUT.",
                    "TH reads from the DUT theLifetimeEnergyConsumedattribute.",
                    "TH write 2 to theLifetimeEnergyConsumedattribute of DUT.",
                    "TH reads from the DUT theLifetimeEnergyConsumedattribute.",
                    "TH write 3 to theLifetimeEnergyConsumedattribute of DUT.",
                    "TH reads from the DUT theLifetimeEnergyConsumedattribute."
                ],
                "Expected Outcome": [
                    "",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 1.",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 2.",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 3.",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 1.",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 2.",
                    "DUT response indicating that the write command was a SUCCESS.",
                    "The returned value is 3."
                ]
            }
        }
    ],
    "Media": [
        {
            "Test Case Name": "29.1.1. [TC-LOWPOWER-2.1] Low Power Mode Verification (DUT as Server)",
            "Test Case ID": "TC-LOWPOWER-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the low power cluster server functionality",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "LOWPOWER.S.C00.Rsp(Sleep)"
                ],
                "Test Step": [
                    "TH sendsSleep commandto DUT"
                ],
                "Expected Outcome": [
                    "Verify response is a successful (value 0x00) status response and that the device enters its low power state."
                ]
            }
        },
        {
            "Test Case Name": "29.1.2. [TC-LOWPOWER-2.2] Low Power Mode Verification (DUT as Client)",
            "Test Case ID": "TC-LOWPOWER-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a low power command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "LOWPOWER.C.C00.Tx(Sleep)"
                ],
                "Test Step": [
                    "DUT sendsSleep commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.2.1. [TC-KEYPADINPUT-3.1] Send Key Command Verification (DUT as Client)",
            "Test Case ID": "TC-KEYPADINPUT-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a SendKey command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "KEYPADINPUT.C.C00.Tx(SendKey)"
                ],
                "Test Step": [
                    "DUT sendsSendKey commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.2.2. [TC-KEYPADINPUT-3.2] Location Keys Verification",
            "Test Case ID": "TC-KEYPADINPUT-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the KeypadInput cluster interface in accordance with\nLocation Keys",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "6.7.2. Features",
                    ""
                ],
                "PICS": [
                    "KEYPADINPUT.S.C00.Rsp(SendKey) KEYPADINPUT.S.F01(LK)",
                    "KEYPADINPUT.S.C00.Rsp(SendKey) KEYPADINPUT.S.F01(LK)"
                ],
                "Test Step": [
                    "TH sends CEC Settings Keys(0x0A) to DUT",
                    "TH sends CEC Home Keys(0x09) to DUT"
                ],
                "Expected Outcome": [
                    "Verify response is a successful (value 0) status response",
                    "Verify response is a successful (value 0) status response"
                ]
            }
        },
        {
            "Test Case Name": "29.2.3. [TC-KEYPADINPUT-3.3] Number Keys Verification",
            "Test Case ID": "TC-KEYPADINPUT-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the KeypadInput cluster interface in accordance with Number Keys",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.7.2. Features"
                ],
                "PICS": [
                    "KEYPADINPUT.S.C00.Rsp(SendKey) KEYPADINPUT.S.F02(NK)"
                ],
                "Test Step": [
                    "TH sends Number 1 to 9 Code to DUT (eg. 0x20-0x29 in HDMI CDC)"
                ],
                "Expected Outcome": [
                    "Verify response is a successful (value 0) status response"
                ]
            }
        },
        {
            "Test Case Name": "29.3.1. [TC-APPLAUNCHER-3.5] Catalog List Verification",
            "Test Case ID": "TC-APPLAUNCHER-3.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the catalog lists for an  Application Launcher cluster",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.4.3.1 Features"
                ],
                "PICS": [
                    "APPLAUNCHER.S.A0000(CatalogList)"
                ],
                "Test Step": [
                    "TH readsCatalogList attributefrom the DUT for the list of supported application catalogs"
                ],
                "Expected Outcome": [
                    "Verify the list of supported catalogs, where each entry in the list is a  CSA-issued Vendor Id of type unsigned 16 bit integer(ranging between 0-65536) for the catalog."
                ]
            }
        },
        {
            "Test Case Name": "29.3.2. [TC-APPLAUNCHER-3.6] Current App Verification",
            "Test Case ID": "TC-APPLAUNCHER-3.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the description of in-focus Application",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "Application Launcher 1.3"
                ],
                "PICS": [
                    "APPLAUNCHER.S.A0001(CurrentApp)"
                ],
                "Test Step": [
                    "TH reads theCurrentApp attributefrom the DUT to describe the current in-focus application"
                ],
                "Expected Outcome": [
                    "Verify the in-focus application attributes, which should include the display Application ID(type:uint16) , Catalog Vendor ID(type:string)  orNullif there is no current in-focus application"
                ]
            }
        },
        {
            "Test Case Name": "29.3.3. [TC-APPLAUNCHER-3.7] Launch Application Verification",
            "Test Case ID": "TC-APPLAUNCHER-3.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies launching of a specified application with optional data",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "6.4.4.1 Features",
                    "6.4.5.1 Features"
                ],
                "PICS": [
                    "APPLAUNCHER.S.C00.Rsp(LaunchApp)",
                    "APPLAUNCHER.S.C00.Rsp(LaunchApp)"
                ],
                "Test Step": [
                    "TH sends aLaunchApp commandto DUT to launch and bring an application to the foreground",
                    "TH sends aLaunchApp commandto DUT to launch an app which is not available"
                ],
                "Expected Outcome": [
                    "Verify the requested application is launched and a successful (value 0) response is received and Status Attribute is updated to ACTIVE_VISIBLE_FOCUS on the Application Basic cluster of the Endpoint corresponding to launched application.",
                    "Verify that no application is launched and a \"APP_NOT_AVAILABLE\" (value 1) response is received"
                ]
            }
        },
        {
            "Test Case Name": "29.3.4. [TC-APPLAUNCHER-3.7.1] Launch Application Verification (DUT as Client)",
            "Test Case ID": "TC-APPLAUNCHER-3.7.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a LaunchApp command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "APPLAUNCHER.C.C00.Tx(LaunchApp)"
                ],
                "Test Step": [
                    "DUT sendsLaunchApp commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.3.5. [TC-APPLAUNCHER-3.8] Stop Application Verification",
            "Test Case ID": "TC-APPLAUNCHER-3.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies stopping of a specified application",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.4.4.1 Features"
                ],
                "PICS": [
                    "APPLAUNCHER.S.C01.Rsp(StopApp)"
                ],
                "Test Step": [
                    "TH sends aStopApp commandto DUT to stop a running application"
                ],
                "Expected Outcome": [
                    "Verify the requested application is no longer running/visible and Status Attribute is updated to STOPPED on the Application Basic cluster of the Endpoint corresponding to stopped application."
                ]
            }
        },
        {
            "Test Case Name": "29.3.6. [TC-APPLAUNCHER-3.8.1] Stop Application Verification (DUT as Client)",
            "Test Case ID": "TC-APPLAUNCHER-3.8.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a StopApp command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "APPLAUNCHER.C.C01.Tx(StopApp)"
                ],
                "Test Step": [
                    "DUT sendsStopApp commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.3.7. [TC-APPLAUNCHER-3.9] Hide Application Verification",
            "Test Case ID": "TC-APPLAUNCHER-3.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Hiding of a specified application",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.4.4.1 Features"
                ],
                "PICS": [
                    "APPLAUNCHER.S.C02.Rsp(HideApp)"
                ],
                "Test Step": [
                    "TH sends aHideApp commandto DUT to Hide a running and Active application"
                ],
                "Expected Outcome": [
                    "Verify the requested application is hidden and Status Attribute is updated to ACTIVE_HIDDEN or STOPPED on the Application Basic cluster of the Endpoint corresponding to Hidden application."
                ]
            }
        },
        {
            "Test Case Name": "29.3.8. [TC-APPLAUNCHER-3.9.1] Hide Application Verification (DUT as Client)",
            "Test Case ID": "TC-APPLAUNCHER-3.9.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a HideApp command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "APPLAUNCHER.C.C02.Tx(HideApp)"
                ],
                "Test Step": [
                    "DUT sendsHideApp commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.4.1. [TC-MEDIAINPUT-3.10] Input List Verification",
            "Test Case ID": "TC-MEDIAINPUT-3.10",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the list of inputs supported by the media device",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.8.3 Features"
                ],
                "PICS": [
                    "MEDIAINPUT.S.A0000(InputList)"
                ],
                "Test Step": [
                    "TH reads theInputList attributefrom the DUT to show list of Inputs available"
                ],
                "Expected Outcome": [
                    "Verify list of available inputs supported by the device is provided, where each entry in the list contains an index(type:uint 8), InputType (InputType Enums), Name (type: Strings), and Description(Type:String)"
                ]
            }
        },
        {
            "Test Case Name": "29.4.2. [TC-MEDIAINPUT-3.11] Select Input  Verification",
            "Test Case ID": "TC-MEDIAINPUT-3.11",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the change of media input to the selected input.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1",
                    "1"
                ],
                "Ref": [
                    "6.8.4.1 Features",
                    "6.8.4.1 Features",
                    "6.8.4.1 Features"
                ],
                "PICS": [
                    "MEDIAINPUT.S.A0000(InputList)",
                    "MEDIAINPUT.S.C00.Rsp(SelectInput)",
                    "MEDIAINPUT.S.A0001(CurrentInput)"
                ],
                "Test Step": [
                    "TH reads _InputList attribute from the DUT to show the list of inputs available .",
                    "TH sendsSelectInput commandto DUT to select an input by passing the index of the preferred input.",
                    "TH reads _CurrentInput attribute from the DUT to show the current input selected."
                ],
                "Expected Outcome": [
                    "Verify list of available inputs supported by the device is provided, where each entry in the list contains an index(type:uint 8), InputType (InputType Enums), Name (type: Strings), and Description(Type:String)",
                    "Verify upon receipt that the input is changed to the specific index in the input list and a successful response (value 0) is received.",
                    "Verify that the index returned is the same as that provided in step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.4.3. [TC-MEDIAINPUT-3.12] Show and Hide Input Status Verification",
            "Test Case ID": "TC-MEDIAINPUT-3.12",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the active status of the input list",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "6.8.4.2 Features",
                    "6.8.4.2 Features",
                    "6.8.4.3"
                ],
                "PICS": [
                    "MEDIAINPUT.S.A0000(InputList)",
                    "MEDIAINPUT.S.C01.Rsp(ShowInputStatus)",
                    "MEDIAINPUT.S.C02.Rsp(HideInputStatus)"
                ],
                "Test Step": [
                    "TH reads theInputList attributefrom the DUT to show list of Inputs available",
                    "TH sendsShowInputStatus commandto DUT to show active status of the input list",
                    "TH sendsHideInputStatus commandto DUT to hide active status of the input list"
                ],
                "Expected Outcome": [
                    "Verify that the list of inputs is received.",
                    "Verify upon receipt that the active  status of the input is displayed on the device and a successful response (Value 0) is received.",
                    "Verify upon receipt that the active  status of the input is hidden on the device and a successful response (Value 0) is received."
                ]
            }
        },
        {
            "Test Case Name": "29.4.4. [TC-MEDIAINPUT-3.13] Rename Input Verification",
            "Test Case ID": "TC-MEDIAINPUT-3.13",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies renaming of an input",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "6.8.4.4 Features",
                    "6.8.4.4 Features",
                    "6.8.4.4 Features"
                ],
                "PICS": [
                    "MEDIAINPUT.S.A0000(InputList)",
                    "MEDIAINPUT.S.C03.Rsp(RenameInput)",
                    "MEDIAINPUT.S.A0000(InputList)"
                ],
                "Test Step": [
                    "TH reads theInputList attributefrom the DUT to show list of Inputs available",
                    "TH sends aRenameInput commandto DUT to rename an input from the list returned in step 1",
                    "TH reads theInputList attributefrom the DUT to show list of Inputs available"
                ],
                "Expected Outcome": [
                    "Verify that the list of inputs is received.",
                    "Verify response is a successful (value 0) status response",
                    "Verify that the list of inputs is received and that the input in the list from step 2 is renamed"
                ]
            }
        },
        {
            "Test Case Name": "29.4.5. [TC-MEDIAINPUT-3.14] Select Input Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAINPUT-3.14",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a SelectInput command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "MEDIAINPUT.C.C00.Tx(SelectInput)"
                ],
                "Test Step": [
                    "DUT sendsSelectInput commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.4.6. [TC-MEDIAINPUT-3.15] Show Input Status Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAINPUT-3.15",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a ShowInputStatus command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "MEDIAINPUT.C.C01.Tx(ShowInputStatus)"
                ],
                "Test Step": [
                    "DUT sendsShowInputStatus commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.4.7. [TC-MEDIAINPUT-3.16] Hide Input Status Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAINPUT-3.16",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a HideInputStatus command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "MEDIAINPUT.C.C02.Tx(HideInputStatus)"
                ],
                "Test Step": [
                    "DUT sendsHideInputStatus commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.4.8. [TC-MEDIAINPUT-3.17] Rename Input Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAINPUT-3.17",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a RenameInput command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "6.8.4.4 Features"
                ],
                "PICS": [
                    "MEDIAINPUT.C.C03.Tx(RenameInput)"
                ],
                "Test Step": [
                    "DUT sendsRenameInput commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.5.1. [TC-WAKEONLAN-4.1] Wake-On LAN Verification",
            "Test Case ID": "TC-WAKEONLAN-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can wake up from a low-power state using the Wake-On LAN standard",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    "WoL Standard"
                ],
                "PICS": [
                    "WAKEONLAN.S.A0000(MACAddress)",
                    "LOWPOWER.S.C00.Rsp(Sleep)",
                    ""
                ],
                "Test Step": [
                    "TH reads theMACAddress attributefrom the DUT",
                    "TH sends aSleep commandto DUT",
                    "TH sends a Wake-On LAN magic packet containing the MAC address from step 1"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a 48-bit MAC Address.  Record the MAC address.",
                    "Verify response is a successful (value 0x00) status response.",
                    "Verify that the DUT is no longer in a low-power state."
                ]
            }
        },
        {
            "Test Case Name": "29.6.1. [TC-CHANNEL-5.1] List TV Channels Verification",
            "Test Case ID": "TC-CHANNEL-5.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can provide a list of its known TV channels",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "CHANNEL.S.A0000(ChannelList)"
                ],
                "Test Step": [
                    "TH reads theChannelList attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of the known TV channels.  Each list element should consist of the following:1. Major number (unsigned 16-bit integer, mandatory)2. Minor number (unsigned 16-bit integer, mandatory)3. Name (String, optional)4. Call sign (String, optional)5. Affiliate call sign (String, optional)"
                ]
            }
        },
        {
            "Test Case Name": "29.6.2. [TC-CHANNEL-5.2] Change Channel by Number Verification",
            "Test Case ID": "TC-CHANNEL-5.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can change channels when provided with a channel number",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CHANNEL.S.A0000(ChannelList)",
                    "CHANNEL.S.C02.Rsp(ChangeChannelByNumber)",
                    "CHANNEL.S.A0002(CurrentChannel)"
                ],
                "Test Step": [
                    "TH reads theChannelList attributefrom the DUT",
                    "TH sends aChangeChannelByNumber commandto the DUT with channel information (major and minor numbers) from the list in step 1",
                    "TH reads theCurrentChannel attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of the known TV channels.",
                    "Verify that a successful (status 0) response is received and verify that a channel change has occurred on the device.",
                    "Verify that the major and minor numbers in the response are the same numbers provided in step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.6.3. [TC-CHANNEL-5.3] Skip Channel Verification",
            "Test Case ID": "TC-CHANNEL-5.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can change channels up or down",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CHANNEL.S.A0001(Lineup)",
                    "CHANNEL.S.A0000(ChannelList)",
                    "CHANNEL.S.A0002(CurrentChannel)",
                    "CHANNEL.S.C03.Rsp(SkipChannel)",
                    "CHANNEL.S.A0002(CurrentChannel)"
                ],
                "Test Step": [
                    "TH reads theLineup attributefrom the DUT",
                    "TH reads theChannelList attributefrom the DUT",
                    "TH reads theCurrentChannel attributefrom the DUT",
                    "TH sends aSkipChannel commandto the DUT with a value of 1",
                    "TH reads theCurrentChannel attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a lineup info object.",
                    "Verify that the response contains a list of the known TV channels. Note the major and minor values of each channel in the list and their respective index.",
                    "Verify that the response contains a the major and minor number of the current channel. Note the index of that channel in the list from step 1.",
                    "Verify that a successful (status 0) response is received and verify that the channel has changed on the device.",
                    "Verify that the major and minor numbers in the response are the same as that of the next channel in the index (value of index from step 2 plus 1)."
                ]
            }
        },
        {
            "Test Case Name": "29.6.4. [TC-CHANNEL-5.4] Change Channel Verification (DUT as Client)",
            "Test Case ID": "TC-CHANNEL-5.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a ChangeChannel command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "CHANNEL.C.C00.Tx(ChangeChannel)"
                ],
                "Test Step": [
                    "DUT sendsChangeChannel commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.6.5. [TC-CHANNEL-5.5] Change Channel By Number Verification (DUT as Client)",
            "Test Case ID": "TC-CHANNEL-5.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a ChangeChannelByNumber command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "CHANNEL.C.C02.Tx(ChangeChannelByNumber)"
                ],
                "Test Step": [
                    "DUT sendsChangeChannelByNumber commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.6.6. [TC-CHANNEL-5.6] Skip Channel Verification (DUT as Client)",
            "Test Case ID": "TC-CHANNEL-5.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a SkipChannel command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "CHANNEL.C.C03.Tx(SkipChannel)"
                ],
                "Test Step": [
                    "DUT sendsSkipChannel commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.6.7. [TC-CHANNEL-5.7] Program Guide Verification",
            "Test Case ID": "TC-CHANNEL-5.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can return program guide information, and set/unset recording flag (when has feature RP)",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CHANNEL.S.C04.Rsp(GetProgramGuide)",
                    "CHANNEL.S.C06.Rsp(RecordProgram)",
                    "CHANNEL.S.C04.Rsp(GetProgramGuide)",
                    "CHANNEL.S.C07.Rsp(CancelRecordProgram)",
                    "CHANNEL.S.C04.Rsp(GetProgramGuide)"
                ],
                "Test Step": [
                    "TH sends theGetProgramGuide commandcommand to the DUT specifying a start time of at least one day in the future",
                    "TH sendsRecordProgram commandto DUT to specify a program for recording by passing the Identifier of the first program returned in step 1 and the ShouldRecordSeries field set to false.",
                    "TH sends theGetProgramGuide commandcommand to the DUT specifying the same start time as in step 1",
                    "TH sendsCancelRecordProgram commandto DUT to specify a program to cancel recording by passing the Identifier of the first program returned in step 1 and the ShouldRecordSeries field set to false.",
                    "TH sends theGetProgramGuide commandcommand to the DUT specifying the same start time as in step 1"
                ],
                "Expected Outcome": [
                    "Verify that the response is a ProgramGuideResponse with a ProgramList containing at least one ProgramStruct object.  Each ProgramStruct should consist of the following:1. Identifier (string, mandatory)2. Channel (ChannelInfoStruct, mandatory)3. StartTime (epoch, mandatory)4. EndTime (epoch, mandatory)5. Title (string, mandatory)6. SubTitle (string, optional)7. Description (string, optional)8. AudioLanguages (list of string, optional)9. Ratings (list of string, optional)10. ThumbnailUrl (string, optional)11. PosterArtUrl (string, optional)12. DvbiUrl (string, optional)13. ReleaseDate (string, optional)14. ParentalGuidanceText (string, optional)15. RecordingFlag (bitmap, CHANNEL.S.F02(RP))16. SeriesInfo (SeriesInfoStruct, optional)17. CategoryList (list of ProgramCategoryStruct, optional)18. CastList (list of ProgramCastStruct, optional)18. ExternalList (list of AdditionalInfoStruct, optional)",
                    "Verify a successful response (value 0) is received.",
                    "Verify that the first ProgramStruct in the ProgramList object of the ProgramGuideResponse response has the RecordingFlag present with the bit 0 set to 1 and bit 1 set to 0.",
                    "Verify a successful response (value 0) is received.",
                    "Verify that the first ProgramStruct in the ProgramList object of the ProgramGuideResponse response has the RecordingFlag present with the bit 0 set to 0 and bit 1 set to 0."
                ]
            }
        },
        {
            "Test Case Name": "29.6.8. [TC-CHANNEL-5.8] Program Guide Verification (DUT as Client)",
            "Test Case ID": "TC-CHANNEL-5.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send Program Guide commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CHANNEL.C.C04.Tx(GetProgramGuide)",
                    "CHANNEL.C.C06.Tx(RecordProgram)",
                    "CHANNEL.C.C07.Tx(CancelRecordProgram)"
                ],
                "Test Step": [
                    "DUT sendsGetProgramGuide commandto TH",
                    "DUT sendsRecordProgram commandto TH",
                    "DUT sendsCancelRecordProgram commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.7.1. [TC-MEDIAPLAYBACK-6.1] Mandatory Media Playback Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mandatory commands for the Media Playback cluster (Play, Pause, Stop)",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "Media Playback 1.4.1",
                    "",
                    "Media Playback 1.4.2",
                    "",
                    "Media Playback 1.4.3",
                    ""
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.C00.Rsp(Play)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.C01.Rsp(Pause)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.C02.Rsp(Stop)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)"
                ],
                "Test Step": [
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH sends aPlay commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH sends aPause commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH sends aStop commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response has a playback status of \"PAUSED\"",
                    "Verify that a successful (status 0) response is received and verify that the media state is playing.",
                    "Verify that the response has a playback status of \"PLAYING\"",
                    "Verify that a successful (status 0) response is received and verify that the media state is paused.",
                    "Verify that the response has a playback status of \"PAUSED\"",
                    "Verify that a successful (status 0) response is received and verify that the media state is stopped.  Refer to manufacturer provided instructions for the expected physical DUT behavior for the stop command.",
                    "Verify that the response has a playback status of \"NOT_PLAYING\""
                ]
            }
        },
        {
            "Test Case Name": "29.7.2. [TC-MEDIAPLAYBACK-6.2] Optional Media Playback Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional commands for the Media Playback cluster (StartOver, Previous, Next, SkipForward, and SkipBackward)",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "Media Playback 1.4.4",
                    "Media Playback 1.4.5",
                    "Media Playback 1.4.6",
                    "Media Playback 1.4.9",
                    "Media Playback 1.4.9",
                    "Media Playback 1.4.10",
                    "Media Playback 1.4.10"
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.C00.Rsp(Play)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.C03.Rsp(StartOver)",
                    "MEDIAPLAYBACK.S.C05.Rsp(Next)",
                    "MEDIAPLAYBACK.S.C04.Rsp(Previous)",
                    "MEDIAPLAYBACK.S.C08.Rsp(SkipForward)",
                    "MEDIAPLAYBACK.S.A0003(SampledPosition)",
                    "MEDIAPLAYBACK.S.C09.Rsp(SkipBackward)",
                    "MEDIAPLAYBACK.S.A0003(SampledPosition)"
                ],
                "Test Step": [
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH sends aPlay commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH sends aStartOver commandto the DUT",
                    "TH sends aNext commandto the DUT",
                    "TH sends aPrevious commandto the DUT",
                    "TH sends aSkipForward commandto the DUT with aDeltaPositionMillisecondsvalue of 10000",
                    "TH reads theSampledPosition attributefrom the DUT",
                    "TH sends aSkipBackward commandto the DUT with aDeltaPositionMillisecondsvalue of 10000",
                    "TH reads theSampledPosition attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response has a playback status of \"PAUSED\"",
                    "Verify that a successful (status 0) response is received and verify that the media state is playing.",
                    "Verify that the response has a playback status of \"PLAYING\"",
                    "Verify that a successful (status 0) response is received and verify that the media state has started over.",
                    "Verify that a successful (status 0) response is received and verify that the next media item in the queue has been loaded (see manufacturer defined behavior)",
                    "Verify that a successful (status 0) response is received and verify that the previous media item in the queue has been loaded (see manufacturer defined behavior)",
                    "Verify that a successful (status 0) response is received and verify that the media has skipped forward 10 seconds",
                    "Verify that the response has a position of 10000",
                    "Verify that a successful (status 0) response is received and verify that the media has skipped backward 10 seconds",
                    "Verify that the response has a position of 0"
                ]
            }
        },
        {
            "Test Case Name": "29.7.3. [TC-MEDIAPLAYBACK-6.3] Advanced Seek Media Playback Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the seek command for the Media Playback cluster",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11",
                    "Media Playback 1.4.11"
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.C0b.Rsp(Seek)",
                    "MEDIAPLAYBACK.S.A0003(SampledPosition)",
                    "MEDIAPLAYBACK.S.A0001(StartTime)",
                    "MEDIAPLAYBACK.S.A0005(SeekRangeEnd)",
                    "MEDIAPLAYBACK.S.A0006(SeekRangeStart)",
                    "MEDIAPLAYBACK.S.A0002(Duration)",
                    "MEDIAPLAYBACK.S.C0b.Rsp(Seek)"
                ],
                "Test Step": [
                    "TH sends aSeek commandto the DUT with aPositionvalue of 10000",
                    "TH reads theSampledPosition attributefrom the DUT",
                    "TH reads theStartTime attributefrom the DUT",
                    "TH reads theSeekRangeEnd attributefrom the DUT",
                    "TH reads theSeekRangeStart attributefrom the DUT",
                    "TH reads theDuration attributefrom the DUT",
                    "TH sends aSeek commandto the DUT with aPositionvalue beyond the furthest valid position (ex: beyond the duration of the media)"
                ],
                "Expected Outcome": [
                    "Verify that a successful (status 0) response is received and verify that the media has moved to 10 seconds from the starting point.",
                    "Verify that the response has a position of 10000",
                    "Verify that the response is a valid start time or null.",
                    "Verify that the response is a valid position or Nas.",
                    "Verify that the response is a valid position or Nas.",
                    "Verify that the response is null or not 0.",
                    "Verify that aSEEK_OUT_OF_RANGE(status 5) response is received and verify that the media has not moved."
                ]
            }
        },
        {
            "Test Case Name": "29.7.4. [TC-MEDIAPLAYBACK-6.4] Variable Speed Media Playback Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the variable speed commands for the Media Playback cluster (Rewind, FastForward)",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "",
                    "",
                    "Media Playback 1.4.8",
                    "",
                    "",
                    "Media Playback 1.4.8",
                    "",
                    "Media Playback 1.4.7",
                    "",
                    "",
                    "Media Playback 1.4.7",
                    "",
                    "",
                    "Media Playback 1.4.1",
                    "Media Playback 1.4.8",
                    "Media Playback 1.4.7"
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C07.Rsp(FastForward)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C07.Rsp(FastForward)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C06.Rsp(Rewind)",
                    "MEDIAPLAYBACK.S.A0000(CurrentState)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C06.Rsp(Rewind)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C00.Rsp(Play)",
                    "MEDIAPLAYBACK.S.A0004(PlaybackSpeed)",
                    "MEDIAPLAYBACK.S.C07.Rsp(FastForward)",
                    "MEDIAPLAYBACK.S.C06.Rsp(Rewind)"
                ],
                "Test Step": [
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends aFastForward commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends aFastForward commandto the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends aRewind commandto the DUT",
                    "TH reads theCurrentState attributefrom the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends aRewind commandto the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends aPlay commandto the DUT",
                    "TH reads thePlaybackSpeed attributefrom the DUT",
                    "TH sends consecutiveFastForward commandsup to the manufacturer defined max speed",
                    "TH sends consecutiveRewind commandsup to the manufacturer defined max speed"
                ],
                "Expected Outcome": [
                    "Verify that the response has a playback status of \"PAUSED\"",
                    "Verify that the response has a PlaybackSpeed of 0",
                    "Verify that a successful (status 0) response is received and verify that the media state is playing.",
                    "Verify that the response has a playback status of \"PLAYING\"",
                    "Verify that the response has a PlaybackSpeed of 1",
                    "Verify that a successful (status 0) response is received and verify that the media play speed has increased.",
                    "Verify that the response has a PlaybackSpeed of 2",
                    "Verify that a successful (status 0) response is received and verify that the media play has reversed direction.",
                    "Verify that the response has a playback status of \"PLAYING\"",
                    "Verify that the response has a PlaybackSpeed of -1",
                    "Verify that a successful (status 0) response is received and verify that the media play speed has increased in the reverse direction.",
                    "Verify that the response has a PlaybackSpeed of -2",
                    "Verify that a successful (status 0) response is received and verify that the media is has resumed playing forward at the default speed.",
                    "Verify that the response has a PlaybackSpeed of 1",
                    "Verify that aSPEED_OUT_OF_RANGE(status 4) response is received.",
                    "Verify that aSPEED_OUT_OF_RANGE(status 4) response is received."
                ]
            }
        },
        {
            "Test Case Name": "29.7.5. [TC-MEDIAPLAYBACK-6.5] Mandatory Media Playback Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send mandatory Playback commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MEDIAPLAYBACK.C.C00.Tx(Play)",
                    "MEDIAPLAYBACK.C.C01.Tx(Pause)",
                    "MEDIAPLAYBACK.C.C02.Tx(Stop)"
                ],
                "Test Step": [
                    "DUT sendsPlay commandto TH",
                    "DUT sendsPause commandto TH",
                    "DUT sendsStop commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.7.6. [TC-MEDIAPLAYBACK-6.7] Optional Media Playback Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send optional Playback commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "Media Playback 1.4.4",
                    "Media Playback 1.4.5",
                    "Media Playback 1.4.6",
                    "Media Playback 1.4.9",
                    "Media Playback 1.4.10"
                ],
                "PICS": [
                    "MEDIAPLAYBACK.C.C00.Tx(Play)",
                    "MEDIAPLAYBACK.C.C03.Tx(StartOver)",
                    "MEDIAPLAYBACK.C.C05.Tx(Next)",
                    "MEDIAPLAYBACK.C.C04.Tx(Previous)",
                    "MEDIAPLAYBACK.C.C08.Tx(SkipForward)",
                    "MEDIAPLAYBACK.C.C09.Tx(SkipBackward)"
                ],
                "Test Step": [
                    "DUT sendsPlay commandto TH",
                    "DUT sendsStartOver commandto TH",
                    "DUT sendsNext commandto TH",
                    "DUT sendsPrevious commandto TH",
                    "DUT sendsSkipForward commandto TH",
                    "DUT sendsSkipBackward commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.7.7. [TC-MEDIAPLAYBACK-6.8] Text Track Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies reading and changing the text track for currently playing media",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.A0009(ActiveTextTrack)",
                    "MEDIAPLAYBACK.S.A000a(AvailableTextTracks)",
                    "MEDIAPLAYBACK.S.C0d.Rsp(ActivateTextTrack)",
                    "MEDIAPLAYBACK.S.A0009(ActiveTextTrack)",
                    "MEDIAPLAYBACK.S.C0e.Rsp(DeactivateTextTrack)",
                    "MEDIAPLAYBACK.S.A0009(ActiveTextTrack)"
                ],
                "Test Step": [
                    "TH reads theActiveTextTrack attributefrom the DUT",
                    "TH reads theAvailableTextTracks attributefrom the DUT",
                    "TH sends aActivateTextTrack commandto DUT specifying the ID value from step 2",
                    "TH reads theActiveTextTrack attributefrom the DUT",
                    "TH sends aDeactivateTextTrack commandto DUT",
                    "TH reads theActiveTextTrack attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the attribute returned has a null value.",
                    "Verify that the attribute returned is a list with at least one value. Note the ID value for the first entry in the list.",
                    "Verify response is a successful (value 0) status response",
                    "Verify that the attribute returned has a value equal to the ID value from step 2.",
                    "Verify response is a successful (value 0) status response",
                    "Verify that the attribute returned has a null value."
                ]
            }
        },
        {
            "Test Case Name": "29.7.8. [TC-MEDIAPLAYBACK-6.9] Audio Track Verification",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies reading and changing the audio track for currently playing media",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MEDIAPLAYBACK.S.A0007(ActiveAudioTrack)",
                    "MEDIAPLAYBACK.S.A0008(AvailableAudioTracks)",
                    "MEDIAPLAYBACK.S.C09.Rsp(ActivateAudioTrack)",
                    "MEDIAPLAYBACK.S.A0007(ActiveAudioTrack)"
                ],
                "Test Step": [
                    "TH reads theActiveAudioTrack attributefrom the DUT",
                    "TH reads theAvailableAudioTracks attributefrom the DUT",
                    "TH sends aActivateAudioTrack commandto DUT specifying the ID value from step 2",
                    "TH reads theActiveAudioTrack attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Note the ID value of the TrackStruct returned.",
                    "Verify that the attribute returned is a list with at least two values. Note the ID value for the first entry in the list which does not match the ID value from step 1.",
                    "Verify response is a successful (value 0) status response",
                    "Verify that the attribute returned has a value equal to the ID value from step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.7.9. [TC-MEDIAPLAYBACK-6.10] Optional Track Verification (DUT as Client)",
            "Test Case ID": "TC-MEDIAPLAYBACK-6.10",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send Text and Audio Track commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MEDIAPLAYBACK.C.C0c.Tx(ActivateAudioTrack)",
                    "MEDIAPLAYBACK.C.C0d.Tx(ActivateTextTrack)",
                    "MEDIAPLAYBACK.C.C0e.Tx(DeactivateTextTrack)"
                ],
                "Test Step": [
                    "DUT sendsActivateAudioTrack commandto TH",
                    "DUT sendsActivateTextTrack commandto TH",
                    "DUT sendsDeactivateTextTrack commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.8.1. [TC-AUDIOOUTPUT-7.1] Select Output Verification",
            "Test Case ID": "TC-AUDIOOUTPUT-7.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the select audio output command for the Audio Output cluster",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "AudioOutput 1.3.1",
                    "AudioOutput 1.4.1",
                    "AudioOutput 1.3.2"
                ],
                "PICS": [
                    "AUDIOOUTPUT.S.A0000(OutputList)",
                    "AUDIOOUTPUT.S.C00.Rsp(SelectOutput)",
                    "AUDIOOUTPUT.S.A0001(CurrentOutput)"
                ],
                "Test Step": [
                    "TH reads theOutputList attributefrom the DUT",
                    "TH sends aSelectAudioOutput commandto the DUT with an index from the list in step 1",
                    "TH reads theCurrentOutput attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that a list of outputs (type OutPutInfo) is returned.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that the index returned is the same as that provided in step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.8.2. [TC-AUDIOOUTPUT-7.2] Rename Output Verification",
            "Test Case ID": "TC-AUDIOOUTPUT-7.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the rename output command for the Audio Output cluster",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "1"
                ],
                "Ref": [
                    "AudioOutput 1.3.1",
                    "AudioOutput 1.4.2",
                    "AudioOutput 1.3.1"
                ],
                "PICS": [
                    "AUDIOOUTPUT.S.A0000(OutputList)",
                    "AUDIOOUTPUT.S.C01.Rsp(RenameOutput)",
                    "AUDIOOUTPUT.S.A0001(CurrentOutput)"
                ],
                "Test Step": [
                    "TH reads theOutputList attributefrom the DUT",
                    "TH sends aRenameOutput commandto the DUT with an index from the list in step 1 and the name \"CertTest\"",
                    "TH reads theOutputList attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that a list of outputs (type OutPutInfo) is returned. Select an index from the list to be renamed in the next step.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that the output at the index provided in step 2 has the name \"CertTest\"."
                ]
            }
        },
        {
            "Test Case Name": "29.8.3. [TC-AUDIOOUTPUT-7.3] Select Output Verification (DUT as Client)",
            "Test Case ID": "TC-AUDIOOUTPUT-7.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the SelectOutput command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "AUDIOOUTPUT.C.C00.Tx(SelectOutput)"
                ],
                "Test Step": [
                    "DUT sendsSelectOutput commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.8.4. [TC-AUDIOOUTPUT-7.4] Rename Output Verification (DUT as Client)",
            "Test Case ID": "TC-AUDIOOUTPUT-7.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the RenameOutput command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "AudioOutput 1.4.2"
                ],
                "PICS": [
                    "AUDIOOUTPUT.C.C01.Tx(RenameOutput)"
                ],
                "Test Step": [
                    "DUT sendsRenameOutput commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.9.1. [TC-TGTNAV-8.1] Navigate Target Verification",
            "Test Case ID": "TC-TGTNAV-8.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to navigation related commands and provide values of associated attributes.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b"
                ],
                "Ref": [
                    "TargetNavigator 1.3.2",
                    "TargetNavigator 1.3.1",
                    "TargetNavigator 1.4.1",
                    "TargetNavigator 1.3.2"
                ],
                "PICS": [
                    "TGTNAV.S.A0001(CurrentTarget)",
                    "TGTNAV.S.A0000(TargetList)",
                    "TGTNAV.S.C00.Rsp(NavigateTarget)",
                    "TGTNAV.S.A0001(CurrentTarget)"
                ],
                "Test Step": [
                    "TH reads theCurrentTarget attributefrom the DUT",
                    "TH reads theTargetList attributefrom the DUT",
                    "TH sends aNavigateTarget commandto the DUT with the identifier from step 1b",
                    "TH reads theCurrentTarget attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that a target ID (type uint8, Null/NaU also acceptable) is returned. Record the value for usage in the next step (1b).",
                    "Verify that a list of targets (type TargetInfo with a uint8 id and string name) is returned. Select a identifier from the list that is different from the value recorded in the previous step (1a).",
                    "Verify the target is navigated to/moved to the foreground on the DUT\u2019s user experience.",
                    "Verify that the target ID returned is the same as the identifier provided in 2a. Record the value for usage in the next step (3a)."
                ]
            }
        },
        {
            "Test Case Name": "29.9.2. [TC-TGTNAV-8.2] Navigate Target Verification (DUT as Client)",
            "Test Case ID": "TC-TGTNAV-8.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the NavigateTarget command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "TGTNAV.C.C00.Tx(NavigateTarget)"
                ],
                "Test Step": [
                    "DUT sendsNavigateTarget commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.10.1. [TC-APBSC-9.1] Application Basic Attribute Verification",
            "Test Case ID": "TC-APBSC-9.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to commands to read basic media application attributes",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "ApplicationBasic 1.3.1",
                    "ApplicationBasic 1.3.2",
                    "ApplicationBasic 1.3.3",
                    "ApplicationBasic 1.3.4",
                    "ApplicationBasic 1.3.5, 1.4.1, DIAL Registry",
                    "ApplicationBasic 1.3.6, 1.4.2",
                    "ApplicationBasic 1.3.7",
                    "ApplicationBasic 1.3.8"
                ],
                "PICS": [
                    "APBSC.S.A0000(VendorName)",
                    "APBSC.S.A0001(VendorID)",
                    "APBSC.S.A0002(ApplicationName)",
                    "APBSC.S.A0003(ProductID)",
                    "APBSC.S.A0004(Application)",
                    "APBSC.S.A0005(Status)",
                    "APBSC.S.A0006(ApplicationVersion)",
                    "APBSC.S.A0007(AllowedVendorList)"
                ],
                "Test Step": [
                    "TH reads theVendorName attributefrom the DUT",
                    "TH reads theVendorID attributefrom the DUT",
                    "TH reads theApplicationName attributefrom the DUT",
                    "TH reads theProductID attributefrom the DUT",
                    "TH reads theApplication attributefrom the DUT",
                    "TH reads theStatus attributefrom the DUT",
                    "TH reads theApplicationVersion attributefrom the DUT",
                    "TH reads theAllowedVendorList attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the value is a human readable string of the name of the vendor and is less than or equal to 32 UTF-8 characters.",
                    "Verify that the value is the Connectivity Standards Alliance assigned vendor ID for that Content App.",
                    "Verify that the value is a human readable string of the vendor-assigned Content App name and is less than or equal to 256 UTF-8 characters.",
                    "Verify that the value is an unsigned 16-bit integer of the vendor-assigned identifier for the Content App or, if the Content App is certified by a standards body such as the CSA, the certifying vendor-assigned identifier.",
                    "Verify that a CatalogVendorID and ApplicationID are returned.The CatalogVendorID should be an unsigned 16-bit integer of the vendor ID of the catalog, which should be either a CSA issued ID or 0x0000 if it is the DIAL catalog.The ApplicationID should be a string of the application identifier or the DIAL prefix if the CatalogVendorID is the DIAL catalog.",
                    "Verify that the value is from 0 to 3 and represents the current running state of the application (0 = stopped, 1 = running, visible to user, and active target for input, 2 = running, but not visible to the user, 3 = running and visible, but not the active target for input).",
                    "Verify that the value is a human readable string of the version of the Content App assigned by the vendor.  The string should be less than or equal to 32 UTF-8 characters.",
                    "Verify that a list of vendor ids is returned.  Each entry should be a CSA assigned Content App vendor ID."
                ]
            }
        },
        {
            "Test Case Name": "29.11.1. [TC-CONTENTLAUNCHER-10.1] Read Content Launcher Attributes",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to attribute read requests",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "ContentLauncher 1.3.1",
                    "ContentLauncher 1.3.2"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.S.A0000(AcceptHeader)",
                    "CONTENTLAUNCHER.S.A0001(SupportedStreamingProtocols)"
                ],
                "Test Step": [
                    "TH reads theAcceptHeader attributefrom the DUT",
                    "TH reads theSupportedStreamingProtocols attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that response contains a list of strings.  The strings should be HTTP Accept Headers that represent the content types supported by the DUT/App.",
                    "Verify that the response contains a bitmap with a maximum size of 32 bits."
                ]
            }
        },
        {
            "Test Case Name": "29.11.2. [TC-CONTENTLAUNCHER-10.3] Launch Content Verification",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to launch content commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "ContentLauncher 1.4.1",
                    "ContentLauncher 1.4.1"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)"
                ],
                "Test Step": [
                    "TH sends aLaunchContent commandto the DUT with a search parameter and string, and AutoPlay flag set to false",
                    "TH sends aLaunchContent commandto the DUT with a search parameter and string, and AutoPlay flag set to true"
                ],
                "Expected Outcome": [
                    "The DUT should respond with a success response (value 0) and optional application specific data in string from.  The DUT should also present via its user interface a list of matches based on the provided search criteria.",
                    "The DUT should respond with a success response (value 0) and optional application specific data in string from.  THE DUT should also begin playing content that best matched the given search criteria."
                ]
            }
        },
        {
            "Test Case Name": "29.11.3. [TC-CONTENTLAUNCHER-10.4] Launch Content Verification (DUT as Client)",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the LaunchContent command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "ContentLauncher 1.4.1"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.C.C00.Tx(LaunchContent)"
                ],
                "Test Step": [
                    "DUT sendsLaunchContent commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.11.4. [TC-CONTENTLAUNCHER-10.5] Launch URL Verification",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to launch URL commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.S.C01.Rsp(LaunchURL)",
                    "CONTENTLAUNCHER.S.C01.Rsp(LaunchURL)",
                    "CONTENTLAUNCHER.S.C01.Rsp(LaunchURL)",
                    "CONTENTLAUNCHER.S.C01.Rsp(LaunchURL)",
                    "CONTENTLAUNCHER.S.C01.Rsp(LaunchURL)"
                ],
                "Test Step": [
                    "TH sends aLaunchURL commandto the DUT with a known good content URL string",
                    "TH sends aLaunchURL commandto the DUT with a known good content URL string and a display string",
                    "TH sends aLaunchURL commandto the DUT with a known good content URL string and a brand information object.",
                    "TH sends aLaunchURL commandto the DUT with a known unreachable content URL string.",
                    "TH sends aLaunchURL commandto the DUT with a known un-authorized content URL string."
                ],
                "Expected Outcome": [
                    "The DUT should respond with a success respond (value 0) and indicate it has launched the content at the given URL.",
                    "The DUT should respond with a success response (value 0) and indicate it has launched the content at the given URL with the given display string in the application-specific description area.",
                    "The DUT should respond with a success response (value 0) and indicate it has launched the content at the given URL with the player interface updated as per the provided branding information.",
                    "The DUT should respond with a URL_NOT_AVAILABLE response (value 1).",
                    "The DUT should respond with a AUTH_FAILED response (value 2)."
                ]
            }
        },
        {
            "Test Case Name": "29.11.5. [TC-CONTENTLAUNCHER-10.6] Launch URL Verification (DUT as Client)",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the LaunchURL command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "ContentLauncher 1.4.2"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.C.C01.Tx(LaunchURL)"
                ],
                "Test Step": [
                    "DUT sendsLaunchURL commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.11.6. [TC-CONTENTLAUNCHER-10.7] Content Search Verification",
            "Test Case ID": "TC-CONTENTLAUNCHER-10.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can support searching content by identifiers",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2",
                    "ContentLauncher 1.4.2"
                ],
                "PICS": [
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)",
                    "CONTENTLAUNCHER.S.C00.Rsp(LaunchContent)"
                ],
                "Test Step": [
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Actor\" and Value as An Actor\u2019s name, for example, \u201cGaby sHoffman\u201d",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Channel\" and Value as Channel Name name, for example, \"PBS\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Character\" and Value as Character\u2019s name,for example, \u201cSnow White\u201d",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Director\" and Value as Director\u2019s name, for example, \u201cSpike Lee\u201d",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Event\" and Value as An Event\u2019s name ,  for example \"Football games\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Franchise\" and Value as Franchise\u2019s name,for example \"Star Wars\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Genre\" and Value as  Genre\u2019s name, for example \"Horror\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"League\" and Value as League\u2019s name, for example \"NCAA\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Popularity\" and Value as Popularity\u2019s name",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Provider\" and Value as Provider\u2019s name, for example \"Netflix\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Sport\" and Value as Sport\u2019s name, for example, football",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"SportsTeam\" and Value as SportTeam\u2019s name , for example \"Arsenel\"",
                    "TH sends aLaunchContent commandto the DUT with search parameter consisting of Type As \"Type\" and Value as Type\u2019s name, for example \"TVSeries\","
                ],
                "Expected Outcome": [
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result.",
                    "The DUT should respond with a success response (value 0) and should play or display the search result."
                ]
            }
        },
        {
            "Test Case Name": "29.12.1. [TC-MC-11.1] Casting Video Player via User-Directed Commissioning Verification (DUT as Server)",
            "Test Case ID": "TC-MC-11.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that a Commissioner is able to handle the commissioning procedure initiated by a commissionee using User Directed Commissioning.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH start scanning for available commissioners using Commissioner Discovery",
                    "TH is instructed to select the commissioner found in step 1",
                    "DUT prompt user for onboarding by giving an option to accept or reject the commissioning of TH .",
                    "DUT start the commissioning procedure with TH, when user accepts the commissioning",
                    "TH reads the endpoints from the DUT",
                    "TH reads the endpoints from the DUT",
                    "TH reads the endpoints from the DUT"
                ],
                "Expected Outcome": [
                    "TH must find the DUT Commissioner .",
                    "TH should send a request to select the commissioner(DUT).",
                    "DUT must prompt user for accept or reject onboarding.",
                    "Commissioning procedure ends with success.",
                    "Verify an endpoint of type \"casting video player\".",
                    "Verify an endpoint of type \"speaker\"(optional).",
                    "Verify an endpoint of type \"content-app\"(optional)."
                ]
            }
        },
        {
            "Test Case Name": "29.12.2. [TC-MC-11.2] Casting Video Player via UX Screen with PIN Verification (DUT as Server)",
            "Test Case ID": "TC-MC-11.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the manual pairing code can be provided to the Commissioner and parsed to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH start scanning for available commissioners using Commissioner Discovery",
                    "TH is instructed to select the commissioner found in step 1",
                    "TH provides 11/21 digit manual pairing code or setup passcode.",
                    "DUT Prompts user to enter the pairing code (provided by TH in previous step).",
                    "TH reads the endpoints from the DUT",
                    "TH reads the endpoints from the DUT",
                    "TH reads the endpoints from the DUT"
                ],
                "Expected Outcome": [
                    "TH must find the DUT Commissioner .",
                    "TH should send a request to select the commissioner(DUT).",
                    "TH must provide 11/21 digit manual pairing code or setup passcode to enter into DUT.",
                    "When right code is entered, commissioning procedure ends with success.",
                    "Verify an endpoint of type \"casting video player\".",
                    "Verify an endpoint of type \"speaker\"(optional).",
                    "Verify an endpoint of type \"content-app\"(optional)."
                ]
            }
        },
        {
            "Test Case Name": "29.13.1. [TC-ALOGIN-12.1] Account Login Verification",
            "Test Case ID": "TC-ALOGIN-12.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to account login commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "ALOGIN.S.C00.Rsp(GetSetupPIN)",
                    "ALOGIN.S.C02.Rsp(Login)",
                    "ALOGIN.S.C03.Rsp(Logout)"
                ],
                "Test Step": [
                    "TH sends aGetSetupPIN commandto the DUT with test values provided by the product maker.",
                    "TH sends aLogin commandto the DUT with test values provided by the product maker.",
                    "TH sends aLogout commandto the DUT with test values provided by the product maker."
                ],
                "Expected Outcome": [
                    "Verify that the DUT responds with a validGetSetupPINResponse.",
                    "Verify that the DUT responds with a standard command response.",
                    "Verify that the DUT responds with a standard command response."
                ]
            }
        },
        {
            "Test Case Name": "29.13.2. [TC-ALOGIN-12.2] Account Login Verification (DUT as Client)",
            "Test Case ID": "TC-ALOGIN-12.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send the Account Login commands",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "ALOGIN.C.C00.Tx(GetSetupPIN)",
                    "ALOGIN.C.C00.Tx(Login)",
                    "ALOGIN.C.C00.Tx(Logout)"
                ],
                "Test Step": [
                    "DUT sendsGetSetupPIN commandto TH",
                    "DUT sendsLogin commandto TH",
                    "DUT sendsLogout commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH",
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.14.1. [TC-APPOBSERVER-13.1] Content App Message Verification (DUT as Client)",
            "Test Case ID": "TC-APPOBSERVER-13.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a Content App Message command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "APPOBSERVER.C.C00.Tx(ContentAppMessage)"
                ],
                "Test Step": [
                    "DUT sendsContentAppMessage commandto TH"
                ],
                "Expected Outcome": [
                    "Verify command is successfully received by TH"
                ]
            }
        },
        {
            "Test Case Name": "29.14.2. [TC-APPOBSERVER-13.2] Content App Message Verification (DUT as Server)",
            "Test Case ID": "TC-APPOBSERVER-13.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can receive a Content App Message command",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "ContentAppObserver"
                ],
                "PICS": [
                    "APPOBSERVER.S.C00.Rsp(ContentAppMessage)"
                ],
                "Test Step": [
                    "TH sends aContentAppMessage commandto the DUT with dummy data and encodingHint strings"
                ],
                "Expected Outcome": [
                    "The DUT should respond with a ContentAppMessageResponse response with status 0 (success) and optional data and encodingHint strings."
                ]
            }
        },
        {
            "Test Case Name": "29.15.1. [TC-CONCON-14.1] PIN Management Feature Verification",
            "Test Case ID": "TC-CONCON-14.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the PIN Management Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.C01.Rsp(ResetPIN)",
                    "CONCON.S.C00.Rsp(UpdatePIN)"
                ],
                "Test Step": [
                    "TH sends theResetPIN commandto the DUT",
                    "TH sends theUpdatePIN commandto the DUT with the PIN code returned from step 1"
                ],
                "Expected Outcome": [
                    "Verify that the DUT responds with a validResetPINResponsewith a PIN code.",
                    "Verify that the DUT should respond with a success response (value 0)."
                ]
            }
        },
        {
            "Test Case Name": "29.15.2. [TC-CONCON-14.2] Screen Time Feature Verification",
            "Test Case ID": "TC-CONCON-14.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to the commands of the Screen Time Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.C06.Rsp(SetScreenDailyTime)",
                    "CONCON.S.A0005(ScreenDailyTime)",
                    "CONCON.S.A0006(RemainingScreenTime)",
                    "CONCON.S.C05.Rsp(AddBonusTime)",
                    "CONCON.S.A0006(RemainingScreenTime)"
                ],
                "Test Step": [
                    "TH sends theSetScreenDailyTime commandto the DUT",
                    "TH reads theScreenDailyTime attributefrom the DUT",
                    "TH reads theRemainingScreenTime attributefrom the DUT",
                    "TH sends theAddBonusTime commandto the DUT",
                    "TH reads theRemainingScreenTime attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value is an unsigned 32-bit integer which is equal to the ScreenTime field passed by SetScreenDailyTime command in Step 1.",
                    "Verify that the value is an unsigned 32-bit integer.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value should be increased by the value of BonusTime field passed by AddBonusTime command in Step 4."
                ]
            }
        },
        {
            "Test Case Name": "29.15.3. [TC-CONCON-14.3]  Mandatory Content Control Verification",
            "Test Case ID": "TC-CONCON-14.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mandatory commands for the Content Control cluster (Enable and Disable).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.C03.Rsp(Enable)",
                    "CONCON.S.A0000(Enabled)",
                    "CONCON.S.C04.Rsp(Disable)",
                    "CONCON.S.A0000(Enabled)"
                ],
                "Test Step": [
                    "TH sends theEnable commandto the DUT",
                    "TH reads theEnabled attributefrom the DUT",
                    "TH sends theDisable commandto the DUT",
                    "TH reads theEnabled commandfrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value equals TRUE.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value equals FALSE."
                ]
            }
        },
        {
            "Test Case Name": "29.15.4. [TC-CONCON-14.4]  On Demand Content Rating Feature Verification",
            "Test Case ID": "TC-CONCON-14.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the On Demand Content Rating Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.A0001(OnDemandRatings)",
                    "CONCON.S.C09.Rsp(SetOnDemandRatingThreshold)",
                    "CONCON.S.A0002(OnDemandRatingThreshold)"
                ],
                "Test Step": [
                    "TH reads the _ OnDemandRatings attribute_ from the DUT",
                    "TH sends theSetOnDemandRatingThreshold commandto the DUT",
                    "TH reads theOnDemandRatingThreshold attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of Ratings which SHALL be linearly ordered with lowest rating first and each rating in the list SHALL be unique.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value is equal to the Rating field passed by the SetOnDemandRatingThreshold command in Step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.15.5. [TC-CONCON-14.5] Scheduled Content Rating Feature Verification",
            "Test Case ID": "TC-CONCON-14.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the Scheduled Content Rating Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.A0003(ScheduledContentRatings)",
                    "CONCON.S.C0a.Rsp(SetScheduledContentRatingThreshold)",
                    "CONCON.S.A0004(ScheduledContentRatingThreshold)"
                ],
                "Test Step": [
                    "TH reads the _ ScheduledContentRatings attribute_ from the DUT",
                    "TH sends theSetScheduledContentRatingThreshold commandto the DUT",
                    "TH reads theScheduledContentRatingThreshold attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of Ratings which SHALL be linearly ordered with lowest rating first and each rating in the list SHALL be unique).",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value equals the Rating field passed by the SetScheduledContentRatingThreshold command in Step 2."
                ]
            }
        },
        {
            "Test Case Name": "29.15.6. [TC-CONCON-14.6]  Block Unrated Content Feature Verification",
            "Test Case ID": "TC-CONCON-14.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the Block Unrated Content Feature Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CONCON.S.C07.Rsp(BlockUnratedContent)",
                    "{CONCON.S.A0007(BlockUnrated)",
                    "CONCON.S.C08.Rsp(UnblockUnratedContent)",
                    "{CONCON.S.A0007(BlockUnrated)"
                ],
                "Test Step": [
                    "TH sends theBlockUnratedContent commandto the DUT",
                    "TH reads the _ BlockUnrated attribute_ from the DUT",
                    "TH sends theUnblockUnratedContent commandto the DUT",
                    "TH reads the _ BlockUnrated attribute_ from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value equals TRUE.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the value equals FALSE."
                ]
            }
        },
        {
            "Test Case Name": "29.15.7. [TC-CONCON-14.7]  Block Channels Feature Verification",
            "Test Case ID": "TC-CONCON-14.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the Block Channels Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "{CONCON.S.A0008(BlockChannelList)",
                    "CONCON.S.C0b.Rsp(AddBlockChannels)",
                    "{CONCON.S.A0008(BlockChannelList)",
                    "CONCON.S.C0c.Rsp(RemoveBlockChannels)",
                    "CONCON.S.A0008(BlockChannelList)"
                ],
                "Test Step": [
                    "TH reads theBlockChannelList attributefrom the DUT",
                    "TH sends theAddBlockChannels commandto the DUT",
                    "TH reads theBlockChannelList attributefrom the DUT",
                    "TH sends theRemoveBlockChannels commandto the DUT",
                    "TH reads theBlockChannelList attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of channels or null .",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the response contains a channel equals to the one passed in the AddBlockChannels command in step 2.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the channel passed in the RemoveBlockChannels command in step 4 is removed."
                ]
            }
        },
        {
            "Test Case Name": "29.15.8. [TC-CONCON-14.8]  Block Applications Feature Verification",
            "Test Case ID": "TC-CONCON-14.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the Block Applications Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "{CONCON.S.A0009(BlockApplicationList)",
                    "CONCON.S.C0d.Rsp(AddBlockApplications)",
                    "{CONCON.S.A0009(BlockApplicationList)",
                    "CONCON.S.C0e.Rsp(RemoveBlockApplications)",
                    "CONCON.S.A0009(BlockApplicationList)"
                ],
                "Test Step": [
                    "TH reads theBlockApplicationList attributefrom the DUT",
                    "TH sends theAddBlockApplications commandto the DUT",
                    "TH reads theBlockApplicationList attributefrom the DUT",
                    "TH sends theRemoveBlockApplications commandto the DUT",
                    "TH reads theBlockApplicationList attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of applications or null .",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the response contains an application equals to the one passed in the AddBlockApplications command in step 2.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the application passed in the RemoveBlockApplications command in step 4 is removed."
                ]
            }
        },
        {
            "Test Case Name": "29.15.9. [TC-CONCON-14.9]  Block Content Time Window Feature Verification",
            "Test Case ID": "TC-CONCON-14.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT can properly respond to the commands of the Block Content Time Window Feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "{CONCON.S.A000a(BlockContentTimeWindow)",
                    "CONCON.S.C0f.Rsp(SetBlockContentTimeWindow)",
                    "{CONCON.S.A000a(BlockContentTimeWindow)",
                    "CONCON.S.C10.Rsp(RemoveBlockContentTimeWindow)",
                    "CONCON.S.A000a(BlockContentTimeWindow)"
                ],
                "Test Step": [
                    "TH reads theBlockContentTimeWindow attributefrom the DUT",
                    "TH sends theSetBlockContentTimeWindow commandto the DUT",
                    "TH reads theBlockContentTimeWindow attributefrom the DUT",
                    "TH sends theRemoveBlockContentTimeWindow commandto the DUT",
                    "TH reads theBlockContentTimeWindow attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the response contains a list of time periods or null.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the response contains a period which is passed in the BlockContentTimeWindow command in step 2.",
                    "Verify that the DUT should respond with a success response (value 0).",
                    "Verify that the period passed in the RemoveBlockContentTimeWindow command in step 4 is removed."
                ]
            }
        }
    ],
    "Level_Control": [
        {
            "Test Case Name": "32.1.1. [TC-LVL-2.1] Read cluster attributes (DUT as Server)",
            "Test Case ID": "TC-LVL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Level Control cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4b",
                    "4c",
                    "5",
                    "6",
                    "7",
                    "7b",
                    "7c",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "1.5.1",
                    "1.5.2",
                    "1.5.3",
                    "1.5.4",
                    "",
                    "",
                    "1.5.5",
                    "1.5.6",
                    "1.5.7",
                    "",
                    "",
                    "1.5.9",
                    "1.5.10",
                    "1.5.11",
                    "1.5.12",
                    "1.5.13",
                    "1.5.8",
                    "1.5.14"
                ],
                "PICS": [
                    "LVL.S.A0000(CurrentLevel)",
                    "LVL.S.A0001(RemainingTime)",
                    "LVL.S.A0002(MinLevel)",
                    "LVL.S.A0003(MaxLevel) & LVL.S.A0002(MinLevel)",
                    "LVL.S.A0002(MinLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.A0003(MaxLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.A0004(CurrentFrequency)",
                    "LVL.S.A0005(MinFrequency)",
                    "LVL.S.A0006(MaxFrequency)",
                    "LVL.S.A0004(CurrentFrequency) & LVL.S.A0005(MinFrequency)",
                    "LVL.S.A0004(CurrentFrequency) & LVL.S.A0006(MaxFrequency)",
                    "LVL.S.A0010(OnOffTransitionTime)",
                    "LVL.S.A0011(OnLevel)",
                    "LVL.S.A0012(OnTransitionTime)",
                    "LVL.S.A0013(OffTransitionTime)",
                    "LVL.S.A0014(DefaultMoveRate)",
                    "LVL.S.A000f(Options)",
                    "LVL.S.A4000(StartUpCurrentLevel)"
                ],
                "Test Step": [
                    "TH reads theCurrentLevel attributefrom the DUT",
                    "TH reads theRemainingTime attributefrom the DUT",
                    "TH reads theMinLevel attributefrom the DUT",
                    "TH reads theMaxLevel attributefrom the DUT",
                    "",
                    "",
                    "TH reads theCurrentFrequency attributefrom the DUT",
                    "TH reads theMinFrequency attributefrom the DUT",
                    "TH reads theMaxFrequency attributefrom the DUT",
                    "",
                    "",
                    "TH reads theOnOffTransitionTime attributefrom the DUT",
                    "TH reads theOnLevel attributefrom the DUT",
                    "TH reads theOnTransitionTime attributefrom the DUT",
                    "TH reads theOffTransitionTime attributefrom the DUT",
                    "TH reads theDefaultMoveRate attributefrom the DUT",
                    "TH reads theOptions attributefrom the DUT",
                    "TH reads theStartUpCurrentLevel attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response contains an integer with a maximum size of 8 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 8 bits.If LVL.S.F01(LT), verify that the value is exactly 1.",
                    "Verify that the DUT response contains an integer with a maximum size of 8 bits.Verify that the value is larger than or equal to theMinLevelvalue read in step 3.Verify that the value is less than or equal to 254.If LVL.S.F01(LT), verify that the value is exactly 254.",
                    "verify that the value of theCurrentLevel attributeread in step 1 is larger than or equal to the value of theMinLevel attributeread in step 3",
                    "verify that the value of theCurrentLevel attributeread in step 1 is less than or equal to the value of theMaxLevel attributeread in step 4",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the value of theCurrentFrequency attributeread in step 5 is larger than or equal to the value of theMinFrequency attributeread in step 6",
                    "Verify that the value of theCurrentFrequency attributeread in step 5 is less than or equal to the value of theMaxFrequency attributeread in step 7",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "If the value is not nullVerify that the DUT response contains an integer with a maximum size of 8 bits.Verify that the value is larger than or equal to theMinLevelvalue read in step 3.Verify that the value is less than or equal to theMaxLevelvalue read in step 4.",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 16 bits.",
                    "Verify that the DUT response contains an integer with a maximum size of 8 bits.",
                    "Verify that the DUT response contains a bitmap.Verify that bits other than bits 0 and 1 are set to 0.",
                    "Verify that the DUT response contains an integer with a maximum size of 8 bits."
                ]
            }
        },
        {
            "Test Case Name": "32.1.2. [TC-LVL-2.2] Write cluster attributes (DUT as Server)",
            "Test Case ID": "TC-LVL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Level Control cluster attribute write commands.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "4a",
                    "4b",
                    "4c",
                    "5a",
                    "5b",
                    "5c",
                    "6a",
                    "6b",
                    "6c"
                ],
                "Ref": [
                    "1.5.9",
                    "1.5.9",
                    "1.5.9",
                    "1.5.10",
                    "1.5.10",
                    "1.5.10",
                    "1.5.11",
                    "1.5.11",
                    "1.5.11",
                    "1.5.12",
                    "1.5.12",
                    "1.5.12",
                    "1.5.13",
                    "1.5.13",
                    "1.5.13",
                    "1.5.14",
                    "1.5.14",
                    "1.5.14"
                ],
                "PICS": [
                    "LVL.S.A0010(OnOffTransitionTime)",
                    "LVL.S.A0010(OnOffTransitionTime)",
                    "LVL.S.A0010(OnOffTransitionTime)",
                    "LVL.S.A0011(OnLevel)",
                    "LVL.S.A0011(OnLevel)",
                    "LVL.S.A0011(OnLevel)",
                    "LVL.S.A0012(OnTransitionTime)",
                    "LVL.S.A0012(OnTransitionTime)",
                    "LVL.S.A0012(OnTransitionTime)",
                    "LVL.S.A0013(OffTransitionTime)",
                    "LVL.S.A0013(OffTransitionTime)",
                    "LVL.S.A0013(OffTransitionTime)",
                    "LVL.S.A0014(DefaultMoveRate)",
                    "LVL.S.A0014(DefaultMoveRate)",
                    "LVL.S.A0014(DefaultMoveRate)",
                    "LVL.S.A4000(StartUpCurrentLevel)",
                    "LVL.S.A4000(StartUpCurrentLevel)",
                    "LVL.S.A4000(StartUpCurrentLevel)"
                ],
                "Test Step": [
                    "TH reads theOnOffTransitionTime attributefrom the DUT",
                    "TH writes theOnOffTransitionTime attributeon the DUT with a different value than that read in 1a",
                    "TH reads theOnOffTransitionTime attributefrom the DUT",
                    "TH reads theOnLevel attributefrom the DUT",
                    "TH writes theOnLevel attributeon the DUT with a different value than that read in 2a",
                    "TH reads theOnLevel attributefrom the DUT",
                    "TH reads theOnTransitionTime attributefrom the DUT",
                    "TH writes theOnTransitionTime attributeon the DUT with a different value than that read in 3a",
                    "TH reads theOnTransitionTime attributefrom the DUT",
                    "TH reads theOffTransitionTime attributefrom the DUT",
                    "TH writes theOffTransitionTime attributeon the DUT with a different value than that read in 4a",
                    "TH reads theOffTransitionTime attributefrom the DUT",
                    "TH reads theDefaultMoveRate attributefrom the DUT",
                    "TH writes theDefaultMoveRate attributeon the DUT with a different value than that read in 5a",
                    "TH reads theDefaultMoveRate attributefrom the DUT",
                    "TH reads theStartUpCurrentLevel attributefrom the DUT",
                    "TH writes theStartUpCurrentLevel attributeon the DUT with a different value than that read in 6a",
                    "TH reads theStartUpCurrentLevel attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response contains an integer. Record the value for usage in step 1b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 1b.",
                    "Verify that the DUT response contains an integer. Record the value for usage in step 2b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 2b.",
                    "Verify that the DUT response contains an integer. Record the value for usage in step 3b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 3b.",
                    "Verify that the DUT response contains an integer. Record the value for usage in step 4b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 4b.",
                    "Verify that the DUT response contains an integer. Record the value for usage in step 5b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 5b.",
                    "Verify that the DUT response contains an integer. Record the value for usage in step 6b.",
                    "Verify that write request was successful.",
                    "Verify that the DUT response contains the value given in step 6b."
                ]
            }
        },
        {
            "Test Case Name": "32.1.3. [TC-LVL-3.1] MoveToLevel Verification (DUT as Server)",
            "Test Case ID": "TC-LVL-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the MoveToLevel and MoveToLevelWithOnOff command functionality",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "tests for MoveToLevelWithOnOff (starting with DUT in OFF state)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "steps to make sure DUT is on and at level 50 (for steps 4a etc) in case !LVL.S.C04.Rsp(MoveToLevelWithOnOff)",
                    "3a",
                    "3b",
                    "3c",
                    "tests for MoveToLevel (with transition time)",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "tests for Options-bits (ExecuteIfOff=false)",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "5g",
                    "5h",
                    "5i",
                    "5j",
                    "5k",
                    "5l",
                    "tests for Options-bits (ExecuteIfOff=true)",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "6i",
                    "6j",
                    "6k",
                    "6l"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "LVL.S.A000f(Options)",
                    "LVL.S.A0011(OnLevel)",
                    "",
                    "LVL.S.C04.Rsp(MoveToLevelWithOnOff) & OO.S.C00.Rsp(Off)",
                    "LVL.S.C04.Rsp(MoveToLevelWithOnOff)",
                    "LVL.S.C04.Rsp(MoveToLevelWithOnOff) & OO.S.A0000(OnOff)",
                    "LVL.S.C04.Rsp(MoveToLevelWithOnOff) & LVL.S.A0000(CurrentLevel)",
                    "",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.A0000(CurrentLevel)",
                    "",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel) & !LVL.S.M.VarRate",
                    "",
                    "LVL.S.A000f(Options)",
                    "LVL.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "OO.S.C00.Rsp(Off)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "",
                    "LVL.S.A000f(Options)",
                    "LVL.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "OO.S.C00.Rsp(Off)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH writes NULL to theOnLevel attribute(NOTE - fix/workaround for #2176)",
                    "",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveToLevelWithOnOffcommand to DUT,\nwithLevel=50 andTransitionTime=0 (immediate)",
                    "TH readsOnOff attribute(On/Off cluster) from DUT",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to DUT,\nwithLevel=50 andTransitionTime=0 (immediate)",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH sends aMoveToLevelcommand to the DUT withLevel= 200 andTransitionTime= 300 (30 s). This means the level should increase by 150 units in 30s, so 5 units/s.",
                    "After 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 5 seconds, TH readsCurrentLevel attributefrom DUT",
                    "TH readsCurrentLevel attributefrom DUT (after DUT has finished the transition)",
                    "",
                    "TH writes 0x00 to theOptions attribute",
                    "TH reads theOptions attributefrom the DUT",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 100TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 120TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 140TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 160TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x01",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH writes 0x01 to theOptions attribute",
                    "TH reads theOptions attributefrom the DUT",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 100TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 120TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 140TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x00",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMoveToLevelcommand to the DUT withLevel = 160TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x01",
                    "TH readsCurrentLevel attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that write request was successful.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "The value of OnOff has to be TRUE.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 2b.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 3b.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 100 (50+10*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 150 (50+20*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 200 (50+30*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute is now stable at the value 200.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute is at the value 200.",
                    "",
                    "no error response",
                    "Verify that the DUT response contains a bitmap, with value 0x00.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device moves to the given level.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 5d.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute (still) has the value given in 5d.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute (still) has the value given in 5d.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 5k.",
                    "",
                    "",
                    "Verify that the DUT response contains a bitmap, with value 0x01.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device moves to the given level.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 6d.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 6g.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute (still) has the value given in 6g.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 6k."
                ]
            }
        },
        {
            "Test Case Name": "32.1.4. [TC-LVL-4.1] Move Verification (DUT as Server)",
            "Test Case ID": "TC-LVL-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Move and MoveWithOnOff command functionality",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "tests for MoveWithOnOff (starting with DUT in OFF state)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "steps to make sure DUT is on and at level 50 (for steps 4a etc) in case !LVL.S.C05.Rsp(MoveWithOnOff)",
                    "3a",
                    "3b",
                    "3c",
                    "tests for Move",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "4g",
                    "4h",
                    "4i"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "LVL.S.A000f(Options)",
                    "LVL.S.A0003(MaxLevel)",
                    "",
                    "LVL.S.C05.Rsp(MoveWithOnOff) & OO.S.C00.Rsp(Off)",
                    "LVL.S.C05.Rsp(MoveWithOnOff)",
                    "LVL.S.C05.Rsp(MoveWithOnOff) & OO.S.A0000(OnOff)",
                    "LVL.S.C05.Rsp(MoveWithOnOff) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C05.Rsp(MoveWithOnOff) & LVL.S.A0000(CurrentLevel)",
                    "",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.A0000(CurrentLevel)",
                    "",
                    "LVL.S.C01.Rsp(Move)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0002(MinLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.A0000(CurrentLevel)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH reads theMaxLevel attributefrom the DUT",
                    "",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveWithOnOffcommand to DUT,\nwithMoveMode=0x00 (up) andRate=10 (units/s)",
                    "TH readsOnOff attribute(On/Off cluster) from DUT",
                    "TH readsCurrentLevel attributefrom DUT",
                    "After 5 seconds TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to DUT,\nwithLevel=50 andTransitionTime=0 (immediate)",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH sends aMovecommand to the DUT\nwithMoveMode=0x00 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 19 seconds, TH readsCurrentLevel attributefrom DUT",
                    "TH reads theMinLevel attributefrom the DUT",
                    "TH sends aMoveToLevelcommand to immediately (TransitionTime=0) set the level to MinLevel from step 4f",
                    "TH sends aMovecommand withMoveMode=0x00 (up) andRate=0 (units/sec)",
                    "After another 5 seconds, TH reads CurrentLevel attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Note the value for usage in later steps.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "The value of OnOff has to be TRUE.",
                    "",
                    "If not at MaxLevel, value is 50 (5*10) units higher than what was read at 2d.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 3b.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 100 (50+10*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 150 (50+20*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 200 (50+30*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has stabilized at the max value 254 (50+49*5=295 > max).",
                    "Note the value for usage in later steps.",
                    "Verify DUT responds with successful (value 0x00) status value",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds with a level from step 4f"
                ]
            }
        },
        {
            "Test Case Name": "32.1.5. [TC-LVL-5.1] Step Verification (DUT as Server)",
            "Test Case ID": "TC-LVL-5.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Step and StepWithOnOff command functionality",
            "Test Procedure": {
                "#": [
                    "1",
                    "tests for StepWithOnOff (starting with DUT in OFF state)",
                    "2a",
                    "2b",
                    "2c",
                    "steps to make sure DUT is on and at level 50 (for steps 4a etc) in case !LVL.S.C06.Rsp(StepWithOnOff)",
                    "3a",
                    "3b",
                    "3c",
                    "tests for Step (with transition time)",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "LVL.S.A000f(Options)",
                    "",
                    "LVL.S.C06.Rsp(StepWithOnOff) & OO.S.C00.Rsp(Off)",
                    "LVL.S.C06.Rsp(StepWithOnOff)",
                    "LVL.S.C06.Rsp(StepWithOnOff) & OO.S.A0000(OnOff)",
                    "",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.A0000(CurrentLevel)",
                    "",
                    "LVL.S.C02.Rsp(Step)",
                    "LVL.S.C02.Rsp(Step) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C02.Rsp(Step) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C02.Rsp(Step) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C02.Rsp(Step) & LVL.S.A0000(CurrentLevel) & LVL.S.M.VarRate",
                    "LVL.S.C02.Rsp(Step) & LVL.S.A0000(CurrentLevel) & !LVL.S.M.VarRate"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "",
                    "TH sendsOff commandto DUT",
                    "TH sends aStepWithOnOffcommand to DUT,\nwithStepMode=0x00 (up),StepSize=50 andTransitionTime=0 (immediate).",
                    "TH readsOnOff attribute(On/Off cluster) from DUT",
                    "",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to DUT,\nwithLevel=50 andTransitionTime=0 (immediate)",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH sends aStepcommand to the DUT with StepMode_ =0x00 (up),StepSize=150 andTransitionTime=300 (30 s). This means the level should increase by 150 units in 30s, so 5 units/s.",
                    "After 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 10 seconds, TH readsCurrentLevel attributefrom DUT",
                    "After another 5 seconds, TH readsCurrentLevel attributefrom DUT",
                    "TH readsCurrentLevel attributefrom DUT (after DUT has finished the transition)"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "The value of OnOff has to be TRUE.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 3b.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 100 (50+10*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 150 (50+20*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value 200 (50+30*5).",
                    "Verify that the DUT response indicates that the CurrentLevel attribute is now stable at the value 200.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute is at the value 200."
                ]
            }
        },
        {
            "Test Case Name": "32.1.6. [TC-LVL-6.1] Stop Verification (DUT as Server)",
            "Test Case ID": "TC-LVL-6.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Stop and StopWithOnOff command functionality",
            "Test Procedure": {
                "#": [
                    "steps to make sure DUT is on and at level 50 (for steps 2 etc)",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1.6.4",
                    "1.6.4",
                    "1.6.4",
                    "1.6.4",
                    "1.6.4",
                    "1.6.4"
                ],
                "PICS": [
                    "",
                    "LVL.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move)",
                    "LVL.S.C03.Rsp(Stop)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.C03.Rsp(Stop) & LVL.S.A0000(CurrentLevel)",
                    "LVL.S.C01.Rsp(Move)",
                    "LVL.S.C07.Rsp(StopWithOnOff)",
                    "LVL.S.C01.Rsp(Move) & LVL.S.C07.Rsp(StopWithOnOff) & LVL.S.A0000(CurrentLevel)"
                ],
                "Test Step": [
                    "",
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToLevelcommand to DUT,\nwithLevel=50 andTransitionTime=0 (immediate)",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMovecommand to the DUT, with theMoveModefield set to 0x00 (move up) and theRatefield set to 0x05 (5 units/s)",
                    "After 5 seconds, TH sends aStopcommand to the DUT",
                    "TH readsCurrentLevel attributefrom DUT",
                    "TH sends aMovecommand to the DUT, with theMoveModefield set to 0x00 (move up) and theRatefield set to 0x05 (5 units/s)",
                    "After 5 seconds, TH sends aStopWithOnOffcommand to the DUT",
                    "TH readsCurrentLevel attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 1c.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.Physically verify that the device has stopped transitioning.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has increased by 25 units compared to the level read in step 1d.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.Physically verify that the device has stopped transitioning.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has increased by 25 units compared to the level read in step 4."
                ]
            }
        },
        {
            "Test Case Name": "32.1.7. [TC-LVL-7.1] Verification of MoveToClosestFrequency command (DUT as Server)",
            "Test Case ID": "TC-LVL-7.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the command functionality for MoveToClosestFrequency.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "",
                    "3a",
                    "3b",
                    "steps 4a,4b SHALL be skipped if fmax> 0xfffd",
                    "4a",
                    "4b",
                    "steps 5a,5b SHALL be skipped if fmin< 0x0002",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "1.6.1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "LVL.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "LVL.S.A0002(MinLevel)",
                    "LVL.S.A0003(MaxLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel)",
                    "LVL.S.C00.Rsp(MoveToLevel) & LVL.S.A0000(CurrentLevel)",
                    "",
                    "LVL.S.A0004(CurrentFrequency)",
                    "LVL.S.A0005(MinFrequency)",
                    "LVL.S.A0006(MaxFrequency)",
                    "LVL.S.A0006(MaxFrequency)",
                    "",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)  & LVL.S.A0004(CurrentFrequency)",
                    "",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)  & LVL.S.A0004(CurrentFrequency)",
                    "",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)",
                    "LVL.S.C08.Rsp(MoveToClosestFrequency)  & LVL.S.A0004(CurrentFrequency)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH reads theMinLevel attributefrom the DUT",
                    "TH reads theMaxLevel attributefrom the DUT",
                    "TH sends aMoveToLevelcommand to DUT,\nwith theLevelfield set to a value between the MinLevel and MaxLevel values\n(if present, otherwise between 0x01 and 0xFE) and\ntheTransitionTimefield set to 0x0000 (move immediately).",
                    "TH readsCurrentLevel attributefrom DUT",
                    "",
                    "TH reads theCurrentFrequencyattribute.",
                    "TH reads theMinFrequencyattribute.",
                    "TH reads theMaxFrequencyattribute.",
                    "",
                    "",
                    "TH sends aMoveToClosestFrequencycommand to DUT, with\nthefrequencyfield set to a random valuefrand, chosen such that:\nfmin< frand< fmax",
                    "TH reads theCurrentFrequencyattribute.",
                    "",
                    "TH sends aMoveToClosestFrequencycommand to DUT, with\nthefrequencyfield set tofmax+ 1",
                    "TH reads theCurrentFrequencyattribute.",
                    "",
                    "TH sends aMoveToClosestFrequencycommand to DUT, with\nthefrequencyfield set tofmin- 1",
                    "TH reads theCurrentFrequencyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Note the value for usage in later steps.",
                    "Note the value for usage in later steps.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device completes moving to the given level.",
                    "Verify that the DUT response indicates that the CurrentLevel attribute has the value given in 1c.",
                    "",
                    "Set fcto the value of theCurrentFrequencyattribute.",
                    "Set fminto the value of theMinFrequencyattribute.",
                    "Set fmaxto the value of theMaxFrequencyattribute.",
                    "sanity check on values read in steps 2a..2cif fmax< fmin, FAIL the testif fc< fmin, FAIL the testif fc> fmax, FAIL the test",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response",
                    "The value of theCurrentFrequencyattribute is approximately equal tofrand.",
                    "",
                    "Verify DUT responds with a CONSTRAINT_ERROR (value 0x87) status response",
                    "The value of theCurrentFrequencyattribute is equal to the value read in step 3b.",
                    "",
                    "Verify DUT responds with a CONSTRAINT_ERROR (value 0x87) status response",
                    "The value of theCurrentFrequencyattribute is equal to the value read in step 4b (if that step was executed) resp. the value read in step 3b (if step 4b was not executed)."
                ]
            }
        }
    ],
    "Color_Control": [
        {
            "Test Case Name": "36.1.1. [TC-CC-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-CC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the ColorControl Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51",
                    "52",
                    "53"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0002(RemainingTime)",
                    "CC.S.A0003(CurrentX)",
                    "CC.S.A0004(CurrentY)",
                    "CC.S.A0005(DriftCompensation)",
                    "CC.S.A0006(CompensationText)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A000f(Options)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4001(EnhancedColorMode)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.A4004(ColorLoopTime)",
                    "CC.S.A4005(ColorLoopStartEnhancedHue)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A400a(ColorCapabilities)",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.A400d(CoupleColorTempToLevelMinMireds)",
                    "CC.S.A4010(StartUpColorTemperatureMireds)",
                    "CC.S.A0010(NumberOfPrimaries)",
                    "CC.S.A0011(Primary1X)",
                    "CC.S.A0012(Primary1Y)",
                    "CC.S.A0013(Primary1Intensity)",
                    "CC.S.A0015(Primary2X)",
                    "CC.S.A0016(Primary2Y)",
                    "CC.S.A0017(Primary2Intensity)",
                    "CC.S.A0019(Primary3X)",
                    "CC.S.A001a(Primary3Y)",
                    "CC.S.A001b(Primary3Intensity)",
                    "CC.S.A0020(Primary4X)",
                    "CC.S.A0021(Primary4Y)",
                    "CC.S.A0022(Primary4Intensity)",
                    "CC.S.A0024(Primary5X)",
                    "CC.S.A0025(Primary5Y)",
                    "CC.S.A0026(Primary5Intensity)",
                    "CC.S.A0028(Primary6X)",
                    "CC.S.A0029(Primary6Y)",
                    "CC.S.A002a(Primary6Intensity)",
                    "CC.S.A0030(WhitePointX)",
                    "CC.S.A0031(WhitePointY)",
                    "CC.S.A0032(ColorPointRX)",
                    "CC.S.A0033(ColorPointRY)",
                    "CC.S.A0034(ColorPointRIntensity)",
                    "CC.S.A0036(ColorPointGX)",
                    "CC.S.A0037(ColorPointGY)",
                    "CC.S.A0038(ColorPointGIntensity)",
                    "CC.S.A003a(ColorPointBX)",
                    "CC.S.A003b(ColorPointBY)",
                    "CC.S.A003c(ColorPointBIntensity)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the (0x0000)CurrentHue attribute",
                    "TH reads from the DUT the (0x0001)CurrentSaturation attribute",
                    "TH reads from the DUT the (0x0002)RemainingTime attribute",
                    "TH reads from the DUT the (0x0003)CurrentX attribute",
                    "TH reads from the DUT the (0x0004)CurrentY attribute",
                    "TH reads from the DUT the (0x0005)DriftCompensation attribute",
                    "TH reads from the DUT the (0x0006)CompensationText attribute",
                    "TH reads from the DUT the (0x0007)ColorTemperatureMireds attribute",
                    "TH reads from the DUT the (0x0008)ColorMode attribute",
                    "TH reads from the DUT the (0x000f)Options attribute",
                    "TH reads from the DUT the (0x4000)EnhancedCurrentHue attribute",
                    "TH reads from the DUT the (0x4001)EnhancedColorMode attribute",
                    "TH reads from the DUT the (0x4002)ColorLoopActive attribute",
                    "TH reads from the DUT the (0x4003)ColorLoopDirection attribute",
                    "TH reads from the DUT the (0x4004)ColorLoopTime attribute",
                    "TH reads from the DUT the (0x4005)ColorLoopStartEnhancedHue attribute",
                    "TH reads from the DUT the (0x4006)ColorLoopStoredEnhancedHue attribute",
                    "TH reads from the DUT the (0x400a)ColorCapabilities attribute",
                    "TH reads from the DUT the (0x400b)ColorTempPhysicalMinMireds attribute",
                    "TH reads from the DUT the (0x400c)ColorTempPhysicalMaxMireds attribute",
                    "TH reads from the DUT the (0x400d)CoupleColorTempToLevelMinMireds attribute",
                    "TH reads from the DUT the (0x4010)StartUpColorTemperatureMireds attribute",
                    "TH reads from the DUT the (0x0010)NumberOfPrimaries attribute",
                    "TH reads from the DUT the (0x0011)Primary1X attribute",
                    "TH reads from the DUT the (0x0012)Primary1Y attribute",
                    "TH reads from the DUT the (0x0013)Primary1Intensity attribute",
                    "TH reads from the DUT the (0x0015)Primary2X attribute",
                    "TH reads from the DUT the (0x0016)Primary2Y attribute",
                    "TH reads from the DUT the (0x0017)Primary2Intensity attribute",
                    "TH reads from the DUT the (0x0019)Primary3X attribute",
                    "TH reads from the DUT the (0x001a)Primary3Y attribute",
                    "TH reads from the DUT the (0x001b)Primary3Intensity attribute",
                    "TH reads from the DUT the (0x0020)Primary4X attribute",
                    "TH reads from the DUT the (0x0021)Primary4Y attribute",
                    "TH reads from the DUT the (0x0022)Primary4Intensity attribute",
                    "TH reads from the DUT the (0x0024)Primary5X attribute",
                    "TH reads from the DUT the (0x0025)Primary5Y attribute",
                    "TH reads from the DUT the (0x0026)Primary5Intensity attribute",
                    "TH reads from the DUT the (0x0028)Primary6X attribute",
                    "TH reads from the DUT the (0x0029)Primary6Y attribute",
                    "TH reads from the DUT the (0x002a)Primary6Intensity attribute",
                    "TH reads from the DUT the (0x0030)WhitePointX attribute",
                    "TH reads from the DUT the (0x0031)WhitePointY attribute",
                    "TH reads from the DUT the (0x0032)ColorPointRX attribute",
                    "TH reads from the DUT the (0x0033)ColorPointRY attribute",
                    "TH reads from the DUT the (0x0034)ColorPointRIntensity attribute",
                    "TH reads from the DUT the (0x0036)ColorPointGX attribute",
                    "TH reads from the DUT the (0x0037)ColorPointGY attribute",
                    "TH reads from the DUT the (0x0038)ColorPointGIntensity attribute",
                    "TH reads from the DUT the (0x003a)ColorPointBX attribute",
                    "TH reads from the DUT the (0x003b)ColorPointBY attribute",
                    "TH reads from the DUT the (0x003c)ColorPointBIntensity attribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains a enum8 [Min:0 Max:4]",
                    "Verify that the DUT response contains a string [Max:254]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an enum8 [Min:0 Max:2]- 0 CurrentHue and CurrentSaturation- 1 CurrentX and CurrentY- 2 ColorTemperatureMireds",
                    "Verify that the DUT response contains a bitmap8- 0 None- 1 Other / Unknown- 2 Temperature monitoring- 3 Optical luminance monitoring and feedback- 4 Optical Color monitoring and feedback",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains a enum8- 0 CurrentHue and CurrentSaturation- 1 CurrentX and CurrentY- 2 ColorTemperatureMireds- 3 EnhancedCurrentHue and CurrentSaturation",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains a map16 [Min:0 Max:0x001f] Bits 0-4 of theColorCapabilitiesattribute SHALL have the same values as the corresponding bits of theFeatureMapattribute.",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:ColorTempPhysicalMinMiredsMax:ColorTempPhysicalMaxMireds]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff or null]",
                    "Verify that the DUT response contains an uint8 andNumberOfPrimariesequals to PIXIT_NUMBEROFPRIMARIES.",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 1 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 1 or more",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 1 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 2 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 2 or more",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 2 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 3 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 3 or more",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 3 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 4 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 4 or more",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 4 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 5 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 5 or more",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 5 or more",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 6",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff] ifNumberOfPrimariesis 6",
                    "Verify that the DUT response contains an uint8 ifNumberOfPrimariesis 6",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint8",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff]",
                    "Verify that the DUT response contains an uint8"
                ]
            }
        },
        {
            "Test Case Name": "36.2.1. [TC-CC-3.1] Hue MoveTo functionality with server as DUT",
            "Test Case ID": "TC-CC-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Hue MoveTo functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "MoveToHue, shortest distance; from 60 to 120 (distance 60) over 30s, so increasing by 20 units every 10s",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "MoveToHue, longest distance; from 60 to 135 (-120 mod 255), distance = 180, so decreasing by 60 units every 10s",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "MoveToHue, up, from 60 to 120 (distance 60) in 30s so increasing by 20 units every 10s",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "MoveToHue, down, from 120 to 60 (distance 60) in 30s so decreasing by 20 units every 10s",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "check ColorMode",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=60,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveToHue commandto DUT withHue=120,Direction=0x00 (shortest distance) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=60,Direction=0x00 (Shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveToHue commandto DUT withHue=135,Direction=0x01 (longest distance) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=60,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveToHue commandto DUT withHue=120,Direction=0x02 (up) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=120,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveToHue commandto DUT withHue=60,Direction=0x03 (down) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 80 (60+(120-60)*(10/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 100 (60+(120-60)*(20/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 120 (60+(120-60)*(30/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute is now stable at the value 120.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 0 (60-60).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 195 (60-120 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 135 (60-180 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute is now stable at the value 135.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 80 (60+(120-60)*(10/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 100 (60+(120-60)*(20/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 120 (60+(120-60)*(30/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute is now stable at the value 120.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 100 (120-(120-60)*(10/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 80 (120-(120-60)*(20/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 60 (120-(120-60)*(30/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute is now stable at the value 60.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.2. [TC-CC-3.2] Hue Move functionality with server as DUT",
            "Test Case ID": "TC-CC-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Hue Move functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "MoveHue (up) ; start at 200 with 5 units/s and measuring every 10s (so increases by 50 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "MoveHue (down) ; start at 60 with 5 units/s and measuring every 10s (so decreases by 50 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "3g",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C01.Rsp(MoveHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.C01.Rsp(MoveHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C01.Rsp(MoveHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.C01.Rsp(MoveHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=200,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveHue commandto DUT withMoveMode=0x01 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH sendsMoveHue commandto DUT withMoveMode=0x00 (stop) andRate=5 (units/s)",
                    "TH readsCurrentHue attributefrom DUT.",
                    "After another 2 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=60,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveHue commandto DUT withMoveMode=0x03 (down) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH sendsMoveHue commandto DUT withMoveMode=0x00 (stop) andRate=5 (units/s)",
                    "TH readsCurrentHue attributefrom DUT.",
                    "After another 2 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 250 (200 + 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 45 (200 + 20*5 = 300 mod 255).",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 95 (200 + 30*5 = 350 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has stabilized at the expected value 95.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 10 (60 - 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 215 (60 - 20*5 = -40 mod 255).",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 165 (60 - 30*5 = -90 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has stabilized at the expected value 165.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.3. [TC-CC-3.3] Hue Step functionality with server as DUT",
            "Test Case ID": "TC-CC-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Hue Step functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "StepHue (up) ; start at 200 with a step of 60 units in 20s; measuring every 10s (so changes of 30 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "StepHue (down) ; start at 50 with a step of 60 units in 20s; measuring every 10s (so changes of 30 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C02.Rsp(StepHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C02.Rsp(StepHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=200,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsStepHue commandto DUT withStepMode=0x01 (up),StepSize=60 andTransitionTime=200 (20 s)",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=50,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsStepHue commandto DUT withStepMode=0x03 (down),StepSize=60 andTransitionTime=200 (20 s)",
                    "After 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 230 (200 + 60*(10/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 5 (200 + 60*(20/20) = 260 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has stabilized at the expected value 5.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 20 (50 - 60*(10/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 245 (50 - 60*(30/30) = -10 mod 255).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has stabilized at the expected value 245.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.4. [TC-CC-3.4] Hue functionality with client as DUT",
            "Test Case ID": "TC-CC-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies MoveToHue/MoveHue/StepHue/StopMoveStep functionality of the Color Control cluster client.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.C.C00.Tx(MoveToHue)",
                    "CC.C.C00.Tx(MoveToHue) & CC.C.A0000(CurrentHue)",
                    "CC.C.C01.Tx(MoveHue)",
                    "CC.C.C01.Tx(MoveHue) & CC.C.A0000(CurrentHue)",
                    "CC.C.C02.Tx(StepHue)",
                    "CC.C.C02.Tx(StepHue) & CC.C.A0000(CurrentHue)",
                    "CC.C.C47.Tx(StopMoveStep)",
                    "CC.C.C47.Tx(StopMoveStep) & CC.C.A0000(CurrentHue)"
                ],
                "Test Step": [
                    "DUT sendsMoveToHue commandto TH",
                    "DUT readsCurrentHue attributefrom TH (potentially multiple times)",
                    "DUT sendsMoveHue commandto TH",
                    "DUT readsCurrentHue attribute(potentially multiple times)",
                    "DUT sendsStepHue commandto TH",
                    "DUT readsCurrentHue attributefrom TH (potentially multiple times)",
                    "DUT sendsStopMoveStep commandto TH.",
                    "OverTransitionTime, DUT readsCurrentHue attributefrom TH."
                ],
                "Expected Outcome": [
                    "TH receives InvokeRequestMessage with CommandID 0x00 CommandFields matchesMoveToHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0000.",
                    "TH receives InvokeRequestMessage with CommandID 0x01 CommandFields matchesMoveHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0000.",
                    "TH receives InvokeRequestMessage with CommandID 0x02 CommandFields matchesStepHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0000.",
                    "TH receives InvokeRequestMessage with CommandID 0x47 CommandFields matchesStopMoveStep commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0000."
                ]
            }
        },
        {
            "Test Case Name": "36.2.5. [TC-CC-4.1] Saturation MoveTo functionality with server as DUT",
            "Test Case ID": "TC-CC-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Saturation MoveTo functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "MoveToSaturation; from 60 to 120 (distance 60) over 30s, so increasing by 20 units every 10s.",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "check ColorMode",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=60 andTransitionTime=0 (immediately).",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=120 andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 80 (60+(120-60)*(10/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 100 (60+(120-60)*(20/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 120 (60+(120-60)*(30/30)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute is now stable at the value 120.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.6. [TC-CC-4.2] Saturation Move functionality with server as DUT",
            "Test Case ID": "TC-CC-4.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Saturation Move functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "MoveSaturation (up) ; start at 150 with 5 units/s and measuring every 10s (so increases by 50 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "MoveSaturation (down) ; start at 120 with 5 units/s and measuring every 10s (so decreases by 50 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "MoveSaturation (up, with stop) ; start at 150 with 5 units/s and measuring every 10s (so increases by 50 units per 10s)",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "check ColorMode",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C04.Rsp(MoveSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C04.Rsp(MoveSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C04.Rsp(MoveSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.C04.Rsp(MoveSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=150 andTransitionTime=0 (immediately).",
                    "TH sendsMoveSaturation commandto DUT withMoveMode=0x01 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=120 andTransitionTime=0 (immediately).",
                    "TH sendsMoveSaturation commandto DUT withMoveMode=0x03 (down) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=150 andTransitionTime=0 (immediately).",
                    "TH sendsMoveSaturation commandto DUT withMoveMode=0x01 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "TH sendsMoveSaturation commandto DUT withMoveMode=0x00 (stop) andRate=5 (units/s)",
                    "TH readsCurrentSaturation attributefrom DUT.",
                    "After another 2 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 200 (150 + 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 250 (150 + 20*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 254 (150 + 30*5 = 300 so DUT has reached max Saturation value).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 70 (120 - 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 20 (120 - 20*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 0 (120 - 30*5 = -30 <0 so DUT has reached min Saturation value).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 200 (150 + 10*5).",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 200.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 200.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.7. [TC-CC-4.3] Saturation Step functionality with server as DUT",
            "Test Case ID": "TC-CC-4.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Saturation Step functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "StepSaturation (up) ; start at 200 with a step of 40 units in 20s; measuring every 10s (so changes of 20 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "StepSaturation (up) ; start at 240 with a step of 20 units in 10s - will hit max",
                    "2f",
                    "2g",
                    "StepSaturation (down) ; start at 50 with a step of 40 units in 20s; measuring every 10s (so changes of 20 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "StepSaturation (down) ; start at 10 with a step of 20 units in 10s - will hit min",
                    "3f",
                    "3g",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C05.Rsp(StepSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C05.Rsp(StepSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C05.Rsp(StepSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C05.Rsp(StepSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=200 andTransitionTime=0 (immediately).",
                    "TH sendsStepSaturation commandto DUT withStepMode=0x01 (up),StepSize=40 andTransitionTime=200 (20 s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH sendsStepSaturation commandto DUT withStepMode=0x01 (up),StepSize=20 andTransitionTime=100 (10 s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=50 andTransitionTime=0 (immediately).",
                    "TH sendsStepSaturation commandto DUT withStepMode=0x03 (down),StepSize=40 andTransitionTime=200 (20 s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "After another 5 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH sendsStepSaturation commandto DUT withStepMode=0x03 (down),StepSize=20 andTransitionTime=100 (10 s)",
                    "After 10 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 220 (200 + 40*(10/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 240 (200 + 40*(20/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has stabilized at the expected value 240.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 254 (240 + 20*(10/10) = 260 > 254, reached max Saturation value).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 30 (50 - 40*(10/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 10 (50 - 40*(20/20)).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has stabilized at the expected value 10.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 0 (10 - 20*(10/10) = -10 < 0, reached min Saturation value).",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.8. [TC-CC-4.4] MoveToHueAndSaturation functionality with server as DUT",
            "Test Case ID": "TC-CC-4.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies MoveToHueAndSaturation functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "set starting point",
                    "2a",
                    "2b",
                    "move with transition time",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C06.Rsp(MoveToHueAndSaturation)",
                    "CC.S.A0000(CurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C06.Rsp(MoveToHueAndSaturation)",
                    "CC.S.A0000(CurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0000(CurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0000(CurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToHueAndSaturation commandto DUT\nwithHue=200,Saturation=50 andTransitionTime=0 (immediately).",
                    "TH readsCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "",
                    "TH sendsMoveToHueAndSaturation commandto DUT\nwithHue=160,Saturation=80 andTransitionTime=200 (20s).",
                    "After 10 seconds, TH readsCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "After another 10 seconds, TH readsCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "After another 5 seconds, TH readsCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe.\nValues match what was written in step 2a.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe.\nValues are in transition between values written in 2a and 3a (i.e. DUT is in transition).",
                    "Value has to be between a range of 0x00 to 0xfe.\nValues are expected to be as written in 3a.",
                    "Value has to be between a range of 0x00 to 0xfe.\nValues are expected to have stabilized as written in 3a.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.9. [TC-CC-4.5] Saturation functionality with client as DUT",
            "Test Case ID": "TC-CC-4.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Saturation functionality of the Color Control cluster client.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.C.C03.Tx(MoveToSaturation)",
                    "CC.C.C03.Tx(MoveToSaturation) & CC.C.A0001(CurrentSaturation)",
                    "CC.C.C04.Tx(MoveSaturation)",
                    "CC.C.C04.Tx(MoveSaturation) & CC.C.A0001(CurrentSaturation)",
                    "CC.C.C05.Tx(StepSaturation)",
                    "CC.C.C05.Tx(StepSaturation) & CC.C.A0001(CurrentSaturation)",
                    "CC.C.C06.Tx(MoveToHueAndSaturation)",
                    "CC.C.C06.Tx(MoveToHueAndSaturation) & CC.C.A0000(CurrentHue) & CC.C.A0001(CurrentSaturation)",
                    "CC.C.C47.Tx(StopMoveStep)",
                    "CC.C.C47.Tx(StopMoveStep) & CC.C.A0001(CurrentSaturation)"
                ],
                "Test Step": [
                    "DUT sendsMoveToSaturation commandto TH",
                    "DUT readsCurrentSaturation attributefrom TH (potentially multiple times)",
                    "DUT sendsMoveSaturation commandto TH",
                    "DUT readsCurrentSaturation attribute(potentially multiple times)",
                    "DUT sendsStepSaturation commandto TH",
                    "DUT readsCurrentSaturation attributefrom TH (potentially multiple times)",
                    "DUT sendsMoveToHueAndSaturation commandto TH",
                    "DUT readsCurrentHue and CurrentSaturation attributesfrom TH (potentially multiple times)",
                    "DUT sendsStopMoveStep commandto TH.",
                    "OverTransitionTime, DUT readsCurrentSaturation attributefrom TH."
                ],
                "Expected Outcome": [
                    "TH receives InvokeRequestMessage with CommandID 0x03 CommandFields matchesMoveToSaturation commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0001.",
                    "TH receives InvokeRequestMessage with CommandID 0x04 CommandFields matchesMoveSaturation commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0001.",
                    "TH receives InvokeRequestMessage with CommandID 0x05 CommandFields matchesStepSaturation commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0001.",
                    "TH receives InvokeRequestMessage with CommandID 0x06 CommandFields matchesMoveToHueAndSaturation commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0000 and 0x0000_0001.",
                    "TH receives InvokeRequestMessage with CommandID 0x47 CommandFields matchesStopMoveStep commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0001."
                ]
            }
        },
        {
            "Test Case Name": "36.2.10. [TC-CC-5.1] Color MoveTo functionality with server as DUT",
            "Test Case ID": "TC-CC-5.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color MoveTo functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "tests for Options-bits (ExecuteIfOff=false)",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "4g",
                    "4h",
                    "4i",
                    "4j",
                    "4k",
                    "4l",
                    "tests for Options-bits (ExecuteIfOff=true)",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "5g",
                    "5h",
                    "5i",
                    "5j",
                    "5k",
                    "5l",
                    "check ColorMode",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.A000f(Options)",
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "OO.S.C00.Rsp(Off)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.A000f(Options)",
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "OO.S.C00.Rsp(Off)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "CC.S.C07.Rsp(MoveToColor) & CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsMoveToColor commandto DUT, withColorX = 32768/0x8000 (x=0.5) (purple)ColorY = 19660/0x4CCC (y=0.3)TransitionTime = 0 (immediate)",
                    "TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "TH sendsMoveToColor commandto DUT, withColorX = 13107/0x3333 (x=0.2) (blue)ColorY = 13107/0x3333 (y=0.2)TransitionTime = 200 (20s)",
                    "After 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 5 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "",
                    "TH writes 0x00 to theOptions attribute",
                    "TH reads theOptions attributefrom the DUT",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 32768/0x8000 (x=0.5) (purple)ColorY = 19660/0x4CCC (y=0.3)TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 13107/0x3333 (x=0.2)ColorY = 13107/0x3333 (y=0.2)TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 13107/0x3333 (x=0.2)ColorY = 32768/0x8000 (y=0.5)TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 26214/0x6666 (x=0.4)ColorY = 32768/0x8000 (y=0.5)TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x01",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "",
                    "TH writes 0x01 to theOptions attribute",
                    "TH reads theOptions attributefrom the DUT",
                    "TH sendsOn commandto DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 32768/0x8000 (x=0.5)ColorY = 19660/0x4CCC (y=0.3)TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sendsOff commandto DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 13107/0x3333 (x=0.2)ColorY = 13107/0x3333 (y=0.2)TransitionTime = 0 (immediate)OptionsMask = 0x00OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 13107/0x3333 (x=0.2)ColorY = 32768/0x8000 (y=0.5)TransitionTime = 0 (immediate)OptionsMask = 0x01OptionsOverride = 0x00",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "TH sends aMoveToColorcommand to the DUT withColorX = 26214/0x6666 (x=0.4)ColorY = 32768/0x8000 (y=0.5)TransitionTime = s0 (immediate)OptionsMask = 0x01OptionsOverride = 0x01",
                    "TH readsCurrentX and CurrentY attributesfrom DUT",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xfeff; Values as provided in 2a.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nValues are in transition between values written in 2a and 3a (i.e. DUT is in transition).",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nValues are expected to be as written in 3a.",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nValues are expected to have stabilized as written in 3a.",
                    "",
                    "no error response",
                    "Verify that the DUT response contains a bitmap, with value 0x00.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device moves to the given color.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY attributes have the value given in step 4d.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY (still) attributes have the value given in 4d.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY (still) attributes have the value given in 4d.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY attributes have the value given in 4k.",
                    "",
                    "",
                    "Verify that the DUT response contains a bitmap, with value 0x01.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device moves to the given color.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY attributes have the value given in 5c.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY attributes have the value given in 5g.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY (still) attributes have the value given in 5g.",
                    "Verify DUT responds with a successful (value 0x00) status response and that the device remains in the off state.",
                    "Verify that the DUT response indicates that the CurrentX and CurrentY attributes have the value given in 5k.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 1 (CurrentX and CurrentY).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 1 (CurrentX and CurrentY)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.11. [TC-CC-5.2] Color Move functionality with server as DUT",
            "Test Case ID": "TC-CC-5.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Move functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1a",
                    "MoveColor with RateX=-100,RateY=+100 over 30s to get a total transition of -3000/+3000",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "stop the transition",
                    "3a",
                    "3b",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "",
                    "CC.S.C08.Rsp(MoveColor)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.C47.Rsp(StopMoveStep)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsMoveToColor commandto DUT, withColorX = 33000 (x=0.503) (orange)ColorY = 26000 (y=0.397)TransitionTime = 0 (immediate)",
                    "",
                    "TH sendsMoveColor commandto DUT withRateX=-100 and_RateY_=+100",
                    "After 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "",
                    "TH sendsStopMoveStep commandto DUT.",
                    "TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nVerify that the DUT response indicates that the CurrentX attribute has the expected value 32000 (33000 -100*10).\nVerify that the DUT response indicates that the CurrentY attribute has the expected value 27000 (26000 +100*10).",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nVerify that the DUT response indicates that the CurrentX attribute has the expected value 31000 (33000 -100*20).\nVerify that the DUT response indicates that the CurrentY attribute has the expected value 28000 (26000 +100*20).",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nVerify that the DUT response indicates that the CurrentX attribute has the expected value 30000 (33000 -100*30).\nVerify that the DUT response indicates that the CurrentY attribute has the expected value 29000 (26000 +100*30).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nVerify that the DUT response indicates that the CurrentX and CurrentY attributes have stabilized at the expected values mentioned in 2d (allowing for some further transition in the time elapsed between 2d and 3a).",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 1 (CurrentX and CurrentY).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 1 (CurrentX and CurrentY)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.12. [TC-CC-5.3] Color Step functionality with server as DUT",
            "Test Case ID": "TC-CC-5.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Step functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "StepColor over 20s",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C07.Rsp(MoveToColor)",
                    "",
                    "CC.S.C09.Rsp(StepColor)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "CC.S.A0003(CurrentX) & CC.S.A0004(CurrentY)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsMoveToColor commandto DUT, with\nColorX = 33000, ColorY = 20000 and TransitionTime = 0 (immediate)",
                    "",
                    "TH sendsStepColor commandto DUT, with\nStepX = -20000, StepY = -6000, TransitionTime = 200 (20s)",
                    "After 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 10 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "After another 5 seconds, TH readsCurrentX and CurrentY attributesfrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nValues are in transition between values written in 2a and expected values in 3c (i.e. DUT is in transition).",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nVerify that the DUT response indicates that the CurrentX attribute has the expected value 13000 (33000 -20000).\nVerify that the DUT response indicates that the CurrentY attribute has the expected value 14000 (20000 -6000).",
                    "Value has to be between a range of 0x0000 to 0xfeff;\nValues are expected to have stabilized as expected in 3c.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 1 (CurrentX and CurrentY).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 1 (CurrentX and CurrentY)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.13. [TC-CC-5.4] Color functionality with client as DUT",
            "Test Case ID": "TC-CC-5.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color functionality of the Color Control cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.C.C07.Tx(MoveToColor)",
                    "CC.C.C08.Tx(MoveColor)",
                    "CC.C.C09.Tx(StepColor)",
                    "CC.C.C47.Tx(StopMoveStep)"
                ],
                "Test Step": [
                    "DUT sendsMoveToColor commandto TH",
                    "DUT sendsMoveColor commandto TH",
                    "DUT sendsStepColor commandto TH",
                    "DUT sendsStopMoveStep commandto TH."
                ],
                "Expected Outcome": [
                    "TH receives InvokeRequestMessage with CommandID 0x07 CommandFields matchesMoveToColor commandparameters.",
                    "TH receives InvokeRequestMessage with CommandID 0x08 CommandFields matchesMoveColor commandparameters.",
                    "TH receives InvokeRequestMessage with CommandID 0x09 CommandFields matchesStepColor commandparameters.",
                    "TH receives InvokeRequestMessage with CommandID 0x47 CommandFields matchesStopMoveStep commandparameters."
                ]
            }
        },
        {
            "Test Case Name": "36.2.14. [TC-CC-6.1] Color Temperature MoveTo functionality with server as DUT",
            "Test Case ID": "TC-CC-6.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Temperature MoveTo functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1a",
                    "1b",
                    "1c",
                    "MoveToColorTemperature; from 310(3225 K) to 250(4000 K) = 60 mired steps over 30s.",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "check ColorMode",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C0a.Rsp(MoveToColorTemperature)",
                    "CC.S.C0a.Rsp(MoveToColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH readsColorTempPhysicalMinMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMaxMireds attributefrom DUT.",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsMoveToColorTemperature commandto DUT withColorTemperatureMireds=310 andTransitionTime=0 (immediately).",
                    "TH sendsMoveToColorTemperature commandto DUT withColorTemperatureMireds=250 andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 5 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of ColorTempPhysicalMinMireds(1a) to ColorTempPhysicalMaxMireds(1b);\nVerify that the DUT response indicates that the ColorTemperatureMireds attribute has the expected value 290 (310+(250-310)*(10/30)).",
                    "Value has to be between a range of ColorTempPhysicalMinMireds(1a) to ColorTempPhysicalMaxMireds(1b);\nVerify that the DUT response indicates that the ColorTemperatureMireds attribute has the expected value 270 (310+(250-310)*(20/30)).",
                    "Value has to be between a range of ColorTempPhysicalMinMireds(1a) to ColorTempPhysicalMaxMireds(1b);\nVerify that the DUT response indicates that the ColorTemperatureMireds attribute has the expected value 250 (310+(250-310)*(30/30)).",
                    "Value has to be between a range of ColorTempPhysicalMinMireds(1a) to ColorTempPhysicalMaxMireds(1b);\nVerify that the DUT response indicates that the ColorTemperatureMireds attribute is now stable at the value 250.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 2 (ColorTemperatureMireds).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 2 (ColorTemperatureMireds)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.15. [TC-CC-6.2] Color Temperature Move functionality with server as DUT",
            "Test Case ID": "TC-CC-6.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Temperature Move functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1a",
                    "1b",
                    "1c",
                    "MoveColorTemperature (up) starting midway between min/max; use a rate that will take (about) 20s to get to max",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "MoveColorTemperature (down) starting at max; use a rate that will take (about) 20s to get to min",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "MoveColorTemperature (up) starting at min; interrupt with 'stop' before reaching max",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "check ColorMode",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C0a.Rsp(MoveToColorTemperature)",
                    "CC.S.C4b.Rsp(MoveColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C4b.Rsp(MoveColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C4b.Rsp(MoveColorTemperature)",
                    "CC.S.C4b.Rsp(MoveColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH readsColorTempPhysicalMinMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMaxMireds attributefrom DUT.",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsMoveToColorTemperature commandto DUT withColorTemperatureMireds=(ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2\nandTransitionTime=0 (immediately).",
                    "TH sendsMoveColorTemperature commandto DUT withMoveMode= 0x01 (up),Rate= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/40",
                    "After 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 5 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsMoveColorTemperature commandto DUT withMoveMode= 0x03(down),Rate= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20",
                    "After 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 5 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsMoveColorTemperature commandto DUT withMoveMode= 0x01(up),Rate= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20",
                    "After 10 seconds, TH sendsMoveColorTemperature commandto DUT withMoveMode= 0x00(stop),Rate= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 2 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 + 10*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/40\n= 3/4 *ColorTempPhysicalMaxMireds+ 1/4 *ColorTempPhysicalMinMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 + 20*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/40\n=ColorTempPhysicalMaxMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds(stabilized since max reached).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds- 10*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20\n= (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 .",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds- 20*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20\n=ColorTempPhysicalMinMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMinMireds(stabilized since min reached).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMinMireds+ 10*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/20\n= (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 .",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = same as 4c (stabilized since stopped).",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 2 (ColorTemperatureMireds).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 2 (ColorTemperatureMireds)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.16. [TC-CC-6.3] Color Temperature Step functionality with server as DUT",
            "Test Case ID": "TC-CC-6.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Temperature Step functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1a",
                    "1b",
                    "1c",
                    "StepColorTemperature (up) starting midway between min/max; use a step size that will take (about) 20s to get to max",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "StepColorTemperature (down) starting at max; use a step size that will take (about) 20s to get to min",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C0a.Rsp(MoveToColorTemperature)",
                    "CC.S.C4c.Rsp(StepColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C4c.Rsp(StepColorTemperature)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH readsColorTempPhysicalMinMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMaxMireds attributefrom DUT.",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsMoveToColorTemperature commandto DUT withColorTemperatureMireds=(ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2\nandTransitionTime=0 (immediately).",
                    "TH sendsStepColorTemperature commandto DUT withStepMode= 0x01 (up),StepSize= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/2 andTransitionTime= 200 (20s).",
                    "After 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 5 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsStepColorTemperature commandto DUT withStepMode= 0x03 (down),StepSize= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds) andTransitionTime= 200 (20s).",
                    "After 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 10 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 5 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 + (10/20)*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/2\n= 3/4 *ColorTempPhysicalMaxMireds+ 1/4 *ColorTempPhysicalMinMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 + (20/20)*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/2\n=ColorTempPhysicalMaxMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds(stabilized since max reached).",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds- (10/20)*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)\n= (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 .",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMaxMireds- (20/20)*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)\n=ColorTempPhysicalMinMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value =ColorTempPhysicalMinMireds(stabilized since min reached).",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 2 (ColorTemperatureMireds).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 2 (ColorTemperatureMireds)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.17. [TC-CC-6.4] Color Temperature functionality with client as DUT",
            "Test Case ID": "TC-CC-6.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Temperature functionality of the Color Control cluster client as DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "CC.C.C0a.Tx(MoveToColorTemperature)",
                    "CC.C.C0a.Tx(MoveToColorTemperature) & CC.C.A0007(ColorTemperatureMireds)",
                    "CC.C.C4b.Tx(MoveColorTemperature)",
                    "CC.C.C4b.Tx(MoveColorTemperature) & CC.C.A0007(ColorTemperatureMireds)",
                    "CC.C.C4c.Tx(StepColorTemperature)",
                    "CC.C.C4c.Tx(StepColorTemperature) & CC.C.A0007(ColorTemperatureMireds)",
                    "CC.C.C47.Tx(StopMoveStep)",
                    "CC.C.C47.Tx(StopMoveStep) & CC.C.A0007(ColorTemperatureMireds)"
                ],
                "Test Step": [
                    "* TH provides a server implementation of Color Control with F04(CT)=true and reasonable values of ColorTempPhysicalMinMireds (e.g. 153 (6500K), ColorTempPhysicalMaxMireds (e.g. 454 (2200K))\n* DUT might read attributes like ColorTempPhysicalMinMireds, ColorTempPhysicalMaxMireds from TH (now or in later steps) to use those.",
                    "DUT sendsMoveToColorTemperature commandto TH",
                    "DUT readsColorTemperatureMired attributefrom TH (potentially multiple times)",
                    "DUT sendsMoveColorTemperature commandto TH",
                    "DUT readsColorTemperatureMired attributefrom TH (potentially multiple times)",
                    "DUT sendsStepColorTemperature commandto TH",
                    "DUT readsColorTemperatureMired attributefrom TH (potentially multiple times)",
                    "DUT sendsStopMoveStep commandto TH.",
                    "DUT readsColorTemperatureMired attributefrom TH (potentially multiple times)"
                ],
                "Expected Outcome": [
                    "",
                    "TH receives InvokeRequestMessage with CommandID 0x0a CommandFields matchesMoveToColorTemperature commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0007.",
                    "TH receives InvokeRequestMessage with CommandID 0x4b CommandFields matchesMoveColorTemperature commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0007.",
                    "TH receives InvokeRequestMessage with CommandID 0x4c CommandFields matchesStepColorTemperature commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0007.",
                    "TH receives InvokeRequestMessage with CommandID 0x47 CommandFields matchesStopMoveStep commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_0007."
                ]
            }
        },
        {
            "Test Case Name": "36.2.18. [TC-CC-6.5] Color Temperature StartUpColorTemperatureMireds functionality with server as DUT",
            "Test Case ID": "TC-CC-6.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Color Temperature StartUpColorTemperatureMireds functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "0d",
                    "0e",
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "3.2.7.22",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.A4010(StartUpColorTemperatureMireds)",
                    "CC.S.A4010(StartUpColorTemperatureMireds)",
                    "CC.S.A4010(StartUpColorTemperatureMireds)",
                    "",
                    "",
                    "CC.S.A4010(StartUpColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMinMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMaxMireds attributefrom DUT.",
                    "TH reads from the DUT theStartUpColorTemperatureMireds attribute",
                    "If(ColorTempPhysicalMaxMireds - ColorTempPhysicalMinMireds)/2 + ColorTempPhysicalMinMireds = ColorTemperatureMiredsthenStartUpColorTemperatureMireds = (ColorTempPhysicalMaxMireds - ColorTempPhysicalMinMireds)/4  + ColorTempPhysicalMinMireds;\nelseStartUpColorTemperatureMireds = (ColorTempPhysicalMaxMireds - ColorTempPhysicalMinMireds)/2  + ColorTempPhysicalMinMireds.\nTH writes toStartUpColorTemperatureMireds attributewith valueStartUpColorTemperatureMireds",
                    "TH reads from the DUT theStartUpColorTemperatureMireds attribute",
                    "Power off DUT",
                    "Power on DUT",
                    "TH reads from the DUT theStartUpColorTemperatureMireds attribute",
                    "TH reads from the DUT theColorTemperatureMireds attributefrom DUT.",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response contains withColorTemperatureMireds attributevalue.",
                    "Verify that the DUT response contains withColorTempPhysicalMinMireds attributevalue.",
                    "Verify that the DUT response contains withColorTempPhysicalMaxMireds attributevalue.",
                    "Verify that the DUT response contains an uint16 [Min:0 Max:0xfeff or null]",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT response containsStartUpColorTemperatureMiredsthat matches theStartUpColorTemperatureMiredsset in Step 2a",
                    "",
                    "",
                    "Verify that the DUT response indicates that the StartUpColorTemperatureMireds attribute matches theStartUpColorTemperatureMiredsset in Step 2a",
                    "Verify that the DUT response indicates that the ColorTemperatureMireds attribute isStartUpColorTemperatureMireds",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 2 (ColorTemperatureMireds).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 2 (ColorTemperatureMireds)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.19. [TC-CC-7.1] Enhanced MoveToHue functionality with server as DUT",
            "Test Case ID": "TC-CC-7.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Enhanced MoveToHue functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "EnhancedMoveToHue, shortest distance; from 6000 to 12000 (distance 6000) over 30s, so increasing by 2000 units every 10s",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "EnhancedMoveToHue, longest distance; from 6000 to 54000, distance = 48000, so increasing by 16000 units every 10s",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "EnhancedMoveToHue, up, from 6000 to 12000 (distance 6000) in 30s so increasing by 2000 units every 10s",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "EnhancedMoveToHue, down, from 12000 to 6000 (distance 6000) in 30s so decreasing by 2000 units every 10s",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "check ColorMode",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=6000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=12000,Direction=0x00 (shortest distance) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=6000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=54000,Direction=0x01 (longest distance) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=6000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=12000,Direction=0x02 (up) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=12000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=6000,Direction=0x03 (down) andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 8000 (6000+(12000-6000)*(10/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (6000+(12000-6000)*(20/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 12000 (6000+(12000-6000)*(30/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 12000.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 22000 (6000 + (48000-6000)*(10/30).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 38000 (6000 + (48000-6000)*(20/30).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 54000 (6000 + (48000-6000)*(30/30).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 54000.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 8000 (6000+(12000-6000)*(10/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (6000+(12000-6000)*(20/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 12000 (6000+(12000-6000)*(30/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 12000.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (12000-(12000-6000)*(10/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 8000 (12000-(12000-6000)*(20/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 6000 (12000-(12000-6000)*(30/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 6000.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 3 (EnhancedCurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.20. [TC-CC-7.2] Enhanced MoveHue functionality with server as DUT",
            "Test Case ID": "TC-CC-7.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Enhanced MoveHue functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "EnhancedMoveHue (up) ; start at 20000 with 500 units/s and measuring every 10s (so increases by 5000 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "EnhancedMoveHue (down) ; start at 25000 with 500 units/s and measuring every 10s (so decreases by 5000 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "3g",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C41.Rsp(EnhancedMoveHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C41.Rsp(EnhancedMoveHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C41.Rsp(EnhancedMoveHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C41.Rsp(EnhancedMoveHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=20000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveHue commandto DUT withMoveMode=0x01 (up) andRate=500 (units/s)",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH sendsEnhancedMoveHue commandto DUT withMoveMode=0x00 (stop) andRate=5 (units/s)",
                    "TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 2 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=25000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveHue commandto DUT withMoveMode=0x03 (down) andRate=500 (units/s)",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH sendsEnhancedMoveHue commandto DUT withMoveMode=0x00 (stop) andRate=5 (units/s)",
                    "TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 2 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 25000 (20000 + 10*500).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 30000 (20000 + 20*500).",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 35000 (20000 + 30*500).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has stabilized at the expected value 35000.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 20000 (25000 - 10*500).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 15000 (25000 - 20*500).",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (25000 - 30*500).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has stabilized at the expected value 10000.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 3 (EnhancedCurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.21. [TC-CC-7.3] Enhanced Step functionality with server as DUT",
            "Test Case ID": "TC-CC-7.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Enhanced Step functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "EnhancedStepHue, up, from 6000 to 12000 (distance 6000) in 30s so increasing by 2000 units every 10s",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "EnhancedStepHue, down, from 12000 to 6000 (distance 6000) in 30s so decreasing by 2000 units every 10s",
                    "5a",
                    "3b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "check ColorMode",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C42.Rsp(EnhancedStepHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C42.Rsp(EnhancedStepHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=6000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedStepHue commandto DUT withStepMode=0x01 (up),StepSize=6000 andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=12000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedStepHue commandto DUT withStepMode=0x03 (down),StepSize=6000 andTransitionTime=300 (30s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue attributefrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 8000 (6000+(12000-6000)*(10/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (6000+(12000-6000)*(20/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 12000 (6000+(12000-6000)*(30/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 12000.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 10000 (12000-(12000-6000)*(10/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 8000 (12000-(12000-6000)*(20/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 6000 (12000-(12000-6000)*(30/30)).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute is now stable at the value 6000.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 3 (EnhancedCurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.22. [TC-CC-7.4] MoveToEnhancedHueAndSaturation functionality with server as DUT",
            "Test Case ID": "TC-CC-7.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies MoveToEnhancedHueAndSaturation functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "set starting point",
                    "2a",
                    "2b",
                    "EnhancedMoveToHueAndSaturation with transition time",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "check ColorMode",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C43.Rsp(EnhancedMoveToHueAndSaturation)",
                    "CC.S.A4000(EnhancedCurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.C43.Rsp(EnhancedMoveToHueAndSaturation)",
                    "CC.S.A4000(EnhancedCurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "CC.S.A4000(EnhancedCurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "CC.S.A4000(EnhancedCurrentHue) & CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A0008(ColorMode)",
                    "CC.S.A4001(EnhancedColorMode)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsEnhancedMoveToHueAndSaturation commandto DUT\nwithEnhancedHue=20000,Saturation=50 andTransitionTime=0 (immediately).",
                    "TH readsEnhancedCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHueAndSaturation commandto DUT\nwithEnhancedHue=16000,Saturation=80 andTransitionTime=200 (20s).",
                    "After 10 seconds, TH readsEnhancedCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "After another 5 seconds, TH readsEnhancedCurrentHue and CurrentSaturation attributesfrom DUT.",
                    "",
                    "TH readsColorMode attributefrom DUT.",
                    "TH readsEnhancedColorMode attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff resp 0x00..0xfe.\nValues match what was written in step 2a.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff resp 0x00..0xfe.\nValues are in transition between values written in 2a and 3a (i.e. DUT is in transition).",
                    "Value has to be between a range of 0x0000 to 0xffff resp 0x00..0xfe.\nValues are expected to be as written in 3a.",
                    "Value has to be between a range of 0x0000 to 0xffff resp 0x00..0xfe.\nValues are expected to have stabilized as written in 3a.",
                    "",
                    "Value has to be between a range of 0x00 to 0x02; Verify that the DUT response indicates that the ColorMode attribute has the expected value 0 (CurrentHue and CurrentSaturation).",
                    "Value has to be between a range of 0x00 to 0x03; Verify that the DUT response indicates that the EnhancedColorMode attribute has the expected value 3 (EnhancedCurrentHue and CurrentSaturation)."
                ]
            }
        },
        {
            "Test Case Name": "36.2.23. [TC-CC-7.5] Enhanced Hue functionality with client as DUT",
            "Test Case ID": "TC-CC-7.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Enhanced Hue functionality of the Color Control cluster client.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.C.C40.Tx(EnhancedMoveToHue)",
                    "CC.C.C40.Tx(EnhancedMoveToHue) & CC.C.A4000(EnhancedCurrentHue)",
                    "CC.C.C41.Tx(EnhancedMoveHue)",
                    "CC.C.C41.Tx(EnhancedMoveHue) & CC.C.A4000(EnhancedCurrentHue)",
                    "CC.C.C42.Tx(EnhancedStepHue)",
                    "CC.C.C42.Tx(EnhancedStepHue) & CC.C.A4000(EnhancedCurrentHue)",
                    "CC.C.C43.Tx(EnhancedMoveToHueAndSaturation)",
                    "CC.C.C43.Tx(EnhancedMoveToHueAndSaturation) & CC.C.A4000(EnhancedCurrentHue) & CC.C.A0001(CurrentSaturation)",
                    "CC.C.C47.Tx(StopMoveStep)",
                    "CC.C.C47.Tx(StopMoveStep) & CC.C.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "DUT sendsEnhancedMoveToHue commandto TH",
                    "DUT readsEnhancedCurrentHue attributefrom TH (potentially multiple times)",
                    "DUT sendsEnhancedMoveHue commandto TH",
                    "DUT readsEnhancedCurrentHue attribute(potentially multiple times)",
                    "DUT sendsEnhancedStepHue commandto TH",
                    "DUT readsEnhancedCurrentHue attributefrom TH (potentially multiple times)",
                    "DUT sendsEnhancedMoveToHueAndSaturation commandto TH",
                    "DUT readsEnhancedCurrentHue and CurrentSaturation attributesfrom TH (potentially multiple times)",
                    "DUT sendsStopMoveStep commandto TH.",
                    "OverTransitionTime, DUT readsEnhancedCurrentHue attributefrom TH."
                ],
                "Expected Outcome": [
                    "TH receives InvokeRequestMessage with CommandID 0x40 CommandFields matchesEnhancedMoveToHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000.",
                    "TH receives InvokeRequestMessage with CommandID 0x41 CommandFields matchesEnhancedMoveHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000.",
                    "TH receives InvokeRequestMessage with CommandID 0x42 CommandFields matchesEnhancedStepHue commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000.",
                    "T\nTH receives InvokeRequestMessage with CommandID 0x43 CommandFields matchesEnhancedMoveToHueAndSaturation commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000 and 0x0000_0001.",
                    "TH receives InvokeRequestMessage with CommandID 0x47 CommandFields matchesStopMoveStep commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000."
                ]
            }
        },
        {
            "Test Case Name": "36.2.24. [TC-CC-8.1] StopMoveStep functionality with server as DUT",
            "Test Case ID": "TC-CC-8.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies StopMoveStep functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "MoveHue (up) ; start at 200 with 5 units/s and stopping after 10s (so increases by 50 units per 10s)",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "MoveSaturation (up) ; start at 150 with 5 units/s and stopping after 10s (so increases by 50 units per 10s)",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "MoveColorTemperature (up) starting midway between min/max; use a rate that will take (about) 20s to get to max; stop after 10s",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "4g",
                    "EnhancedMoveHue (up) ; start at 20000 with 500 units/s and stopping after every 10s (so increases by 5000 units per 10s)",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "",
                    "CC.S.C00.Rsp(MoveToHue)",
                    "CC.S.C01.Rsp(MoveHue)",
                    "CC.S.C47.Rsp(StopMoveStep)",
                    "CC.S.A0000(CurrentHue)",
                    "CC.S.A0000(CurrentHue)",
                    "",
                    "CC.S.C03.Rsp(MoveToSaturation)",
                    "CC.S.C04.Rsp(MoveSaturation)",
                    "CC.S.C47.Rsp(StopMoveStep)",
                    "CC.S.A0001(CurrentSaturation)",
                    "CC.S.A0001(CurrentSaturation)",
                    "",
                    "CC.S.A400b(ColorTempPhysicalMinMireds)",
                    "CC.S.A400c(ColorTempPhysicalMaxMireds)",
                    "CC.S.C0a.Rsp(MoveToColorTemperature)",
                    "CC.S.C4b.Rsp(MoveColorTemperature)",
                    "CC.S.C47.Rsp(StopMoveStep)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "CC.S.A0007(ColorTemperatureMireds)",
                    "",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C41.Rsp(EnhancedMoveHue)",
                    "CC.S.C47.Rsp(StopMoveStep)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "",
                    "TH sendsMoveToHue commandto DUT withHue=200,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsMoveHue commandto DUT withMoveMode=0x01 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH sendsStopMoveStep commandto DUT.",
                    "TH readsCurrentHue attributefrom DUT.",
                    "After another 2 seconds, TH readsCurrentHue attributefrom DUT.",
                    "",
                    "TH sendsMoveToSaturation commandto DUT withSaturation=150 andTransitionTime=0 (immediately).",
                    "TH sendsMoveSaturation commandto DUT withMoveMode=0x01 (up) andRate=5 (units/s)",
                    "After 10 seconds, TH sendsStopMoveStep commandto DUT.",
                    "TH readsCurrentSaturation attributefrom DUT.",
                    "After another 2 seconds, TH readsCurrentSaturation attributefrom DUT.",
                    "",
                    "TH readsColorTempPhysicalMinMireds attributefrom DUT.",
                    "TH readsColorTempPhysicalMaxMireds attributefrom DUT.",
                    "TH sendsMoveToColorTemperature commandto DUT withColorTemperatureMireds=(ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2\nandTransitionTime=0 (immediately).",
                    "TH sendsMoveColorTemperature commandto DUT withMoveMode= 0x01 (up),Rate= (ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/40",
                    "After 10 seconds, TH sendsStopMoveStep commandto DUT.",
                    "TH readsColorTemperatureMireds attributefrom DUT.",
                    "After another 2 seconds, TH readsColorTemperatureMireds attributefrom DUT.",
                    "",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=20000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsEnhancedMoveHue commandto DUT withMoveMode=0x01 (up) andRate=500 (units/s)",
                    "After 10 seconds, TH sendsStopMoveStep commandto DUT.",
                    "TH readsEnhancedCurrentHue attributefrom DUT.",
                    "After another 10 seconds, TH readsEnhancedCurrentHue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has the expected value 250 (200 + 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentHue attribute has stabilized at the expected value 250.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has the expected value 200 (150 + 10*5).",
                    "Value has to be between a range of 0x00 to 0xfe;\nVerify that the DUT response indicates that the CurrentSaturation attribute has stabilized at the expected value 200.",
                    "",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Value has to be between a range of 0 to 0xfeff.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nExpected value = (ColorTempPhysicalMinMireds+ColorTempPhysicalMaxMireds)/2 + 10*(ColorTempPhysicalMaxMireds-ColorTempPhysicalMinMireds)/40\n= 3/4 *ColorTempPhysicalMaxMireds+ 1/4 *ColorTempPhysicalMinMireds.",
                    "Value has to be between a range ofColorTempPhysicalMinMiredstoColorTempPhysicalMaxMireds;\nVerify that the DUT response indicates that the ColorTemperatureMireds attribute has stabilized at the expected value of 4f.",
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has the expected value 25000 (20000 + 10*500).",
                    "Value has to be between a range of 0x0000 to 0xffff;\nVerify that the DUT response indicates that the EnhancedCurrentHue attribute has stabilized at the expected value 25000."
                ]
            }
        },
        {
            "Test Case Name": "36.2.25. [TC-CC-9.1] ColorLoopSet Validation",
            "Test Case ID": "TC-CC-9.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies ColorLoopSet functionality of the Color Control cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "6a",
                    "6b",
                    "6c",
                    "7a",
                    "7b",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "8e",
                    "9a",
                    "9b",
                    "9c",
                    "10a",
                    "10b",
                    "11a",
                    "11b",
                    "12a",
                    "12b",
                    "12c",
                    "12d",
                    "12e",
                    "13a",
                    "13b",
                    "13c",
                    "14a",
                    "14b",
                    "15a",
                    "15b",
                    "15c",
                    "15d",
                    "15e",
                    "16a",
                    "16b",
                    "16C"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4004(ColorLoopTime)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4005(ColorLoopStartEnhancedHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=0x4000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x2(UpdateDirection) andDirection attributeto0x0(decrement hue) to DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x4(UpdateTime) andTime attributeto30(30s for one loop) to DUT.",
                    "TH readColorLoopTime attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x8(UpdateStartHue) andStartHue attributeto0x00A0to DUT.",
                    "TH readColorLoopStartEnhancedHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x1(start from ColorLoopStartEnhancedHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, at 5 second intervals, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 second intervals, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x2(UpdateDirection) andDirection attributeto0x1(increment hue) to DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x1(start from ColorLoopStartEnhancedHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=0x4000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH readsEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x2(UpdateDirection) andDirection attributeto0x0(decrement hue) to DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x2(start from EnhancedCurrentHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x2(UpdateDirection) andDirection attributeto0x1(increment hue) to DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x2(start from EnhancedCurrentHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop Direction is set to down.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is 30. Color Loop Time is set to 30 seconds.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x00A0. ColorLoopStartEnhancedHue is set to 0x00A0.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould decrease and wraparound and continue from max allowed EnhancedHue (0xffff) if reaching 0. After 30 sec, it should return toColorLoopStartEnhancedHue(the starting point).",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is set toColorLoopStoredEnhancedHue.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop Direction is set to up.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated usingColorLoopStartEnhancedHue.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould increase and wraparound and continue from 0 if reach max allowed EnhancedHue (0xffff). After 30 sec, it should return toColorLoopStartEnhancedHue(the starting point).",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is set toColorLoopStoredEnhancedHue.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x4000.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop Direction is set to down.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated usingEnhancedCurrentHue.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould decrease and wraparound and continue from max allowed EnhancedHue (0xffff) if reaching 0. After 30 sec, it should return toColorLoopStartEnhancedHue.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is set toColorLoopStoredEnhancedHue.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop Direction is set to up.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated usingEnhancedCurrentHue.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould increase and wraparound and continue from 0 if reach max allowed EnhancedHue (0xffff). After 30 sec, it should return toColorLoopStartEnhancedHue.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0.",
                    "Value is set toColorLoopStoredEnhancedHue."
                ]
            }
        },
        {
            "Test Case Name": "36.2.26. [TC-CC-9.2] ColorLoopSet Validation - change Direction without Stop",
            "Test Case ID": "TC-CC-9.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies ColorLoopSet functionality of the Color Control cluster server changes Direction without Stop.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.A4004(ColorLoopTime)",
                    "CC.S.A4005(ColorLoopStartEnhancedHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=0x4000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0xF,Action attributeto0x0(De-activate),Direction attributeto0x0(decrement hue),Time attributeto30, andStartHue attributeto0x00A0to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH readColorLoopTime attributefrom DUT.",
                    "TH readColorLoopStartEnhancedHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x1(start from ColorLoopStartEnhancedHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x2(UpdateDirection) andDirection attributeto0x1(increment hue) to DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "Over next 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is0x0. Color Loop Direction is set to down.",
                    "Value is 30. Color Loop Time is set to 30 seconds.",
                    "Value is0x00A0. Color Loop Start Enhanced Hue is set to 0xA0.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated usingColorLoopStartEnhancedHue.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould decrease and wraparound and continue from max allowed EnhancedHue (0xffff) if reaching 0. After 30 sec, it should return toColorLoopStartEnhancedHue.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop Direction is set to up.",
                    "EnhancedCurrentHueshould increase and wraparound and continue from 0 if reach max allowed EnhancedHue (0xffff).\nAfter 30 sec, it should return toColorLoopStartEnhancedHue.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is set toColorLoopStoredEnhancedHue."
                ]
            }
        },
        {
            "Test Case Name": "36.2.27. [TC-CC-9.3] ColorLoopSet Validation - change Time without Stop",
            "Test Case ID": "TC-CC-9.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies ColorLoopSet functionality of the Color Control cluster server changes Time without Stop.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CC.S.A000f(Options)",
                    "OO.S.C01.Rsp(On)",
                    "CC.S.C40.Rsp(EnhancedMoveToHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4003(ColorLoopDirection)",
                    "CC.S.A4004(ColorLoopTime)",
                    "CC.S.A4005(ColorLoopStartEnhancedHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4006(ColorLoopStoredEnhancedHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4004(ColorLoopTime)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.A4000(EnhancedCurrentHue)",
                    "CC.S.C44.Rsp(ColorLoopSet)",
                    "CC.S.A4002(ColorLoopActive)",
                    "CC.S.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "TH writes 0x00 to theOptions attribute",
                    "TH sendsOn commandto DUT",
                    "TH sendsEnhancedMoveToHue commandto DUT withEnhancedHue=0x4000,Direction=0x00 (shortest distance) andTransitionTime=0 (immediately).",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0xF,Action attributeto0x0(De-activate),Direction attributeto0x0(decrement hue),Time attributeto30, andStartHue attributeto0x00A0to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopDirection attributefrom DUT.",
                    "TH readColorLoopTime attributefrom DUT.",
                    "TH readColorLoopStartEnhancedHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x1(start from ColorLoopStartEnhancedHue) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readColorLoopStoredEnhancedHue attributefrom DUT.",
                    "Over next 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 30 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x4andTime attributeto60to DUT.",
                    "TH readColorLoopTime attributefrom DUT.",
                    "Over next 60 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "Continue another 60 seconds, at 5 seconds interval, TH readEnhancedCurrentHue attributefrom DUT.",
                    "TH sendsColorLoopSet commandto withUpdateFlag attributeto0x1(UpdateAction) andAction attributeto0x0(De-activate) to DUT.",
                    "TH readColorLoopActive attributefrom DUT.",
                    "TH readEnhancedCurrentHue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is0x0. Color Loop Direction is set to down.",
                    "Value is 30. Color Loop Time is set to 30 seconds.",
                    "Value is0x00A0. Color Loop Start Enhanced Hue is set to 0xA0.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x1. Color Loop is activated usingColorLoopStartEnhancedHue.",
                    "Value is the same asEnhancedCurrentHue attribute (0x4000)set in step 0c.",
                    "EnhancedCurrentHueshould decrease and wraparound and continue from max allowed EnhancedHue (0xffff) if reaching 0. After 30 sec, it should return toColorLoopStartEnhancedHue.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is 60. Color Loop Time is set to 60 seconds.",
                    "EnhancedCurrentHueshould decrease and wraparound and continue from max allowed EnhancedHue (0xffff) if reaching 0 and complete the Loop in 60 sec.",
                    "EnhancedCurrentHuecontinues the Loop as in Step above.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Value is0x0. Color Loop is deactivated.",
                    "Value is set toColorLoopStoredEnhancedHue."
                ]
            }
        },
        {
            "Test Case Name": "36.2.28. [TC-CC-9.4] ColorLoopSet Validation with client as DUT",
            "Test Case ID": "TC-CC-9.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies ColorLoopSet functionality of the Color Control cluster client.",
            "Test Procedure": {
                "#": [
                    "During this test, the DUT will send the ColorLoopSet command with various field values (as supported by DUT) as in step 1, and may read attributes as in steps 2a-e.\nTH shall simulate the ColorLoop feature and provide attribute values fitting with the command(s) received. The order of the commands and attribute reads may vary under DUT control, TH shall adapt.",
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "CC.C.C44.Tx(ColorLoopSet)",
                    "CC.C.A4002(ColorLoopActive)",
                    "CC.C.A4003(ColorLoopDirection)",
                    "CC.C.A4004(ColorLoopTime)",
                    "CC.C.A4005(ColorLoopStartEnhancedHue)",
                    "CC.C.A4000(EnhancedCurrentHue)"
                ],
                "Test Step": [
                    "",
                    "DUT sendsColorLoopSet commandto TH.",
                    "DUT readColorLoopActive attributefrom TH.",
                    "DUT readColorLoopDirection attributefrom TH.",
                    "DUT readColorLoopTime attributefrom TH.",
                    "DUT readColorLoopStartEnhancedHue attributefrom TH.",
                    "Over next 30 seconds, at 5 seconds interval, DUT readEnhancedCurrentHue attributefrom TH."
                ],
                "Expected Outcome": [
                    "",
                    "TH receives InvokeRequestMessage with CommandID 0x44 CommandFields matchesColorLoopSet commandparameters.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4002.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4003.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4004.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4005.",
                    "TH receives read request from Cluster 0x300 Attribute 0x0000_4000."
                ]
            }
        }
    ],
    "Occupancy_Sensing": [
        {
            "Test Case Name": "39.1.1. [TC-OCC-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-OCC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Occupancy Sensing Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OCC.S.A0000(Occupancy)",
                    "OCC.S.A0001(OccupancySensorType)",
                    "OCC.S.A0002(OccupancySensorTypeBitmap)",
                    "OCC.S.A0010(PIROccupiedToUnoccupiedDelay)",
                    "OCC.S.A0011(PIRUnoccupiedToOccupiedDelay)",
                    "OCC.S.A0012(PIRUnoccupiedToOccupiedThreshold)",
                    "OCC.S.A0020(UltrasonicOccupiedToUnoccupiedDelay)",
                    "OCC.S.A0021(UltrasonicUnoccupiedToOccupiedDelay)",
                    "OCC.S.A0022(UltrasonicUnoccupiedToOccupiedThreshold)",
                    "OCC.S.A0030(PhysicalContactOccupiedToUnoccupiedDelay)",
                    "OCC.S.A0031(PhysicalContactUnoccupiedToOccupiedDelay)",
                    "OCC.S.A0032(PhysicalContactUnoccupiedToOccupiedThreshold)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the (0x0000)Occupancy attribute",
                    "TH reads from the DUT the (0x0001)OccupancySensorType attribute",
                    "TH reads from the DUT the (0x0002)OccupancySensorTypeBitmap attribute",
                    "TH reads from the DUT the (0x0010)PIROccupiedToUnoccupiedDelay optional attribute, if PIR sensor",
                    "TH reads from the DUT the (0x0011)PIRUnoccupiedToOccupiedDelay optional attribute, if PIR sensor",
                    "TH reads from the DUT the (0x0012)PIRUnoccupiedToOccupiedThreshold optional attribute, if PIR sensor",
                    "TH reads from the DUT the (0x0020)UltrasonicOccupiedToUnoccupiedDelay optional attribute, if ultrasonic sensor",
                    "TH reads from the DUT the (0x0021)UltrasonicUnoccupiedToOccupiedDelay optional attribute, if ultrasonic sensor",
                    "TH reads from the DUT the (0x0022)UltrasonicUnoccupiedToOccupiedThreshold optional attribute, if ultrasonic sensor",
                    "TH reads from the DUT the (0x0030)PhysicalContactOccupiedToUnoccupiedDelay optional attribute, if Physical Contact sensor",
                    "TH reads from the DUT the (0x0031)PhysicalContactUnoccupiedToOccupiedDelay optional attribute, if Physical Contact sensor",
                    "TH reads from the DUT the (0x0032)PhysicalContactUnoccupiedToOccupiedThreshold optional attribute, if Physical Contact sensor"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a bitmap8:1 = occupied0 = unoccupied.",
                    "Verify that the DUT response contains a enum8:0 = PIR1 = Ultrasonic2 = PIR and ultrasonic3 = physical contact",
                    "Verify that the DUT response contains a bitmap8:PIR - 0000 0001Ultrasonic - 0000 0010PIR and ultrasonic - 0000 0011Physical contact and PIR - 0000 0101Physical contact and ultrasonic - 0000 0110Physical contact and PIR and ultrasonic - 0000 0111",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint8 [min:1 max:254]",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint8 [min:1 max:254]",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint16",
                    "Verify that the DUT response contains a uint8 [min:1 max:254]"
                ]
            }
        },
        {
            "Test Case Name": "39.2.1. [TC-OCC-2.3] OccupancySensorTypeBitmap and OccupancySensorType interdependency with server as DUT",
            "Test Case ID": "TC-OCC-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the OccupancySensorTypeBitmap and OccupancySensorType interdependency of the Occupancy Sensing cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OCC.S.A0001(OccupancySensorType)",
                    "OCC.S.A0002(OccupancySensorTypeBitmap)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH readsOccupancySensorType attributefrom DUT",
                    "TH readsOccupancySensorTypeBitmap attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "VerifyOccupancySensorTypeis set to one of the non-reserved values: 0-PIR, 1-Ultrasonic, 2-PIR and ultrasonic, and 3-Physical contact.",
                    "Verify the value ofOccupancySensorTypeBitmapandOccupancySensorTypeare aligned"
                ]
            }
        },
        {
            "Test Case Name": "39.2.2. [TC-OCC-2.4] OccupancySensorTypeBitmap and OccupancySensorType interdependency with client as DUT",
            "Test Case ID": "TC-OCC-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the OccupancySensorTypeBitmap and OccupancySensorType interdependency of the Occupancy Sensing cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OCC.C.A0001(OccupancySensorType)",
                    "OCC.C.A0002(OccupancySensorTypeBitmap)"
                ],
                "Test Step": [
                    "Commission TH to DUT",
                    "DUT readsOccupancySensorType attributefrom TH",
                    "DUT readsOccupancySensorTypeBitmap attributefrom TH"
                ],
                "Expected Outcome": [
                    "",
                    "Verify TH receives ReadRequestMessage ofEndpoint = 0x1Cluster = 0x406Attribute = 0x0000_0001",
                    "Verify TH receives ReadRequestMessage ofEndpoint = 0x1Cluster = 0x406Attribute = 0x0000_0002"
                ]
            }
        },
        {
            "Test Case Name": "39.2.3. [TC-OCC-3.1] Primary functionality with server as DUT",
            "Test Case ID": "TC-OCC-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Occupancy Sensing cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OCC.S.A0000(Occupancy)",
                    "OCC.M.OccupancyChange",
                    "OCC.S.A0000(Occupancy)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH readsOccupancy attributefrom DUT",
                    "Operate on DUT to change the occupancy status",
                    "after a few seconds, TH readsOccupancy attributefrom DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify the read is successful and value reads 0 = unoccupied, 1 = occupied",
                    "",
                    "Value read has to be different from status in step 2"
                ]
            }
        }
    ],
    "Flow_Measurement": [
        {
            "Test Case Name": "42.1.1. [TC-FLW-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-FLW-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Flow Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "AC.2.5.4.2",
                    "AC.2.5.4.3",
                    "AC.2.5.4.1",
                    "AC.2.5.4.4"
                ],
                "PICS": [
                    "",
                    "FLW.S.A0001(MinMeasuredValue)",
                    "FLW.S.A0002(MaxMeasuredValue)",
                    "FLW.S.A0000(MeasuredValue)",
                    "FLW.S.A0003(Tolerance)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT theToleranceattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains eithernullora uint16 where0 \u2264MinMeasuredValue\u2264 65533.Note the value for usage in later steps as FLWmin.IfMinMeasuredValueis null note 0.",
                    "Verify that the DUT response contains eithernullora uint16 whereFLWmin<MaxMeasuredValue\u2264 65534.Note the value for usage in later steps as FLWmax.IfMaxMeasuredValueis null note 65534.",
                    "Verify that the DUT response contains eithernullora uint16 whereFLWmin\u2264MeasuredValue\u2264 FLWmax.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 2048."
                ]
            }
        },
        {
            "Test Case Name": "42.1.2. [TC-FLW-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-FLW-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Flow Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "AC.2.5.4.1",
                    "",
                    "AC.2.5.4.1"
                ],
                "PICS": [
                    "",
                    "FLW.S.A0000(MeasuredValue)",
                    "FLW.M.FlowChange",
                    "FLW.S.A0000(MeasuredValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "Operate on device to change the flow significantly.",
                    "After a few seconds, TH reads from the DUT theMeasuredValueattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be different from value measure in step 2."
                ]
            }
        }
    ],
    "Pressure_Measurement": [
        {
            "Test Case Name": "45.1.1. [TC-PRS-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-PRS-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Pressure Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.2.4.5.2",
                    "AC.2.4.5.3",
                    "AC.2.4.5.1",
                    "AC.2.4.5.4",
                    "AC.2.4.5.6",
                    "AC.2.4.5.7",
                    "AC.2.4.5.5",
                    "AC.2.4.5.8",
                    "AC.2.4.5.9"
                ],
                "PICS": [
                    "",
                    "PRS.S.A0001(MinMeasuredValue)",
                    "PRS.S.A0002(MaxMeasuredValue)",
                    "PRS.S.A0000(MeasuredValue)",
                    "PRS.S.A0003(Tolerance)",
                    "PRS.S.A0011(MinScaledValue)",
                    "PRS.S.A0012(MaxScaledValue)",
                    "PRS.S.A0010(ScaledValue)",
                    "PRS.S.A0013(ScaledTolerance)",
                    "PRS.S.A0014(Scale)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT theToleranceattribute.",
                    "TH reads from the DUT theMinScaledValueattribute.",
                    "TH reads from the DUT theMaxScaledValueattribute.",
                    "TH reads from the DUT theScaledValueattribute.",
                    "TH reads from the DUT theScaledToleranceattribute.",
                    "TH reads from the DUT theScaleattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains eithernulloran int16 where-32767 \u2264MinMeasuredValue\u2264 32766.Note the value for usage in later steps as PRSmin.IfMinMeasuredValueis null note -32767.",
                    "Verify that the DUT response contains eithernulloran int16 wherePRSmin<MaxMeasuredValue\u2264 32767.Note the value for usage in later steps as PRSmax.IfMaxMeasuredValueis null note 32767.",
                    "Verify that the DUT response contains eithernullora int16 wherePRSmin\u2264MeasuredValue\u2264 PRSmax.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 2048.",
                    "Verify that the DUT response contains eithernulloran int16 where-32767 \u2264MinScaledValue\u2264 32766.Note the value for usage in later steps as PRS_Scaledmin.IfMinScaledValueis null note -32767.",
                    "Verify that the DUT response contains eithernulloran int16 wherePRSmin<MaxScaledValue\u2264 32767.Note the value for usage in later steps as PRS_Scaledmax.IfMaxScaledValueis null note 32767.",
                    "Verify that the DUT response contains eithernullora int16 wherePRS_Scaledmin\u2264ScaledValue\u2264 PRS_Scaledmax.",
                    "Verify that the DUT response contains a uint16 value. Value has to be between a range of 0 and 2048.",
                    "Verify that the DUT response contains an int8 value. Value has to be between a range of -127 and 127."
                ]
            }
        },
        {
            "Test Case Name": "45.1.2. [TC-PRS-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-PRS-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Pressure Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "AC.2.4.5.1",
                    "",
                    "AC.2.4.5.1"
                ],
                "PICS": [
                    "",
                    "PRS.S.A0000(MeasuredValue)",
                    "PRS.M.PressureChange",
                    "PRS.S.A0000(MeasuredValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "Operate on device to change the pressure significantly.",
                    "After a few seconds, TH reads from the DUT theMeasuredValueattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify the read is successful and note down the value read.",
                    "",
                    "Value read has to be different from value measure in step 2."
                ]
            }
        }
    ],
    "Window_Covering": [
        {
            "Test Case Name": "49.1.1. [TC-WNCV-1.1] Global attributes [DUT as Server]",
            "Test Case ID": "TC-WNCV-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the WindowCovering Global attributes",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the (0xFFFD) ClusterRevision attribute",
                    "TH reads from the DUT the (0xFFFC) FeatureMap attribute",
                    "TH reads from the DUT the (0xFFFB) AttributeList attribute",
                    "TH reads from the DUT the (0xFFFA) EventList attribute",
                    "TH reads from the DUT the (0xFFF9) AcceptedCommandList attribute",
                    "TH reads from the DUT the (0xFFF8) GeneratedCommandList attribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a minimal revision of 5",
                    "Verify that the DUT response contains the following bitmap32 w/:- bit 0 is set to 1 If WNCV.S.F00(LF) is true.- bit 1 is set to 1 If WNCV.S.F01(TL) is true.- bit 2 is set to 1 If WNCV.S.F02(PA_LF) is true.- bit 3 is set to 1 If WNCV.S.F03(ABS) is true.- bit 4 is set to 1 If WNCV.S.F04(PA_TL) is true.",
                    "Verify that the DUT response contains a list of supported attributes based on its PICS support:-  (0) Type (M)-  (7) ConfigStatus (M)- (10) OperationalStatus (M)- (13) EndProductType (M)- (23) Mode (M)- (26) SafetyStatus (O)- for others see PICS- It SHALL include global attributes (0xFFFD)ClusterRevision, (0xFFFC)FeatureMap, (0xFFFB)AttributeList, (0xFFF9)AcceptedCommandList & (0xFFF8)GeneratedCommandList.",
                    "Verify that the DUT response contains a list of supported events empty for this cluster.",
                    "Verify that the DUT response contains a list of Accepted commands (C2S) based on its PICS support.- (0) UpOrOpen (M)- (1) DownOrClose (M)- (2) StopMotion (M)- for others see PICS",
                    "Verify that the DUT response contains a list of Generated commands (S2C) empty for this cluster."
                ]
            }
        },
        {
            "Test Case Name": "49.2.1. [TC-WNCV-2.1] Attributes [DUT as Server]",
            "Test Case ID": "TC-WNCV-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the WindowCovering cluster attributes",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "2h",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "3g",
                    "3h",
                    "3i"
                ],
                "Ref": [
                    "",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5",
                    "5.3.5"
                ],
                "PICS": [
                    "",
                    "WNCV.S.A0000(Type)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000d(EndProductType)",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.A0017(Mode)",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0010(InstalledOpenLimitLift)",
                    "WNCV.S.A0011(InstalledClosedLimitLift)",
                    "WNCV.S.A0012(InstalledOpenLimitTilt)",
                    "WNCV.S.A0013(InstalledClosedLimitTilt)",
                    "",
                    "WNCV.S.A001a(SafetyStatus)",
                    "WNCV.S.A0001(PhysicalClosedLimitLift)",
                    "WNCV.S.A0002(PhysicalClosedLimitTilt)",
                    "WNCV.S.A0003(CurrentPositionLift)",
                    "WNCV.S.A0004(CurrentPositionTilt)",
                    "WNCV.S.A0005(NumberOfActuationsLift)",
                    "WNCV.S.A0006(NumberOfActuationsTilt)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)"
                ],
                "Test Step": [
                    "MANDATORY Attributes",
                    "TH reads from the DUT the ( 0) Type attribute",
                    "TH reads from the DUT the ( 7) ConfigStatus attribute",
                    "TH reads from the DUT the (10) OperationalStatus attribute",
                    "TH reads from the DUT the (13) EndProductType attribute",
                    "TH reads from the DUT the (23) Mode attribute",
                    "TH writes to (23) Mode attribute the value 0",
                    "CONDITIONALLY MANDATORY Attributes",
                    "TH reads from the DUT the (11) TargetPositionLiftPercent100ths attribute",
                    "TH reads from the DUT the (12) TargetPositionTiltPercent100ths attribute",
                    "TH reads from the DUT the (14) CurrentPositionLiftPercent100ths attribute",
                    "TH reads from the DUT the (15) CurrentPositionTiltPercent100ths attribute",
                    "TH reads from the DUT the (16) InstalledOpenLimitLift attribute",
                    "TH reads from the DUT the (17) InstalledClosedLimitLift attribute",
                    "TH reads from the DUT the (18) InstalledOpenLimitTilt attribute",
                    "TH reads from the DUT the (19) InstalledClosedLimitTilt attribute",
                    "CONDITIONALLY and PURELY OPTIONAL Attributes",
                    "TH reads from the DUT the (26) SafetyStatus attribute",
                    "TH reads from the DUT the ( 1) PhysicalClosedLimitLift attribute",
                    "TH reads from the DUT the ( 2) PhysicalClosedLimitTilt attribute",
                    "TH reads from the DUT the ( 3) CurrentPositionLift attribute",
                    "TH reads from the DUT the ( 4) CurrentPositionTilt attribute",
                    "TH reads from the DUT the ( 5) NumberOfActuationsLift attribute",
                    "TH reads from the DUT the ( 6) NumberOfActuationsTilt attribute",
                    "TH reads from the DUT the ( 8) CurrentPositionLiftPercentage attribute",
                    "TH reads from the DUT the ( 9) CurrentPositionTiltPercentage attribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an enum8",
                    "Verify that the DUT response contains a bitmap8",
                    "Verify that the DUT response contains a bitmap8",
                    "Verify that the DUT response contains an enum8",
                    "Verify that the DUT response contains a bitmap8",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains a nullable Percent100ths (uint16), Value has to be between a range of [min=0, max=10000]",
                    "Verify that the DUT response contains a nullable Percent100ths (uint16), Value has to be between a range of [min=0, max=10000]",
                    "Verify that the DUT response contains a nullable Percent100ths (uint16), Value has to be between a range of [min=0, max=10000]",
                    "Verify that the DUT response contains a nullable Percent100ths (uint16), Value has to be between a range of [min=0, max=10000]",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "",
                    "Verify that the DUT response contains a bitmap16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains a nullable uint16",
                    "Verify that the DUT response contains a nullable uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains a nullable Percent (uint8), Value has to be between a range of [min=0, max=100]",
                    "Verify that the DUT response contains a nullable Percent (uint8), Value has to be between a range of [min=0, max=100]"
                ]
            }
        },
        {
            "Test Case Name": "49.2.2. [TC-WNCV-2.2] ConfigStatus attribute [DUT as Server]",
            "Test Case ID": "TC-WNCV-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the ConfigStatus attribute behavior of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "WNCV.S.A0007(ConfigStatus)"
                ],
                "Test Step": [
                    "TH reads ConfigStatus attribute from DUT"
                ],
                "Expected Outcome": [
                    "verify these bits:- if (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) value of bit 3 must be 1b else 0b,- if (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) value of bit 4 must be 1b else 0b,- value of bit 0 must be 1b (operational)"
                ]
            }
        },
        {
            "Test Case Name": "49.2.3. [TC-WNCV-2.3] Mode attribute [DUT as Server]",
            "Test Case ID": "TC-WNCV-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Mode attribute behavior of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "WNCV.S.M.Reversal",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.M.Calibration",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "WNCV.S.M.Maintenance",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "WNCV.S.A0007(ConfigStatus)",
                    "WNCV.S.A0017(Mode)",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "WNCV.S.A0007(ConfigStatus)"
                ],
                "Test Step": [
                    "Check Lift Reversal (If WNCV.S.M.Reversal)",
                    "TH set the Mode attribute bit0 of the DUT",
                    "TH reads ConfigStatus attribute from DUT",
                    "TH clear the Mode attribute bit0 of the DUT",
                    "TH reads ConfigStatus attribute from DUT",
                    "Check Calibration (If WNCV.S.M.Calibration)",
                    "TH set the Mode attribute bit1 of the DUT",
                    "TH reads ConfigStatus attribute from DUT",
                    "If (ConfigStatus bit0 == 0) TH sends DownOrClose command to DUT",
                    "Clear the Mode attribute bit1 by performing a calibration of the DUT or via\n                                          TH clear the Mode attribute bit1 of the DUT.\n                                          Refer to manufacturer provided instructions for how a calibration is performed.",
                    "TH reads ConfigStatus attribute from DUT",
                    "TH reads Mode attribute from DUT",
                    "TH sends DownOrClose command to DUT",
                    "Check Maintenance (If WNCV.S.M.Maintenance)",
                    "TH set the Mode attribute bit2 of the DUT",
                    "TH sends DownOrClose command to DUT",
                    "TH reads ConfigStatus attribute from DUT",
                    "TH clear the Mode attribute bit2 of the DUT",
                    "TH sends DownOrClose command to DUT",
                    "TH reads ConfigStatus attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Value of bit2 must be 1b",
                    "",
                    "Value of bit2 must be 0b",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status FAILURE(0x01)",
                    "Calibration should be performed if supported or aborted",
                    "Value of bit0 must be 1b",
                    "Value of bit1 must be 0b",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "Verify DUT responds w/ status BUSY(0x9c)",
                    "Value of bit0 must be 0b",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value of bit0 must be 1b"
                ]
            }
        },
        {
            "Test Case Name": "49.2.4. [TC-WNCV-2.4] Type attribute [DUT as Server]",
            "Test Case ID": "TC-WNCV-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Type attribute behavior of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "WNCV.S.A0000(Type)"
                ],
                "Test Step": [
                    "TH reads Type attribute from DUT"
                ],
                "Expected Outcome": [
                    "verify these elements:- Value has to be between a range of [min=0, max=9]*- If (WNCV.S.F00(LF) & !WNCV.S.F01(TL)) value must be between [min=0, max=5] or equals to 9,- If (!WNCV.S.F00(LF) & WNCV.S.F01(TL)) value must be only equal to 7,- If (WNCV.S.F00(LF) & WNCV.S.F01(TL)) value is either 6 or 8"
                ]
            }
        },
        {
            "Test Case Name": "49.2.5. [TC-WNCV-2.5] EndProductType attribute [DUT as Server]",
            "Test Case ID": "TC-WNCV-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the EndProductType attribute behavior of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    "WNCV.S.A000d(EndProductType)"
                ],
                "Test Step": [
                    "TH reads EndProductType attribute from DUT"
                ],
                "Expected Outcome": [
                    "Value has to be between a range of [min=0, max=23]*"
                ]
            }
        },
        {
            "Test Case Name": "49.3.1. [TC-WNCV-3.1] UpOrOpen command & OperationalStatus attribute Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the UpOrOpen command functionality of the Window Covering cluster server with the expected changes on attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "4",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "5a",
                    "5b",
                    "5c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "WNCV.S.C00.Rsp(UpOrOpen)",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "WNCV.S.C02.Rsp(StopMotion)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for 5-15 seconds movement(s) on the DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "Check UpOrOpen command Fast effects",
                    "TH sends UpOrOpen command to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT",
                    "TH waits for 1-5 seconds movement(s) on the DUT",
                    "Check UpOrOpen command Mid-Term effects",
                    "TH reads OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "Check StopMotion command Fast effects",
                    "TH sends a StopMotion command to DUT",
                    "TH waits for 1-5 seconds end of motion(s) on the DUT",
                    "TH reads OperationalStatus attribute from DUT",
                    "Check StopMotion command longer period effects",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-open position",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "Value must not be   0%    (0x00)   [min=1, max=100  ]",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "Value must not be   0%    (0x00)   [min=1, max=100  ]",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT updates its attributes",
                    "Value has to be 0.00% (0x0000)",
                    "Value has to be 0.00% (0x0000)",
                    "DUT moves toward the open position",
                    "",
                    "Value of bit 0..1 must be 01b & if WNCV.S.F00(LF) value of bit 2..3 must be 01b else 00b & if WNCV.S.F01(TL) value of bit 4..5 must be 01b else 00b",
                    "Value must not be 100.00% (0x2710) [min=0, max=9999]",
                    "Value must not be 100%    (0x64)   [min=0, max=99  ]",
                    "Value must not be 100.00% (0x2710) [min=0, max=9999]",
                    "Value must not be 100%    (0x64)   [min=0, max=99  ]",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT slow down and stop any movement (inertia depends of the product)",
                    "Value of bits 0..5 must be xx000000b",
                    "",
                    "DUT updates its attributes",
                    "Value has to be between a range of [min=0, max=9999]",
                    "Value has to be between a range of [min=0, max=9999]"
                ]
            }
        },
        {
            "Test Case Name": "49.3.2. [TC-WNCV-3.2] DownOrClose command & OperationalStatus attribute Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DownOrClose command functionality of the Window Covering cluster server with the expected changes on attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "4",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "5a",
                    "5b",
                    "5c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C00.Rsp(UpOrOpen)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "WNCV.S.C02.Rsp(StopMotion)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends UpOrOpen command to DUT",
                    "TH waits for 5-15 seconds movement(s) on the DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "Check DownOrClose command Fast effects",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT",
                    "TH waits for 1-5 seconds movement(s) on the DUT",
                    "Check DownOrClose command Mid-Term effects",
                    "TH reads OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "Check StopMotion command Fast effects",
                    "TH sends a StopMotion command to DUT",
                    "TH waits for 1-5 seconds end of motion(s) on the DUT",
                    "TH reads OperationalStatus attribute from DUT",
                    "Check StopMotion command longer period effects",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-open position",
                    "Value must not be 100.00% (0x2710) [min=0, max=9999]",
                    "Value must not be 100%    (0x64)   [min=0, max=99  ]",
                    "Value must not be 100.00% (0x2710) [min=0, max=9999]",
                    "Value must not be 100%    (0x64)   [min=0, max=99  ]",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT updates its attributes",
                    "Value has to be 100.00% (0x2710)",
                    "Value has to be 100.00% (0x2710)",
                    "DUT moves toward the closed position",
                    "",
                    "Value of bit 0..1 must be 10b & if WNCV.S.F00(LF) value of bit 2..3 must be 10b else 00b & if WNCV.S.F01(TL) value of bit 4..5 must be 10b else 00b",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "Value must not be   0%    (0x00)   [min=1, max=100  ]",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "Value must not be   0%    (0x00)   [min=1, max=100  ]",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT slow down and stop any movement (inertia depends of the product)",
                    "Value of bits 0..5 must be xx000000b",
                    "",
                    "DUT updates its attributes",
                    "Value has to be between a range of [min=1, max=10000]",
                    "Value has to be between a range of [min=1, max=10000]"
                ]
            }
        },
        {
            "Test Case Name": "49.3.3. [TC-WNCV-3.3] StopMotion command & OperationalStatus attribute Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the StopMotion command functionality of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "4b",
                    "4c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.C00.Rsp(UpOrOpen)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "",
                    "WNCV.S.C02.Rsp(StopMotion)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths) & WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths) & WNCV.S.A000c(TargetPositionTiltPercent100ths)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for 6-8 seconds movement(s) on the DUT",
                    "TH sends UpOrOpen command to DUT",
                    "TH waits for 1-5 seconds revert motion(s) on the DUT",
                    "TH reads OperationalStatus attribute from DUT",
                    "TH waits for 2 seconds",
                    "Check StopMotion command Fast effects",
                    "TH sends StopMotion command to DUT",
                    "TH waits for 1-5 seconds end of motion(s) on the DUT",
                    "TH reads OperationalStatus attribute from DUT",
                    "Verify StopMotion command longer period effects on Lift",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) TH compare TargetPositionLiftPercent100ths attribute and CurrentPositionLiftPercent100ths attribute from DUT",
                    "Verify StopMotion command longer period effects on Tilt",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT",
                    "TH compare TargetPositionTiltPercent100ths attribute and CurrentPositionTiltPercent100ths attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-close position",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a close position",
                    "Value must not be 0x00.",
                    "DUT go on for a few seconds",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT slow down and stop any movement (inertia depends of the product)",
                    "Value of bits 0..5 must be xx000000b",
                    "Category only for Position Aware DUT",
                    "Store this value for step 3c",
                    "Store this value for step 3c",
                    "TargetPositionLiftPercent100ths attribute must be equal to CurrentPositionLiftPercent100ths attribute +/- tolerance*and both within the valid range of [min=0, max=10000]",
                    "Category only for Position Aware DUT",
                    "Store this value for step 4c",
                    "Store this value for step 4c",
                    "TargetPositionTiltPercent100ths attribute must be equal to CurrentPositionTiltPercent100ths attribute +/- tolerance*and both within the valid range of [min=0, max=10000]"
                ]
            }
        },
        {
            "Test Case Name": "49.3.4. [TC-WNCV-3.4] UpOrOpen command Long-Run Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Since this category of DUT can perform very long and slow operations.\nThis test case verifies the UpOrOpen command functionality over a long period of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "",
                    "WNCV.S.C00.Rsp(UpOrOpen)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for 5-15 seconds movement(s) on the DUT",
                    "Check UpOrOpen command Long-Run effects",
                    "TH sends UpOrOpen command to DUT",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "Verify the DUT has reached its fully-open limits",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-open position",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT moves toward its fully-open position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Category only for Position Aware DUT",
                    "Value has to be 0.00% (0x0000)",
                    "Value has to be 0%    (0x00)",
                    "Value has to be 0.00% (0x0000)",
                    "Value has to be 0%    (0x00)"
                ]
            }
        },
        {
            "Test Case Name": "49.3.5. [TC-WNCV-3.5] DownOrClose command Long-Run Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-3.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Since this category of DUT can perform very long and slow operations.\nThis test case verifies the DownOrClose command functionality over a long period of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C00.Rsp(UpOrOpen)",
                    "",
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends UpOrOpen command to DUT",
                    "TH waits for 5-15 seconds movement(s) on the DUT",
                    "Check DownOrClose command Long-Run effects",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "Verify the DUT has reached its fully-closed limits",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-closed position",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT moves toward its fully-closed position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Category only for Position Aware DUT",
                    "Value has to be 100.00% (0x2710)",
                    "Value has to be 100%    (0x64)",
                    "Value has to be 100.00% (0x2710)",
                    "Value has to be 100%    (0x64)"
                ]
            }
        },
        {
            "Test Case Name": "49.4.1. [TC-WNCV-4.1] GoToLiftPercentage command Long-Run Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the GoToLiftPercentage command functionality over a long period of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "5a",
                    "5b",
                    "5c",
                    "5d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)",
                    "",
                    "WNCV.S.A000b(TargetPositionLiftPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for x1seconds movement(s) on the DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "Check GoToLiftPercentage command 25% Long-Run effects",
                    "TH sends GoToLiftPercentage command with 25% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "Verify the DUT has reached its 25%",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "Check GoToLiftPercentage command 75.2% Long-Run effects",
                    "TH sends GoToLiftPercentage command with 75.2% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionLiftPercent100ths attribute from DUT",
                    "Verify the DUT has reached its 75.2%",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-open position",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "",
                    "Parameter value is 2500 Percent100ths, If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F00(LF)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "Value has to be equals 2500 the previous parameter",
                    "",
                    "DUT moves toward its 25% position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Value has to be between a range of [2500 +/- tolerance*]",
                    "Value has to be between a range of [25   +/- tolerance*]",
                    "",
                    "Parameter value is 7520 Percent100ths, If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F00(LF)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "Value has to be equals 7520 the previous parameter",
                    "",
                    "DUT moves toward its 75.2% position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Value has to be between a range of [7520 +/- tolerance*]",
                    "Value has to be between a range of [75   +/- tolerance*]"
                ]
            }
        },
        {
            "Test Case Name": "49.4.2. [TC-WNCV-4.2] GoToTiltPercentage command Long-Run Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-4.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the GoToTiltPercentage command functionality over a long period of the Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "5a",
                    "5b",
                    "5c",
                    "5d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C01.Rsp(DownOrClose)",
                    "",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)",
                    "",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)",
                    "",
                    "WNCV.S.A000c(TargetPositionTiltPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000a(OperationalStatus)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)"
                ],
                "Test Step": [
                    "Initialize Position(s) Phase",
                    "TH sends DownOrClose command to DUT",
                    "TH waits for x1seconds movement(s) on the DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "Check GoToTiltPercentage 30% Long-Run effects",
                    "TH sends GoToTiltPercentage command with 30% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT",
                    "Verify the DUT has reached its 30%",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "Check GoToTiltPercentage 60.05% Long-Run effects",
                    "TH sends GoToTiltPercentage command with 60.05% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH reads TargetPositionTiltPercent100ths attribute from DUT",
                    "Verify the DUT has reached its 60.05%",
                    "TH waits for PIXIT.WNCV.FULLMOTION on the DUT",
                    "TH checks OperationalStatus attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "DUT adjusts to a non-open position",
                    "Value must not be   0.00% (0x0000) [min=1, max=10000]",
                    "",
                    "Parameter value is 3000 Percent100ths, If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F01(TL)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "Value has to be equals 3000 the previous parameter",
                    "",
                    "DUT moves toward its 30% position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Value has to be between a range of [3000 +/- tolerance*]",
                    "Value has to be between a range of [30   +/- tolerance*]",
                    "",
                    "Parameter value is 6005 Percent100ths, If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F01(TL)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "Value has to be equals 6005 the previous parameter",
                    "",
                    "DUT moves toward its 60.05% position",
                    "Motion should be over withOperationalStatusValue of bits 0..5 must be xx000000b",
                    "Value has to be between a range of [6005 +/- tolerance*]",
                    "Value has to be between a range of [60   +/- tolerance*]"
                ]
            }
        },
        {
            "Test Case Name": "49.4.3. [TC-WNCV-4.3] GoToLiftPercentage command Limits Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-4.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the GoToLiftPercentage command functionality of the Window Covering cluster server with non expected parameters.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "2a",
                    "2b",
                    "3",
                    "3a",
                    "4",
                    "4a"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths) & WNCV.S.A0008(CurrentPositionLiftPercentage)",
                    "",
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)",
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)",
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)"
                ],
                "Test Step": [
                    "Verify the Lift Percent100ths and Percent attributes",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionLiftPercentage attribute from DUT",
                    "TH compare CurrentPositionLiftPercent100ths attribute and CurrentPositionLiftPercentage attribute from DUT",
                    "Verify the GoToLiftPercentage command with aBadParam",
                    "TH generates a randomBadParamoutside the valid range e.g (0x3000)",
                    "TH sends GoToLiftPercentage command withBadParam*to DUT",
                    "Verify the GoToLiftPercentage command with 10001 as parameter",
                    "TH sends GoToLiftPercentage command with 10001*to DUT",
                    "Verify the GoToLiftPercentage command with 0xFFFF as parameter",
                    "TH sends GoToLiftPercentage command with 0xFFFF*to DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Store this value for step 1c",
                    "Store this value for step 1c",
                    "CurrentPositionLiftPercentage attribute must be equal to CurrentPositionLiftPercent100ths attribute / 100 and both within their valid ranges of [min=0, max=100 and max=10000]",
                    "",
                    "Store this value for step 2b",
                    "If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F00(LF)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81).",
                    "",
                    "If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F00(LF)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81).",
                    "",
                    "If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F00(LF)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81)."
                ]
            }
        },
        {
            "Test Case Name": "49.4.4. [TC-WNCV-4.4] GoToTiltPercentage command Limits Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-4.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the GoToTiltPercentage command functionality of the Window Covering cluster server with non expected parameters.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "2a",
                    "2b",
                    "3",
                    "3a",
                    "4",
                    "4a"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths) & WNCV.S.A0009(CurrentPositionTiltPercentage)",
                    "",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)"
                ],
                "Test Step": [
                    "Verify the Tilt Percent100ths and Percent attributes",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercentage attribute from DUT",
                    "TH compare CurrentPositionTiltPercent100ths attribute and CurrentPositionTiltPercentage attribute from DUT",
                    "Verify the GoToTiltPercentage command with aBadParam",
                    "TH generates a randomBadParamoutside the valid range e.g (0x3000)",
                    "TH sends GoToTiltPercentage command withBadParam*to DUT",
                    "Verify the GoToTiltPercentage command with 10001 as parameter",
                    "TH sends GoToTiltPercentage command with 10001*to DUT",
                    "Verify the GoToTiltPercentage command with 0xFFFF as parameter",
                    "TH sends GoToTiltPercentage command with 0xFFFF*to DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Store this value for step 1c",
                    "Store this value for step 1c",
                    "CurrentPositionTiltPercentage attribute must be equal to CurrentPositionTiltPercent100ths attribute / 100 and both within their valid ranges of [min=0, max=100 and max=10000]",
                    "",
                    "Store this value for step 2b",
                    "If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F01(TL)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81).",
                    "",
                    "If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F01(TL)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81).",
                    "",
                    "If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status CONSTRAINT_ERROR(0x87) or If only (WNCV.S.F01(TL)) DUT can responds either status CONSTRAINT_ERROR(0x87) or status UNSUPPORTED_COMMAND(0x81)."
                ]
            }
        },
        {
            "Test Case Name": "49.4.5. [TC-WNCV-4.5] Positions Storage Verification [DUT as Server]",
            "Test Case ID": "TC-WNCV-4.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that positions are saved in non-volatile memory for a Window Covering cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.S.C05.Rsp(GoToLiftPercentage)",
                    "",
                    "WNCV.S.C02.Rsp(StopMotion)",
                    "",
                    "",
                    "WNCV.S.C08.Rsp(GoToTiltPercentage)",
                    "",
                    "WNCV.S.C02.Rsp(StopMotion)",
                    "",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)",
                    "",
                    "",
                    "WNCV.S.A000e(CurrentPositionLiftPercent100ths)",
                    "WNCV.S.A000f(CurrentPositionTiltPercent100ths)"
                ],
                "Test Step": [
                    "Check GoToLiftPercentage command NVM effects",
                    "TH sends GoToLiftPercentage command with 90% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH sends StopMotion command to DUT",
                    "TH waits for 100-1000 ms",
                    "Check GoToTiltPercentage command NVM effects",
                    "TH sends GoToTiltPercentage command with 90% to DUT",
                    "TH waits for 100-1000 ms",
                    "TH sends StopMotion command to DUT",
                    "TH waits for 100-1000 ms",
                    "Store positions and reboot",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT",
                    "TH reboot/restart the DUT",
                    "TH waits for 1-5 s",
                    "TH reads CurrentPositionLiftPercent100ths attribute from DUT",
                    "TH reads CurrentPositionTiltPercent100ths attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Parameter value is 9000 Percent100ths, If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F00(LF)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "DUT stop all motions",
                    "DUT updates its attributes",
                    "",
                    "Parameter value is 9000 Percent100ths, If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F01(TL)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "DUT updates its attributes",
                    "DUT stop all motions",
                    "DUT updates its attributes",
                    "",
                    "Store this value for step 3e",
                    "Store this value for step 3f",
                    "DUT turn off",
                    "DUT boots",
                    "Compare read value equals w/ step 3a",
                    "Compare read value equals w/ step 3b"
                ]
            }
        },
        {
            "Test Case Name": "49.4.6. [TC-WNCV-5.1] Mandatory Attributes Verification [DUT as Client]",
            "Test Case ID": "TC-WNCV-5.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mandatory Attributes access of the Window Covering cluster client with the expected values on TH server attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "2",
                    "2a",
                    "2b",
                    "3",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "WNCV.C.A0000(Type).Read",
                    "WNCV.C.A000d(EndProductType).Read",
                    "",
                    "WNCV.C.A0017(Mode).Read",
                    "WNCV.C.A0007(ConfigStatus).Read"
                ],
                "Test Step": [
                    "Check Attribute defining the cluster Features",
                    "DUT reads the (0xFFFC) FeatureMap attribute from TH",
                    "Check Attributes defining the product",
                    "DUT reads the Type attribute from TH",
                    "DUT reads the EndProductType attribute from TH",
                    "Check Attributes defining the working status",
                    "DUT reads the Mode attribute from TH",
                    "DUT reads the ConfigStatus attribute from TH"
                ],
                "Expected Outcome": [
                    "",
                    "Verify data type is map32",
                    "",
                    "Verify data type is enum8",
                    "Verify data type is enum8",
                    "",
                    "Verify data type is map8",
                    "Verify data type is map8"
                ]
            }
        },
        {
            "Test Case Name": "49.4.7. [TC-WNCV-6.1] Basic Commands Verification [DUT as Client]",
            "Test Case ID": "TC-WNCV-6.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the UpOrOpen, DownOrClose, StopMotion functionality of the Window Covering cluster client with the expected changes on TH attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "2",
                    "2a",
                    "3",
                    "3a"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.C.C00.Tx(UpOrOpen).Invoke",
                    "",
                    "WNCV.C.C01.Tx(DownOrClose).Invoke",
                    "",
                    "WNCV.C.C02.Tx(StopMotion).Invoke"
                ],
                "Test Step": [
                    "Check UpOrOpen command",
                    "DUT sends UpOrOpen command to TH",
                    "Check DownOrClose command",
                    "DUT sends DownOrClose command to TH",
                    "Check StopMotion command",
                    "DUT sends a StopMotion command to TH"
                ],
                "Expected Outcome": [
                    "",
                    "Verify  TH responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify  TH responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify  TH responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "49.4.8. [TC-WNCV-7.1] GoToPercentage Commands Verification [DUT as Client]",
            "Test Case ID": "TC-WNCV-7.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the GoToLiftPercentage command, GoToTiltPercentage command functionality of the Window Covering cluster client with the expected changes on TH attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "2",
                    "2a"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WNCV.C.C05.Tx(GoToLiftPercentage).Invoke",
                    "",
                    "WNCV.C.C08.Tx(GoToTiltPercentage).Invoke"
                ],
                "Test Step": [
                    "Check GoToLiftPercentage command 50%",
                    "DUT sends GoToLiftPercentage command with 50% to TH",
                    "Check GoToTiltPercentage command 50%",
                    "DUT sends GoToTiltPercentage command with 50% to TH"
                ],
                "Expected Outcome": [
                    "",
                    "Parameter value is 5000 Percent100ths, If (WNCV.S.F00(LF) & WNCV.S.F02(PA_LF)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F00(LF)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81).",
                    "",
                    "Parameter value is 5000 Percent100ths, If (WNCV.S.F01(TL) & WNCV.S.F04(PA_TL)) Verify DUT responds w/ status SUCCESS(0x00) or If only (WNCV.S.F01(TL)) DUT can responds either status SUCCESS(0x00) or status UNSUPPORTED_COMMAND(0x81)."
                ]
            }
        }
    ],
    "Thermostat": [
        {
            "Test Case Name": "52.1.1. [TC-TSTAT-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-TSTAT-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 6.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if TSTAT.S.F00(HEAT).- bit 1: SHALL be 1 if and only if TSTAT.S.F01(COOL).- bit 2: SHALL be 1 if and only if TSTAT.S.F02(OCC).- bit 3: SHALL be 1 if and only if TSTAT.S.F03(SCH).- bit 4: SHALL be 1 if and only if TSTAT.S.F04(SB).- bit 5: SHALL be 1 if and only if TSTAT.S.F05(AUTO).- bit 6: SHALL be 1 if and only if TSTAT.S.F06(LTNE).All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x001b, 0x001c\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0001: SHALL be included if and only if TSTAT.S.A0001(OutdoorTemperature).- 0x001a: SHALL be included if and only if TSTAT.S.A001a(RemoteSensing).- 0x001d: SHALL be included if and only if TSTAT.S.A001d(AlarmMask).- 0x0023: SHALL be included if and only if TSTAT.S.A0023(TemperatureSetpointHold).- 0x0024: SHALL be included if and only if TSTAT.S.A0024(TemperatureSetpointHoldDuration).- 0x0025: SHALL be included if and only if TSTAT.S.A0025(ThermostatProgrammingOperationMode).- 0x0029: SHALL be included if and only if TSTAT.S.A0029(ThermostatRunningState).- 0x0030: SHALL be included if and only if TSTAT.S.A0030(SetpointChangeSource).- 0x0031: SHALL be included if and only if TSTAT.S.A0031(SetpointChangeAmount).- 0x0032: SHALL be included if and only if TSTAT.S.A0032(SetpointChangeSourceTimestamp).- 0x003A: SHALL be included if and only if TSTAT.S.A003a(EmergencyHeatDelta).- 0x0040: SHALL be included if and only if TSTAT.S.A0040(ACType).- 0x0041: SHALL be included if and only if TSTAT.S.A0041(ACCapacity).- 0x0042: SHALL be included if and only if TSTAT.S.A0042(ACRefrigerantType).- 0x0043: SHALL be included if and only if TSTAT.S.A0043(ACCompressorType).- 0x0044: SHALL be included if and only if TSTAT.S.A0044(ACErrorCode).- 0x0045: SHALL be included if and only if TSTAT.S.A0045(ACLouverPosition).- 0x0046: SHALL be included if and only if TSTAT.S.A0046(ACCoilTemperature).- 0x0047: SHALL be included if and only if TSTAT.S.A0047(ACCapacityFormat).The list includes entries based on feature support:- 0x0002: SHALL be included if and only if TSTAT.S.F02(OCC).- 0x0003: SHALL be included if and only if TSTAT.S.F00(HEAT) & TSTAT.S.A0003(AbsMinHeatSetpointLimit).- 0x0004: SHALL be included if and only if TSTAT.S.F00(HEAT) & TSTAT.S.A0004(AbsMaxHeatSetpointLimit).- 0x0005: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.A0005(AbsMinCoolSetpointLimit).- 0x0006: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.A0006(AbsMaxCoolSetpointLimit).- 0x0007: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.A0007(PICoolingDemand).- 0x0008: SHALL be included if and only if TSTAT.S.F00(HEAT) & TSTAT.S.A0008(PIHeatingDemand).- 0x0010: SHALL be included if and only if !TSTAT.S.F06(LTNE) & TSTAT.S.A0010(LocalTemperatureCalibration).- 0x0011: SHALL be included if and only if TSTAT.S.F01(COOL).- 0x0012: SHALL be included if and only if TSTAT.S.F00(HEAT).- 0x0013: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.F02(OCC).- 0x0014: SHALL be included if and only if TSTAT.S.F00(HEAT)& TSTAT.S.F02(OCC).- 0x0015: SHALL be included if and only if TSTAT.S.F00(HEAT) & TSTAT.S.A0015(MinHeatSetpointLimit).- 0x0016: SHALL be included if and only if TSTAT.S.F00(HEAT) & TSTAT.S.A0016(MaxHeatSetpointLimit).- 0x0017: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.A0017(MinCoolSetpointLimit).- 0x0018: SHALL be included if and only if TSTAT.S.F01(COOL) & TSTAT.S.A0018(MaxCoolSetpointLimit).- 0x0019: SHALL be included if and only if TSTAT.S.F05(AUTO).- 0x001e: SHALL be included if and only if TSTAT.S.F05(AUTO) & TSTAT.S.A001e(ThermostatRunningMode).- 0x0020: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x0021: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x0022: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x0034: SHALL be included if and only if TSTAT.S.F04(SB).- 0x0035: SHALL be included if and only if TSTAT.S.F04(SB).- 0x0036: SHALL be included if and only if TSTAT.S.F04(SB).- 0x0037: SHALL be included if and only if TSTAT.S.F04(SB) & TSTAT.S.F02(OCC).- 0x0038: SHALL be included if and only if TSTAT.S.F04(SB) & TSTAT.S.F02(OCC).- 0x0039: SHALL be included if and only if TSTAT.S.F04(SB) & TSTAT.S.F02(OCC).",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list SHALL include all the mandatory entries:0x00.The list MAY include these optional entries:- 0x04: SHALL be included if and only if TSTAT.S.C01.Tx(GetRelayStatusLogResponse)The list includes entries based on feature support:- 0x01: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x02: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x03: SHALL be included if and only if TSTAT.S.F03(SCH).",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:The list includes entries based on feature support:- 0x00: SHALL be included if and only if TSTAT.S.F03(SCH).- 0x01: SHALL be included if and only if TSTAT.S.C04.Rsp(GetRelayStatusLog)."
                ]
            }
        },
        {
            "Test Case Name": "52.2.1. [TC-TSTAT-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-TSTAT-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Thermostat Cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TSTAT.S.A0000(LocalTemperature)",
                    "TSTAT.S.A0001(OutdoorTemperature)",
                    "TSTAT.S.A0002(Occupancy)",
                    "TSTAT.S.A0003(AbsMinHeatSetpointLimit)",
                    "TSTAT.S.A0004(AbsMaxHeatSetpointLimit)",
                    "TSTAT.S.A0005(AbsMinCoolSetpointLimit)",
                    "TSTAT.S.A0006(AbsMaxCoolSetpointLimit)",
                    "TSTAT.S.A0007(PICoolingDemand)",
                    "TSTAT.S.A0008(PIHeatingDemand)",
                    "TSTAT.S.A0010(LocalTemperatureCalibration)",
                    "TSTAT.S.A0011(OccupiedCoolingSetpoint)",
                    "TSTAT.S.A0012(OccupiedHeatingSetpoint)",
                    "TSTAT.S.A0013(UnoccupiedCoolingSetpoint)",
                    "TSTAT.S.A0014(UnoccupiedHeatingSetpoint)",
                    "TSTAT.S.A0015(MinHeatSetpointLimit)",
                    "TSTAT.S.A0016(MaxHeatSetpointLimit)",
                    "TSTAT.S.A0017(MinCoolSetpointLimit)",
                    "TSTAT.S.A0018(MaxCoolSetpointLimit)",
                    "TSTAT.S.A0019(MinSetpointDeadBand)",
                    "TSTAT.S.A001a(RemoteSensing)",
                    "TSTAT.S.A001b(ControlSequenceOfOperation)",
                    "TSTAT.S.A001c(SystemMode)",
                    "TSTAT.S.A001d(AlarmMask)",
                    "TSTAT.S.A001e(ThermostatRunningMode)",
                    "TSTAT.S.A0020(StartOfWeek)",
                    "TSTAT.S.A0021(NumberOfWeeklyTransitions)",
                    "TSTAT.S.A0022(NumberOfDailyTransitions)",
                    "TSTAT.S.A0023(TemperatureSetpointHold)",
                    "TSTAT.S.A0024(TemperatureSetpointHoldDuration)",
                    "TSTAT.S.A0025(ThermostatProgrammingOperationMode)",
                    "TSTAT.S.A0029(ThermostatRunningState)",
                    "TSTAT.S.A0030(SetpointChangeSource)",
                    "TSTAT.S.A0031(SetpointChangeAmount)",
                    "TSTAT.S.A0032(SetpointChangeSourceTimestamp)",
                    "TSTAT.S.A0034(OccupiedSetback)",
                    "TSTAT.S.A0035(OccupiedSetbackMin)",
                    "TSTAT.S.A0036(OccupiedSetbackMax)",
                    "TSTAT.S.A0037(UnoccupiedSetback)",
                    "TSTAT.S.A0038(UnoccupiedSetbackMin)",
                    "TSTAT.S.A0039(UnoccupiedSetbackMax)",
                    "TSTAT.S.A003a(EmergencyHeatDelta)",
                    "TSTAT.S.A0040(ACType)",
                    "TSTAT.S.A0041(ACCapacity)",
                    "TSTAT.S.A0042(ACRefrigerantType)",
                    "TSTAT.S.A0043(ACCompressorType)",
                    "TSTAT.S.A0044(ACErrorCode)",
                    "TSTAT.S.A0045(ACLouverPosition)",
                    "TSTAT.S.A0046(ACCoilTemperature)",
                    "TSTAT.S.A0047(ACCapacityFormat)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theLocalTemperature attributefrom the DUT",
                    "TH reads theOutdoorTemperature attributefrom the DUT",
                    "TH reads theOccupancy attributefrom the DUT",
                    "TH reads theAbsMinHeatSetpointLimit attributefrom the DUT",
                    "TH reads theAbsMaxHeatSetpointLimit attributefrom the DUT",
                    "TH reads theAbsMinCoolSetpointLimit attributefrom the DUT",
                    "TH reads theAbsMaxCoolSetpointLimit attributefrom the DUT",
                    "TH reads thePICoolingDemand attributefrom the DUT",
                    "TH reads thePIHeatingDemand attributefrom the DUT",
                    "TH reads theLocalTemperatureCalibration attributefrom the DUT",
                    "TH reads theOccupiedCoolingSetpoint attributefrom the DUT",
                    "TH reads theOccupiedHeatingSetpoint attributefrom the DUT",
                    "TH reads theUnoccupiedCoolingSetpoint attributefrom the DUT",
                    "TH reads theUnoccupiedHeatingSetpoint attributefrom the DUT",
                    "TH reads theMinHeatSetpointLimit attributefrom the DUT",
                    "TH reads theMaxHeatSetpointLimit attributefrom the DUT",
                    "TH reads theMinCoolSetpointLimit attributefrom the DUT",
                    "TH reads theMaxCoolSetpointLimit attributefrom the DUT",
                    "TH reads theMinSetpointDeadBand attributefrom the DUT",
                    "TH reads theRemoteSensing attributefrom the DUT",
                    "TH reads theControlSequenceOfOperation attributefrom the DUT",
                    "TH reads theSystemMode attributefrom the DUT",
                    "TH reads theAlarmMask attributefrom the DUT",
                    "TH reads theThermostatRunningMode attributefrom the DUT",
                    "TH reads theStartOfWeek attributefrom the DUT",
                    "TH reads theNumberOfWeeklyTransitions attributefrom the DUT",
                    "TH reads theNumberOfDailyTransitions attributefrom the DUT",
                    "TH reads theTemperatureSetpointHold attributefrom the DUT",
                    "TH reads theTemperatureSetpointHoldDuration attributefrom the DUT",
                    "TH reads theThermostatProgrammingOperationMode attributefrom the DUT",
                    "TH reads theThermostatRunningState attributefrom the DUT",
                    "TH reads theSetpointChangeSource attributefrom the DUT",
                    "TH reads theSetpointChangeAmount attributefrom the DUT",
                    "TH reads theSetpointChangeSourceTimestamp attributefrom the DUT",
                    "TH reads theOccupiedSetback attributefrom the DUT",
                    "TH reads theOccupiedSetbackMin attributefrom the DUT",
                    "TH reads theOccupiedSetbackMax attributefrom the DUT",
                    "TH reads theUnoccupiedSetback attributefrom the DUT",
                    "TH reads theUnoccupiedSetbackMin attributefrom the DUT",
                    "TH reads theUnoccupiedSetbackMax attributefrom the DUT",
                    "TH reads theEmergencyHeatDelta attributefrom the DUT",
                    "TH reads theACType attributefrom the DUT",
                    "TH reads theACCapacity attributefrom the DUT",
                    "TH reads theACRefrigerantType attributefrom the DUT",
                    "TH reads theACCompressorType attributefrom the DUT",
                    "TH reads theACErrorCode attributefrom the DUT",
                    "TH reads theACLouverPosition attributefrom the DUT",
                    "TH reads theACCoilTemperature attributefrom the DUT",
                    "TH reads theACCapacityFormat attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds with an int16 value or NULL.",
                    "Verify that the DUT responds with an int16 value or NULL.",
                    "Verify that the DUT responds with a map8 value.The value has to be 0x00 or 0x01.",
                    "Verify that the DUT responds with an int16 value. See also Note 1.",
                    "Verify that the DUT responds with an int16 value. See also Note 2.",
                    "Verify that the DUT responds with an int16 value.  See also Note 1.",
                    "Verify that the DUT responds with an int16 value.  See also Note 2.",
                    "Verify that the DUT responds with a uint8 value.The value has to be in the range of 0 to 100.",
                    "Verify that the DUT responds with a uint8 value.The value has to be in the range of 0 to 100.",
                    "Verify that the DUT responds with an int8 value.The value has to be in the range of -25 to 25.",
                    "Verify that the DUT responds with an int16 value. See also Note 5.",
                    "Verify that the DUT responds with an int16 value. See also Note 5.",
                    "Verify that the DUT responds with an int16 value. See also Note 6.",
                    "Verify that the DUT responds with an int16 value. See also Note 6.",
                    "Verify that the DUT responds with an int16 value. See also Note 3.",
                    "Verify that the DUT responds with an int16 value. See also Note 4.",
                    "Verify that the DUT responds with an int16 value. See also Note 3.",
                    "Verify that the DUT responds with an int16 value. See also Note 4.",
                    "Verify that the DUT responds with an int8 value.The value has to be in the range of 0 to 25.",
                    "Verify that the DUT responds with a map8 value.The value has to be in the range of 0x00 to 0x07.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 5.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 9.",
                    "Verify that the DUT responds with a map8 value.The value has to be in the range of 0x00 to 0x07.",
                    "Verify that the DUT responds with an enum8 value.The value has to be 0, 3 or 4.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 6.",
                    "Verify that the DUT responds with a uint8 value.",
                    "Verify that the DUT responds with a uint8 value.",
                    "Verify that the DUT responds with an enum8 value.The value has to 0 or 1",
                    "Verify that the DUT responds with a uint16 value or NULL.The value has to be in the range of 0 to 1440.",
                    "Verify that the DUT responds with a map8 value.The value has to be in the range of 0x00 to 0x07.",
                    "Verify that the DUT responds with a map16 value.The value has to be in the range of 0x00 to 0x7F.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 2.",
                    "Verify that the DUT responds with an int16 value or NULL.",
                    "Verify that the DUT responds with a utc value.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value or NULL.",
                    "Verify that the DUT responds with a uint8 value.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 4.",
                    "Verify that the DUT responds with a uint16 value.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 3.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 0 to 3.",
                    "Verify that the DUT responds with a map32 value.",
                    "Verify that the DUT responds with an enum8 value.The value has to be in the range of 1 to 5.",
                    "Verify that the DUT responds with an int16 value or NULL.",
                    "Verify that the DUT responds with an enum8 value.The value has to be 0."
                ]
            }
        },
        {
            "Test Case Name": "52.2.2. [TC-TSTAT-2.2] Setpoint Test Cases with server as DUT",
            "Test Case ID": "TC-TSTAT-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the setpoint functionality of the Thermostat cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "4a",
                    "4b",
                    "4c",
                    "5a",
                    "5b",
                    "5c",
                    "6a",
                    "6b",
                    "6c",
                    "7a",
                    "7b",
                    "7c",
                    "8a",
                    "8b",
                    "8c",
                    "9a",
                    "9b",
                    "9c",
                    "10a",
                    "10b",
                    "11a",
                    "11b",
                    "11c",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TSTAT.S.A0011(OccupiedCoolingSetpoint)",
                    "TSTAT.S.A0011(OccupiedCoolingSetpoint)",
                    "TSTAT.S.A0011(OccupiedCoolingSetpoint)",
                    "TSTAT.S.A0012(OccupiedHeatingSetpoint)",
                    "TSTAT.S.A0012(OccupiedHeatingSetpoint)",
                    "TSTAT.S.A0012(OccupiedHeatingSetpoint)",
                    "TSTAT.S.A0013(UnoccupiedCoolingSetpoint)",
                    "TSTAT.S.A0013(UnoccupiedCoolingSetpoint)",
                    "TSTAT.S.A0013(UnoccupiedCoolingSetpoint)",
                    "TSTAT.S.A0014(UnoccupiedHeatingSetpoint)",
                    "TSTAT.S.A0014(UnoccupiedHeatingSetpoint)",
                    "TSTAT.S.A0014(UnoccupiedHeatingSetpoint)",
                    "TSTAT.S.A0015(MinHeatSetpointLimit)",
                    "TSTAT.S.A0015(MinHeatSetpointLimit)",
                    "TSTAT.S.A0015(MinHeatSetpointLimit)",
                    "TSTAT.S.A0016(MaxHeatSetpointLimit)",
                    "TSTAT.S.A0016(MaxHeatSetpointLimit)",
                    "TSTAT.S.A0016(MaxHeatSetpointLimit)",
                    "TSTAT.S.A0017(MinCoolSetpointLimit)",
                    "TSTAT.S.A0017(MinCoolSetpointLimit)",
                    "TSTAT.S.A0017(MinCoolSetpointLimit)",
                    "TSTAT.S.A0018(MaxCoolSetpointLimit)",
                    "TSTAT.S.A0018(MaxCoolSetpointLimit)",
                    "TSTAT.S.A0018(MaxCoolSetpointLimit)",
                    "TSTAT.S.A0015(MinHeatSetpointLimit)\nTSTAT.S.A0016(MaxHeatSetpointLimit)",
                    "TSTAT.S.A0017(MinCoolSetpointLimit)\nTSTAT.S.A0018(MaxCoolSetpointLimit)",
                    "TSTAT.S.A0019(MinSetpointDeadBand), TSTAT.S.M.MinSetpointDeadBandWritable",
                    "TSTAT.S.A0019(MinSetpointDeadBand), TSTAT.S.M.MinSetpointDeadBandWritable",
                    "TSTAT.S.A0019(MinSetpointDeadBand), TSTAT.S.M.MinSetpointDeadBandWritable",
                    "TSTAT.S.A001b(ControlSequenceOfOperation)",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & HEAT",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & HEAT",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & COOL",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & COOL",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & HEAT & COOL",
                    "TSTAT.S.C00.Rsp(SetpointRaiseLower) & HEAT & COOL"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Test Harness Client reads OccupiedCoolingSetpoint from Server DUT and verifies that the value is within range MinCoolSetpointLimit to MaxCoolSetpointLimit, writes a value back that is different but valid5, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write OccupiedCoolingSetpoint below the MinCoolSetpointLimit and above the MaxCoolSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOLowerLimit= Max(MinCoolSetpointLimit, (OccupiedHeatingSetpoint + MinSetpointDeadBand))elseLowerLimit= MinCoolSetpointLimitTest Harness Client then attempts to write OccupiedCoolingSetpoint to both of the limits ofLowerLimit& MaxCoolSetpointLimit and confirms that the device does accept the value. See also Note 5.",
                    "Test Harness Client reads OccupiedHeatingSetpoint from Server DUT and verifies that the value is within range MinHeatSetpointLimit to MaxHeatSetpointLimit, writes a value back that is different but valid5, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write OccupiedHeatingSetpoint below the MinHeatSetpointLimit and above the MaxHeatSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOUpperLimit= Min(MaxHeatSetpointLimit, (OccupiedCoolingSetpoint - MinSetpointDeadBand))elseUpperLimit= MaxHeatSetpointLimitTest Harness Client then attempts to write OccupiedHeatingSetpoint to both of the limits of  MinHeatSetpointLimit &UpperLimitand confirms that the device does accept the value. See also Note 5.",
                    "Test Harness Client reads UnoccupiedCoolingSetpoint from Server DUT and verifies that the value is within range MinCoolSetpointLimit to MaxCoolSetpointLimit, writes a value back that is different but valid6, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write UnoccupiedCoolingSetpoint below the MinCoolSetpointLimit and above the MaxCoolSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOLowerLimit= Max(MinCoolSetpointLimit, (UnoccupiedCoolingSetpoint + MinSetpointDeadBand))elseLowerLimit= MinCoolSetpointLimitTest Harness Client then attempts to write UnoccupiedCoolingSetpoint to both of the limits ofLowerLimit& MaxCoolSetpointLimit and confirms that the device does accept the value. See also Note 6.",
                    "Test Harness Client reads UnoccupiedHeatingSetpoint from Server DUT and verifies that the value is within range MinHeatSetpointLimit to MaxHeatSetpointLimit, writes a value back that is different but valid6, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write UnoccupiedHeatingSetpoint below the MinHeatSetpointLimit and above the MaxHeatSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOUpperLimit= Min(MaxHeatSetpointLimit, (UnoccupiedCoolingSetpoint - MinSetpointDeadBand))elseUpperLimit= MaxHeatSetpointLimitTest Harness Client then attempts to write UnoccupiedHeatingSetpoint to both of the limits of  MinHeatSetpointLimit &UpperLimitand confirms that the device does accept the value. See also Note 6.",
                    "Test Harness Client reads MinHeatSetpointLimit from Server DUT and verifies that the value is within range AbsMinHeatSetpointLimit to MaxHeatSetpointLimit, writes a value back that is different but valid3, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write MinHeatSetpointLimit below the AbsMinHeatSetpointLimit and above the MaxHeatSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOUpperLimit= Min(MaxHeatSetpointLimit, (MinCoolSetpointLimit - MinSetpointDeadBand))elseUpperLimit= MaxHeatSetpointLimitTest Harness Client then attempts to write MinHeatSetpointLimit to both of the limits of  AbsMinHeatSetpointLimit &UpperLimitand confirms that the device does accept the value. See also Note 3.",
                    "Test Harness Client reads MaxHeatSetpointLimit from Server DUT and verifies that the value is within range MinHeatSetpointLimit to AbsMaxHeatSetpointLimit, writes a value back that is different but valid4, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write MaxHeatSetpointLimit below the MinHeatSetpointLimit and above the AbsMaxHeatSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOUpperLimit= Min(AbsMaxHeatSetpointLimit, (MaxCoolSetpointLimit - MinSetpointDeadBand))elseUpperLimit= AbsMaxHeatSetpointLimitTest Harness Client then attempts to write MaxHeatSetpointLimit to both of the limits of  MinHeatSetpointLimit &UpperLimitand confirms that the device does accept the value. See also Note 4.",
                    "Test Harness Client reads MinCoolSetpointLimit from Server DUT and verifies that the value is within range AbsMinCoolSetpointLimit to MaxCoolSetpointLimit, writes a value back that is different but valid3, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write MinCoolSetpointLimit below the AbsMinCoolSetpointLimit and above the MaxCoolSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOLowerLimit= Max(AbsMinCoolSetpointLimit, (MinHeatSetpointLimit + MinSetpointDeadBand))elseLowerLimit= AbsMinCoolSetpointLimitTest Harness Client then attempts to write MinCoolSetpointLimit to both of the limits ofLowerLimit& MaxCoolSetpointLimit and confirms that the device does accept the value. See also Note 3.",
                    "Test Harness Client reads MaxCoolSetpointLimit from Server DUT and verifies that the value is within range MinCoolSetpointLimit to AbsMaxCoolSetpointLimit, writes a value back that is different but valid4, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write MaxCoolSetpointLimit below the MinCoolSetpointLimit and above the AbsMaxCoolSetpointLimit and confirms that the device does not accept the value.",
                    "If AUTOLowerLimit= Max(MinCoolSetpointLimit, (MaxHeatSetpointLimit + MinSetpointDeadBand))elseLowerLimit= MinCoolSetpointLimitTest Harness Client then attempts to write MaxCoolSetpointLimit to both of the limits ofLowerLimit& AbsMaxCoolSetpointLimit and confirms that the device does accept the value. See also Note 4.",
                    "Set MinHeatSetpointLimit and MaxHeatSetpointLimit back to reasonable values.\n(f.e. 700 & 3000 == 7\u00b0C & 30\u00b0C)",
                    "Set MinCoolSetpointLimit and MaxCoolSetpointLimit back to reasonable values.\n(f.e. 1600 & 3200 == 16\u00b0C & 32\u00b0C)",
                    "Test Harness Client reads MinSetpointDeadBand from Server DUT and verifies that the value is within range 0 (0\u00b0C) to 25 (2.5\u00b0C), writes a value back that is different but valid1,2,3,4,5,6, then reads it back again to confirm the successful write.",
                    "Test Harness Client then attempts to write MinSetpointDeadBand below 0 and above 25 and confirms that the device does not accept the value.",
                    "Test Harness Client then attempts to write MinSetpointDeadBand to both of the limits of 0 & 25 and confirms that the device does accept the value.  See also Note 1, 2, 3, 4, 5 and 6.",
                    "Valid values for ControlSequenceOfOperation:COOL:CoolingOnly(0),CoolingWithReheat(1)HEAT:HeatingOnly(2),HeatingWithReheat(3)COOL&HEAT:CoolingAndHeating(4),CoolingAndHeatingWithReheat(5)Test Harness Client reads ControlSequenceOfOperation from Server DUT and verifies that the value is valid. Test Harness sends a Write Attribute command for ControlSequenceOfOperation with a new valid value, and then reads it back again to confirm the successful write.",
                    "Test Harness Client sets OccupiedHeatingSetpoint to default value.Test Harness sends Server DUT a SetpointRaiseLower command with the mode field set to Heat (0x00), and the amount set to 0xE2 (-30 units = -3 degrees).Test Harness Client then reads back OccupiedHeatingSetpoint to confirm the success of the write.",
                    "Test Harness Client sets OccupiedHeatingSetpoint to default value.Test Harness sends Server DUT a SetpointRaiseLower command with the mode field set to Heat (0x00), and the amount set to 0x1E (+30 units = +3 degrees).\nTest Harness Client then reads back OccupiedHeatingSetpoint to confirm the success of the write.",
                    "Test Harness Client sets OccupiedCoolingSetpoint to default value.Test Harness Client sends Server DUT a SetpointRaiseLower command with the mode field set to Cool (0x01), and the amount set to 0xE2 (-30 units = -3 degrees).Test Harness Client then reads back OccupiedCoolingSetpoint to confirm the success of the write.",
                    "Test Harness Client sets OccupiedCoolingSetpoint to default value.Test Harness Client sends Server DUT a SetpointRaiseLower command with the mode field set to Cool (0x01), and the amount set to 0x1E (+30 units = +3 degrees).Test Harness Client then reads back OccupiedCoolingSetpoint to confirm the success of the write.",
                    "Test Harness Client sets OccupiedCoolingSetpoint and OccupiedHeatingSetpoint to default values.Test Harness Client sends Server DUT a SetpointRaiseLower command with the mode field set to both (0x02), and the amount set to 0xE2 (-30 units = -3 degrees) .Test Harness Client then reads back OccupiedCoolingSetpoint and OccupiedHeatingSetpoint to confirm the success of the write.",
                    "Test Harness Client sets OccupiedCoolingSetpoint and OccupiedHeatingSetpoint to default values.Test Harness Client sends Server DUT a SetpointRaiseLower command with the mode field set to both (0x02), and the amount set to 0x1E (+30 units = +3 degrees).Test Harness client then reads back OccupiedCoolingSetpoint and OccupiedHeatingSetpoint to confirm the success of the write."
                ],
                "Expected Outcome": [
                    "",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Write command should succeed without an error",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Write command should return the error CONSTRAINT_ERROR (0x87)",
                    "Write command should succeed without an error",
                    "Read value have to to be equal to the written value.",
                    "Read value have to to be equal to default value - 3 degrees",
                    "Read value have to to be equal to default value + 3 degrees",
                    "Read value have to to be equal to default value - 3 degrees",
                    "Read value have to to be equal to default value + 3 degrees",
                    "Both read values have to to be equal to its default value - 3 degrees",
                    "Both read values have to to be equal to its default value + 3 degrees"
                ]
            }
        },
        {
            "Test Case Name": "52.3.1. [TC-TSTAT-3.2] Functionality with client as DUT",
            "Test Case ID": "TC-TSTAT-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the Thermostat cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "TSTAT.C.C00.Tx(SetpointRaiseLower)",
                    "TSTAT.C.C00.Tx(SetpointRaiseLower)",
                    "TSTAT.C.C04.Tx(GetRelayStatusLog)"
                ],
                "Test Step": [
                    "DUT increases the temperature by sending a SetpointRaiseLower command to the Test Harness, with a valid Mode argument (0, 1 or 2) and a reasonable positive value that is supported by the DUT.",
                    "DUT lowers the temperature by sending a SetpointRaiseLower command to the Test Harness, with a valid Mode argument (0, 1 or 2) and a reasonable negative value that is supported by the DUT.",
                    "DUT sends a GetRelayStatusLog command to the Test Harness."
                ],
                "Expected Outcome": [
                    "If TSTAT.C.C00.Tx(SetpointRaiseLower), Test Harness receives the SetpointRaiseLower command from the DUT. Verify the command has two parameters:ID 0: the type is an enum8, the value has to be 0, 1 or 2.ID 1: the type is an int8, the value is between 1 and 127.",
                    "If TSTAT.C.C00.Tx(SetpointRaiseLower), Test Harness receives the SetpointRaiseLower command from the DUT. Verify the command has two parameters:ID 0: the type is an enum8, the value has to be 0, 1 or 2.ID 1: the type is an int8, the value is between -127 and -1.",
                    "If TSTAT.C.C04.Tx(GetRelayStatusLog), Test Harness receives the GetRelayStatusLog command from the DUT. The command has no parameters.The GetRelayStatusLog command may not supported in Matter 1.0."
                ]
            }
        }
    ],
    "Software_Diagnostics": [
        {
            "Test Case Name": "55.1.1. [TC-DGSW-2.1] Attributes [{DUT_Sever}]",
            "Test Case ID": "TC-DGSW-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the software diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "11.12.7.1",
                    "11.12.7.1",
                    "11.12.7.1",
                    "11.12.7.1"
                ],
                "PICS": [
                    "",
                    "DGSW.S.A0000(ThreadMetrics)",
                    "DGSW.S.A0001(CurrentHeapFree)",
                    "DGSW.S.A0002(CurrentHeapUsed)",
                    "DGSW.S.A0003(CurrentHeapHighWatermark)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads a list of ThreadMetrics struct attribute from DUT.",
                    "TH reads an attribute value from DUT.",
                    "TH reads an attribute value from DUT.",
                    "TH reads an attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "The data type in each field of the struct must match the value listed in the specification(s) Table in 11.12.6.1. ThreadMetrics Struct. The Id field of the list is mandatory and shall match with Node assigned ID unique-per-thread. Name field shall be set to vendor specific strings. StackFreeCurrent field shall indicates the current amount of stack memory, in bytes, not being utilized by the respective thread.  StackFreeMinimum field shall indicate the minimum amount of available stack memory in bytes. This value can be reset by a node reboot. StackSize field shall indicate the amount of memory allocated for use by the respective thread.",
                    "The value will indicate the current amount of unutilized heap memory in bytes.",
                    "The value will indicate the current amount of used heap memory in bytes.",
                    "The value will indicate the maximum amount of heap memory being used in bytes.  This value can be reset by a node reboot."
                ]
            }
        },
        {
            "Test Case Name": "55.1.2. [TC-DGSW-2.2] Event Functionality [{DUT_Sever}]",
            "Test Case ID": "TC-DGSW-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the event reporting functionality of the software diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "11.12.8.1"
                ],
                "PICS": [
                    "",
                    "DGSW.S.E00(SoftwareFault)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "DUT sends an event report to TH. TH reads a list of SoftwareFault struct from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "The data type in each field of the struct must match the value listed in the specification(s) Table in 11.12.8.1. SoftwareFault Struct. The Id field of the struct is mandatory and shall be set with software thread ID that last software fault occurred. Name field shall be set to vendor specific name strings that last software fault occurred. FaultRecording field shall be set by a vendor specific payload in octstr format."
                ]
            }
        },
        {
            "Test Case Name": "55.1.3. [TC-DGSW-2.3] Command Received [{DUT_Sever}]",
            "Test Case ID": "TC-DGSW-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the command functionality of the software diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d"
                ],
                "Ref": [
                    "",
                    "11.12.7.2",
                    "11.12.7.1",
                    "11.12.7.1",
                    "11.12.7.1"
                ],
                "PICS": [
                    "",
                    "DGSW.S.C00.Rsp(ResetWatermarks)",
                    "DGSW.S.A0000(ThreadMetrics)",
                    "DGSW.S.A0003(CurrentHeapHighWatermark)",
                    "DGSW.S.A0002(CurrentHeapUsed)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sends ResetWatermarks to DUT.",
                    "TH reads a list of ThreadMetrics struct attributes from DUT.",
                    "TH reads CurrentHeapHighWatermark attribute from DUT.",
                    "TH reads a CurrentHeapUsed attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Upon DUT\u2019s reception of this command, DUT will reset StackFreeMinimum of ThreadMetrics attribute to StackFreeCurrent and reset CurrentHeapHighWatermark attribute to CurrentHeapUsed attribute.",
                    "StackFreeMinimum and StackFreeCurrent attribute values of ThreadMetrics are matched.",
                    "The CurrentHeapUsed is less than or equal to the CurrentHeapHighWatermark.",
                    "The value will indicate the current amount of used heap memory in bytes."
                ]
            }
        },
        {
            "Test Case Name": "55.2.1. [TC-DGSW-3.2] Commands Generated [DUT as Client]",
            "Test Case ID": "TC-DGSW-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies a client can properly send software diagnostics commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "11.12.7.2"
                ],
                "PICS": [
                    "",
                    "DGSW.C.C00.Tx(ResetWatermarks)"
                ],
                "Test Step": [
                    "Commission TH to DUT",
                    "DUT sends ResetWatermarks to TH."
                ],
                "Expected Outcome": [
                    "",
                    "Verify TH receives command and no errors are seen."
                ]
            }
        }
    ],
    "Ethernet_Network_Diagnostics": [
        {
            "Test Case Name": "58.1.1. [TC-DGETH-2.1] Attributes [DUT as Server]",
            "Test Case ID": "TC-DGETH-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the ethernet network diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "11.15.4.1",
                    "11.15.4.2",
                    "11.15.4.3",
                    "11.15.4.4",
                    "11.15.4.5",
                    "11.15.4.6",
                    "11.15.4.7",
                    "11.15.4.8",
                    "11.15.4.9"
                ],
                "PICS": [
                    "",
                    "DGETH.S.A0000(PHYRate)",
                    "DGETH.S.A0001(FullDuplex)",
                    "DGETH.S.A0002(PacketRxCount)",
                    "DGETH.S.A0003(PacketTxCount)",
                    "DGETH.S.A0004(TxErrCount)",
                    "DGETH.S.A0005(CollisionCount)",
                    "DGETH.S.A0006(OverrunCount)",
                    "DGETH.S.A0007(CarrierDetect)",
                    "DGETH.S.A0008(TimeSinceReset)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads PHYRate attribute from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT.",
                    "TH reads a attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "The data type must match the value listed in the specification(s) Table 11.15.3.1. PHYRate ENUM. If the interface is not configured or operational, NULL should be read.",
                    "The data type must match the value listed in the specification(s) and indicates the node is utilizing the full-duplex operation mode. If the interface is not configured or operational, NULL should be read.",
                    "The data type must match the value listed in the specification(s) and the value indicates the number of packets received on ethernet network interface. Upon a node reboot, the value will be reset to 0. The attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s) and the value indicates the number of packets successfully transferred on ethernet network interface. Upon a node reboot, the value will be reset to 0. The attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s) and the value indicates the number of failed packet transmission on ethernet network interface. Upon a node reboot, the value will be reset to 0. The attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s) and the value indicates the number of collision occurred while transmitting packets on ethernet network interface. Upon a node reboot, the value will be reset to 0. The attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s) and the value indicates the number of packets dropped due to lack of buffer memory on ethernet network interface. Upon a node reboot, the value will be reset to 0. The attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s) and the value indicates the presence of carrier detect control signal on ethernet network interface. The attribute should not be subscribed. If the interface is not configured or operational, NULL should be read.",
                    "The data type must match the value listed in the specification(s) and the value indicates the duration of time, in minutes, since the ethernet network interface has been reset for any reason. The attribute should not be subscribed."
                ]
            }
        },
        {
            "Test Case Name": "58.1.2. [TC-DGETH-2.2] Command Received [DUT as Server]",
            "Test Case ID": "TC-DGETH-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the command functionality of the ethernet network diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "2h",
                    "2i",
                    "2j",
                    "2k",
                    "2l"
                ],
                "Ref": [
                    "",
                    "11.15.4.1",
                    "11.15.4.3",
                    "11.15.4.4",
                    "11.15.4.5",
                    "11.15.4.6",
                    "11.15.4.7",
                    "11.15.5",
                    "11.15.4.3",
                    "11.15.4.4",
                    "11.15.4.5",
                    "11.15.4.6",
                    "11.15.4.7"
                ],
                "PICS": [
                    "",
                    "DGETH.S.A0000(PHYRate)",
                    "DGETH.S.A0002(PacketRxCount)",
                    "DGETH.S.A0003(PacketTxCount)",
                    "DGETH.S.A0004(TxErrCount)",
                    "DGETH.S.A0005(CollisionCount)",
                    "DGETH.S.A0006(OverrunCount)",
                    "DGETH.S.C00.Rsp(ResetCount)",
                    "DGETH.S.A0002(PacketRxCount)",
                    "DGETH.S.A0003(PacketTxCount)",
                    "DGETH.S.A0004(TxErrCount)",
                    "DGETH.S.A0005(CollisionCount)",
                    "DGETH.S.A0006(OverrunCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads PHYRate attribute from DUT. Repeat this 10 times.",
                    "TH reads PacketRxCount attribute value from DUT.",
                    "TH reads PacketTxCount attribute value from DUT.",
                    "TH reads TxErrCount attribute value from DUT.",
                    "TH reads CollisionCount attribute value from DUT.",
                    "TH reads OverrunCount attribute value from DUT.",
                    "TH sends ResetCounts to DUT",
                    "TH reads PacketRxCount attribute value from DUT.",
                    "TH reads PacketTxCount attribute value from DUT.",
                    "TH reads TxErrCount attribute value from DUT.",
                    "TH reads CollisionCount attribute value from DUT.",
                    "TH reads OverrunCount attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "The purpose of this test step is to generate some controllable CASE traffic to help evaluate \"ResetCount\" command below.",
                    "Record the value for comparison.",
                    "Record the value for comparison.",
                    "Record the value for comparison.",
                    "Record the value for comparison.",
                    "Record the value for comparison.",
                    "Upon DUT\u2019s reception of this command, DUT will reset PacketRxCount, PacketTxCount, TxErrCount, CollisionCount, OverrunCount attribute values.",
                    "Check if the value read is less than the value from step 2b.",
                    "Check if the value read is less than the value from step 2c.",
                    "Check if the value read is less than or equal to the value from step 2d.",
                    "Check if the value read is less than or equal to the value from step 2e.",
                    "Check if the value read is less than or equal to the value from step 2f."
                ]
            }
        },
        {
            "Test Case Name": "58.1.3. [TC-DGETH-3.2] Command Generated DUT as Client]",
            "Test Case ID": "TC-DGETH-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies a client can properly send ethernet network diagnostics commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "11.15.5"
                ],
                "PICS": [
                    "",
                    "DGETH.C.C00.Tx(ResetCount)"
                ],
                "Test Step": [
                    "Commission TH to DUT",
                    "DUT sends ResetCounts to TH."
                ],
                "Expected Outcome": [
                    "",
                    "Verify TH receives command and no errors are seen."
                ]
            }
        }
    ],
    "Thread_Network_Diagnostics": [
        {
            "Test Case Name": "61.1.1. [TC-DGTHREAD-2.1] Attributes [DUT- Server]",
            "Test Case ID": "TC-DGTHREAD-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case reads the attributes of the Thread Network Diagnostics\nCluster and checks for the type and length",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30"
                ],
                "Ref": [
                    "",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7"
                ],
                "PICS": [
                    "",
                    "DGTHREAD.S.A0000(Channel)",
                    "DGTHREAD.S.A0001(RoutingRole)",
                    "DGTHREAD.S.A0002(NetworkName)",
                    "DGTHREAD.S.A0003(PanId)",
                    "DGTHREAD.S.A0004(ExtendedPanId)",
                    "DGTHREAD.S.A0005(MeshLocalPrefix)",
                    "DGTHREAD.S.F01(ERRCNT) &\n               DGTHREAD.S.A0006(OverrunCount)",
                    "DGTHREAD.S.A0007(NeighborTable)",
                    "DGTHREAD.S.A0008(RouteTable)",
                    "DGTHREAD.S.A0009(PartitionId)",
                    "DGTHREAD.S.A000a(Weighting)",
                    "DGTHREAD.S.A000b(DataVersion)",
                    "DGTHREAD.S.A000c(StableDataVersion)",
                    "DGTHREAD.S.A000d(LeaderRouterId)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A000e(DetachedRoleCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A000f(ChildRoleCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0010(RouterRoleCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0011(LeaderRoleCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0012(AttachAttemptCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0013(PartitionIdChangeCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0014(BetterPartitionAttachAttemptCount)",
                    "DGTHREAD.S.F02(MLECNT) &\n              DGTHREAD.S.A0015(ParentChangeCount)",
                    "DGTHREAD.S.A0038(ActiveTimestamp)",
                    "DGTHREAD.S.A0039(PendingTimestamp)",
                    "DGTHREAD.S.A003a(Delay)",
                    "DGTHREAD.S.A003b(SecurityPolicy)",
                    "DGTHREAD.S.A003c(ChannelPage0Mask)",
                    "DGTHREAD.S.A003d(OperationalDatasetComponents)",
                    "DGTHREAD.S.A003e(ActiveNetworkFaults)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads Channel attribute value from\nDUT",
                    "TH reads RoutingRole attribute\nvalue from DUT",
                    "TH reads Network Name attribute\nvalue from DUT.",
                    "TH reads PanId attribute value from DUT.",
                    "TH reads ExtendedPanId attribute\nvalue from DUT.",
                    "TH reads MeshLocalPrefix\nattribute value from DUT.",
                    "TH reads OverrunCount\nattribute value from DUT.",
                    "TH reads NeighborTable\nattribute value from DUT.",
                    "TH reads RouteTable attribute value\nfrom DUT.",
                    "TH reads PartitionId attribute\nvalue from DUT",
                    "TH reads Weighting attribute value\nfrom DUT",
                    "TH reads DataVersion attribute\nvalue from DUT",
                    "TH reads StableDataVersion\nattribute value from DUT",
                    "TH reads LeaderRouterId\nattribute value from DUT",
                    "TH reads\nDetachedRoleCount attribute value from DUT",
                    "TH reads\nChildRoleCount attribute value from DUT",
                    "TH reads\nRouterRoleCount attribute value from DUT",
                    "TH reads\nLeaderRoleCount attribute value from DUT",
                    "TH reads\nAttachAttemptCount attribute value from DUT",
                    "TH reads\nPartitionIdChangeCount attribute value from DUT",
                    "TH\nreads BetterPartitionAttachAttemptCount attribute value from DUT",
                    "TH reads\nParentChangeCount attribute value from DUT",
                    "TH reads ActiveTimestamp\nattribute value from DUT",
                    "TH reads PendingTimestamp\nattribute value from DUT",
                    "TH reads Delay attribute value from DUT",
                    "TH reads SecurityPolicy\nattribute value from DUT",
                    "TH reads ChannelPage0Mask\nattribute value from DUT",
                    "TH reads\nOperationalDatasetComponents attribute from DUT",
                    "TH reads\nActiveNetworkFaults attribute value from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "1. Verify that Channel is of the type uint162 Verify that the Channel attribute indicates the 802.15.4 channel\nnumber configured on the Thread interface",
                    "Verify that RoutingRole value is between 0 to 6Verify for the DUT type based on the values below:0 - Unspecified routing role1 - Unassigned - Thread Interface is not operational2 - SleepyEndDevice with RX-off-when-idle sleepy radio behavior3 - EndDevice without RX-off-when-idle sleepy radio behavior4 - RouterEligibleEndDevice5 - Router Device6 - Leader Device",
                    "Verify that Network name is of the type stringVerify that maximum size of Network name is 16 bytesIf value is NULL then verify that RoutingRole is set to 1",
                    "Verify that PanId is of the type uint16If value is NULL then verify that RoutingRole is set to 1",
                    "Verify that ExtendedPanId is of the type uint64If value is NULL then verify that RoutingRole is set to 1",
                    "Verify that the MeshLocalPrefix follows the standard specified in\nsection 7.18.2.30 IPv6 PrefixIf value is NULL then verify that RoutingRole is set to 1",
                    "Verify that OverrunCount is of the type uint64If the OverrunCount is greater than zero,  Verify that Feature ErrorCounts is\ngreater than zero",
                    "Verify that the NeighborTable List size is Zero or greaterVerify that the list follows the behavior as per section 11.13.7.8Read the NeighborTable entries and for each entry (node) verify the\nfollowing attributes:ExtAddress is of the type uint64Age is of the type uint32.Verify that the Age field specify the duration of time in secondsRloc16 is of the type uint16LinkFrameCounter is of the type uint32MleFrameCounter is of the type uint32LQI is of the type uint8 and value is between 0 to 255AverageRssi is of the type int8 and value is between -128 to 0AverageRssi field has the units of dBmLastRssi is of the type int8 and value is between -128 to 0LastRssi field has the units of dBmFrameErrorRate is of the type uint8 and value is between 0 to 100MessageErrorRate is of the type uint8 and value is between 0 to 100RxOnWhenIdle is of the type boolFullThreadDevice is of the type boolFullNetworkData is of the type boolIsChild is of the type bool",
                    "1.Verify that the RouteTable List size is Zero or greater2. Verify that the list follows the behavior as per section\n11.13.7.93.Read the RouteTable entries and for each entry (node) verify the\nfollowing attributes:ExtAddress is of the type uint64Rloc16 is of the type uint16RouterId is of the type uint8NextHop is of the type uint8PathCost is of the type uint8LQIIn is of the type uint8 and value is between 0 to 255 M VLQIOut is of the type uint8 and value is between 0 to 255 M VAge is of the type uint8Allocated is of the type boolLinkEstablished is of the type bool",
                    "1.Verify that PartitionId is of the type uint32",
                    "1.Verify that Weighting is of the type uint8",
                    "1.Verify that DataVersion is of the type uint8",
                    "1.Verify that StableDataVersion is of the type\nuint8",
                    "1.Verify that LeaderRouterId is of the type\nuint8",
                    "1. Verify that DetachedRoleCount is of the type uint16",
                    "1.Verify that ChildRoleCount is of the type uint16",
                    "1.Verify that RouterRoleCount is of the type uint16",
                    "1.Verify that LeaderRoleCount is of the type uint16",
                    "1.Verify that AttachAttemptCount is of the type uint16",
                    "1.Verify that PartitionIdChangeCount is of the type uint16",
                    "1.Verify that BetterPartitionAttachAttemptCount is of the type uint16",
                    "1.Verify that ParentChangeCount is of the type uint16",
                    "1.Verify that ActiveTimestamp is of the type uint64",
                    "1.Verify that PendingTimestamp is of the type uint64",
                    "1.Verify that Delay is of the type uint32",
                    "Verify that the SecurityPolicy attribute has the following fields:RotationTime is of the type uint16Flags is of the type uint16",
                    "Verify that ChannelPage0Mask is of the type octstr",
                    "Verify that the OperationalDatasetComponents attribute has the following fields:ActiveTimestampPresent is of the type boolPendingTimestampPresent is of the type boolMasterKeyPresent is of the type boolNetworkNamePresent is of the type boolExtendedPanIdPresent is of the type boolMeshLocalPrefixPresent is of the type boolDelayPresent is of the type boolPanIdPresent is of the type boolChannelPresent is of the type boolPskcPresent is of the type boolSecurityPolicyPresent is of the type boolChannelMaskPresent is of the type bool",
                    "1.Verify for the following checks: ActiveNetworkFaults List size is Zero\nor greater2. The list can have maximum of four entries3.The list entries are of type NetworkFault ENUM0- Unspecified1- LinkDown2- HardwareFailure3- NetworkJammed4.The list entries have single instance occurrence"
                ]
            }
        },
        {
            "Test Case Name": "61.1.2. [TC-DGTHREAD-2.2] Attributes-Tx [DUT- Server]",
            "Test Case ID": "TC-DGTHREAD-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case reads the attributes of the Thread Network Diagnostics\nCluster and checks for the type and length",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7"
                ],
                "PICS": [
                    "",
                    "DGTHREAD.S.A0016(TxTotalCount)",
                    "DGTHREAD.S.A0017(TxUnicastCount)",
                    "DGTHREAD.S.A0018(TxBroadcastCount)",
                    "DGTHREAD.S.A0019(TxAckRequestedCount)",
                    "DGTHREAD.S.A001a(TxAckedCount)",
                    "DGTHREAD.S.A001b(TxNoAckRequestedCount)",
                    "DGTHREAD.S.A001c(TxDataCount)",
                    "DGTHREAD.S.A001d(TxDataPollCount)",
                    "DGTHREAD.S.A001e(TxBeaconCount)",
                    "DGTHREAD.S.A001f(TxBeaconRequestCount)",
                    "DGTHREAD.S.A0020(TxOtherCount)",
                    "DGTHREAD.S.A0021(TxRetryCount)",
                    "DGTHREAD.S.A0022(TxDirectMaxRetryExpiryCount)",
                    "DGTHREAD.S.A0023(TxIndirectMaxRetryExpiryCount)",
                    "DGTHREAD.S.A0024(TxErrCcaCount)",
                    "DGTHREAD.S.A0025(TxErrAbortCount)",
                    "DGTHREAD.S.A0026(TxErrBusyChannelCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads TxTotalCount\nattribute value from DUT",
                    "TH reads\nTxUnicastCount attribute value from DUT",
                    "TH reads\nTxBroadcastCount attribute value from DUT",
                    "TH reads\nTxAckRequestedCount attribute value from DUT",
                    "TH reads TxAckedCount\nattribute value from DUT",
                    "TH reads\nTxNoAckRequestedCount attribute value from DUT",
                    "TH reads TxDataCount\nattribute value from DUT",
                    "TH reads\nTxDataPollCount attribute value from DUT",
                    "TH reads TxBeaconCount\nattribute value from DUT",
                    "TH reads\nTxBeaconRequestCount attribute value from DUT",
                    "TH reads TxOtherCount\nattribute value from DUT",
                    "TH reads TxRetryCount\nattribute value from DUT",
                    "TH reads\nTxDirectMaxRetryExpiryCount attribute value from DUT",
                    "TH\nreads TxIndirectMaxRetryExpiryCount attribute value from DUT",
                    "TH reads TxErrCcaCount\nattribute value from DUT",
                    "TH reads\nTxErrAbortCount attribute value from DUT",
                    "TH reads\nTxErrBusyChannelCount attribute value from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "1.Verify that TxTotalCount is of the type uint32",
                    "1.Verify that TxUnicastCount is of the type uint32",
                    "1.Verify that TxBroadcastCount is of the type uint32",
                    "1.Verify that TxAckRequestedCount is of the type uint32",
                    "1.Verify that TxAckedCount is of the type uint32",
                    "1.Verify that TxNoAckRequestedCount is of the type uint32",
                    "1.Verify that TxDataCount is of the type uint32",
                    "1.Verify that TxDataPollCount is of the type uint32",
                    "1.Verify that TxBeaconCount is of the type uint32",
                    "1.Verify that TxBeaconRequestCount is of the type uint32",
                    "1.Verify that TxOtherCount is of the type uint32",
                    "1.Verify that TxRetryCount is of the type uint32",
                    "1.Verify that TxDirectMaxRetryExpiryCount is of the type uint32",
                    "1.Verify that TxIndirectMaxRetryExpiryCount is of the type uint32",
                    "1.Verify that TxErrCcaCount is of the type uint32",
                    "1.Verify that TxErrAbortCount is of the type uint32",
                    "1.Verify that TxErrBusyChannelCount is of the type uint32"
                ]
            }
        },
        {
            "Test Case Name": "61.1.3. [TC-DGTHREAD-2.3] Attributes-Rx [DUT- Server]",
            "Test Case ID": "TC-DGTHREAD-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case reads the attributes of the Thread Network Diagnostics\nCluster and checks for the type and length",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7",
                    "11.13.7"
                ],
                "PICS": [
                    "",
                    "DGTHREAD.S.A0027(RxTotalCount)",
                    "DGTHREAD.S.A0028(RxUnicastCount)",
                    "DGTHREAD.S.A0029(RxBroadcastCount)",
                    "DGTHREAD.S.A002a(RxDataCount)",
                    "DGTHREAD.S.A002b(RxDataPollCount)",
                    "DGTHREAD.S.A002c(RxBeaconCount)",
                    "DGTHREAD.S.A002d(RxBeaconRequestCount)",
                    "DGTHREAD.S.A002e(RxOtherCount)",
                    "DGTHREAD.S.A002f(RxAddressFilteredCount)",
                    "DGTHREAD.S.A0030(RxDestAddrFilteredCount)",
                    "DGTHREAD.S.A0031(RxDuplicatedCount)",
                    "DGTHREAD.S.A0032(RxErrNoFrameCount)",
                    "DGTHREAD.S.A0033(RxErrUnknownNeighborCount)",
                    "DGTHREAD.S.A0034(RxErrInvalidSrcAddrCount)",
                    "DGTHREAD.S.A0035(RxErrSecCount)",
                    "DGTHREAD.S.A0036(RxErrFcsCount)",
                    "DGTHREAD.S.A0037(RxErrOtherCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads RxTotalCount\nattribute value from DUT",
                    "TH reads\nRxUnicastCount attribute value from DUT",
                    "TH reads\nRxBroadcastCount attribute value from DUT",
                    "TH reads RxDataCount\nattribute value from DUT",
                    "TH reads\nRxDataPollCount attribute value from DUT",
                    "TH reads RxBeaconCount\nattribute value from DUT",
                    "TH reads\nRxBeaconRequestCount attribute value from DUT",
                    "TH reads RxOtherCount\nattribute value from DUT",
                    "TH reads\nRxAddressFilteredCount attribute value from DUT",
                    "TH reads\nRxDestAddrFilteredCount attribute value from DUT",
                    "TH reads\nRxDuplicatedCount attribute value from DUT",
                    "TH reads\nRxErrNoFrameCount attribute value from DUT",
                    "TH reads\nRxErrUnknownNeighborCount attribute value from DUT",
                    "TH reads\nRxErrInvalidSrcAddrCount attribute value from DUT",
                    "TH reads RxErrSecCount\nattribute value from DUT",
                    "TH reads RxErrFcsCount\nattribute value from DUT",
                    "TH reads\nRxErrOtherCount attribute value from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "1.Verify that RxTotalCount is of the type uint32",
                    "1.Verify that RxUnicastCount is of the type uint32",
                    "1.Verify that RxBroadcastCount is of the type uint32",
                    "1.Verify that RxDataCount is of the type uint32",
                    "1.Verify that RxDataPollCount is of the type uint32",
                    "1.Verify that RxBeaconCount is of the type uint32",
                    "1.Verify that RxBeaconRequestCount is of the type uint32",
                    "1.Verify that RxOtherCount is of the type uint32",
                    "1.Verify that RxAddressFilteredCount is of the type uint32",
                    "1.Verify that RxDestAddrFilteredCount is of the type uint32",
                    "1.Verify that RxDuplicatedCount is of the type uint32",
                    "1.Verify that RxErrNoFrameCount is of the type uint32",
                    "1.Verify that RxErrUnknownNeighborCount is of the type uint32",
                    "1.Verify that RxErrInvalidSrcAddrCount is of the type uint32",
                    "1.Verify that RxErrSecCount is of the type uint32",
                    "1.Verify that RxErrFcsCount is of the type uint32",
                    "1.Verify that RxErrOtherCount is of the type uint32"
                ]
            }
        },
        {
            "Test Case Name": "61.1.4. [TC-DGTHREAD-2.4] ResetCounts Command[DUT- Server]",
            "Test Case ID": "TC-DGTHREAD-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "DUT resets the overrun count to zero on receiving ResetCounts Command\nfrom TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "11.13.8.1",
                    "11.13.7.7"
                ],
                "PICS": [
                    "",
                    "DGTHREAD.S.C00.Rsp(ResetCounts)",
                    "DGTHREAD.S.A0006(OverrunCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sends ResetCounts Command to DUT",
                    "TH reads OverrunCount  attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "1. DUT resets OverrunCount attribute to Zero2. DUT sends a success response (0x00) to TH",
                    "1.Verify that the OverrunCount is set to Zero"
                ]
            }
        },
        {
            "Test Case Name": "61.1.5. [TC-DGTHREAD-2.5] Thread Network Diagnostics Cluster Events[DUT-Server] - REMOVED",
            "Test Case ID": "TC-DGTHREAD-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that all the events are implemented.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.1, 11.13.5.1",
                    "11.13.8.2."
                ],
                "PICS": [
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E01(NetworkFaultChange)",
                    "DGTHREAD.S.E00(ConnectionStatus)"
                ],
                "Test Step": [
                    "Induce a DUT by an Unspecified failure",
                    "Induce a DUT by LinkDown failure",
                    "Induce a DUT by HardwareFailure",
                    "Induce a DUT by NetworkJammed Failure",
                    "Induce a DUT by an Unspecified failure",
                    "Induce a DUT by LinkDown failure",
                    "Induce a DUT by HardwareFailure",
                    "Induce a DUT by NetworkJammed Failure",
                    "Disconnect and reconnect a node to a Thread network"
                ],
                "Expected Outcome": [
                    "TH receives NetworkFaultChange event with Current data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event with Current data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event with Current data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event with Current data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event before the occurrence of the event by Previous data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event before the occurrence of the event by Previous data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event before the occurrence of the event by Previous data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives NetworkFaultChange event before the occurrence of the event by Previous data specified by anyone of the following values:0 - Unspecified1 - LinkDown2 - HardwareFailure3 - NetworkJammedVerify that NetworkFaultChange event has priority set as INFO",
                    "TH receives ConnectionStatus value specified below:0 - Connected1 - Not ConnectedVerify that ConnectionStatus event has priority set as INFO"
                ]
            }
        },
        {
            "Test Case Name": "61.2.1. [TC-DGTHREAD-3.4] ResetCounts Command[DUT-Client]",
            "Test Case ID": "TC-DGTHREAD-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "TH resets the overrun count to zero on receiving ResetCounts Command\nfrom DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "11.13.8.1",
                    "11.13.6.1"
                ],
                "PICS": [
                    "",
                    "DGTHREAD.C.C00.Tx(ResetCounts)",
                    "DGTHREAD.C.A0006(OverrunCount)"
                ],
                "Test Step": [
                    "Commission TH to DUT",
                    "DUT sends ResetCounts Command to TH",
                    "DUT reads OverrunCount attribute from TH"
                ],
                "Expected Outcome": [
                    "",
                    "If DGTHREAD.C.C00.Tx(ResetCounts), Test Harness receives the ResetCounts Command from the DUT",
                    "1.Verify that DUT reads OverrunCount from the TH successfully"
                ]
            }
        }
    ],
    "Wi-Fi_Network_Diagnostics": [
        {
            "Test Case Name": "64.1.1. [TC-DGWIFI-2.1] Attributes [DUT as Server]",
            "Test Case ID": "TC-DGWIFI-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the attributes of the Wi-Fi diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "11.14.4.1",
                    "11.14.4.2",
                    "11.14.4.3",
                    "11.14.4.4",
                    "11.14.4.5",
                    "11.14.4.6",
                    "11.14.4.7",
                    "11.14.4.8",
                    "11.14.4.9",
                    "11.14.4.10",
                    "11.14.4.11",
                    "11.14.4.12",
                    "11.14.4.13"
                ],
                "PICS": [
                    "",
                    "DGWIFI.S.A0000(BSSID)",
                    "DGWIFI.S.A0001(SecurityType)",
                    "DGWIFI.S.A0002(WiFiVersion)",
                    "DGWIFI.S.A0003(ChannelNumber)",
                    "DGWIFI.S.A0004(RSSI)",
                    "DGWIFI.S.A0005(BeaconLostCount)",
                    "DGWIFI.S.A0006(BeaconRxCount)",
                    "DGWIFI.S.A0007(PacketMulticastRxCount)",
                    "DGWIFI.S.A0008(PacketMulticastTxCount)",
                    "DGWIFI.S.A0009(PacketUnicastRxCount)",
                    "DGWIFI.S.A000a(PacketUnicastTxCount)",
                    "DGWIFI.S.A000b(CurrentMaxRate)",
                    "DGWIFI.S.A000c(OverrunCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads BSSID attribute from DUT.",
                    "TH reads a SecurityType attribute value from DUT.",
                    "TH reads a WiFiVersion attribute value from DUT.",
                    "TH reads a ChannelNumber attribute value from DUT.",
                    "TH reads a RSSI attribute value from DUT.",
                    "TH reads a BeaconLostCount attribute value from DUT.",
                    "TH reads a BeaconRxCount attribute value from DUT.",
                    "TH reads a PacketMultiRxCount attribute value from DUT.",
                    "TH reads a PacketMultiTxCount attribute value from DUT.",
                    "TH reads a PacketUniRxCount attribute value from DUT.",
                    "TH reads a PacketUniTxCount attribute value from DUT.",
                    "TH reads a CurrentMaxRate attribute value from DUT.",
                    "TH reads a OverrunCount attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "The value read indicates the BSSID for which the Wi-Fi network the Node is currently connected. If the interface not configured or operational, a NULL value should be returned",
                    "The data type must match the value listed in the specification(s) SecurityType ENUM table. If not operational nor configured, NULL value should be returned.",
                    "The data type must match the value listed in the specification(s) WiFiVersion ENUM table.",
                    "The data type must match the value listed in the specification(s). If not operational nor configured, NULL value should be returned.",
                    "The attribute value is in dB. The data type must match the value listed in the specification(s). If not operational nor configured, NULL value should be returned. This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute should not be subscribed.",
                    "The data type must match the value listed in the specification(s). This attribute value is bytes-per-second.",
                    "The data type must match the value listed in the specification(s). This attribute value resets to 0 after node reboot. This attribute should not be subscribed."
                ]
            }
        },
        {
            "Test Case Name": "64.1.2. [TC-DGWIFI-2.2] Event Functionality [DUT as Server]",
            "Test Case ID": "TC-DGWIFI-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the event functionality of the Wi-Fi diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "11.14.6.1",
                    "11.14.6.2",
                    "11.14.6.3"
                ],
                "PICS": [
                    "",
                    "DGWIFI.S.E00(Disconnection)",
                    "DGWIFI.S.E01(AssociationFailure)",
                    "DGWIFI.S.E02(ConnectionStatus)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Disconnect node Wi-Fi as a result of de-authentication or dis-association.",
                    "Disconnect node Wi-Fi as a result of de-authentication or dis-association. DUT exhausts all internal retries.",
                    "Disconnect and reconnect node Wi-Fi."
                ],
                "Expected Outcome": [
                    "",
                    "TH receives Disconnection event enum align with Table 9-49 of IEEE 802.11-2020.",
                    "TH receives AssociationFailure cause and status field values whose values should be matched from 11.14.6.2 AssociationFailureCause ENUM table and Table 9-50 Status codes of IEEE 802.11-2020.",
                    "TH receives ConnectionStatus value specified at ConnectionStatus ENUM table."
                ]
            }
        },
        {
            "Test Case Name": "64.1.3. [TC-DGWIFI-2.3] Command Received [DUT as Server]",
            "Test Case ID": "TC-DGWIFI-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the command functionality of the Wi-Fi diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f"
                ],
                "Ref": [
                    "",
                    "11.14.5.1",
                    "11.14.4.6",
                    "11.14.4.7",
                    "11.14.4.8",
                    "11.14.4.9",
                    "11.14.4.10",
                    "11.14.4.11"
                ],
                "PICS": [
                    "",
                    "DGWIFI.S.C00.Rsp(ResetCounts)",
                    "DGWIFI.S.A0005(BeaconLostCount)",
                    "DGWIFI.S.A0006(BeaconRxCount)",
                    "DGWIFI.S.A0007(PacketMulticastRxCount)",
                    "DGWIFI.S.A0008(PacketMulticastTxCount)",
                    "DGWIFI.S.A0009(PacketUnicastRxCount)",
                    "DGWIFI.S.A000a(PacketUnicastTxCount)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sends ResetCounts command to DUT",
                    "TH reads a BeaconLostCount attribute value from DUT.",
                    "TH reads a BeaconRxCount attribute value from DUT.",
                    "TH reads a PacketMultiRxCount attribute value from DUT.",
                    "TH reads a PacketMultiTxCount attribute value from DUT.",
                    "TH reads a PacketUniRxCount attribute value from DUT.",
                    "TH reads a PacketUniTxCount attribute value from DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Upon DUT\u2019s reception of this command, DUT will reset BeaconLostCount, BeaconRxCount, PacketMulticastRxCount, PacketMulticastTxCount, PacketUnicastRxCount, PacketUnicastTxCount.",
                    "The value read may not be necessarily 0.",
                    "The value read may not be necessarily 0.",
                    "The value read may not be necessarily 0.",
                    "The value read may not be necessarily 0.",
                    "The value read may not be necessarily 0.",
                    "The value read may not be necessarily 0."
                ]
            }
        },
        {
            "Test Case Name": "64.2.1. [TC-DGWIFI-3.2] Command Generated [DUT as Client]",
            "Test Case ID": "TC-DGWIFI-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies a client can properly send Wi-Fi diagnostics commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "11.14.5.1"
                ],
                "PICS": [
                    "",
                    "DGWIFI.C.C00.Tx(ResetCounts)"
                ],
                "Test Step": [
                    "Commission TH to DUT",
                    "DUT sends ResetCounts command to TH."
                ],
                "Expected Outcome": [
                    "",
                    "Verify TH receives command and no errors are reported."
                ]
            }
        }
    ],
    "Diagnostic_Logs": [
        {
            "Test Case Name": "67.1.1. [TC-DLOG-2.1] Diagnostic Logs Cluster Commands Checks with BDX DUT as Server",
            "Test Case ID": "TC-DLOG-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that upon receiving the RetrieveLogsRequest command from the\nclient, DUT responds with RetrieveLogsResponse command with correct\nfield values.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "11.10.5",
                    "",
                    "",
                    "11.10.4.1",
                    "11.10.5",
                    "11.21.5",
                    "11.10.5",
                    "11.10.5",
                    "11.10.5",
                    "11.10.5",
                    "11.10.5",
                    "11.10.5",
                    "11.10.5"
                ],
                "PICS": [
                    "",
                    "MCORE.BDX.Initiator",
                    "MCORE.BDX.Initiator",
                    "MCORE.BDX.Initiator",
                    "",
                    "MCORE.BDX.Initiator",
                    "MCORE.BDX.Initiator",
                    "MCORE.BDX.Initiator",
                    "MCORE.BDX.Initiator",
                    "!MCORE.BDX.Initiator",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sends RetrieveLogsRequest Command to DUT with\n                                                RequestedProtocol argument as BDX :\n                                                RetrieveLogsRequest (Intent = EndUserSupport,\n                                                RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_OK_FULL_LENGTH)",
                    "if (SendInitMsgfromDUT= true) TH Sends\n                                                  BDX SendAccept message to DUT",
                    "if (SendInitMsgfromDUT= false) TH does not send\n                                                  BDX SendAccept message to DUT",
                    "Repeat Steps from 2 to 4 by\nsetting Intent field toNetworkDiagCrashLogs",
                    "TH sends RetrieveLogsRequest Command to DUT with\n                                                RequestedProtocol argument as BDX :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,\n                                                RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_OK_NORMAL)",
                    "if (SendInitMsgfromDUT= true)\n                                                TH Sends StatusReport(GeneralCode: FAILURE,\n                                                ProtocolId: BDX,\n                                                ProtocolCode:TH_LOG_ERROR_TRANSFER_METHOD_NOT_SUPPORTED)\n                                                to DUT",
                    "TH sends RetrieveLogsRequest Command\n                                                RequestedProtocol as ResponsePayload :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,RequestedProtocol\n                                                = ResponsePayload)Repeat this step by setting Intent field to\n                                                   . NetworkDiag\n                                                   . CrashLogs",
                    "TH sends RetrieveLogsRequest Command to DUT\n                                                without TransferFileDesignator argument :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,\n                                                RequestedProtocol= BDX)",
                    "TH sends RetrieveLogsRequest Command to DUT\n                                                that does not support BDX :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,\n                                                RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_OK_NORMAL)",
                    "TH sends RetrieveLogsRequest Command to DUT with\n                                                Invalid Intent :\n                                                RetrieveLogsRequest(Intent = 3,RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_OK_NORMAL)Repeat this step with RequestedProtocol as ResponsePayload",
                    "TH sends RetrieveLogsRequest Command to DUT with\n                                                Invalid RequestedProtocol :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,RequestedProtocol= 2,\n                                                TransferFileDesignator =TH_LOG_OK_NORMAL)",
                    "TH sends RetrieveLogsRequest Command with\n                                                Invalid TransferFileDesignator length :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_ERROR_EMPTY)",
                    "TH sends RetrieveLogsRequest Command to DUT with\n                                                Invalid TransferFileDesignator length :\n                                                RetrieveLogsRequest(Intent = EndUserSupport,RequestedProtocol= BDX,\n                                                TransferFileDesignator =TH_LOG_BAD_LENGTH)"
                ],
                "Expected Outcome": [
                    "",
                    "If DUT sends SendInit message to TH then verify thatFile Designator field of the message set to the value of the TransferFileDesignator field of the\nRetrieveLogsRequest command sent from THSetSendInitMsgfromDUT= trueelse  SetSendInitMsgfromDUT= falseNote: `SendInitMsgfromDUT` is a variable for future use",
                    "Verify that DUT responds by sending RetrieveLogsResponse Command with Success(0) status code to THLogContent field is emptyVerify that the file transferred via BDX has a size > 1024 bytesif {PICS_MCORE_DLOG_S_UTCTIMESTAMP} then verify that UTCTimeStamp is included in the\nRetrieveLogsResponse commandif {PICS_MCORE_DLOG_S_TIMESINCEBOOT} then verify that TimeSinceBoot is included in the\nRetrieveLogsResponse command",
                    "Verify that either DUT responds by sending RetrieveLogsResponse Command with Exhausted(1) status code to TH\nand LogContent field of RetrieveLogsResponse contains at most 1024 bytesor DUT responds by sending RetrieveLogsResponse Command with NoLogs(2) status code to TH and\nLogContent field is empty",
                    "",
                    "If DUT initiates a BDX Transfer SetSendInitMsgfromDUT= trueelse SetSendInitMsgfromDUT= false",
                    "Verify that DUT sends RetrieveLogsResponse command with a Status field set to Denied(4)",
                    "Verify that the BDX transfer is not initiated from DUTVerify that DUT sends RetrieveLogsResponse command to THif DUT responds with Success(0) status code for the RetrieveLogsResponse command\nVerify that LogContent field contains at most 1024 byteselse if DUT responds with NoLogs(2) status code verify that LogContent field is empty",
                    "Verify that DUT responds with INVALID_COMMAND",
                    "Verify that DUT sends RetrieveLogsResponse command to THif DUT responds with Exhausted(1) status code for the RetrieveLogsResponse command\nVerify that LogContent field contains at most 1024 byteselse if DUT responds with NoLogs(2) status code verify that LogContent field is empty",
                    "Verify that DUT responds with INVALID_COMMAND",
                    "Verify that DUT responds with INVALID_COMMAND",
                    "Verify that DUT responds with CONSTRAINT_ERROR",
                    "Verify that DUT responds with CONSTRAINT_ERROR"
                ]
            }
        }
    ],
    "Identify": [
        {
            "Test Case Name": "70.1.1. [TC-I-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-I-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Identify Cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads theIdentifyTime attributefrom the DUT.",
                    "TH reads theIdentifyType attributefrom the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds with a uint16 value.",
                    "Verify that the DUT responds with an enum8 value.\n                                                                The value has to be in the range of 0x00 to 0x05."
                ]
            }
        },
        {
            "Test Case Name": "70.1.2. [TC-I-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-I-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Identify cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "I.S.A0001(IdentifyType)",
                    "I.S.C00.Rsp(Identify)",
                    "I.S.A0000(IdentifyTime)",
                    "I.S.A0000(IdentifyTime)",
                    "I.S.C00.Rsp(Identify)",
                    "I.S.A0000(IdentifyTime)",
                    "I.S.A0000(IdentifyTime)",
                    "I.S.A0000(IdentifyTime)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads theIdentifyType attributefrom the DUT.",
                    "TH sendsIdentify commandto DUT, with the identify time field set to 0x003c (60s).",
                    "TH reads immediatelyIdentifyTime attributefrom DUT.",
                    "After 10 seconds, the TH readsIdentifyTime attributefrom DUT.",
                    "Before 60 seconds expire, TH sendsIdentify commandto DUT, with the identify time field set to 0x0000 (stop identifying).",
                    "TH reads immediatelyIdentifyTime attributefrom DUT.",
                    "TH writes a value of 0x000f (15s) toIdentifyTime attributeof DUT.",
                    "After 15 seconds, the TH readsIdentifyTime attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "If the value is set to 0x00 which corresponds to None, verify that the device is not capable of presenting its identification state using one of the other methods like LightOutput, VisibleIndicator, AudibleBeep, Display or Actuator. Save this field for use in Step 2a and 6a.",
                    "Verify that the device enters its identification state using the IdentifyType from Step 1b, in order to indicate to an observer which of several nodes and/or endpoints it is.",
                    "IdentifyTime attributehas a value approximately equal to 0x003c.",
                    "IdentifyTime attributehas a value approximately equal to 0x0032. Verify that the device continues to identify itself.",
                    "Verify that the device terminates its identification state.",
                    "IdentifyTime attributehas a value  0x0000.",
                    "Verify that the device enters its identification state using the IdentifyType from Step 1b, in order to indicate to an observer which of several nodes and/or endpoints it is.",
                    "IdentifyTime attributehas a value approximately equal to 0x0000. Verify that the device terminates its identification state."
                ]
            }
        },
        {
            "Test Case Name": "70.1.3. [TC-I-2.3] Secondary Functionality with Server as DUT",
            "Test Case ID": "TC-I-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality of the Identify cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "2h",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)",
                    "I.S.C40.Rsp(TriggerEffect)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x00 (blink) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x01 (breathe) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x02 (okay) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x0b (channel change) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x01 (breathe) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0xfe (finish effect) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x01 (breathe) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0xff (stop effect) and the effect variant field set to 0x00 (default).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0x00 (blink) and the effect variant field set to 0x42 (unknown).",
                    "TH sendsTriggerEffect commandto DUT, with the effect identifier field set to 0xff (stop effect) and the effect variant field set to 0x00 (default)."
                ],
                "Expected Outcome": [
                    "",
                    "DUT executes a blink effect.",
                    "DUT executes a breathe effect.",
                    "DUT executes an okay effect.",
                    "DUT executes a channel change effect.",
                    "DUT executes a breathe effect.",
                    "DUT stops the breathe effect after the current effect sequence.",
                    "DUT executes a breathe effect.",
                    "DUT stops the breathe effect as soon as possible.",
                    "DUT executes a blink effect.",
                    "DUT stops any effect that may be still running as soon as possible."
                ]
            }
        },
        {
            "Test Case Name": "70.2.1. [TC-I-3.2] Functionality with Client as DUT",
            "Test Case ID": "TC-I-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the Identify cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "I.C.C00.Tx(Identify)",
                    "I.C.C00.Tx(Identify)",
                    "I.C.C40.Tx(TriggerEffect)"
                ],
                "Test Step": [
                    "DUT issues anIdentify commandto the Test Harness, with the IdentifyTime argument set to 0x003C (60 seconds) or a reasonable time that is supported by the DUT.",
                    "DUT issues anIdentify commandto the Test Harness, with the IdentifyTime argument set to 0x0000 (Stop).",
                    "DUT sends aTriggerEffect commandto the Test Harness, with any supported EffectIdentifier argument and EffectVariant set to 0."
                ],
                "Expected Outcome": [
                    "Test Harness receives theIdentify commandfrom the DUT. It has one parameter (ID 0) of type uint16 with a value != 0.",
                    "Test Harness receives theIdentify commandfrom the DUT. It has one parameter (ID 0) of type uint16 with a value == 0.",
                    "If I.C.C40.Tx(TriggerEffect), Test Harness receives theTriggerEffect commandfrom the DUT. Verify the command has two parameters:ID 0: the type is an enum8, the value has to be 0x00, 0x01, 0x02, 0x0b 0xfe or 0xff.ID 1: the type is an enum8, the value has to be 0x00."
                ]
            }
        }
    ],
    "Power_Source": [
        {
            "Test Case Name": "73.1.1. [TC-PS-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-PS-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Power Source Cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "PS.S.A0000(Status)",
                    "PS.S.A0001(Order)",
                    "PS.S.A0002(Description)",
                    "PS.S.A0003(WiredAssessedInputVoltage)",
                    "PS.S.A0004(WiredAssessedInputFrequency)",
                    "PS.S.A0005(WiredCurrentType)",
                    "PS.S.A0006(WiredAssessedCurrent)",
                    "PS.S.A0007(WiredNominalVoltage)",
                    "{PICS_SA_WIREDMAXIMUMCURRENT",
                    "PS.S.A0009(WiredPresent)",
                    "PS.S.A000a(ActiveWiredFaults)",
                    "PS.S.A000b(BatVoltage)",
                    "PS.S.A000c(BatPercentRemaining)",
                    "PS.S.A000d(BatTimeRemaining)",
                    "PS.S.A000e(BatChargeLevel)",
                    "PS.S.A000f(BatReplacementNeeded)",
                    "PS.S.A0010(BatReplaceability)",
                    "PS.S.A0011(BatPresent)",
                    "PS.S.A0012(ActiveBatFaults)",
                    "PS.S.A0013(BatReplacementDescription)",
                    "PS.S.A0014(BatCommonDesignation)",
                    "PS.S.A0015(BatANSIDesignation)",
                    "PS.S.A0016(BatIECDesignation)",
                    "PS.S.A0017(BatApprovedChemistry)",
                    "PS.S.A0018(BatCapacity)",
                    "PS.S.A0019(BatQuantity)",
                    "PS.S.A001a(BatChargeState)",
                    "PS.S.A001b(BatTimeToFullCharge)",
                    "{PICS_SA_BATFUNCTIONALWHILECHARGING",
                    "PS.S.A001d(BatChargingCurrent)",
                    "PS.S.A001e(ActiveBatChargeFaults)",
                    "PS.S.A001f(EndpointList)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Test Harness Client reads Status from server DUT",
                    "Test Harness Client reads Order from server DUT",
                    "Test Harness Client reads Description from server DUT",
                    "Test Harness Client reads WiredAssessedInputVoltage from server DUT",
                    "Test Harness Client reads WiredAssessedInputFrequencyfrom server DUT",
                    "Test Harness Client reads WiredCurrentType from server DUT",
                    "Test Harness Client reads WiredAssessedCurrent from server DUT",
                    "Test Harness Client reads WiredNominalVoltage from server DUT",
                    "Test Harness Client reads WiredMaximumCurrent from server DUT",
                    "Test Harness Client reads WiredPresent from server DUT",
                    "Test Harness Client reads ActiveWiredFaults from server DUT",
                    "Test Harness Client reads BatVoltage from server DUT",
                    "Test Harness Client reads BatPercentRemaining from server DUT",
                    "Test Harness Client reads BatTimeRemaining from server DUT",
                    "Test Harness Client reads BatChargeLevel from server DUT",
                    "Test Harness Client reads BatReplacementNeeded from server DUT",
                    "Test Harness Client reads BatReplaceability from server DUT",
                    "Test Harness Client reads BatPresent from server DUT",
                    "Test Harness Client reads ActiveBatFaults from server DUT",
                    "Test Harness Client reads BatReplacementDescription from server DUT",
                    "Test Harness Client reads BatCommonDesignation from server DUT",
                    "Test Harness Client reads BatANSIDesignation from server DUT",
                    "Test Harness Client reads BatIECDesignation from server DUT",
                    "Test Harness Client reads BatApprovedChemistry from server DUT",
                    "Test Harness Client reads BatCapacity from server DUT",
                    "Test Harness Client reads BatQuantity from server DUT",
                    "Test Harness Client reads BatChargeState from server DUT",
                    "Test Harness Client reads BatTimeToFullCharge from server DUT",
                    "Test Harness Client reads BatFunctionalWhileChargingfrom server DUT",
                    "Test Harness Client reads BatChargingCurrent from server DUT",
                    "Test Harness Client reads ActiveBatChargeFaults from server DUT",
                    "Test Harness Client reads EndpointList from server DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds with an enum8 value present in the PowerSourceStatusEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a uint8 value.",
                    "Verify that the DUT responds with a string value with a length of 0 to 60 characters.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with a uint16 value or null.",
                    "Verify that the DUT responds with an enum8 value present in the WiredCurrentTypeEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with a uint32 value.",
                    "Verify that the DUT responds with a uint32 value.",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with a list.The list has not more than 8 entries.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Each entry is an enum8 value from the WiredFaultEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with a uint8 value or null. If a non-null value is returned, it must be in the range of 0 to 200.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with an enum8 value in the BatChargeLevelEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with an enum8 value in the BatReplaceabilityEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with a list. The list has not more than 8 entries. Each entry is an enum8 from the BatFaultEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a string value with a length of 0 to 60 characters.",
                    "Verify that the DUT responds with an enum16 value present in the BatCommonDesignationEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a string value with a length of 0 to 20 characters.",
                    "Verify that the DUT responds with a string value with a length of 0 to 20 characters.",
                    "Verify that the DUT responds with an enum16 value present in the BatApprovedChemistryEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a uint32 value.",
                    "Verify that the DUT responds with a uint8 value.",
                    "Verify that the DUT responds with an enum8 value present in the BatChargeStateEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with a bool value.",
                    "Verify that the DUT responds with a uint32 value or null.",
                    "Verify that the DUT responds with a list. The list has not more than 16 entries. Each entry is an enum8 value present in the BatChargeFaultEnum list of values for the cluster version.",
                    "Verify that the DUT responds with a list. Each entry is an endpoint-id."
                ]
            }
        },
        {
            "Test Case Name": "73.1.2. [TC-PS-2.2] Event reporting with server as DUT - REMOVED",
            "Test Case ID": "TC-PS-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests event reporting of the Power Source Cluster server. This includes the following events:",
            "Test Procedure": {
                "#": [
                    "1",
                    "Wired Faults",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4",
                    "5",
                    "6",
                    "Battery Faults",
                    "7a",
                    "7b",
                    "8a",
                    "8b",
                    "9",
                    "10",
                    "11",
                    "Charge Faults",
                    "12a",
                    "12b",
                    "13a",
                    "13b",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "PS.S.A000a(ActiveWiredFaults)",
                    "",
                    "PS.S.E00(WiredFaultChange),\n  PS.S.M.ManualWiredFault",
                    "",
                    "PS.S.A000a(ActiveWiredFaults),\n              PS.S.M.ManualWiredFault",
                    "PS.S.E00(WiredFaultChange),PS.S.A000a(ActiveWiredFaults)\n  PS.S.M.ManualWiredFault",
                    "PS.S.E00(WiredFaultChange),\n  PS.S.M.ManualWiredFault",
                    "",
                    "PS.S.A0012(ActiveBatFaults)",
                    "",
                    "PS.S.E01(BatFaultChange),\n              PS.S.M.ManualBatFault",
                    "",
                    "PS.S.A0012(ActiveBatFaults),\n              PS.S.M.ManualBatFault",
                    "PS.S.E01(BatFaultChange),PS.S.A0012(ActiveBatFaults),\n              PS.S.M.ManualBatFault",
                    "PS.S.E01(BatFaultChange),\n              PS.S.M.ManualBatFault",
                    "",
                    "PS.S.A001e(ActiveBatChargeFaults)",
                    "",
                    "PS.S.E02(BatChargeFaultChange),\n               PS.S.M.ManualBatChargeFault",
                    "",
                    "PS.S.A001e(ActiveBatChargeFaults),\n               PS.S.M.ManualBatChargeFault",
                    "PS.S.E02(BatChargeFaultChange),PS.S.A001e(ActiveBatChargeFaults),\n               PS.S.M.ManualBatChargeFault",
                    "PS.S.E02(BatChargeFaultChange),\n               PS.S.M.ManualBatChargeFault"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "",
                    "Bring the DUT into a state without any wired faults.",
                    "TH reads theActiveWiredFaults attributefrom the DUT",
                    "Set up subscription to WiredFaultChange event",
                    "Bring the DUT into a wired fault state.",
                    "TH reads theActiveWiredFaults attributefrom the DUT",
                    "",
                    "Bring the DUT back into a clean state.",
                    "",
                    "Bring the DUT into a state without any battery faults.",
                    "TH reads theActiveBatFaults attributefrom the DUT",
                    "Set up subscription to BatFaultChange event",
                    "Bring the DUT into a battery fault state.",
                    "TH reads theActiveBatFaults attributefrom the DUT",
                    "",
                    "Bring the DUT back into a clean state.",
                    "",
                    "Bring the DUT into a state without any charge faults.",
                    "TH reads theActiveBatChargeFaults attributefrom the DUT",
                    "Set up subscription to BatChargeFaultChange event",
                    "Bring the DUT into a charge fault state.",
                    "TH reads theActiveBatChargeFaults attributefrom the DUT",
                    "",
                    "Bring the DUT back into a clean state."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the list is empty.",
                    "",
                    "Receive a WiredFaultChange event with* a non-empty Current field* an empty Previous field.",
                    "Verify that the list is not empty.",
                    "The Current field of Step 3b has to be the same as the value of Step 4.",
                    "Receive a WiredFaultChange event with* an empty Current field* a non-empty Previous field.The Previous field has to have the same values as the Current field in Step 3b.",
                    "",
                    "",
                    "Verify that the list is empty.",
                    "",
                    "Receive a BatFaultChange event with* a non-empty Current field* an empty Previous field.",
                    "Verify that the list is not empty.",
                    "The Current field of Step 8b has to be the same as the value of Step 9.",
                    "Receive a BatFaultChange event with* an empty Current field* a non-empty Previous field.The Previous field has to have the same values as the Current field in Step 8b.",
                    "",
                    "",
                    "Verify that the list is empty.",
                    "",
                    "Receive a BatChargeFaultChange event with* a non-empty Current field* an empty Previous field.",
                    "Verify that the list is not empty.",
                    "The Current field of Step 13b has to be the same as the value of Step 14.",
                    "Receive a BatChargeFaultChange event with* an empty Current field* a non-empty Previous field.The Previous field has to have the same values as the Current field in Step 13b."
                ]
            }
        },
        {
            "Test Case Name": "73.1.3. [TC-PS-3.1] Endpoint composition and EndpointList",
            "Test Case ID": "TC-PS-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that the EndpointList attribute is properly implemented",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    "",
                    "",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "For each power source cluster with a non-empty EndpointsList attribute, verify that the endpoint exists on the device; also verify that the EndpointsList attribute includes the endpoint on which the cluster is located",
                    "For each power source cluster on an endpoint with the Bridged Node device type, ensure the EndpointList in the Power Source cluster includes all the endpoints listed in the PartsList of the Descriptor cluster as well as its own endpoint id.",
                    "For each power source cluster on an endpoint that is a child endpoint of an endpoint with a Bridged Node device type, ensure the EndpointList in the Power Source cluster contains a list with one entry that lists its own endpoint id"
                ]
            }
        }
    ],
    "Power_Source_Configuration": [
        {
            "Test Case Name": "76.1.1. [TC-PSCFG-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-PSCFG-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the Power Source Configuration cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "PSCFG.S.A0000(Sources)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theSources attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response provides a list. Each entry in the list has to be the endpoint number of an endpoint having a Power Source cluster."
                ]
            }
        },
        {
            "Test Case Name": "76.1.2. [TC-PSCFG-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-PSCFG-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Power Source Configuration Cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a"
                ],
                "Ref": [
                    "",
                    "",
                    "For each endpoint number (eNr) in this list do",
                    ""
                ],
                "PICS": [
                    "",
                    "PSCFG.S.A0000(Sources)",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theSources attributefrom the DUT",
                    "",
                    "TH reads theOrder attributefrom Power Source Cluster at Endpoint[eNr] of the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response provides a list.The list has not more than 6 entries.Each entry in this list is a valid endpoint number.Each list entry is unique, there are no duplicates.",
                    "",
                    "Read succeeds with no error.The order value is the same or greater than the order value of the previous iteration. (For the first iteration this check can obviously be skipped)."
                ]
            }
        }
    ],
    "Boolean_State": [
        {
            "Test Case Name": "79.1.1. [TC-BOOL-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-BOOL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Boolean State Cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "BOOL.S.A0000(StateValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads theStateValue attributefrom the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT responds\n with a boolean value."
                ]
            }
        },
        {
            "Test Case Name": "79.1.2. [TC-BOOL-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-BOOL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Boolean State Cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "BOOL.S.M.ManuallyControlled\n              BOOL.S.A0000(StateValue)",
                    "",
                    "BOOL.S.M.ManuallyControlled\n              BOOL.S.A0000(StateValue)",
                    "",
                    "BOOL.S.M.ManuallyControlled\n              BOOL.S.E00(StateChange)\n              BOOL.S.A0000(StateValue)",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "Bring the DUT into a state so StateValue is FALSE.",
                    "TH reads theStateValue attributefrom the DUT.",
                    "Bring the DUT into a state so StateValue is TRUE.",
                    "TH reads theStateValue attributefrom the DUT.",
                    "Set up subscription toStateChange event.",
                    "Bring the DUT into a state so StateValue is FALSE.",
                    "TH reads theStateValue attributefrom the DUT.",
                    "Bring the DUT into a state so StateValue is TRUE.",
                    "TH reads theStateValue attributefrom the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that value in the response is FALSE.",
                    "",
                    "Verify that value in the response is TRUE.",
                    "",
                    "ReceiveStateChange eventwith StateValue set to FALSE.",
                    "Verify that value in the response is FALSE.",
                    "ReceiveStateChange eventwith StateValue set to TRUE.",
                    "Verify that value in the response is TRUE."
                ]
            }
        }
    ],
    "Illuminance_Measurement": [
        {
            "Test Case Name": "82.1.1. [TC-ILL-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-ILL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the non-global attributes of the Illuminance Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "ILL.S.A0001(MinMeasuredValue)",
                    "ILL.S.A0002(MaxMeasuredValue)",
                    "ILL.S.A0000(MeasuredValue)",
                    "ILL.S.A0003(Tolerance)",
                    "ILL.S.A0004(LightSensorType)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "Test Harness Client readsMinMeasuredValue attributefrom DUT.",
                    "Test Harness Client readsMaxMeasuredValue attributefrom DUT.",
                    "Test Harness Client readsMeasuredValue attributefrom DUT.",
                    "TH reads theTolerance attributefrom the DUT.",
                    "TH reads theLightSensorType attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains eithernulloran integer where1 \u2264MinMeasuredValue\u2264 0xfffd.Note the value for usage in later steps as Imin.IfMinMeasuredValueis Null note 1.",
                    "Verify that the DUT response contains eithernulloran integer whereImin<MaxMeasuredValue\u2264 0xfffe.Note the value for usage in later steps as Imax.IfMaxMeasuredValueis Null note 0xfffe.",
                    "Verify that the DUT response contains eithernullor0oran integer whereImin\u2264MeasuredValue\u2264 Imax.",
                    "Verify that the DUT responds with a uint16 value. Its value should be in the range of 0 and 0x0800.",
                    "Verify that the DUT responds with null or an enum8 value from 0 to 0xfe."
                ]
            }
        },
        {
            "Test Case Name": "82.1.2. [TC-ILL-2.2] Primary Functionality with Server as DUT",
            "Test Case ID": "TC-ILL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Illuminance Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "ILL.S.A0001(MinMeasuredValue),\n        ILL.S.A0002(MaxMeasuredValue)",
                    "",
                    "ILL.S.A0000(MeasuredValue)",
                    "",
                    "ILL.S.A0000(MeasuredValue)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "Test Harness Client readsMinMeasuredValue attributeandMaxMeasuredValue attributefrom DUT.",
                    "Cover the sensor or darken the room",
                    "After a few seconds, TH readsMeasuredValue attributefrom DUT.",
                    "Expose the sensor again to light",
                    "After a few seconds, TH readsMeasuredValue attributefrom DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Note MinMeasuredValue and MaxMeasuredValue.",
                    "",
                    "Value should be 0 or close to MinMeasuredValue.",
                    "",
                    "Value has to increase significantly compared to step 4. The value should be smaller or equal to MaxMeasuredValue."
                ]
            }
        }
    ],
    "Switch": [
        {
            "Test Case Name": "85.1.1. [TC-SWTCH-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-SWTCH-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.2",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "SWTCH.S.F00(LS)",
                    "SWTCH.S.F01(MS)",
                    "!SWTCH.S.F00(LS) & !SWTCH.S.F01(MS)",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if SWTCH.S.F00(LS)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 1: SHALL be 1 if and only if SWTCH.S.F01(MS)- bit 2: SHALL be 1 if and only if SWTCH.S.F01(MS) & SWTCH.S.F02(MSR)- bit 3: SHALL be 1 if and only if SWTCH.S.F01(MS) & SWTCH.S.F02(MSR) & SWTCH.S.F03(MSL)- bit 4: SHALL be 1 if and only if SWTCH.S.F01(MS) & SWTCH.S.F02(MSR) & SWTCH.S.F04(MSM)All remaining bits SHALL be 0",
                    "In case this test step executes, the DUT has an invalid PICS configuration and this step SHALL fail.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x0001,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0002: SHALL be included if and only if SWTCH.S.F04(MSM)",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:The list includes entries based on feature support:- 0x00: SHALL be included if and only if SWTCH.S.F00(LS)- 0x01: SHALL be included if and only if SWTCH.S.F01(MS)- 0x02: SHALL be included if and only if SWTCH.S.F03(MSL)- 0x03: SHALL be included if and only if SWTCH.S.F02(MSR)- 0x04: SHALL be included if and only if SWTCH.S.F03(MSL)- 0x05: SHALL be included if and only if SWTCH.S.F04(MSM)- 0x06: SHALL be included if and only if SWTCH.S.F04(MSM)",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "85.2.1. [TC-SWTCH-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-SWTCH-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Switch Attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "SWTCH.S.F04(MSM)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Read NumberOfPositions attribute",
                    "Read CurrentPosition attribute",
                    "Read MultiPressMax attribute"
                ],
                "Expected Outcome": [
                    "DUT and TH are on same fabric",
                    "value is at least 2",
                    "value is in range 0..NumberOfPositions-1",
                    "value is at least 2"
                ]
            }
        },
        {
            "Test Case Name": "85.2.2. [TC-SWTCH-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-SWTCH-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Switch cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2: tests for Latching Switch",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "2f",
                    "2g",
                    "2h",
                    "2i",
                    "3: tests for Momentary Switch",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "3g",
                    "4: tests for Momentary Switch with release capability but not long press capabilities",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "5: tests for Momentary Switch with release and long press capabilities",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "6: tests for Momentary Switch with multi-press capabilities",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "6i",
                    "6j",
                    "6k",
                    "6l",
                    "6m",
                    "6n",
                    "6o"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "SWTCH.S.F00(LS)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "SWTCH.S.F01(MS)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "SWTCH.S.F01(MS) & SWTCH.S.F02(MSR) & !SWTCH.S.F03(MSL)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "SWTCH.S.F01(MS) & SWTCH.S.F03(MSL)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "SWTCH.S.F01(MS) & SWTCH.S.F04(MSM)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "",
                    "Set up subscription to SwitchLatched event",
                    "Operator sets switch to first position (zero) on the DUT",
                    "TH reads the CurrentPosition attribute from the DUT",
                    "Operator sets switch to second position (one) on the DUT",
                    "TH reads CurrentPosition attribute from the DUT",
                    "If NumberOfPositions>2 (see 2a of TC-SWTCH-2.1) :- Operator sets switch to next position on the DUT- TH reads the CurrentPosition attribute from the DUT",
                    "If NumberOfPositions>3 :- Repeat step 2f for NumberOfPositions-3 times- After each time Operator has set switch to next position on the DUT,- TH reads CurrentPosition attribute from the DUT",
                    "Operator returns switch to first position on the DUT",
                    "TH reads the CurrentPosition attribute from the DUT",
                    "",
                    "Set up subscription to InitialPress event",
                    "Operator does not operate switch on the DUT",
                    "TH reads the CurrentPosition attribute from the DUT",
                    "Operator operates switch (keep it pressed)",
                    "TH reads the CurrentPosition attribute from the DUT",
                    "Operator releases switch on the DUT",
                    "TH reads the CurrentPosition attribute from the DUT",
                    "",
                    "Set up subscription to InitialPress and ShortRelease events",
                    "Operator does not operate switch on the DUT",
                    "Operator operates switch (press briefly) on the DUT",
                    "Operator releases switch from the DUT",
                    "Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT",
                    "Operator releases switch from the DUT",
                    "",
                    "Set up subscription to InitialPress, LongPress, ShortRelease, LongRelease events",
                    "Operator does not operate switch on the DUT",
                    "Operator operates switch (press briefly) on the DUT",
                    "Operator releases switch from the DUT",
                    "Operator operates switch (keep pressed for long time, e.g. 5 seconds) on the DUT",
                    "Operator releases switch from the DUT",
                    "",
                    "Set up subscription to InitialPress, ShortRelease, MultiPressOngoing, MultiPressComplete events",
                    "Operator does not operate switch on the DUT",
                    "Operator operates switch (press briefly) on the DUT",
                    "Operator releases switch from the DUT",
                    "Operator operates switch (press briefly) on the DUT",
                    "Operator releases switch from the DUT",
                    "Briefly after 6f, Operator operates switch again on the DUT(press briefly)",
                    "Operator releases switch from the DUT",
                    "If MultiPressMax == 2 (see 2c of TC-SWTCH-2.1), skip steps 6j .. 6o",
                    "Operator operates switch (press briefly) on the DUT",
                    "Operator releases switch from the DUT",
                    "Briefly after 6k, operator operates switch again on the DUT (press briefly)",
                    "Operator releases switch from the DUT",
                    "Briefly after 6m, operator operates switch again (press briefly)",
                    "Operator releases switch from the DUT"
                ],
                "Expected Outcome": [
                    "DUT and TH are on same fabric",
                    "",
                    "",
                    "",
                    "Verify that the value is 0",
                    "Verify that the TH receives SwitchLatched event with NewPosition set to 1 from the DUT",
                    "Verify that the value is 1",
                    "Verify that the TH receives SwitchLatched event with NewPosition set to 1 higher than in previous event from the DUTVerify that the value of CurrentPosition attribute is 1 higher than previous attribute value, and matches the NewPosition field from the SwitchLatched event",
                    "see 2f",
                    "Verify that the TH receives SwitchLatched event with NewPosition set to 0 from the DUT",
                    "Verify that the value is 0",
                    "",
                    "",
                    "",
                    "Verify that the value is 0",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 on the DUT",
                    "Verify that the value is 1",
                    "",
                    "Verify that the value is 0",
                    "",
                    "",
                    "",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1",
                    "Verify that TH receives ShortRelease event with PreviousPosition set to 1 from the DUT",
                    "",
                    "",
                    "",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUTafterwards TH receives (one, not more than one) LongPress event with NewPosition set to 1 from the DUT",
                    "Verify that the TH receives LongRelease event with PreviousPosition set to 1 from the DUT",
                    "",
                    "",
                    "",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUTafterwards, TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 1 from the DUT",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUT",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUTTH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 2 + from the DUT\n(MultiPressOngoing event SHALL NOT arrive before InitialPress event)",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUTafterwards, TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 2 from the DUT",
                    "",
                    "TH receives InitialPress event with NewPosition set to 1 from the DUT",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUTVerify that the TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 2 from the DUT(MultiPressOngoing event SHALL NOT arrive before InitialPress event)",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUT",
                    "Verify that the TH receives InitialPress event with NewPosition set to 1 from the DUTVerify that TH receives MultiPressOngoing event with NewPosition set to 1 and CurrentNumberOfPressesCounted set to 3 from the DUT(MultiPressOngoing event SHALL NOT arrive before InitialPress event)",
                    "Verify that the TH receives ShortRelease event with PreviousPosition set to 1 from the DUTafterwards, TH receives MultiPressComplete event with PreviousPosition set to 1 and TotalNumberOfPressesCounted set to 3 from the DUT"
                ]
            }
        },
        {
            "Test Case Name": "85.3.1. [TC-SWTCH-3.2] Primary functionality with client as DUT",
            "Test Case ID": "TC-SWTCH-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Switch cluster client.",
            "Test Procedure": {
                "#": [
                    "Consistency check of PICS flags",
                    "0a",
                    "0b",
                    "0c",
                    "0d",
                    "0e",
                    "0f",
                    "0g",
                    "Commission and configure latching switch",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "Simulate operation of latching switch",
                    "2a",
                    "2b",
                    "Commission and configure momentary switch",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "Simulate operation of momentary switch",
                    "4a",
                    "4b",
                    "4c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "!SWTCH.C.F00(LS) & !SWTCH.C.F01(MS)",
                    "SWTCH.C.F02(MSR) & !SWTCH.C.F01(MS)",
                    "SWTCH.C.F03(MSL) & !SWTCH.C.F01(MS)",
                    "SWTCH.C.F03(MSL) & !SWTCH.C.F02(MSR)",
                    "SWTCH.C.F04(MSM) & !SWTCH.C.F01(MS)",
                    "SWTCH.C.F04(MSM) & !SWTCH.C.F02(MSR)",
                    "!SWTCH.C.M.SwitchStatePolling & !SWTCH.C.M.SwitchStateEventing",
                    "",
                    "SWTCH.C.F00(LS)",
                    "SWTCH.C.F00(LS)",
                    "SWTCH.C.F00(LS)",
                    "SWTCH.C.F00(LS) & SWTCH.C.M.SwitchStateEventing",
                    "",
                    "SWTCH.C.F00(LS) & SWTCH.C.M.SwitchStatePolling",
                    "SWTCH.C.F00(LS) & SWTCH.C.M.SwitchStateEventing",
                    "",
                    "SWTCH.C.F01(MS)",
                    "SWTCH.C.F01(MS)",
                    "SWTCH.C.F01(MS)",
                    "SWTCH.C.F01(MS) & SWTCH.C.M.SwitchStateEventing",
                    "",
                    "SWTCH.C.F01(MS) & SWTCH.C.M.SwitchStatePolling",
                    "SWTCH.C.F01(MS) & SWTCH.C.M.SwitchStateEventing",
                    "SWTCH.C.F01(MS) & SWTCH.C.F03(MSL) & SWTCH.C.M.SwitchStateEventing"
                ],
                "Test Step": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Commission DUT to TH.Use client mechanism to set it up so switch state can be observed (e.g. UI shows state of switch) and/or other device is controlled (e.g. light on same fabric gets controlled by the switch \u21d2 TH has to simulate that light).While commissioning and configuring, TH records and reacts to the messages relating to the switch functionality detailed in the steps below. The order of the messages received may be different from the order of the sub-steps 1b..1d below.",
                    "DUT reads global attribute FeatureMap.",
                    "DUT reads attribute NumberOfPositions.",
                    "DUT sets up eventing (SwitchLatched) so it will receive events when the switch is operated.",
                    "",
                    "TH simulates operation of the switch by changing state (attribute CurrentPosition) from 0 to 1 and back every 10 seconds (over a 1 minute period)DUT reads attribute CurrentPosition regularly",
                    "TH simulates operation of the switch by changing state (attribute CurrentPosition) from 0 to 1 and back every 10 seconds (over a 1 minute period), and sending the event SwitchLatched (with field NewPosition reflecting the new state) on every change",
                    "",
                    "Commission DUT to TH.Use client mechanism to set it up so switch state can be observed (e.g. UI shows state of switch) and/or other device is controlled (e.g. light on same fabric gets controlled by the switch \u21d2 TH has to simulate that light).While commissioning and configuring, TH records and reacts to the messages relating to the switch functionality detailed in the steps below. The order of the messages received may be different from the order of the sub-steps 3b..3d below.",
                    "DUT reads global attribute FeatureMap",
                    "DUT reads attribute NumberOfPositions",
                    "DUT sets up eventing (InitialPress and ShortRelease; if SWTCH.C.F03(MSL) also LongPress and LongRelease) so it will receive events when the switch is operated",
                    "",
                    "TH simulates operation of the switch by repeating these steps (over a 1 minute period)change state (attribute CurrentPosition) from 0 to 1wait 0.2 secondschange state (attribute CurrentPosition) from 1 to 0wait 10 secondsDUT reads attribute CurrentPosition regularly",
                    "TH simulates operation of the switch by repeating these steps (over a 1 minute period)change state (attribute CurrentPosition) from 0 to 1, and send the event InitialPress (with field NewPosition=1)wait 0.2 secondschange state (attribute CurrentPosition) from 1 to 0, and send the event ShortRelease (with field PreviousPosition=1)wait 10 seconds",
                    "TH simulates operation of the switch by repeating these steps (over a 1 minute period)change state (field CurrentPosition) from 0 to 1, and send the event InitialPress (with field NewPosition=1)wait 0.75 secondssend the event LongPress (field NewPosition=1)wait 2 secondschange state (field CurrentPosition) from 1 to 0, and send the event LongRelease (with field PreviousPosition=1)wait 8 seconds"
                ],
                "Expected Outcome": [
                    "",
                    "FAIL the test - at least one of SWTCH.C.F00(LS) and SWTCH.C.F01(MS) has to be supported",
                    "FAIL the test - when supporting SWTCH.C.F02(MSR) also SWTCH.C.F01(MS) must be supported",
                    "FAIL the test - when supporting SWTCH.C.F03(MSL) also SWTCH.C.F01(MS) must be supported",
                    "FAIL the test - when supporting SWTCH.C.F03(MSL) also SWTCH.C.F02(MSR) must be supported",
                    "FAIL the test - when supporting SWTCH.C.F04(MSM) also SWTCH.C.F01(MS) must be supported",
                    "FAIL the test - when supporting SWTCH.C.F04(MSM) also SWTCH.C.F02(MSR) must be supported",
                    "FAIL the test - at least one of SWTCH.C.M.SwitchStatePolling and SWTCH.C.M.SwitchStateEventing must be supported",
                    "",
                    "",
                    "TH provides value 1 (LS).",
                    "TH provides value 2.",
                    "TH responds accordingly.",
                    "",
                    "When DUT reads attribute CurrentPosition, TH provides response with current value.DUT presents state of simulated switch and/or controls another device based on the state of the switch.",
                    "DUT receives these eventsDUT presents state of simulated switch and/or controls another device based on the state of the switch.",
                    "",
                    "",
                    "TH provides value 0x1E (MS, MSR, MSL, MSM).",
                    "TH provides value 2.",
                    "TH responds accordingly.",
                    "",
                    "TH provides response with current value.DUT presents state of simulated switch and/or controls another device based on the state of the switch.",
                    "TH sends events corresponding to simulated switch operation, DUT receives these eventsDUT presents state of simulated switch and/or controls another device based on the state of the switch.",
                    "TH sends events corresponding to simulated switch operation, DUT receives these eventsDUT presents state of simulated switch and/or controls another device based on the state of the switch (long-press behavior if supported)."
                ]
            }
        }
    ],
    "Actions": [
        {
            "Test Case Name": "88.1.1. [TC-ACT-2.1] Attributes with server as DUT",
            "Test Case ID": "TC-ACT-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the attributes provided by the Actions cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2: preparation in manufacturer app",
                    "2a",
                    "2b",
                    "3: get list of all endpoints",
                    "3",
                    "4: validate EndpointLists attribute",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "5: validate ActionList attribute",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "5g",
                    "5h",
                    "6: validate SetupURL attribute",
                    "6a",
                    "6b",
                    "6c",
                    "6d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "ACT.S.M.FillEndpointLists",
                    "ACT.S.M.FillActionList",
                    "",
                    "",
                    "",
                    "ACT.S.A0001(EndpointLists)",
                    "",
                    "",
                    "",
                    "",
                    "ACT.S.A0001(EndpointLists) & ACT.S.M.FillEndpointLists",
                    "",
                    "ACT.S.A0000(ActionList)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "ACT.S.A0000(ActionList) & ACT.S.M.FillActionList",
                    "",
                    "ACT.S.A0002(SetupURL)",
                    "",
                    "",
                    "ACT.S.A0002(SetupURL) & ACT.S.M.SetupURLWithSuffix"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "",
                    "Use manufacturer provided means (e.g. app) to define groups of endpoints that can be exposed using the Actions server cluster(NOTE if this is not provided, it is assumed the DUT automagically creates these)",
                    "Use manufacturer provided means (e.g. app) to define available actions that can be exposed using the Actions server cluster",
                    "",
                    "Read PartsList attribute of Descriptor cluster on endpoint 0 of the DUT",
                    "",
                    "Read EndpointLists attribute of Actions server",
                    "For each EndpointListStruct, verify that the endpoints in the Endpoints field are in the list of endpoints of the DUT",
                    "For each EndpointListStruct, verify that the Name is present",
                    "For each EndpointListStruct, verify that the Type is present and valid",
                    "Verify that the EndPointListIDs of all EndpointListStruct are unique (no duplicates)",
                    "For each EndpointListStruct, verify Name and Type against the name/type of each group of endpoints provided by the manufacturer\u2019s means",
                    "",
                    "Read ActionList attribute of Actions server",
                    "For each ActionStruct, verify the Name is present",
                    "For each ActionStruct, verify the Type is present and valid",
                    "For each ActionStruct, verify the EndpointListID is present in one of the EndpointListStructs (see step 4a)",
                    "For each ActionStruct, verify the SupportedCommands field is present and valid (at least one bit is set)",
                    "For each ActionStruct, verify the State field is present and valid",
                    "Verify that the ActionIDs of all ActionStructs are unique (no duplicates)",
                    "For each ActionStruct, verify Name, Type and State against the name/type/state info for the action provided by the manufacturer\u2019s means",
                    "",
                    "Read SetupURL attribute",
                    "Verify that its syntax",
                    "Verify SetupURL points to a site providing information about the actions",
                    "Verify SetupURL appended by \"?/a=\" and the  decimal numeric value of one of the exposed ActionIDs (see step 5a) points to a site providing information about the action"
                ],
                "Expected Outcome": [
                    "DUT and TH are on same fabric",
                    "",
                    "Actions server can expose those groups - used in later steps",
                    "Actions server can expose those actions - used in later steps",
                    "",
                    "this list will be used in later steps",
                    "",
                    "validate the EndpointListStructs using the following steps",
                    "all referenced endpoints present in list from step 3",
                    "Name is present",
                    "Type is present and valid (enum value 0-2)",
                    "no duplicates found",
                    "information matches",
                    "",
                    "validate the ActionStructs using the following steps",
                    "Name is present",
                    "Type is present and valid (enum value 0-6)",
                    "EndpointListID found in EndpointLists",
                    "SupportedCommands field is present and valid (range 0x0001-0x0fff)",
                    "State field is valid and present (enum value 0-3)",
                    "no duplicates found",
                    "information matches",
                    "",
                    "",
                    "syntax as specified in RFC 3986, max. 512 ASCII characters",
                    "SetupURL points to a relevant location (consistent with information the manufacturer has provided out of band)",
                    "SetupURL points to a relevant location"
                ]
            }
        },
        {
            "Test Case Name": "88.1.2. [TC-ACT-2.2] Primary functionality with server as DUT",
            "Test Case ID": "TC-ACT-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Actions cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2: manual update of grouping and naming",
                    "2a",
                    "2b",
                    "",
                    "2c",
                    "2d",
                    "2e",
                    "",
                    "2f",
                    "2g",
                    "2h",
                    "",
                    "2i",
                    "2j",
                    "2k",
                    "",
                    "2l",
                    "2m",
                    "2n",
                    "3: manual update of action list",
                    "3a",
                    "3b",
                    "",
                    "3c",
                    "3d",
                    "3e",
                    "",
                    "3f",
                    "3g",
                    "3h",
                    "",
                    "3i",
                    "3j",
                    "3k",
                    "4: execute actions",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e"
                ],
                "Ref": [
                    "",
                    "",
                    "9.13.7",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "ACT.S.A0001(EndpointLists) & ACT.S.M.FillEndpointLists",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "ACT.S.A0001(EndpointLists) & ACT.S.M.OverlappingEndpointLists",
                    "",
                    "",
                    "",
                    "ACT.S.A0000(ActionList) & ACT.S.M.FillActionList",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "ACT.S.A0000(ActionList) & ACT.S.M.FillActionList",
                    "ACT.S.A0000(ActionList)",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "",
                    "Using the manufacturer provided means, create multiple groups with each multiple bridged devices (endpoints)",
                    "Read EndpointLists attribute",
                    "",
                    "Using the manufacturer provided means, update the name of one of the groups",
                    "Read EndpointLists attribute again",
                    "compare result of step 2d to what was read in step 2b",
                    "",
                    "Using the manufacturer provided means, move one of the bridged devices (one endpoint) from one group to another group",
                    "Read EndpointLists attribute again",
                    "compare result of step 2g to what was read in step 2d",
                    "",
                    "Using the manufacturer provided means, remove one of the groups",
                    "Read EndpointLists attribute again",
                    "compare result of step 2j to what was read in step 2g",
                    "",
                    "Using the manufacturer provided means, create a new group, which includes one of the bridged devices also present in another group",
                    "Read EndpointLists attribute again",
                    "compare result of step 2m to what was read in step 2j",
                    "",
                    "Using the manufacturer provided means, create multiple actions",
                    "Read ActionList attribute",
                    "",
                    "Using the manufacturer provided means, update the name of one of the actions",
                    "Read ActionList attribute again",
                    "compare result of step 3d to what was read in step 3b",
                    "",
                    "Using the manufacturer provided means, remove one of the exposed actions",
                    "Read ActionList attribute again",
                    "compare result of step 3g to what was read in step 3d",
                    "",
                    "Using the manufacturer provided means, add a new exposed action",
                    "Read ActionList attribute again",
                    "compare result of step 3j to what was read in step 3g",
                    "",
                    "Using the manufacturer provided means, create multiple actions",
                    "Read ActionList attribute",
                    "subscribe to StateChanged and ActionFailed events",
                    "For each of the ActionStructs provided by DUT (see list read in step 4b), perform one of the actions supported (see SupportedCommands in this ActionStruct) by sending the command with this particular ActionID and a random value for InvokeID",
                    "repeat 4d for the other SupportedCommands of each ActionStruct"
                ],
                "Expected Outcome": [
                    "DUT and TH are on same fabric",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Name field in relevant EndpointListStruct has been updatedno other changes in EndpointLists attribute",
                    "",
                    "",
                    "",
                    "in one of the EndpointListStructs the endpoint for the moved device has been removedin another EndpointListStruct the endpoint for the moved device has been addedno other changes in EndpointLists attribute",
                    "",
                    "",
                    "",
                    "the EndpointListStructs for the removed group has been removed from EndpointLists attributeno other changes in EndpointLists attribute",
                    "",
                    "",
                    "",
                    "a new EndpointListStruct has been added to the EndpointLists attribute, with Name, Type and Endpoints[] matching the group which was created in 2lno other changes in EndpointLists attributethe endpoint of the bridged device which is present in multiple groups appears in the Endpoints[] of multiple EndpointListStruct",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Name field in relevant ActionStruct has been updatedno other changes in ActionList attribute",
                    "",
                    "",
                    "",
                    "the relevant ActionStruct has been removed from ActionList attributeno other changes in ActionList attribute",
                    "",
                    "",
                    "",
                    "a new ActionStruct has been added into ActionList attribute (matching what was added in 3i)no other changes in ActionList attribute",
                    "",
                    "",
                    "list will be used in 4d,4eif list is empty, skip remainder of test",
                    "(events will be used in 4d,4e)",
                    "id of the command is included in the AcceptedCommandList global attributecommand is accepted (no INVALID_COMMAND reply)DUT generates an StateChanged or ActionFailed event with these ActionID and InvokeID values and a NewState consistent with the command and previous stateDUT performs the requested action on the associated endpoints",
                    "see 4d"
                ]
            }
        },
        {
            "Test Case Name": "88.1.3. [TC-ACT-3.2] Functionality with client as DUT",
            "Test Case ID": "TC-ACT-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the Actions cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "ACT.C.C00.Tx(InstantAction)",
                    "ACT.C.C02.Tx(StartAction)",
                    "ACT.C.C04.Tx(StopAction)",
                    "ACT.C.C05.Tx(PauseAction)",
                    "ACT.C.C07.Tx(ResumeAction)",
                    "ACT.C.C08.Tx(EnableAction)",
                    "ACT.C.C0a.Tx(DisableAction)",
                    "ACT.C.C03.Tx(StartActionWithDuration)",
                    "ACT.C.C06.Tx(PauseActionWithDuration)",
                    "ACT.C.C09.Tx(EnableActionWithDuration)",
                    "ACT.C.C0b.Tx(DisableActionWithDuration)",
                    "ACT.C.C01.Tx(InstantActionWithTransition)"
                ],
                "Test Step": [
                    "DUT issues an InstantAction               command to TH",
                    "DUT issues an StartAction                command to TH",
                    "DUT issues an StopAction                 command to TH",
                    "DUT issues an PauseAction                command to TH",
                    "DUT issues an ResumeAction               command to TH",
                    "DUT issues an EnableAction               command to TH",
                    "DUT issues an DisableAction              command to TH",
                    "DUT issues an StartActionWithDuration    command to TH",
                    "DUT issues an PauseActionWithDuration     command to TH",
                    "DUT issues an EnableActionWithDuration    command to TH",
                    "DUT issues an DisableActionWithDuration   command to TH",
                    "DUT issues an InstantActionWithTransition command to TH"
                ],
                "Expected Outcome": [
                    "TH verifies the parameters of this command are correct:ActionID contains a uint16 with valid 0xA001if InvokeID is provided, it is a uint32",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TH verifies the parameters of this command are correct:ActionID contains a uint16 with valid 0xA001if InvokeID is provided, it is a uint32Duration contains a valid uint16",
                    "",
                    "",
                    "",
                    "TH verifies the parameters of this command are correctActionID contains a uint16 with valid 0xA001if InvokeID is provided, it is a uint32TransitionTime contains a valid uint16"
                ]
            }
        }
    ],
    "Mode_Select": [
        {
            "Test Case Name": "91.1.1. [TC-MOD-1.2] Cluster attributes with server as DUT",
            "Test Case ID": "TC-MOD-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the ModeSelect Cluster attributes",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "1.8.5, 1.8.9",
                    "1.8.5",
                    "1.8.5",
                    "1.8.5",
                    "1.8.5",
                    "1.8.5"
                ],
                "PICS": [
                    "MOD.S.A0002",
                    "MOD.S.A0003",
                    "MOD.S.A0005",
                    "MOD.S.A0004",
                    "MOD.S.A0000",
                    "MOD.S.A0001"
                ],
                "Test Step": [
                    "TH reads theSupportedModes attributefrom DUT",
                    "TH reads theCurrentMode attributefrom the DUT",
                    "TH reads theOnMode attributefrom the DUT",
                    "TH reads theStartUpMode attributefrom the DUT",
                    "TH reads theDescription attributefrom the DUT",
                    "TH reads theStandardNamespace attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response provides a list of supported modes.  Each mode should be a struct containing a label (user understandable string describing the mode), mode number (integer that identifies the mode and is unique within this SupportedMode list), and a list of semantic tags.  Record the mode numbers for use in steps 2, 3, and 4.Verify that each entry in the semantics tag list, if any are present, are structs containing a value field and manufacturer code. All of these values should be no larger than 16 bits.",
                    "Verify that the DUT response is an integer that is in the list of modes returned in step 1.",
                    "Verify that the DUT response is an integer that is in the list of modes returned in step 1.",
                    "Verify that the DUT response is an integer that is in the list of modes returned in step 1.",
                    "Verify that the DUT response provides human readable text string that describes the purpose of the mode select server.",
                    "Verify that the DUT response provides a 16 bit enum (null is also acceptable)."
                ]
            }
        },
        {
            "Test Case Name": "91.1.2. [TC-MOD-1.3] Attributes with client as DUT",
            "Test Case ID": "TC-MOD-1.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the support of non-global attributes of the Mode Select Cluster cluster client.",
            "Test Procedure": {
                "#": [
                    "Read mandatory attributes.",
                    "1",
                    "Read optional attributes (TH simulates a server cluster which supports all optional attributes).",
                    "2",
                    "Write mandatory attributes.",
                    "3",
                    "Write optional attributes (TH simulates a server cluster which supports all optional attributes).",
                    "4",
                    "Change configuration - TH does not support optional attributes.",
                    "5",
                    "Read optional attributes (TH simulates a server cluster which does not support any optional attributes).",
                    "6",
                    "Write optional attributes (TH simulates a server cluster which does not support any optional attributes).",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "MOD.C.AM-READ",
                    "",
                    "MOD.C.AO-READ",
                    "",
                    "MOD.C.AM-WRITE",
                    "",
                    "MOD.C.AO-WRITE",
                    "",
                    "",
                    "",
                    "MOD.C.AO-READ",
                    "",
                    "MOD.C.AO-WRITE"
                ],
                "Test Step": [
                    "",
                    "DUT reads all supported mandatory attributes from TH one at a time in a manufacturer specific order.",
                    "",
                    "DUT reads all supported optional attributes from TH one at a time in a manufacturer specific order.",
                    "",
                    "DUT writes a suitable value to all supported mandatory attributes on the TH one at a time in a manufacturer specific order.",
                    "",
                    "DUT writes a suitable value to all supported optional attributes on the TH one at a time in a manufacturer specific order.",
                    "",
                    "Configure TH such that it implements mandatory and none of the optional attributes of the server-side of the cluster, and that it also reflects this in global attributes such as FeatureMap and AttributeList.Commission DUT to TH again.",
                    "",
                    "DUT reads all supported optional attributes from TH one at a time in a manufacturer specific order.",
                    "",
                    "DUT writes a suitable value to all supported optional attributes on the TH one at a time in a manufacturer specific order."
                ],
                "Expected Outcome": [
                    "",
                    "- TH receives the read command and knows this attribute for this cluster and provides a plausible value.- DUT processes the values and operates normally (does not crash, continues with next steps).",
                    "",
                    "- TH receives the read command and provides a plausible value.- DUT processes the values and operates normally (does not crash, continues with next steps).",
                    "",
                    "TH receives the write command, checks whether the value is valid. If value invalid, provide appropriate feedback to DUT and flag test as FAIL.- DUT operates normally (does not crash, continues with next steps).",
                    "",
                    "- TH receives the write command, checks whether the value is valid. If value invalid, provide appropriate feedback to DUT and flag test as FAIL.- DUT operates normally (does not crash, continues with next steps).",
                    "",
                    "DUT is aware of the new configuration.",
                    "",
                    "- TH receives the read command, and responds that this attribute is not available.- DUT processes the error response and operates normally (does not crash, continues with next steps).Alternative allowed DUT behavior:- DUT is aware (from the global attributes it may have read in step 5) that the optional attributes are not available, and does not issue read requests for the attributes which itdidread in step 2.",
                    "",
                    "- TH receives the write command and responds that this attribute is not available.- DUT processes the error response and operates normally (does not crash, continues with next steps if any).Alternative allowed DUT behavior:- DUT is aware (from the global attributes it may have read in step 5) that the optional attributes are not available, and does not issue write requests for the attributes which itdidwrite in step 4."
                ]
            }
        },
        {
            "Test Case Name": "91.2.1. [TC-MOD-2.1] ChangeToMode Verification (DUT as Server)",
            "Test Case ID": "TC-MOD-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the ChangeToMode command functionality.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3a",
                    "3b",
                    "4"
                ],
                "Ref": [
                    "1.8.5, 1.8.9",
                    "1.8.5",
                    "1.8.6",
                    "1.8.5",
                    "1.8.6"
                ],
                "PICS": [
                    "MOD.S.A0002",
                    "MOD.S.A0003",
                    "MOD.S.C00.Rsp",
                    "MOD.S.A0003",
                    "MOD.S.C00.Rsp"
                ],
                "Test Step": [
                    "TH reads theSupportedModes attributefrom the DUT",
                    "TH reads theCurrentMode attributefrom the DUT",
                    "TH sends aChangeToModecommand to the DUT with a integer from the list in step 1, but different from the integer from step 2",
                    "TH reads theCurrentMode attributefrom the DUT",
                    "TH sends aChangeToModecommand to the DUT with a integer that is not in the list in step 1."
                ],
                "Expected Outcome": [
                    "Verify that the DUT response provides a list of supported modes.  Record the mode numbers for usage in steps 3 and 4.",
                    "Record the mode numbers for usage in steps 3.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Verify that the DUT responds with the integer provided in step 3a, not the integer from step 2.",
                    "Verify DUT responds with aINVALID_COMMAND(hex value 0x85/decimal 133) status response."
                ]
            }
        },
        {
            "Test Case Name": "91.2.2. [TC-MOD-2.2] ChangeToMode Verification (DUT as Client)",
            "Test Case ID": "TC-MOD-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can send a ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "1.8.5, 1.8.9",
                    "1.8.6"
                ],
                "PICS": [
                    "MOD.C.A0002",
                    "MOD.C.C00.Tx"
                ],
                "Test Step": [
                    "DUT reads theSupportedModes attributefrom the TH",
                    "DUT sends aChangeToModecommand to the TH with an integer from the list in step 1."
                ],
                "Expected Outcome": [
                    "Verify that the TH response provides a list of supported modes.  Record the mode numbers for usage in steps 2.",
                    "Verify TH responds with a successful (value 0x00) status response."
                ]
            }
        },
        {
            "Test Case Name": "91.3.1. [TC-MOD-3.1] OnMode Verification (DUT as Server)",
            "Test Case ID": "TC-MOD-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b",
                    "3c"
                ],
                "Ref": [
                    "1.8.5",
                    "1.8.5",
                    "",
                    "1.8.5,\n        1.8.9",
                    "1.8.6",
                    "1.5.7",
                    "1.5.7",
                    "1.8.5"
                ],
                "PICS": [
                    "MOD.S.A0005 &\n                MOD.S.F00",
                    "MOD.S.A0003 &\n                MOD.S.F00",
                    "MOD.S.A0003 &\n                MOD.S.A0005 &\n                MOD.S.F00",
                    "MOD.S.A0002 &\n                MOD.S.F00",
                    "MOD.S.A0002 &\n                MOD.S.C00.Rsp &\n                MOD.S.F00",
                    "OO.S.C00.Rsp &\n                MOD.S.F00",
                    "OO.S.C01.Rsp &\n                MOD.S.F00",
                    "MOD.S.A0003 &\n                MOD.S.F00"
                ],
                "Test Step": [
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "If theOnModeandCurrentModeattributes have the same value\n                                          orOnModeis null, proceed to step 2c, otherwise proceed to step 3a.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "Select a value from the list in step 2c with a different value than theOnModevalue read in step 1.TH sends commandChangeToModewith the selected value.",
                    "TH sends commandOff",
                    "TH sends commandOn",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "Verify that the DUT response contains an integer or is null.\n                                                                                 Record this value for use in step 2b.",
                    "Verify that the DUT response contains an integer.\n                                                                                 Record this value for use in step 2b.",
                    "",
                    "Verify that the DUT response contains a list of supported modes.\n                                                                                 Record the mode numbers for use in step 2d.",
                    "Verify that the DUT response contains a successful (value 0x00) status response.",
                    "Verify that the DUT response contains a successful (value 0x00) status response.",
                    "Verify that the DUT response contains a successful (value 0x00) status response.",
                    "Verify that the DUT response contains the integer recorded in step 1 ifOnModewas not null\n                                                                                 or that the DUT response is the integer written in step 2d."
                ]
            }
        },
        {
            "Test Case Name": "91.3.2. [TC-MOD-3.2] StartUpMode Verification (DUT as Server)",
            "Test Case ID": "TC-MOD-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "1.8.5",
                    "1.8.5",
                    "",
                    "1.8.5, 1.8.9",
                    "1.8.6",
                    "",
                    "1.8.5"
                ],
                "PICS": [
                    "MOD.S.A0004",
                    "MOD.S.A0003",
                    "MOD.S.A0003, MOD.S.A0004",
                    "MOD.S.A0002",
                    "MOD.S.A0002, MOD.S.C00.Rsp",
                    "",
                    "MOD.S.A0003"
                ],
                "Test Step": [
                    "TH reads theStartUpMode attributefrom the DUT",
                    "TH reads theCurrentMode attributefrom the DUT",
                    "If theStartUpModeandCurrentModeattributes have the same value, proceed to step 2c,  Otherwise proceed to step 3a.",
                    "TH reads theSupportedModes attributefrom the DUT",
                    "Select a value from the list in step 2c with a different value than theStartUpModevalue read in step 1. TH sends aChangeToModecommand to the DUT with the selected value.",
                    "Physically power cycle the device.",
                    "TH reads theCurrentMode attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response is an integer.  Record this value for usage in step 2.",
                    "Verify that the DUT response is an integer. Record this value for usage in steps 2b.",
                    "",
                    "Verify that the DUT response provides a list of supported modes.  Record the mode numbers for usage in step 2d.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "",
                    "Verify that the DUT response is the integer recorded in step 1."
                ]
            }
        },
        {
            "Test Case Name": "91.3.3. [TC-MOD-3.3] OTA Mode Verification (DUT as Server)",
            "Test Case ID": "TC-MOD-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode following an OTA update.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "1.8.5",
                    "1.8.5",
                    "",
                    "1.8.5, 1.8.9",
                    "1.8.6",
                    "",
                    "1.8.5"
                ],
                "PICS": [
                    "MOD.S.A0004",
                    "MOD.S.A0003",
                    "MOD.S.A0003, MOD.S.A0004",
                    "MOD.S.A0002",
                    "MOD.S.A0002, MOD.S.C00.Rsp",
                    "",
                    "MOD.S.A0003"
                ],
                "Test Step": [
                    "TH reads theStartUpMode attributefrom the DUT",
                    "TH reads theCurrentMode attributefrom the DUT",
                    "If theStartUpModeandCurrentModeattributes have the same value, proceed to step 2c,  Otherwise proceed to step 3a.",
                    "TH reads theSupportedModes attributefrom the DUT",
                    "Select a value from the list in step 2c with a different value than theStartUpModevalue read in step 1. TH sends aChangeToModecommand to the DUT with the selected value.",
                    "Perform an OTA update on the device that requires a reboot. Allow for the DUT to update and fully reboot.",
                    "TH reads theCurrentMode attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response is an integer.  Record this value for usage in step 2.",
                    "Verify that the DUT response is an integer. Record this value for usage in steps 2b and 3.",
                    "",
                    "Verify that the DUT response provides a list of supported modes.  Record the mode numbers for usage in step 2d.",
                    "Verify DUT responds with a successful (value 0x00) status response.  Record the value provided for usage in step 3.",
                    "",
                    "Verify that the DUT response is the integer recorded in step 2a or, if the mode was changed, 2d."
                ]
            }
        },
        {
            "Test Case Name": "91.3.4. [TC-MOD-3.4] OnMode Overwriting StartUpMode (DUT as Server)",
            "Test Case ID": "TC-MOD-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "1.8.5",
                    "1.8.5",
                    "",
                    "1.8.5, 1.8.9",
                    "1.8.6",
                    "1.8.5",
                    "1.8.5",
                    "",
                    "1.8.5"
                ],
                "PICS": [
                    "MOD.S.A0004",
                    "MOD.S.A0005",
                    "MOD.S.A0004 MOD.S.A0005",
                    "MOD.S.A0002",
                    "MOD.S.A0002 MOD.S.C00.Rsp",
                    "MOD.S.F00, MOD.S.A0005",
                    "OO.S.A4003",
                    "",
                    "MOD.S.A0003"
                ],
                "Test Step": [
                    "TH reads theStartUpMode attributefrom the DUT",
                    "TH reads theOnMode attributefrom the DUT",
                    "If theStartUpModeandOnModeattributes have the same value, proceed to step 2c,  Otherwise proceed to step 3.",
                    "TH reads theSupportedModes attributefrom the DUT",
                    "Select a value from the list in step 2c with a different value than theStartUpModevalue read in step 1. TH sends a write command forOnModeto the DUT with the selected value.",
                    "TH reads theOnMode attributefrom the DUT",
                    "TH writes 1 toStartUpOnOff attributeof the OnOff Cluster of the DUT",
                    "Physically power cycle the device.",
                    "TH reads theCurrentMode attributefrom the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT response is an integer.  Record this value for usage in step 2.",
                    "Verify that the DUT response is an integer different from StartUpMode.  Record this value for usage in step 2b.",
                    "",
                    "Verify that the response provides a list of supported modes.  Record the mode numbers for usage in step 2d.",
                    "Verify DUT responds with a successful (value 0x00) status response.",
                    "Record this number.",
                    "Verify that the response status was success.",
                    "",
                    "Verify that this number is the same with the number recorded in step 3."
                ]
            }
        }
    ],
    "RVC_Run_Mode": [
        {
            "Test Case Name": "96.1.1. [TC-RVCRUNM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-RVCRUNM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the RVC Run Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_RVCRUN_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "RVCRUNM.S.A0000(SupportedModes)",
                    "RVCRUNM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitseach Value field Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster derived tag value (Idle(0x4000), Cleaning(0x4001), Mapping(0x4002)) or in the MfgTags (0x8000 to 0xBFFF) rangeat least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Idle(0x4000), Cleaning(0x4001), Mapping(0x4002))if the Value field is in the MfgTags (0x8000 to 0xBFFF) range, the TagName field is a string with a length between 1 and 64Verify that at least one ModeOptionsStruct entry includes theIdle(0x4000)mode tag\nin the ModeTags fieldVerify that at least one ModeOptionsStruct entry includes theCleaning(0x4001)mode tag\nin the ModeTags fieldVerify that each ModeOptionsStruct entry includes at most one of the following mode tags:Idle(0x4000),Cleaning(0x4001), _Mapping(0x4002)Save the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "96.2.1. [TC-RVCRUNM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-RVCRUNM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "RVCRUNM.S.A0000(SupportedModes)",
                    "RVCRUNM.S.A0001(CurrentMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.M.CAN_TEST_MODE_FAILURE & RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.A0001(CurrentMode) & RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.M.CAN_TEST_MODE_FAILURE & RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.A0001(CurrentMode)",
                    "RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.A0001(CurrentMode) & RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.A0001(CurrentMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.RVCRUNM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCRUNM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.RVCRUNM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCRUNM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.RVCRUNM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) or one of Stuck(0x41), DustBinMissing(0x42), DustBinFull(0x43), WaterTankEmpty(0x44), WaterTankMissing(0x45), WaterTankLidOpen(0x46), MopCleaningPadMissing(0x47), BatteryLow(0x48), or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.RVCRUNM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.RVCRUNM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "96.2.2. [TC-RVCRUNM-2.2] Change to Mode restrictions with DUT as Server",
            "Test Case ID": "TC-RVCRUNM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mode change restrictions associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "AC.1.9.6.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.7.4",
                    "AC.7.4",
                    "AC.7.4",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.7.1, AC.1.9.7.2"
                ],
                "PICS": [
                    "",
                    "RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.A0000(SupportedModes)",
                    "RVCRUNM.S.A0001(CurrentMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "RVCRUNM.S.M.CAN_MANUALLY_CONTROLLED",
                    "",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)",
                    "RVCRUNM.S.C00.Rsp(ChangeToMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "Manually put the device in a RVC Run Mode cluster mode with theIdle(0x4000)mode tag and in a device state that allows changing to either of these modes: PIXIT.RVCRUNM.MODE_A, PIXIT.RVCRUNM.MODE_B",
                    "TH reads from the DUT theSupportedModesattribute of the RVC Run Mode cluster.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCRUNM.MODE_A",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCRUNM.MODE_B",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toidle_mode_dut",
                    "TH reads from the DUT the RVCOPSTATE\u2019s OperationalState attribute.",
                    "Manually put the device in any one of the operational states (Stopped(0x00),Paused(0x02),Charging(0x41) or Docked(0x42))",
                    "TH reads from the DUT the{A_OPERATIONALSTATE}attribute",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCRUNM.MODE_B",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toidle_mode_dut"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesSave the Mode field values assupported_run_modes_dutCheck that PIXIT.RVCRUNM.MODE_A is different from PIXIT.RVCRUNM.MODE_BCheck thatsupported_run_modes_dutincludes entries with the PIXIT.RVCRUNM.MODE_A and PIXIT.RVCRUNM.MODE_B mode idsCheck that the entry for the PIXIT.RVCRUNM.MODE_A mode id has noIdle(0x4000)mode tag in the ModeTags fieldCheck that the entry for the PIXIT.RVCRUNM.MODE_B mode id has noIdle(0x4000)mode tag in the ModeTags field",
                    "Verify that the DUT response contains an integer valueSave the value asidle_mode_dutVerify that thesupported_run_modes_dutentry matchingidle_mode_duthas theIdle(0x4000)mode tag.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to InvalidInMode(0x03).",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "Verify that the DUT response contains an integer valueSave the value asopstateIfopstateis one of Stopped(0x00), Paused(0x02), Charging(0x41) or Docked(0x42), continue to step 11",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to one of Stopped(0x00), Paused(0x02), Charging(0x41) or Docked(0x42)",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00)."
                ]
            }
        }
    ],
    "RVC_Clean_Mode": [
        {
            "Test Case Name": "101.1.1. [TC-RVCCLEANM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-RVCCLEANM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the RVC Clean Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_RVCCLEAN_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "RVCCLEANM.S.A0000(SupportedModes)",
                    "RVCCLEANM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined derived cluster tag value (DeepClean(0x4000), Vacuum(0x4001), Mop(0x4002)) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Idle(0x4000), Cleaning(0x4001), Mapping(0x4002))Verify that at least one ModeOptionsStruct entry includes either the Vacuum(0x4001) mode tag or the Mop(0x4002)mode tag in the ModeTags fieldSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "101.2.1. [TC-RVCCLEANM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-RVCCLEANM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "RVCCLEANM.S.A0000(SupportedModes)",
                    "RVCCLEANM.S.A0001(CurrentMode)",
                    "RVCCLEANM.S.C00.Rsp(ChangeToMode)",
                    "RVCCLEANM.S.M.CAN_TEST_MODE_FAILURE & RVCCLEANM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCCLEANM.S.A0001(CurrentMode) & RVCCLEANM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCCLEANM.S.M.CAN_TEST_MODE_FAILURE & RVCCLEANM.S.C00.Rsp(ChangeToMode)",
                    "RVCCLEANM.S.A0001(CurrentMode)",
                    "RVCCLEANM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCCLEANM.S.A0001(CurrentMode) & RVCCLEANM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCCLEANM.S.C00.Rsp(ChangeToMode)",
                    "RVCCLEANM.S.A0001(CurrentMode)",
                    "RVCCLEANM.S.C00.Rsp(ChangeToMode)",
                    "RVCCLEANM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.RVCCLEANM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCCLEANM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.RVCCLEANM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.RVCCLEANM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.RVCCLEANM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) or one of CleaningInProgress(0X40), or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.RVCCLEANM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.RVCCLEANM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "101.2.2. [TC-RVCCLEANM-2.2] Change to Mode restrictions with DUT as Server",
            "Test Case ID": "TC-RVCCLEANM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mode change restrictions associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "AC.1.9.6.2",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2"
                ],
                "PICS": [
                    "",
                    "RVCCLEANM.S.M.CAN_MANUALLY_CONTROLLED",
                    "RVCRUNM.S.A0000=1",
                    "RVCRUNM.S.A0001",
                    "RVCCLEANM.S.A0000(SupportedModes)",
                    "RVCCLEANM.S.A0001(CurrentMode)",
                    "RVCCLEANM.S.C00.Rsp(ChangeToMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "Manually put the device in a state in which the RVC Run Mode cluster\u2019s CurrentMode attribute is set to a mode without the Idle mode tag.",
                    "TH reads from the DUT theSupportedModesattribute of the RVC Run Mode cluster.",
                    "TH reads from the DUT theCurrentModeattribute of the RVC Run Mode cluster.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set tonew_clean_mode_th"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesSave the Mode field values assupported_run_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asrun_mode_dutVerify that thesupported_run_modes_dutentry matchingrun_mode_dutdoes not have the Idle (0x4000) mode tag.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesSave the Mode field values assupported_clean_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_clean_mode_dutSelect fromsupported_clean_modes_duta value which is different fromold_clean_mode_dut, and save it asnew_clean_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to InvalidInMode(0x03)."
                ]
            }
        }
    ],
    "Descriptor": [
        {
            "Test Case Name": "105.1.1. [TC-DESC-2.1] Descriptor Cluster Attributes with DUT as Server",
            "Test Case ID": "TC-DESC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the properties of Descriptor Cluster Attributes.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "9.5.4.1, 9.5.4.4",
                    "9.5.4.1, 9.5.4.4",
                    "9.5.4.2",
                    "9.5.4.3",
                    "9.5.4.4",
                    "9.5.4.5",
                    ""
                ],
                "PICS": [
                    "DESC.S.A0000(DeviceTypeList) & DESC.S.A0003(PartsList)",
                    "DESC.S.A0000(DeviceTypeList) & DESC.S.A0003(PartsList)",
                    "DESC.S.A0001(ServerList)",
                    "DESC.S.A0002(ClientList)",
                    "DESC.S.A0003(PartsList)",
                    "DESC.S.F00(TagList)&\n           DESC.S.A0004(TagList)",
                    ""
                ],
                "Test Step": [
                    "TH reads DeviceTypeList and PartsList attributes from DUT for Endpoint 0",
                    "TH reads DeviceTypeList and PartsList attributes from DUT for each Endpoint supported by DUT (except Endpoint 0).",
                    "TH reads \"ServerList\" attribute.",
                    "TH reads \"ClientList\" attribute",
                    "TH reads \"PartsList\" attribute.",
                    "TH reads from the DUT the \"TagList\" attribute.",
                    "The cluster tests applicable to each Device Type should be executed to make sure all mandatory (and applicable optional) attributes/commands are implemented."
                ],
                "Expected Outcome": [
                    "Verify that PartsList attribute is not empty and contains a list of all endpoints. (use this list of endpoints in step 1b)Verify that the DeviceTypeList count is at least one.Verify that the DeviceTypeList contains one Root Node Device Type and may only contain other Node Device Types  (device types with scope=node, it can be any of the following Power Source, OTA Requestor, OTA Provider) next to the Root Node Device Type.Read each element from the DeviceTypeList and check for the following:DeviceType should be one of the DeviceTypes listed in the PIXIT.DESC.DeviceTypeConformanceList.Revision should match the revision of that Device Type in the PIXIT.DESC.DeviceTypeConformanceList.Revision value is not less than 1.",
                    "Verify that the DeviceTypeList count is at least one.If the DeviceTypeList contains more than one Application Device Type, verify that all the Application Device Types are part of the same superset.Verify the DeviceTypeList does not contain the Root Node Device Type.Read each element from the DeviceTypeList and check for the following:DeviceType should match to the DeviceType listed in the PIXIT.DESC.DeviceTypeConformanceList.Revision should match the revision of that Device Type in the PIXIT.DESC.DeviceTypeConformanceList.Revision value is not less than 1.",
                    "If ServerList count is greater than 0 read each element from the list and check for the following:Each cluster marked as server and mandatory in PIXIT.DESC.DeviceTypeConformanceList, SHALL be in the ServerList.",
                    "If ClientList count is greater than 0 read each element from the list and check for the following:Each cluster marked as client and mandatory in PIXIT.DESC.DeviceTypeConformanceList, SHALL be in the ClientList.",
                    "If PartsList count is greater than 0, read each Endpoint from the list and check for the following:Endpoint is in the range of 1 to 65534 and not equal to the Endpoint of the Endpoint where this PartsList was read (i..e no self-reference)Repeat Steps 1b to 4 in a recursive manner for the Endpoints read in this step (i.e. recursively walk all the Endpoints encountered in all PartsLists)",
                    "Verify that the DUT response contains a TagList which contains at least one element.Read each TagStruct from the list and check for the following:Number of entries in TagList is in the range of 1 to 6 and each entry contains at least a NamespaceID and a Tag property. Confirm that each entry is unique (i.e. no duplicate tags).Confirm that each non-manufacturer specific tag is from a namespace defined in the spec (either from an common namespace or from a namespace for the particular device type).If the MfgCode field is not null, confirm that it is theVendor IDof the manufacturer who has defined a certain namespace and that the NamespaceID field indicates which namespace from the manufacturer is associated with the Tag field.If a manufacturer specific Tag field is indicated, at least one standardized tag which is not from any manufacturer\u2019s namespace shall be included in the TagList.Tag field is the ID of a semantic tag within the namespace indicated by the NamespaceID property.If the Label field is not null, it contains human-readable text suitable for display on a client. The Label field SHALL be present when the MfgCode is not null.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "105.1.2. [TC-DESC-2.2] Descriptor Cluster Duplicate Condition with DUT as Server",
            "Test Case ID": "TC-DESC-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the properties of Descriptor Cluster Attributes when the duplicate condition exists.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "9.2, 9.5.4.1, 9.5.4.4, 9.5.4.5",
                    "9.2, 9.5.4.1, 9.5.4.4, 9.5.4.5"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theDeviceTypeListandPartsListattributes, and theTagListattribute if supported, for each endpoint supported by DUT",
                    "Identify all the children of the root node endpoint."
                ],
                "Expected Outcome": [
                    "An endpoint that has aPartsListcount greater than 0 is a parent endpoint.Identify all the tree-pattern style parent endpoints on the device. Omit any endpoint with the Content App device type. For each endpoint in this list, repeat steps 1-3 below:For each child endpoint in thePartsListof the parent endpoint, for each device type in theDeviceTypeListof each child endpoint,\nadd the child endpoint to a device type list containing endpoints of that device type.This yields an overview of which child endpoint(s) support which device type(s) for the parent endpoint.These device type lists are used in step 2.For each device type list that contains more than one child endpoint,Verify that each child endpoint in the device type list supports the TagList feature in its descriptor cluster feature map.Verify that each child endpoint in the device type list has aTagListin its descriptor cluster.Verify that the set of tags in theTagListof each child endpoint in the device type list\nis not identical to the set of tags in theTagListof the other child endpoints in the device type list\nregardless of the ordering of the tags in eachTagList.Discard the device type list(s).",
                    "Repeat steps 1 to 3 of step 1 above for the direct children of the root node endpoint."
                ]
            }
        }
    ],
    "General_Diagnostics": [
        {
            "Test Case Name": "109.1.1. [TC-DGGEN-2.1] Attributes [DUT as Server]",
            "Test Case ID": "TC-DGGEN-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the attributes of the general diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4a",
                    "4b",
                    "4c",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "10c",
                    "10d"
                ],
                "Ref": [
                    "",
                    "11.11.7.2",
                    "11.11.7.2",
                    "11.11.7.1",
                    "11.11.7.3",
                    "11.11.7.3",
                    "11.11.7.3",
                    "11.11.7.5",
                    "11.11.7.6",
                    "11.11.7.7",
                    "11.11.7.8",
                    "11.11.7.9",
                    "11.11.7.4",
                    "11.11.7.4",
                    "11.11.7.4",
                    "11.11.7.4"
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0001(RebootCount)",
                    "DGGEN.S.A0001(RebootCount)",
                    "DGGEN.S.A0000(NetworkInterfaces)",
                    "DGGEN.S.A0002(Uptime)",
                    "DGGEN.S.A0002(Uptime)",
                    "DGGEN.S.A0002(Uptime)",
                    "DGGEN.S.A0004(BootReason)",
                    "DGGEN.S.A0005(ActiveHardwareFaults)",
                    "DGGEN.S.A0006(ActiveRadioFaults)",
                    "DGGEN.S.A0007(ActiveNetworkFaults)",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.A0003(TotalOperationalHours)",
                    "DGGEN.S.A0003(TotalOperationalHours)",
                    "DGGEN.S.A0003(TotalOperationalHours)",
                    "DGGEN.S.A0003(TotalOperationalHours)"
                ],
                "Test Step": [
                    "Factory Reset the DUT and Commission DUT to TH",
                    "TH reads a RebootCount attribute value from DUT.Store the value in boot_count1.",
                    "Reboot the DUT.TH reads a RebootCount attribute value from DUT.Store the value in boot_count2.",
                    "TH reads NetworkInterfaces structure attribute from DUT.",
                    "TH reads the Uptime attribute value of DUT. Store the value in uptime1",
                    "Wait 10 seconds.TH reads a Uptime attribute value of DUT. Store the value in uptime2",
                    "Reboot the DUTTH reads a Uptime attribute value of DUT. Store the value in uptime3",
                    "DUT undergoes a reboot process. TH reads a attribute value from DUT.",
                    "TH reads ActiveHardwareFaults attribute value from DUT. Subscription may be possible for this attribute.",
                    "TH reads ActiveRadioFaults attribute value from DUT. Subscription is possible for this attribute.",
                    "TH reads ActiveNetworkFaults attribute value from DUT. Subscription is possible for this attribute.",
                    "TH reads TestEventTriggersEnabled attribute value. If this value is set True, then a certain test mode will be performed (or triggered) according to pre-provisioned client and server test mode.",
                    "TH reads the TotalOperationalHours attribute from the DUT.Store the value in operational_hours1.\nWait for 2 hours and 5 minutes.TH reads the TotalOperationalHours attribute from the DUT.Store this value in operational_hours2.",
                    "Factory Reset the DUT and recommission the DUT to TH.TH reads the TotalOperationalHours attribute from the DUT.",
                    "Wait for 1 hour 5 minutes.TH reads the TotalOperationalHours attribute from the DUT.",
                    "Reboot the DUT.TH reads the TotalOperationalHours attribute from the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the boot_count1 value fits in the range of a uint16. Verify that boot_count1 is either 0 or 1.",
                    "Verify that boot_count2 is greater than boot_count1.",
                    "The read data type must match the value listed in the specification(s) 11.11.6.5 NetworkInterfaces structure.  Each logical NW interface shall be represented by a single entry here. Structure data includes Name (interface name), IsOperational (indicates the node is operational in the fabric), OffPremiseServicesReachableIPv4 (Ability to reach off-premise services it uses by utilizing IPv4, if not NULL),  OffPremiseServicesReachableIPv6 (Ability to reach off-premise services it uses by utilizing IPv6, if not NULL), HardwareAddress (MAC-layer address for a 802.3 or IEEE 802.11-2020 network interface, or 802.15.4), IPv4Address, IPv6Address (a list of the unicast IPv6 addresses that are GUA and ULA), Type (Interface types).",
                    "The data type must be uint64.",
                    "",
                    "Verify that uptime2 is greater than uptime1.Verify that uptime3 is lesser than uptime2.",
                    "The data type must match the value listed in Table 105 BootReason ENUM table. For example, with the normal reboot power cycle, PowerOnReboot indicates the value of 1.",
                    "When operational, the attribute response should be empty. But when a hardware fault occurs, the return attribute value must match the value listed in the HardwareFault ENUM table 11.11.6.1. After the elimination of fault cause(s), the attribute value should be empty. This value may be subscribed.",
                    "When operational, the attribute response should be empty. But when a radio fault occurs, the return attribute value must match the value listed in the RadioFault ENUM table. 11.11.6.2.  After the elimination of fault cause(s), the attribute value should be empty. This value may be subscribed.",
                    "When operational, the attribute response should be empty. But when a network  fault occurs, the return attribute value must match the value listed in the NetworkFault ENUM table 11.11.6.3. After the elimination of fault cause(s), the attribute value should be empty. This value may be subscribed.",
                    "Indicates that node is configured for test event triggers. When configured TRUE, Node has been configured with one or more test event triggers by virtue of the internally programmed non zero EnableKey value.",
                    "Verify that the data type of the value of operation_hours1 or operational_hours2 is within the range of a uint32 value.Verify that operational_hours2 is greater than operational_hours1.",
                    "Verify that the value of \"TotalOperationalHours\" is 0.",
                    "Verify that the value of \"TotalOperationalHours\" is 1.",
                    "Verify that the value of \"TotalOperationalHours\" is 1."
                ]
            }
        },
        {
            "Test Case Name": "109.1.2. [TC-DGGEN-2.2] Event Functionality [DUT as Server]",
            "Test Case ID": "TC-DGGEN-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the event functionality of the general diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "11.11.9.1",
                    "11.11.9.2",
                    "11.11.9.3",
                    "11.11.9.4"
                ],
                "PICS": [
                    "",
                    "DGGEN.S.E00(HardwareFaultChange)",
                    "DGGEN.S.E01(RadioFaultChange)",
                    "DGGEN.S.E02(NetworkFaultChange)",
                    "DGGEN.S.E03(BootReason)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Induce a DUT hardware failure two times as addressed in HardwareFault ENUM table 11.11.6.1. (Ex. Pull the DUT power plug off causing power source failure, and rejoin DUT back to previous TH fabric. Next, repeat power plug off and rejoining DUT back to previous TH fabric one more time.)",
                    "Induce a DUT radio failure two times as addressed in RadioFault ENUM table 11.11.6.2. (Ex. Put the DUT under metallic cover causing Wi-Fi failure. Uncover DUT and make DUT rejoining DUT back to previous TH fabric. Repeat the radio failure one more time and rejoin DUT back to previous TH fabric.",
                    "Induce a DUT radio failure two times as addressed in NetworkFault ENUM table 11.11.6.3. (Ex. Put the DUT under metallic cover causing network failure. Uncover DUT and rejoin DUT back to previous TH fabric. Pull the DUT power plug off causing power source failure. rejoining DUT back to previous TH fabric.)",
                    "Reboot DUT with a normal reboot process. Rejoin DUT back to previous TH fabric."
                ],
                "Expected Outcome": [
                    "",
                    "TH receives HardwareFaultChange event with current and previous data specified by HardwareFault ENUM table 11.11.6.1. For the first failure, observe HardwareFaultChange ID 0 value is appropriately changed. For the second failure, observe HardwareFaultChange ID 0 and 1 values are changed appropriately.",
                    "TH receives RadioFaultChange event with current and previous data specified by RadioFault ENUM table 11.11.6.2 according to two repeated failures.",
                    "TH receives NetworkFaultChange event with current and previous data specified by NetworkFault ENUM table 11.11.2.3 according to two failure causes.",
                    "TH read the event data of BootReason specified by Table 103 BootReason ENUM table."
                ]
            }
        },
        {
            "Test Case Name": "109.1.3. [TC-DGGEN-2.3] Command Received [DUT as Server]",
            "Test Case ID": "TC-DGGEN-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the event functionality of the general diagnostics cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "8",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "11.12.7.1",
                    "11.12.7.1",
                    "11.12.7.1",
                    "11.12.7.4",
                    "11.12.7.4",
                    "11.12.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C03.Rsp(PayloadTest)",
                    "DGGEN.S.C03.Rsp(PayloadTest)",
                    "DGGEN.S.C03.Rsp(PayloadTest)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads TestEventTriggersEnabled attribute value",
                    "Invoke the TestEventTrigger command with EnableKey field set to PIXIT.DGGEN.ENABLEKEY and EventTrigger field set to 0.",
                    "Invoke the TestEventTrigger command with EnableKey field set to 16 bytes of all zeroes and EventTrigger field set to 0.",
                    "Invoke the TestEventTrigger command with EnableKey field set to 8 bytes of all zeroes and EventTrigger field set to 0.",
                    "Invoke the PayloadTestRequest command with EnableKey field set to PIXIT.DGGEN.ENABLEKEY, Value set to 0x1, and Count set to 1.",
                    "Invoke the PayloadTestRequest command with EnableKey field set to 16 bytes of all zeroes, Value set to 1, and Count set to 1 .",
                    "Invoke the PayloadTestRequest command with EnableKey field set to 8 bytes of all zeroes, Value set to 1, and Count set to 1 ."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the value is of bool typeIf this value is set to True, then proceed with step 3, otherwise skip step 3.",
                    "Verify that DUT responds with INVALID_COMMAND.",
                    "Verify that DUT responds with CONSTRAINT_ERROR.",
                    "Verify that DUT responds with CONSTRAINT_ERROR.If TestEventTriggersEnabled value from test step 2 is set to True, then proceed with step 6, otherwise skip step 6.",
                    "Verify that DUT responds with Payload with octstrhex:01.",
                    "Verify that DUT responds with CONSTRAINT_ERROR.",
                    "Verify that DUT responds with CONSTRAINT_ERROR."
                ]
            }
        },
        {
            "Test Case Name": "109.1.4. [TC-DGGEN-2.4] TimeSnapshot Command Tests [DUT as Server]",
            "Test Case ID": "TC-DGGEN-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the TimeSnapshotResponse command sent by the server in response\n to the TimeSnapshot command sent by the client.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "4",
                    "4a",
                    "4b",
                    "4c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads the ServerList attribute from the Descriptor cluster on EP0",
                    "If the ServerList contains the Time Synchronization Cluster ID, TH sends the SetUTCTime command with the UTCTime set to current epoch-us time and Granularity set to 3(MillisecondsGranularity). If the ServerList does not contain the Time Synchronization cluster ID, set TimeSyncSupported to False.",
                    "If the ServerList contains the Time Synchronization cluster ID, TH reads the Time Synchronization cluster\u2019s UTCTime attribute on Endpoint 0. If UTCTime is present and non-null, then set TimeSyncSupported to True. Else set TimeSyncSupported to False",
                    "TH reads the UpTime attribute from the DUT. Save the value in UpTime1",
                    "If TimeSyncSupported is True, Run steps 3a - 3e",
                    "TH reads the UTCTime attribute from the Time Synchronization cluster. Save it in UTCTime1",
                    "Wait for 1 second.",
                    "TH sends a TimeSnapshot command to the DUT.",
                    "Wait for 1 second.",
                    "TH sends a TimeSnapshot command to the DUT.",
                    "If TimeSyncSupported is False, Run steps 4a-4c.",
                    "TH sends a TimeSnapshot command to the DUT.",
                    "Wait for 1 second.",
                    "TH sends a TimeSnapshot command to the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that UpTime1 is greater than 0.",
                    "",
                    "Verify that the UTCTime value is not null.",
                    "",
                    "Verify that the DUT sends a TimeSnapshotResponse with the following conditions met:Value of PosixTimeMs field is not null.Value of (SystemTimeMs field / 1000) is greater than or equal to UpTime1.PosixTimeMs field converted to a UTC timestamp is greater than or equal to UTCTime1 converted to a UTC timestamp.On success of prior verifications:Save the value of the SystemTimeMs field as SystemTimeMs1.Save the value of the PosixTimeMs field as PosixTimeMs1.",
                    "",
                    "Verify that the DUT sends a TimeSnapshotResponse with the following fields:Value of PosixTimeMs field is not null and greater than PosixTimeMs1.Value of SystemTimeMs field is greater than SystemTimeMs1.",
                    "",
                    "Verify that the DUT sends a TimeSnapshotResponse with the following fields:Value of PosixTimeMs field is null.Value of (SystemTimeMs field / 1000) is greater than or equal to UpTime1.On success of prior verifications, save the value of SystemTimeMs field as SystemTimeMs1.",
                    "",
                    "Verify that the DUT sends a TimeSnapshotResponse with the following fields:Value of PosixTimeMs field is null.Value of SystemTimeMs field is greater than SystemTimeMs1."
                ]
            }
        },
        {
            "Test Case Name": "109.1.5. [TC-DGGEN-3.1] Matter Specification 1.2 errata [DUT as Server]",
            "Test Case ID": "TC-DGGEN-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The AverageWearCount attribute of the General Diagnostics cluster was accidentally introduced in the 1.2 SDK, but was not added to the specification. This is therefore considered to be a non-standard attribute in the standard range, but it will NOT be caught by the automated check process because it is present in the tools. This test verifies that this attribute is not present on the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads the AttributeList global attribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the list does not include attribute ID 0x09"
                ]
            }
        },
        {
            "Test Case Name": "109.1.6. [TC-DGGEN-3.2] DMTEST Feature Test [DUT as Server]",
            "Test Case ID": "TC-DGGEN-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "NIL",
            "Test Procedure": {
                "#": [
                    "0",
                    "1",
                    "2"
                ],
                "TestStep": [
                    "Commission DUT (already done)",
                    "TH reads the MaxPathsPerInvoke attribute form the Basic Information Cluster from DUT. Save the value as `max_paths_per_invoke",
                    "TH reads FeatureMap attribute form the General Diagnostics Cluster from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Read is successful",
                    "Verify that the FeatureMap value has the DMTEST feature bit (0) set to 1 ifmax_path_per_invoke> 1"
                ]
            }
        }
    ],
    "General_Commissioning": [
        {
            "Test Case Name": "113.1.1. [TC-CGEN-2.1] Breadcrumb, BasicCommissioningInfo, RegulatoryConfig, LocationCapability and SupportsConcurrentConnection attributes [DUT as Server]",
            "Test Case ID": "TC-CGEN-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify for the following checks:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "11.9.6.1",
                    "11.9.6.1",
                    "11.9.6.1",
                    "11.9.6.3",
                    "11.9.6.4",
                    "11.9.6.2",
                    "11.9.6.5"
                ],
                "PICS": [
                    "CGEN.S.A0000(Breadcrumb)",
                    "CGEN.S.A0000(Breadcrumb)",
                    "CGEN.S.A0000(Breadcrumb)",
                    "CGEN.S.A0002(RegulatoryConfig)",
                    "CGEN.S.A0003(LocationCapability)",
                    "CGEN.S.A0001(BasicCommissioningInfo)",
                    "CGEN.S.A0004(SupportsConcurrentConnection)"
                ],
                "Test Step": [
                    "TH1 reads the BreadCrumb Attribute from the DUT",
                    "TH1 writes the BreadCrumb attribute as '1' to the DUT",
                    "TH1 reads the BreadCrumb attribute from the DUT",
                    "TH1 reads the RegulatoryConfig attribute from the DUT",
                    "TH1 reads the LocationCapability attribute from the DUT",
                    "TH1 reads BasicCommissioningInfo attribute from DUT",
                    "TH1 reads SupportsConcurrentConnection attribute from the DUT"
                ],
                "Expected Outcome": [
                    "Verify the BreadCrumb value is of type uint64",
                    "",
                    "Verify the BreadCrumb value is '1' in the DUT",
                    "Verify that the RegulatoryConfig attribute value is any one of the values: 0,1 or 2. 0:Indoor only 1:Outdoor only 2:IndoorOutdoor",
                    "Verify that the LocationCapability attribute is any one of the values: 0,1 or 2.0:Indoor only1:Outdoor only2:IndoorOutdoor",
                    "Verify that the BasicCommissioningInfo attribute has the following field:FailSafeExpiryLengthSeconds field value is within a duration range of 0 to 65535",
                    "Verify that SupportsConcurrentConnection value is 'Bool' in the DUT"
                ]
            }
        },
        {
            "Test Case Name": "113.1.2. [TC-CGEN-2.2] ArmFailSafe command verification [DUT as Server]",
            "Test Case ID": "TC-CGEN-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that the failsafe expires without external intervention at PIXIT.CGEN.FailsafeExpiryLengthSeconds",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44"
                ],
                "Ref": [
                    "11.17.6.5",
                    "11.9.5.2",
                    "11.9.7.2",
                    "11.9.6.1",
                    "11.17.7.13",
                    "11.17.6.5",
                    "11.9.7.2",
                    "11.17.6.5",
                    "11.9.7.211.9.6.1",
                    "",
                    "11.9.7.2",
                    "",
                    "11.18.8.1",
                    "11.9.7.2",
                    "",
                    "11.17.7.13",
                    "11.9.7.2",
                    "11.17.6.1",
                    "11.17.6.2",
                    "11.17.6.2",
                    "5.5",
                    "11.9.7.2",
                    "11.17.6.1",
                    "11.17.6.2",
                    "11.17.6.2",
                    "5.5",
                    "11.17.7.13",
                    "11.17.6.2",
                    "11.9.7.2",
                    "11.17.7.13",
                    "11.17.6.5",
                    "11.9.7.2",
                    "11.9.7.2",
                    "11.17.6.5",
                    "11.9.7.2",
                    "11.9.7.2",
                    "11.9.7.2",
                    "",
                    "11.17.7.13",
                    "11.17.6.5",
                    "",
                    "11.9.7.2",
                    "",
                    "11.17.6.5"
                ],
                "PICS": [
                    "",
                    "CGEN.S.A0001(BasicCommissioningInfo)",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "CGEN.S.A0000(Breadcrumb)",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.A0000(Breadcrumb)",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)CGEN.S.C01.Tx(ArmFailSafeResponse)",
                    "CGEN.S.C00.Rsp(ArmFailSafe)",
                    "CGEN.S.C00.Rsp(ArmFailSafe)",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C00.Rsp(ArmFailSafe)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster and saves the number of list items asnumTrustedRootsOriginal",
                    "TH1 reads the BasicCommissioningInfo attribute and saves the MaxCumulativeFailsafeSeconds asmaxFailsafe",
                    "TH1 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1",
                    "TH1 reads the Breadcrumb attribute",
                    "TH1 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1. TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 waits for PIXIT.CGEN.FailsafeExpiryLengthSeconds to ensure the failsafe timer has expired",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 reads the Breadcrumb attribute",
                    "TH1 repeats steps3through5",
                    "TH1 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to 0",
                    "Repeat steps8through9",
                    "TH1 sends the OpenCommissioningWindow command to the Administrator Commissioning cluster",
                    "TH1 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds",
                    "TH2 opens a PASE session with the DUT",
                    "TH2 obtains or generates a TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1. TH2 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate",
                    "TH2 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to 0",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a non-fabric-filtered read and saves the returned list asnocs",
                    "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read and saves the returned list asfabrics",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster and saves the returned list astrustedroots",
                    "TH2 starts commissioning the DUT. It performs all steps up to establishing a CASE connection, but DOES NOT send the CommissioningComplete command",
                    "TH2 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to 0",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a non-fabric-filtered read",
                    "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH2 fully commissions the DUT",
                    "TH2 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH2. TH2 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate",
                    "TH1 reads the Fabrics attribute from the Node Operational Credentials cluster using a non-fabric-filtered read",
                    "TH1 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1",
                    "TH1 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1. TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set tomaxFailsafe",
                    "TH1 waits for PIXIT.CGEN.FailsafeExpiryLengthSeconds",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH2 sends ArmFailSafe command to the DUT\nwith ExpiryLengthSeconds field set to PIXIT.CGEN.FailsafeExpiryLengthSeconds and the Breadcrumb value as 1",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set tomaxFailsafe",
                    "TH1 saves the current wall time clock in seconds asTstart",
                    "TH1 obtains or generates a new TrustedRootCertificate that is different from the previously commissioned TrustedRootCertificate for TH1. TH1 sends an AddTrustedRootCertificate command to the Node Operational Credentials cluster to install this new certificate",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 waits until the current wall time clock isTstart+maxFailsafe/2",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set tomaxFailsafe",
                    "TH1 waits until the current wall time clock isTstart+maxFailsafe.maxFailsafeis the maximum amount of time a failsafe can be armed for, so the failsafe is required to time out at this point, despite having been re-armed in step42.",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "Verify that the breadcrumb attribute is 1",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify that the number of items in the returned list isnumTrustedRootsOriginal+ 1",
                    "",
                    "Verify that the number of items in the returned list isnumTrustedRootsOriginal",
                    "Verify that the breadcrumb attribute is 0",
                    "",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "",
                    "Verify that the DUT returns a status code of SUCCESS",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as BusyWithOtherAdmin",
                    "Verify that TH2 successfully opens a PASE session",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "",
                    "",
                    "",
                    "",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "Verify that the returned list matchesnocs",
                    "Verify that the returned list matchesfabrics",
                    "Verify that the returned list matchestrustedroots",
                    "Verify that the commissioning completes successfully",
                    "Verify that the DUT responds with FAILSAFE_REQUIRED",
                    "Verify that the returned list includes an additional entry for TH2 when compared tofabrics",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify that the number of items in the returned list isnumTrustedRootsOriginal+ 1",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "",
                    "Verify that the number of items in the returned list is stillnumTrustedRootsOriginal+ 1",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as BusyWithOtherAdmin",
                    "",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify that the number of items in the returned list isnumTrustedRootsOriginal+ 1",
                    "",
                    "Verify that the DUT responds with ArmFailSafeResponse with ErrorCode as 'OK'(0) and DebugText argument is of type string with max length 512 or empty",
                    "",
                    "Verify that the number of items in the returned list isnumTrustedRootsOriginal"
                ]
            }
        },
        {
            "Test Case Name": "113.1.3. [TC-CGEN-2.4] Verification For CommissioningError on response message [DUT as Server]",
            "Test Case ID": "TC-CGEN-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that ErrorCode field values are executed by DUT in response commands when TH1 sends commands with different error scenario",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "11.18.8.1",
                    "5.5",
                    "11.9.7.6",
                    "11.18.8.3",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "11.18.8.1",
                    "5.5",
                    "11.9.7.6",
                    "11.18.8.3",
                    "11.18.8.1",
                    "5.5",
                    "11.9.7.2",
                    "11.9.6.4",
                    "11.9.7.5",
                    "11.9.7.5",
                    "11.9.7.2",
                    "11.9.7.5",
                    "11.17.6.6.",
                    "11.17.7.12"
                ],
                "PICS": [
                    "",
                    "",
                    "CGEN.S.C04.Rsp(CommissioningComplete)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C04.Rsp(CommissioningComplete)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CGEN.S.C02.Rsp(SetRegulatoryConfig)CGEN.S.C03.Tx(SetRegulatoryConfigResponse)",
                    "CGEN.S.C04.Rsp(CommissioningComplete)",
                    "",
                    "CGEN.S.C04.Rsp(CommissioningComplete)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 opens a commissioning window on the DUT by sending an OpenCommissioningWindow command to the Administrator Commissioning Cluster on EP0 over CASE. TH1 saves the generated QR or manual setup code for commissioning asWindowSetupPayload",
                    "TH2 begins commissioning the DUT usingWindowSetupPayload, but stops after sending the first arm failsafe command",
                    "TH2 sends a CommissioningComplete command to the GeneralCommissioning cluster on EP0 of the DUT over the PASE connection opened in step2",
                    "TH1 revokes the commissioning window by sending a RevokeCommissioning command to the Administrator Commissioning Cluster on EP0 over CASE",
                    "Repeat steps1through4, stopping after configuring the regulatory config in step2",
                    "Repeat steps1through4, stopping after sending the PAI certificate request in step2",
                    "Repeat steps1through4, stopping after sending the DAC certificate request in step2",
                    "Repeat steps1through4, stopping after sending the attestation request in step2",
                    "Repeat steps1through4, stopping after sending the operational certificate signing request in step2",
                    "Repeat steps1through4, stopping after sending the trusted root certificate in step2",
                    "TH1 opens a commissioning window on the DUT by sending an OpenCommissioningWindow command to the Administrator Commissioning Cluster on EP0 over CASE. TH1 saves the generated QR or manual setup code for commissioning asWindowSetupPayload",
                    "TH2 begins commissioning the DUT usingWindowSetupPayload, but stops after sending the AddNOC command",
                    "TH2 sends a CommissioningComplete command to the GeneralCommissioning cluster on EP0 of the DUT over the PASE connection opened in step12",
                    "TH1 revokes the commissioning window by sending a RevokeCommissioning command to the Administrator Commissioning Cluster on EP0 over CASE",
                    "TH1 opens a commissioning window on the DUT by sending an OpenCommissioningWindow command to the Administrator Commissioning Cluster on EP0 over CASE. TH1 saves the setup information asWindowSetupPayload",
                    "TH2 fully commissions the DUT usingWindowSetupPayload",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster over CASE with the ExpiryLengthSeconds field set to 900",
                    "TH1 reads the LocationCapability Attribute from the General Commissioning cluster over CASE and saves it aslocationCap",
                    "TH1 sends SetRegulatoryConfig command to the DUT over CASE with the fields set as follows:CountryCode: \"XX\"Breadcrumb: 0NewRegulatoryConfig:\niflocationCapis Indoor, set to Outdoor\niflocationCapis Outdoor, set to Indoor\niflocationCapis IndoorOutdoor, set to 3 (invalid enum)",
                    "TH2 Sends the CommissioningComplete command to the DUT over a CASE connection",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster over CASE with the ExpiryLengthSeconds field set to 0",
                    "TH1 Sends the CommissioningComplete command to the DUT over CASE",
                    "TH2 reads its fabric index from the Operational Credentials cluster CurrentFabricIndex attribute over CASE",
                    "TH1 sends a RemoveFabric command to the Node Operational Credentials cluster over CASE with FabricIndex set toth2FabricIndex"
                ],
                "Expected Outcome": [
                    "Verify that the DUT responds with SUCCESS",
                    "",
                    "Verify that the DUT responds with UNSUPPORTED_ACCESS",
                    "Verify that the DUT responds with SUCCESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that the DUT responds with SUCCESS",
                    "",
                    "Verify that the DUT responds the cluster specific error InvalidAuthentication (2)",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify that the DUT responds with SUCCESS",
                    "Verify SUCCESS",
                    "Verify that the DUT returns SUCCESS",
                    "Verify the read is successful",
                    "Verify that the DUT sends SetRegulatoryConfigResponse command to TH1 with field ErrorCode as 'ValueOutsideRange'(1) and DebugText argument is of type string with max length 512 or an empty or absent string value",
                    "Verify that the DUT responds with the cluster-specific error InvalidAuthentication (2)",
                    "Verify that the DUT returns SUCCESS",
                    "Verify that DUT sends CommissioningCompleteResponse Command to TH1 With ErrorCode as 'NoFailSafe'(3) and DebugText as a 'string' value",
                    "Read successful, save asth2FabricIndex",
                    "Verify SUCCESS"
                ]
            }
        }
    ],
    "User_Label": [
        {
            "Test Case Name": "116.1.1. [TC-ULABEL-2.1] User label cluster read verification [DUT-server]",
            "Test Case ID": "TC-ULABEL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that userlabel cluster with LabelList attribute has at least 4 entries per node.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "9.9.4"
                ],
                "PICS": [
                    "ULABEL.S.A0000(LabelList)"
                ],
                "Test Step": [
                    "TH reads LabelList from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the LabelList is empty or least 4 entriesEach tuple has following fields:Label field is of type string and have a length up to 16 bytesValue field is of type string and have a length up to 16 bytes"
                ]
            }
        },
        {
            "Test Case Name": "116.1.2. [TC-ULABEL-2.2] User Label cluster write verification [DUT-server]",
            "Test Case ID": "TC-ULABEL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that TH can write the userlabel cluster with LabelList attribute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "9.7.4",
                    "9.9.4"
                ],
                "PICS": [
                    "ULABEL.S.A0000(LabelList)",
                    "ULABEL.S.A0000(LabelList)"
                ],
                "Test Step": [
                    "TH writes LabelList attribute on the DUT with following entry: \"roomName\":\"master bedroom 1\",\"orientation\":\"east\", \"floor\":\"2\", \"roomType\":\"bedroom\"",
                    "TH reads LabelList attribute of the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds with status code as 'success'",
                    "Verify the DUT responds with following same 4 entries as written in previous steps"
                ]
            }
        },
        {
            "Test Case Name": "116.1.3. [TC-ULABEL-2.3] User Label cluster constraint_error verification [DUT-server]",
            "Test Case ID": "TC-ULABEL-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that TH can\u2019t write the userlabel cluster with LabelList attribute of constraint more the 16 bytes and receive a status code from the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "9.7.4",
                    "9.7.4"
                ],
                "PICS": [
                    "ULABEL.S.A0000(LabelList)",
                    "ULABEL.S.A0000(LabelList)"
                ],
                "Test Step": [
                    "TH writes LabelList attribute of the DUT by setting \"room\":\"17_bytesIsTooLong\"",
                    "TH writes LabelList attribute of the DUT by setting \"17_bytesIsTooLong\":\"foobar\""
                ],
                "Expected Outcome": [
                    "DUT sends status code as CONSTRAINT_ERROR",
                    "DUT sends status code as CONSTRAINT_ERROR"
                ]
            }
        },
        {
            "Test Case Name": "116.1.4. [TC-ULABEL-2.4] User Label cluster empty entry verification [DUT-server]",
            "Test Case ID": "TC-ULABEL-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that TH can write the userlabel cluster with LabelList attribute of constraint with empty entry.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "9.7.4",
                    "9.9.4",
                    "9.7.4",
                    "9.9.4"
                ],
                "PICS": [
                    "ULABEL.S.A0000(LabelList)",
                    "ULABEL.S.A0000(LabelList)",
                    "ULABEL.S.A0000(LabelList)",
                    "ULABEL.S.A0000(LabelList)"
                ],
                "Test Step": [
                    "TH writes LabelList attribute of the DUT with entry as following: \"room\":\"bedroom 1\",\"orientation\":\"east\"  \"",
                    "TH reads LabelList attribute of the DUT",
                    "TH writes LabelList attribute of the DUT with an entry as empty values in the list",
                    "TH reads LabelList attribute of the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds with status code as 'success'",
                    "Verify the DUT responds with same tuples as provided",
                    "Verify that DUT responds with status code as 'success'",
                    "Verify the DUT responds with an entry as empty values in the list"
                ]
            }
        }
    ],
    "Fixed_Label": [
        {
            "Test Case Name": "119.1.1. [TC-FLABEL-2.1] Fixed Label cluster [DUT-server]",
            "Test Case ID": "TC-FLABEL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "verify that TH can read-only the Fixed Label cluster with LabelList attribute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "9.8.4",
                    "9.7.4",
                    "9.8.4"
                ],
                "PICS": [
                    "FLABEL.S.A0000(LabelList)",
                    "FLABEL.S.A0000(LabelList)",
                    "FLABEL.S.A0000(LabelList)"
                ],
                "Test Step": [
                    "TH reads LabelList from the DUT",
                    "TH tries to write LabelList attribute of the DUT by setting Label = \"Test_Label\", Value= \"Test_Value\"",
                    "TH reads LabelList from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds with the LabelList as empty or each tuple has following fields:Label field is of type string and have a length up to 16 bytesValue field is of type string and have a length up to 16 bytes",
                    "Verify DUT is sending status code UNSUPPORTED_WRITE",
                    "Verify that the LabelList value is same as value from step 1"
                ]
            }
        }
    ],
    "Localization_Configuration": [
        {
            "Test Case Name": "122.1.1. [TC-LCFG-2.1] Localization Configuration Cluster Attributes[DUT-Server]",
            "Test Case ID": "TC-LCFG-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the attribute provided by the Localization Configuration Cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "11.3.4.1",
                    "",
                    "",
                    "11.3.4.1",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "LCFG.S.A0001(SupportedLocales)",
                    "",
                    "",
                    "LCFG.S.A0000(ActiveLocale)",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads SupportedLocales attribute from DUT",
                    "TH writes \"xx-XX\" to SupportedLocales attribute",
                    "TH reads SupportedLocales attribute",
                    "TH reads ActiveLocale Attribute from the DUT",
                    "TH writes new string not present in SupportedLocales attribute to ActiveLocale Attribute.",
                    "TH writes new string present in SupportedLocales attribute to ActiveLocale Attribute",
                    "TH Reads ActiveLocale"
                ],
                "Expected Outcome": [
                    "Verify that the values in the SupportedLocales attribute are not repeatedVerify that the maximum number of elements in the SupportedLocales list is 32Verify that the values of the SupportedLocales attribute has a maximum length of 35 bytes",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the value is unchanged",
                    "Verify that the ActiveLocale attribute is  Language Tag as defined by BCP47Verify that the value of ActiveLocale attribute has a maximum length of 35 bytesVerify that the ActiveLocale Attribute value is present  in the SupportedLocales attribute listVerify that the default value is assigned by the Vendor",
                    "DUT responds with  CONSTRAINT_ERROR",
                    "Verify that the DUT send the Success response",
                    "Verify that the value of the ActiveLocale attribute is changed to SupportedLocales"
                ]
            }
        }
    ],
    "Unit_Localization": [
        {
            "Test Case Name": "125.1.1. [TC-LUNIT-3.1] Read and Write Unit Localization Cluster Attributes [DUT as Server]",
            "Test Case ID": "TC-LUNIT-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the read and write functionality of attributes provided by the Unit Localization Cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1"
                ],
                "PICS": [
                    "LUNIT.S.A0000(TemperatureUnit)",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Fahrenheit",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Fahrenheit",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Celsius",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Celsius",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Kelvin",
                    "LUNIT.S.A0000(TemperatureUnit) & LUNIT.S.M.Kelvin",
                    "LUNIT.S.A0000(TemperatureUnit)"
                ],
                "Test Step": [
                    "TH reads from the DUT the TemperatureUnit",
                    "TH writes 0 to TemperatureUnit",
                    "TH reads from the DUT the TemperatureUnit",
                    "TH writes 1 to TemperatureUnit",
                    "TH reads from the DUT the TemperatureUnit",
                    "TH writes 2 to TemperatureUnit",
                    "TH reads from the DUT the TemperatureUnit",
                    "TH writes 5 to TemperatureUnit"
                ],
                "Expected Outcome": [
                    "Verify that the read request was successful with status code 0x00Verify that the value is of Enum8 datatype",
                    "Verify the write request is successful with status code 0x00",
                    "Verify that the value is 0",
                    "Verify the write request is successful with status code 0x00",
                    "Verify that the value is 1",
                    "Verify the write request is successful with status code 0x00",
                    "Verify that the value is 2",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)"
                ]
            }
        }
    ],
    "Time_Format_Localization": [
        {
            "Test Case Name": "129.1.1. [TC-LTIME-1.2] Global Attributes with DUT as Server",
            "Test Case ID": "TC-LTIME-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if LTIME.S.F00(CALFMT)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0001: SHALL be included if and only if LTIME.S.F00(CALFMT) & LTIME.S.A0001(ActiveCalendarType)- 0x0002: SHALL be included if and only if LTIME.S.F00(CALFMT) & LTIME.S.A0002(SupportedCalendarTypes)",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "129.1.2. [TC-LTIME-3.1] Read and Write Time Format Localization Cluster Attributes [DUT as Server]",
            "Test Case ID": "TC-LTIME-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the read and write functionality of attributes provided by the Time Format Localization Cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1",
                    "11.3.4.1"
                ],
                "PICS": [
                    "LTIME.S.A0000(HourFormat)",
                    "LTIME.S.M.12Hr",
                    "LTIME.S.A0000(HourFormat)",
                    "LTIME.S.M.24Hr",
                    "LTIME.S.A0000(HourFormat)",
                    "LTIME.S.A0001(ActiveCalendarType)",
                    "LTIME.S.A0002(SupportedCalendarTypes)",
                    "LTIME.S.A0001(ActiveCalendarType)",
                    "LTIME.S.A0001(ActiveCalendarType)",
                    "LTIME.S.A0001(ActiveCalendarType)",
                    "LTIME.S.A0000(HourFormat)"
                ],
                "Test Step": [
                    "TH reads HourFormat attribute from DUT",
                    "If (LTIME.S.M.12Hr) TH writes 0 to HourFormat attribute",
                    "TH reads HourFormat attribute",
                    "If (LTIME.S.M.24Hr) TH writes 1 to HourFormat attribute",
                    "TH reads HourFormat attribute",
                    "TH reads ActiveCalendarType attribute from DUT",
                    "TH reads SupportedCalendarTypes attribute from DUT",
                    "TH writes value in PIXIT.LTIME.SCT to ActiveCalendarType attribute, followed by reading the ActiveCalendarType attribute value",
                    "Repeat step 8 for all the values in PIXIT.LTIME.SCT",
                    "TH writes 50 to ActiveCalendarType attribute",
                    "TH writes 5 to HourFormat attribute"
                ],
                "Expected Outcome": [
                    "Verify that the value is of Enum8 datatype",
                    "Verify the write request is successful",
                    "Verify that the value is 0",
                    "Verify the write request is successful",
                    "Verify that the value is 1",
                    "Verify that the value is in between 0 to 11",
                    "Verify that the values in the List is in between 0 and 11",
                    "Verify write request is successful.Verify that the read ActiveCalendarType attribute value shows the same as the value that was set before.",
                    "Verify write request is successful.Verify that the read ActiveCalendarType attribute value shows the same as the value that was set before.",
                    "Verify the write request shows 0x87 (Constraint Error)",
                    "Verify the write request shows 0x87 (Constraint Error)"
                ]
            }
        }
    ],
    "Door_lock": [
        {
            "Test Case Name": "133.1.1. [TC-DRLK-2.1] Attributes check [DUT - Server]",
            "Test Case ID": "TC-DRLK-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To Check the attributes of Door Lock Cluster",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "4a",
                    "4b",
                    "4c",
                    "5a",
                    "5b",
                    "5c",
                    "6a",
                    "6b",
                    "6c",
                    "7a",
                    "7b",
                    "7c",
                    "8a",
                    "8b",
                    "8c",
                    "9a",
                    "9b",
                    "9c",
                    "10a",
                    "10b",
                    "10c",
                    "11a",
                    "11b",
                    "11c",
                    "12a",
                    "12b",
                    "12c",
                    "13a",
                    "13b",
                    "13c",
                    "14a",
                    "14b",
                    "14c",
                    "15a",
                    "15b",
                    "15c",
                    "16a",
                    "16b",
                    "16c",
                    "17a",
                    "17b",
                    "17c",
                    "18a",
                    "18b",
                    "18c",
                    "19a",
                    "19b",
                    "19c",
                    "20a",
                    "20b",
                    "20c",
                    "21a",
                    "21b",
                    "21c",
                    "22a",
                    "22b",
                    "22c",
                    "23a",
                    "23b",
                    "23c",
                    "24a",
                    "24b",
                    "24c",
                    "24d",
                    "25a",
                    "25b",
                    "25c",
                    "26a",
                    "26b",
                    "26c",
                    "27a",
                    "27b",
                    "27c",
                    "28a",
                    "28b",
                    "28c",
                    "29a",
                    "29b",
                    "29c",
                    "30a",
                    "30b",
                    "30c",
                    "30d",
                    "30e",
                    "30f",
                    "30g",
                    "31a",
                    "31b",
                    "31c",
                    "32a",
                    "32b",
                    "32c",
                    "33a",
                    "33b",
                    "33c",
                    "34a",
                    "34b",
                    "34c",
                    "35a",
                    "35b",
                    "35c"
                ],
                "Ref": [
                    "5.2.3.1",
                    "5.2.3.1",
                    "5.2.3.1",
                    "5.2.3.1",
                    "5.2.3.1",
                    "5.2.3.1",
                    "5.2.3.2",
                    "",
                    "",
                    "5.2.3.3",
                    "",
                    "",
                    "5.2.3.4",
                    "",
                    "",
                    "5.2.3.5",
                    "",
                    "",
                    "5.2.3.6",
                    "",
                    "",
                    "5.2.3.7",
                    "",
                    "",
                    "5.2.3.9",
                    "",
                    "",
                    "5.2.3.10",
                    "",
                    "",
                    "5.2.3.11",
                    "",
                    "",
                    "5.2.3.12",
                    "",
                    "",
                    "5.2.3.13",
                    "",
                    "",
                    "5.2.3.14",
                    "",
                    "",
                    "5.2.3.15",
                    "",
                    "",
                    "5.2.3.16",
                    "",
                    "",
                    "5.2.3.17",
                    "",
                    "",
                    "5.2.3.18",
                    "",
                    "",
                    "5.2.3.19",
                    "",
                    "",
                    "5.2.22",
                    "",
                    "",
                    "5.2.25",
                    "",
                    "",
                    "5.2.26",
                    "",
                    "",
                    "5.2.27",
                    "",
                    "",
                    "5.2.24",
                    "",
                    "",
                    "5.2.23",
                    "",
                    "",
                    "",
                    "5.2.28",
                    "",
                    "",
                    "5.2.29",
                    "",
                    "",
                    "5.2.30",
                    "",
                    "",
                    "5.2.31",
                    "",
                    "",
                    "5.2.32",
                    "",
                    "",
                    "5.2.33",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5.2.34",
                    "",
                    "",
                    "5.2.35",
                    "",
                    "",
                    "5.2.37",
                    "",
                    "",
                    "5.2.38",
                    "",
                    "",
                    "5.2.20",
                    "",
                    ""
                ],
                "PICS": [
                    "DRLK.S.A0000(LockState)",
                    "DRLK.S.A0000(LockState)",
                    "DRLK.S.A0000(LockState)",
                    "DRLK.S.A0000(LockState) & DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.A0000(LockState) & DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.A0000(LockState), DRLK.S.M.SimulateNotFullyLocked",
                    "DRLK.S.A0001(LockType)",
                    "",
                    "",
                    "DRLK.S.A0002(ActuatorEnabled)",
                    "",
                    "",
                    "DRLK.S.F05(DPS),DRLK.S.A0003(DoorState)",
                    "",
                    "",
                    "DRLK.S.F05(DPS),DRLK.S.A0004(DoorOpenEvents)",
                    "DRLK.S.A0004(DoorOpenEvents)",
                    "",
                    "DRLK.S.F05(DPS), DRLK.S.A0005(DoorClosedEvents)",
                    "DRLK.S.A0005(DoorClosedEvents)",
                    "",
                    "DRLK.S.F05(DPS), DRLK.S.A0006(OpenPeriod)",
                    "DRLK.S.A0006(OpenPeriod)",
                    "",
                    "DRLK.S.F08(USR), DRLK.S.A0011(NumberOfTotalUsersSupported)",
                    "",
                    "",
                    "DRLK.S.F00(PIN),DRLK.S.A0012(NumberOfPINUsersSupported)",
                    "",
                    "",
                    "DRLK.S.F01(RID),DRLK.S.A0013(NumberOfRFIDUsersSupported)",
                    "",
                    "",
                    "DRLK.S.F04(WDSCH),DRLK.S.A0014(NumberOfWeekDaysSchedulesSupported)",
                    "",
                    "",
                    "DRLK.S.F0a(YDSCH),DRLK.S.A0015(NumberOfYearDaysSchedulesSupported)",
                    "",
                    "",
                    "DRLK.S.F0b(HDSCH),DRLK.S.A0016(NumberOfHolidaySchedulesSupported)",
                    "",
                    "",
                    "DRLK.S.F00(PIN),DRLK.S.A0017(MaxPINCodeLength)",
                    "",
                    "",
                    "DRLK.S.F00(PIN),DRLK.S.A0018(MinPINCodeLength)",
                    "",
                    "",
                    "DRLK.S.F01(RID),DRLK.S.A0019(MaxRFIDCodeLength)",
                    "",
                    "",
                    "DRLK.S.F01(RID),DRLK.S.A001a(MinRFIDCodeLength)",
                    "",
                    "",
                    "DRLK.S.F08(USR),DRLK.S.A001b(CredentialRulesSupport)",
                    "",
                    "",
                    "DRLK.S.A0021(Language)",
                    "",
                    "",
                    "DRLK.S.A0022(LEDSettings)",
                    "",
                    "",
                    "DRLK.S.A0023(AutoRelockTime)",
                    "",
                    "",
                    "DRLK.S.A0024(SoundVolume)",
                    "",
                    "",
                    "DRLK.S.A0026(SupportedOperatingModes)",
                    "",
                    "",
                    "DRLK.S.A0025(OperatingMode)",
                    "",
                    "",
                    "",
                    "DRLK.S.A0027(DefaultConfigurationRegister)",
                    "",
                    "",
                    "DRLK.S.A0028(EnableLocalProgramming)",
                    "",
                    "",
                    "DRLK.S.A0029(EnableOneTouchLocking)",
                    "DRLK.S.A0029(EnableOneTouchLocking)",
                    "",
                    "DRLK.S.A002a(EnableInsideStatusLED)",
                    "DRLK.S.A002a(EnableInsideStatusLED)",
                    "",
                    "DRLK.S.A002b(EnablePrivacyModeButton)",
                    "DRLK.S.A002b(EnablePrivacyModeButton)",
                    "",
                    "DRLK.S.A002c(LocalProgrammingFeatures)",
                    "DRLK.S.A002c(LocalProgrammingFeatures),DRLK.S.A0028(EnableLocalProgramming)",
                    "DRLK.S.M.LocalProgrammingFeaturesAttributeWritable,DRLK.S.A0028(EnableLocalProgramming)",
                    "DRLK.S.M.EnableLocalProgrammingAttributeWritable,DRLK.S.A002c(LocalProgrammingFeatures)",
                    "DRLK.S.M.EnableLocalProgrammingAttributeWritable,DRLK.S.A002c(LocalProgrammingFeatures)",
                    "DRLK.S.M.LocalProgrammingFeaturesAttributeWritable",
                    "DRLK.S.A002c(LocalProgrammingFeatures)",
                    "DRLK.S.F00(PIN)/DRLK.S.F01(RID),DRLK.S.A0030(WrongCodeEntryLimit)",
                    "DRLK.S.F00(PIN)/DRLK.S.F01(RID),DRLK.S.A0030(WrongCodeEntryLimit)",
                    "DRLK.S.A0030(WrongCodeEntryLimit)",
                    "DRLK.S.F00(PIN)/DRLK.S.F01(RID),DRLK.S.A0031(UserCodedTemporaryDisableTime)",
                    "DRLK.S.F00(PIN)/DRLK.S.F01(RID),\nDRLK.S.A0031(UserCodedTemporaryDisableTime)",
                    "DRLK.S.A0031(UserCodedTemporaryDisableTime)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN),\n DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN),\n DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN),\n DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F08(USR),\nDRLK.S.A0035(ExpiringUserTimeOut)",
                    "DRLK.S.F08(USR),\nDRLK.S.A0035(ExpiringUserTimeOut)",
                    "DRLK.S.F08(USR),\nDRLK.S.A0035(ExpiringUserTimeOut)",
                    "DRLK.S.F08(USR),\nDRLK.S.A001c(NumberOfCredentialsSupportedPerUser)",
                    "DRLK.S.F08(USR),\nDRLK.S.A001c(NumberOfCredentialsSupportedPerUser)",
                    "DRLK.S.F08(USR),\nDRLK.S.A001c(NumberOfCredentialsSupportedPerUser)"
                ],
                "Test Step": [
                    "TH reads LockState attribute from DUT",
                    "TH writes LockState attribute as 1",
                    "TH reads LockState attribute from DUT",
                    "TH sends a LockDoor command to the DUT. If DRLK.S.F00(PIN) & DRLK.S.F07(COTA), include a Valid PINCode in the LockDoor command.",
                    "TH sends a UnlockDoor command to the DUT. If DRLK.S.F00(PIN) & DRLK.S.F07(COTA), include a Valid PINCode in the UnlockDoor command.",
                    "Simulate a not fully locked scenario on the DUT.",
                    "TH reads LockType attribute from DUT",
                    "TH writes LockType attribute as 10",
                    "TH reads LockType attribute from DUT",
                    "TH reads ActuatorEnabled attribute from DUT",
                    "TH writes ActuatorEnabled attribute as 0",
                    "TH reads ActuatorEnabled attribute from DUT",
                    "TH reads DoorState attribute from DUT",
                    "TH writes DoorState attribute as 1",
                    "TH reads DoorState attribute from DUT",
                    "TH reads DoorOpenEvents attribute from DUT",
                    "TH writes DoorOpenEvents attribute as 0",
                    "TH reads DoorOpenEvents attribute from DUT",
                    "TH reads DoorClosedEvents attribute from DUT",
                    "TH writes DoorClosedEvents attribute as 0",
                    "TH reads DoorClosedEvents attribute from DUT",
                    "TH reads OpenPeriod attribute from DUT",
                    "TH writes OpenPeriod  attribute as 2 minutes",
                    "TH reads OpenPeriod attribute from DUT",
                    "TH reads\n NumberOfTotalUsersSupported attribute from DUT",
                    "TH writes NumberOfTotalUsersSupported attribute as 20",
                    "TH reads NumberOfTotalUsersSupported attribute from DUT",
                    "TH reads NumberOfPINUsersSupported attribute from DUT",
                    "TH writes NumberOfPINUsersSupported attribute as 25",
                    "TH reads NumberOfPINUsersSupported attribute from DUT",
                    "TH reads\nNumberOfRFID\nUsersSupported attribute from DUT",
                    "TH writes\nNumberOfRFID\nUsersSupported attribute as 30",
                    "TH reads\nNumberOfRFID\nUsersSupported attribute from DUT",
                    "TH reads\nNumberOfWeekDaysSchedulesSupporterUser\nattribute from DUT",
                    "TH writes NumberOfWeekDaySchedules\nSupportedPerUser attribute as 31",
                    "TH reads NumberOfWeekDaySchedules\nSupportedPerUser attribute from DUT",
                    "TH reads\nNumberOfYearDay\nSchedulesSupportedPerUser\nattribute from DUT",
                    "TH writes\nNumberOfYearDay\nSchedulesSupportedPerUser\nattribute as 35",
                    "TH reads\nNumberOfYearDay\nSchedulesSupportedPerUser\nattribute from DUT",
                    "TH reads\nNumberOfHoliday\nSchedulesSupported\nattribute from DUT",
                    "TH writes\nNumberOfHoliday\nSchedulesSupported\nattribute as 36",
                    "TH reads\nNumberOfHoliday\nSchedulesSupported\nattribute from DUT",
                    "TH reads MaxPINCodeLength attribute from DUT",
                    "TH writes MaxPINCodeLength attribute as 85",
                    "TH reads MaxPINCodeLength attribute from DUT",
                    "TH reads MinPINCodeLength attribute from DUT",
                    "TH writes MinPINCodeLength attribute as 63",
                    "TH reads MinPINCodeLength attribute from DUT",
                    "TH reads MaxRFIDCodeLength attribute from DUT",
                    "TH writes MaxRFIDCodeLength attribute as 46",
                    "TH reads MaxRFIDCodeLength attribute from DUT",
                    "TH reads MinRFIDCodeLength attribute from DUT",
                    "TH writes MinRFIDCodeLength attribute as 17",
                    "TH reads MinRFIDCodeLength attribute from DUT",
                    "TH reads Credential\nRulesSupport attribute from DUT",
                    "TH writes Credential\nRulesSupport attribute as bit 0 is set to 1",
                    "TH reads Credential\nRulesSupport attribute from DUT",
                    "TH reads Language attribute from DUTTH saves the values as Current_Language Code",
                    "TH writes Language attribute as fr",
                    "TH reads Language attribute from DUT",
                    "TH reads LEDSettings attribute from DUTTH saves the values as Current_LEDSettings value",
                    "TH writes LEDSettings attribute as 2",
                    "TH reads LEDSettings attribute from DUT",
                    "TH reads AutoRelockTime attribute from DUTTH saves the values as Current_AutoRelockTime",
                    "TH writes AutoRelockTime attribute as 180 seconds",
                    "TH reads AutoRelockTime attribute from DUT",
                    "TH reads SoundVolume attribute from DUTTH saves the values as Current_SoundVolume value",
                    "TH writes SoundVolume attribute as 3",
                    "TH reads SoundVolume attribute from DUT",
                    "TH reads\n Supported\n OperatingModes attribute from DUT",
                    "TH writes Supported\nOperatingModes attribute as bit 0 is set to 0",
                    "TH reads Supported\nOperatingModes attribute from DUT",
                    "TH reads\nOperatingMode attribute from DUTTH saves the values as\nCurrent_OperatingMode value",
                    "TH writes\nOperatingMode attribute to a value as Normal and\n the new value is present in\n SupportedOperatingModes",
                    "TH writes\nOperatingMode attribute to a value as\n NoRemoteLockUnlock and\n the new value is present in\n Supported\n OperatingModes",
                    "TH reads\nOperatingMode attribute from DUT",
                    "TH reads Default\nConfigurationRegister attribute from DUT",
                    "TH writes\nDefault\nConfigurationRegister attribute as bit 0 is set to 1",
                    "TH reads\nDefault\nConfigurationRegister attribute from DUT",
                    "TH reads\nEnableLocalProgramming\nattribute from DUTTH saves the values as\nCurrent_EnableLocal\nProgramming value",
                    "TH writesEnableLocalProgramming\nattribute as false",
                    "TH readsEnableLocalProgramming\nattribute from DUT",
                    "TH reads EnableOneTouchLocking\n attribute from DUT",
                    "TH writes\n EnableOneTouchLocking attribute as true",
                    "TH reads\nEnableOneTouchLocking attribute from DUT",
                    "TH reads EnableInside\n StatusLED attribute from DUT",
                    "TH writes\n EnableInsideStatusLED\n attribute as true",
                    "TH reads\nEnableInsideStatusLED\nattribute from DUT",
                    "TH reads\nEnablePrivacyModeButton\nattribute from DUT",
                    "TH writes\nEnablePrivacyModeButton\nattribute as true",
                    "TH reads EnablePrivacyModeButton\nattribute from DUT",
                    "TH reads\nLocalProgrammingFeatures\nattribute from DUTTH saves the values as\nCurrent_LocalProgramming\nFeaturesvalue",
                    "TH reads LocalProgrammingFeatures attribute from DUT",
                    "TH writes to LocalProgrammingFeatures to disable all the features (Change all bits to 0)",
                    "TH sets the EnableLocalProgramming attribute to False",
                    "TH sets the EnableLocalProgramming attribute to True",
                    "TH sends a write message to change any one of the bits of the LocalProgrammingFeatures.",
                    "TH sends a write message to change any one of the bits of the LocalProgrammingFeatures.",
                    "TH reads WrongCodeEntry\nLimit attribute from DUTTH saves the values as Current_WrongCode\nEntryLimit value",
                    "TH writes\nWrongCodeEntryLimit\nattribute as 8",
                    "TH reads\nWrongCode\nEntryLimit attribute",
                    "TH reads\nUserCodeTemporary\nDisableTime\nattribute from DUTTH saves the values as\nCurrent_UserCode\nTemporaryDisableTime",
                    "TH writes\nUserCodeTemporaryDisableTime\nattribute as 120",
                    "TH reads\nUserCodeTemporary\nDisableTime\nattribute",
                    "TH reads\n RequirePINfor\n RemoteOperation\n attribute from DUT",
                    "TH writes\n RequirePINfor\n RemoteOperation\n attribute as true",
                    "TH reads\nRequirePINfor\nRemoteOperation\nattribute",
                    "TH reads\nExpiringUserTimeOut\nattribute from DUTTH saves the values as\nCurrent_ExpiringUserTimeOut",
                    "TH writes\n ExpiringUserTimeout\n attribute as 10 minutes",
                    "TH reads\nExpiringUserTimeout attribute",
                    "TH reads\nNumberOfCredentials\nSupportedPerUser attribute from DUT",
                    "TH writes\nNumberOfCredentials\nSupportedPerUser attribute as 85",
                    "TH reads\nNumberOfCredentials\nSupportedPerUser attribute from DUT"
                ],
                "Expected Outcome": [
                    "Verify that LockState has\none of the following values:0 - Not Fully Locked1 - Locked2 - Unlocked3 - UnlatchedVerify that the value is NULL if the above values are not present",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the LockState value remains unchanged",
                    "Verify that the DUT performs the door lock action.Verify that the LockState attribute value is 1 after the lock action has been completed (e.g. motor movement finished).",
                    "Verify that the DUT performs the door unlock action.Verify that the LockState attribute value is 2 after the lock action has been completed (e.g. motor movement finished).",
                    "Verify that the LockState attribute value is 0.",
                    "Verify that LockType has one of the following values:0-Dead bolt1-Magnetic2-Other3-Mortise4-Rim5-Latch Bolt6-Cylindrical Lock7-Tubular Lock8-Interconnected Lock9-Dead Latch10-Door Furniture11-Eurocylinder",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the LockType value remains unchanged",
                    "Verify that ActuatorEnabled has one of the following Values:Disabledenabled",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ActuatorEnabled value remains unchanged",
                    "Verify that DoorState has one of the following Values:0-DoorOpen1-DoorClosed2-DoorJammed3-DoorForcedOpen4-DoorUnspecifiedError5-DoorAjarVerify that the value is NULL if the above values are not present",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the DoorState  value remains unchanged",
                    "Verify that DoorOpen Events contains valid number in the inclusive range of 0 to 4294967294",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DoorOpenEvents value is changed to 10",
                    "Verify that DoorClosed Events contains valid number in the inclusive range of 0 to 4294967294",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DoorClosedEvents value is changed to 11",
                    "Verify that OpenPeriod contains valid number in the inclusive range of 0 to 65534 minutes",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the OpenPeriod  value is changed  to 2 minutes",
                    "Verify that NumberOfTotalUsersSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the NumberOfTotalUsersSupported value remains unchanged.",
                    "Verify that NumberOfPINUsersSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the NumberOfPINUsersSupported value remains unchanged.",
                    "Verify that\nNumberOfRFID\nUsersSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nNumberOfRFID\nUsersSupported value remains unchanged",
                    "Verify that NumberOfWeekDaysSchedulesSupporterUser\ncontains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nNumberOfWeekDaySchedules\nSupportedPerUser\nvalue remains unchanged.",
                    "Verify that\nNumberOfYearDay\nSchedulesSupportedPerUser\ncontains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nNumberOfYearDay\nSchedulesSupportedPerUser\nvalue remains unchanged.",
                    "Verify that\nNumberOfHoliday\nSchedulesSupported\ncontains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nNumberOfHoliday\nSchedulesSupported value remains unchanged.",
                    "Verify that MaxPINCodeLength contains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the MaxPINCodeLength value remains unchanged.",
                    "Verify that MinPINCodeLength contains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the MinPINCodeLength value remains unchanged.",
                    "Verify that MaxRFIDCodeLength contains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the MaxRFIDCodeLength value remains unchanged.",
                    "Verify that\nMinRFIDCodeLength contains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the MinRFIDCodeLength  value remains unchanged.",
                    "Verify that CredentialRules\nSupport has at least one of the following bit positions set\n . bit 0-Single\n . bit 1-Dual\n . bit 2-Tri",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Credential\nRulesSupport value remains unchanged.",
                    "Verify that it has a string of length maximum to 3 bytesVerify the value is of the form ISO-639-1",
                    "If (DRLK.S.M.LanguageAttributeWritable) supportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Language value is changed to frelseVerify that the Language value is same as Current_LanguageCode",
                    "Verify that LEDSettings contains one of the following values0- Never use LED for signalization1- Use LED signalization except for access allowed events2- Use LED signalization for all events",
                    "If (DRLK.S.M.LEDSettingsAttributeWritable)Verify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the  LEDSettings value is changed to 2\nelseVerify that the  LEDSettings value is same as Current_LEDSettings value",
                    "Verify that AutoRelockTime contains valid numbers in the inclusive range of 0 to 4294967294 seconds",
                    "If (DRLK.S.M.AutoRelockTimeAttributeWritable)\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the  AutoRelockTime  is changed to 180\nelseVerify that the  AutoRelockTime  is same as Current_AutoRelockTime",
                    "Verify that SoundVolume contains one of the following values.0- Silent Mode1- Low Volume2- High Volume3- Medium Volume",
                    "If (DRLK.S.M.SoundVolumeAttributeWritable)\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the  SoundVolume value is changed to 3\nelseVerify that the  SoundVolume value is same as Current_SoundVolume value",
                    "Verify that\nSupported\nOperatingModes has  following\nbit positions set to 0 forbit 0-Normalbit 3-NoRemoteLockUnlock\nbit positions set to 1 or set to 0 forbit 1-vacationbit 2-privacybit 4-PassageTH saves the values as\nCurrent_Supported\nOperatingModes valueVerify that the default value of Supported\nOperatingModes attribute is set to 0xFFF6",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Supported\nOperatingModes value remains unchanged.",
                    "Verify that\nOperatingMode has one of the following Values0-Normal,if bit 0 is set to 0 in Current_Supported\nOperatingModes1-vacation,if bit 0 is set to 1 in Current_Supported\nOperatingModes2-privacy,if bit 0 is set to 2 in Current_Supported\nOperatingModes3-NoRemoteLockUnlock,if bit 0 is set to 3 in Current_Supported\nOperatingModes4-Passage,if bit 0 is set to 4 in Current_Supported\nOperatingModes",
                    "If (DRLK.S.A0025(OperatingMode))\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "If (DRLK.S.M.OperatingModeAttributeWritable) supportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nOperatingMode value is changed to Normal or\nNoRemoteLockUnlock\nelseVerify that the\nOperatingMode value is same as\nCurrent_OperatingMode value",
                    "Verify that the default values are set on the following attributes by setting the bit to 00 - Enable Local Programming1- Keypad Interface2 - Remote Interface5 - Sound Volume6 - Auto Relock Time7 - Led Settings",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Default\nConfigurationRegister value remains unchanged.",
                    "Verify that the EnableLocalProgramming value is of bool type",
                    "If (DRLK.S.M.EnableLocalProgrammingAttributeWritable)Verify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nEnableLocalProgramming\nvalue is changed to falseelseVerify that the\nEnableLocalProgramming\nvalue is same as\nCurrent_EnableLocal\nProgramming  value",
                    "Verify that the EnableOneTouchLocking value is of bool type",
                    "Verify that the DUT send the success response",
                    "Verify that the\nEnableOneTouchLocking value is changed to true",
                    "Verify that the EnableInsideStatusLED value is of bool type",
                    "Verify that the DUT send the success response",
                    "Verify that the\nEnableInsideStatusLED value is changed to true",
                    "Verify that the EnablePrivacyModeButton value is of bool type",
                    "Verify that the DUT send the success response",
                    "Verify that the\nEnablePrivacyModeButton\nvalue is changed to true",
                    "Verify that\nLocalProgramming\nFeatures\nhas the following bit positionsbit 0 - The ability to add Users/Credentials/Schedulesbit 1 - The ability to modify Users/Credentials/Schedulesbit 2 - The ability to clear Users/Credentials/Schedulesbit 3 - The ability to adjust lock settings locally is enabled",
                    "Verify that the DUT sends SUCCESS response.Verify that all the 4 bits in the LocalProgrammingFeatures is set to 1 if EnableLocalProgramming is True. is True.Verify that all the 4 bits in the LocalProgrammingFeatures is set to 0 if EnableLocalProgramming is True. is False.",
                    "Verify that the DUT sends SUCCESS response.Verify that all the 4 bits in the LocalProgrammingFeatures is set to 0.",
                    "Verify that the DUT sends SUCCESS response.Verify that all the 4 bits in the LocalProgrammingFeatures is set to 0.",
                    "Verify that the DUT sends SUCCESS response.Verify that all the 4 bits in the LocalProgrammingFeatures is set to 1.",
                    "Verify that the DUT sends SUCCESS response.Verify that the correct bit has been changed by doing a Read on LocalProgrammingFeatures attribute.",
                    "Verify that the DUT sends an UNSUPPORTED_WRITE",
                    "Verify that the value is in the inclusive range of 1 to 255",
                    "If (DRLK.S.M.WrongCodeEntryLimitAttributeWritable) supportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "if (DRLK.S.A0030(WrongCodeEntryLimit))\n* Verify that the\nWrongCodeEntryLimit\nvalue is changed to 8elseVerify that the\nWrongCodeEntryLimit\nvalue is same as\nCurrent_WrongCodeEntryLimit value",
                    "Verify that the value is in the\n inclusive range of 1 to 255 seconds",
                    "If (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable)\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "If (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable)Verify that the\nUserCodeTemporary\nDisableTime\nis changed to 120\nelseVerify that the\nUserCodeTemporary\nDisableTime\nis same as\nCurrent_UserCode\nTemporaryDisableTime",
                    "Verify that the RequirePINforRemoteOperation value is of bool type",
                    "If (DRLK.S.A0033(RequirePINForRemoteOperation))\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "If DRLK.S.M.RequirePINForRemoteOperationAttributeWritableVerify that the\nRequirePINFor\nRemoteOperation value is changed to true\nelseVerify that the\nRequirePINFor\nRemoteOperation\nvalue is same as\nCurrent_RequirePINFor\nRemoteOperation value",
                    "Verify that the value is in the inclusive range of 1 to 2880 minutesIf the Expiring\nTimeout exceeds the value then DUT is set to OccupiedDisabled status.",
                    "IfDRLK.S.A0035(ExpiringUserTimeOut)\nsupportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the  ExpiringUserTimeOut  is changed to 10\nelseVerify that the  ExpiringUserTimeOut  is same as\nCurrent_ExpiringUserTimeOut",
                    "Verify that\nNumberOfCredentials\nSupportedPerUser contains valid number in the inclusive range of 0 to 255",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the\nNumberOfCredentials\nSupportedPerUser value remains unchanged."
                ]
            }
        },
        {
            "Test Case Name": "133.1.2. [TC-DRLK-2.2] Verification for Door lock command[DUT-Server]",
            "Test Case ID": "TC-DRLK-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives Door lock command from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2a",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "11a",
                    "11b",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Ref": [
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.1",
                    "5.2.4.1",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.1",
                    "5.2.4.1",
                    "5.2.4.1",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.4.1,5.2.3.34",
                    "5.2.4.1",
                    "5.2.4.1",
                    "5.2.4.1"
                ],
                "PICS": [
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) &\nDRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN) &  DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.F00(PIN) & DRLK.S.C00.Rsp(LockDoor) & DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) & DRLK.S.C00.Rsp(LockDoor) & DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.C00.Rsp(LockDoor),\n DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) & DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.C00.Rsp(LockDoor)"
                ],
                "Test Step": [
                    "TH writes the RequirePINforRemoteOperation attribute value as false on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends LockDoor Command to the DUT without PINCode",
                    "TH sends LockDoor Command to the DUT with valid PINCode",
                    "TH writes the RequirePINforRemoteOperation attribute value as true on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends LockDoor Command to the DUT with invalid PINCode",
                    "TH sends LockDoor Command to the DUT without PINCode",
                    "TH sends LockDoor Command to the DUT with valid PINCode",
                    "TH writes WrongCodeEntryLimit attribute value as 3 on the DUT",
                    "TH reads the value of WrongCodeEntryLimit attribute.",
                    "TH writes UserCodeTemporaryDisableTime attribute value as 15 seconds on the DUT",
                    "TH reads the value of UserCodeTemporaryDisableTime attribute.",
                    "TH sends LockDoor Command to the DUT with invalid PINCode, repeated WrongCodeEntryLimit (current value) times",
                    "TH sends LockDoor Command to the DUT with valid PINCode before UserCodeTemporaryDisableTime expires",
                    "TH waits UserCodeTemporaryDisableTime (current value) seconds to allow lockout to expire",
                    "TH then sends a LockDoor Command to the DUT with valid PINCode."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends SUCCESS response If (DRLK.S.M.RequirePINForRemoteOperationAttributeWritable) is true, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is FALSE",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT sends SUCCESS response if DRLK.S.A0033(RequirePINForRemoteOperation).Write is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is TRUE",
                    "Verify that DUT sends failure response to the TH",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends success response to the TH",
                    "Verify that the DUT sends Success response if (DRLK.S.M.WrongCodeEntryLimitAttributeWritable)  is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that the DUT send the Success response if (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that DUT sends failure response to the TH each time",
                    "Verify that DUT sends failure response to the TH",
                    "",
                    "Verify that DUT sends SUCCESS response to the TH"
                ]
            }
        },
        {
            "Test Case Name": "133.1.3. [TC-DRLK-2.3] Verification for UnlockDoor command [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives UnlockDoor command from TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2a",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "11a",
                    "11b",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.4.2,5.2.3.34",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.25",
                    "5.2.3.25",
                    "5.2.4.2",
                    "5.2.3.1"
                ],
                "PICS": [
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) &\nDRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) &\nDRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor) & DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor) & DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.C01.Rsp(UnlockDoor) &  DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.A0023(AutoRelockTime)",
                    "DRLK.S.A0023(AutoRelockTime)",
                    "DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.A0000(LockState)"
                ],
                "Test Step": [
                    "TH writes the RequirePINforRemoteOperation attribute value as False on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends UnlockDoor Command to the DUT without PINCode",
                    "TH sends UnlockDoor Command to the DUT with valid PINCode",
                    "TH writes the RequirePINforRemoteOperation attribute value as true on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends UnlockDoor Command to the DUT with Invalid PINCode",
                    "TH sends UnlockDoor Command to the DUT without PINCode",
                    "TH sends UnlockDoor Command to the DUT with valid PINCode",
                    "TH writes WrongCodeEntryLimit attribute value as 3 on the DUT",
                    "TH reads the value of WrongCodeEntryLimit attribute.",
                    "TH writes UserCodeTemporaryDisableTime attribute value as 15 seconds on the DUT",
                    "TH reads the value of UserCodeTemporaryDisableTime attribute.",
                    "TH sends UnlockDoor Command to the DUT with invalid PINCode, repeated WrongCodeEntryLimit (current value) times",
                    "TH sends UnlockDoor Command to the DUT with valid PINCode before UserCodeTemporaryDisableTime expires",
                    "TH waits UserCodeTemporaryDisableTime (current value) seconds to allow lockout to expire",
                    "TH writes AutoRelockTime attribute value as 60 seconds on the DUT",
                    "TH reads AutoRelockTime attribute from the DUT",
                    "TH sends the UnlockDoor command to the DUT with valid PINCode",
                    "TH reads LockState attribute after AutoRelockTime Expires and the lock action has been completed (e.g. motor movement finished)"
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends SUCCESS response if DRLK.S.M.RequirePINForRemoteOperationAttributeWritable is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is FALSE",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT sends SUCCESS response if DRLK.S.M.RequirePINForRemoteOperationAttributeWritable is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is TRUE",
                    "Verify that DUT sends failure response to the TH",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT sends Success response if (DRLK.S.M.WrongCodeEntryLimitAttributeWritable ) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that the DUT send the Success response if (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that DUT sends failure response to the TH each time",
                    "Verify that DUT sends failure response to the TH",
                    "",
                    "Verify that the DUT sends SUCCESS response if (DRLK.S.M.AutoRelockTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the AutoRelockTime is a valid value",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT is locked."
                ]
            }
        },
        {
            "Test Case Name": "133.1.4. [TC-DRLK-2.4] Verification for UnlockWithTimeout command [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives UnlockWithTimeout command from TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "5.2.3.25",
                    "5.2.4.3"
                ],
                "PICS": [
                    "DRLK.S.A0023(AutoRelockTime)",
                    "DRLK.S.C03.Rsp(UnlockWithTimeout)"
                ],
                "Test Step": [
                    "TH writes AutoRelockTime attribute value as 60 seconds on the DUT",
                    "TH sends the UnlockWithTimeout command to the DUT with a Timeout argument value as 60 seconds. If DRLK.S.F00(PIN) supported, include a valid PINCode argument."
                ],
                "Expected Outcome": [
                    "If(DRLK.S.M.AutoRelockTimeAttributeWritable) supportsVerify that the DUT sends SUCCESS response\nelseVerify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that DUT sends success response to the THVerify that AutoRelockTime attribute is triggeredVerify that DUT is relocked when Timeout value expires"
                ]
            }
        },
        {
            "Test Case Name": "133.1.5. [TC-DRLK-2.5] Verification for the following Commands - SetWeekDaySchedule, GetWeekDaySchedule , GetWeekDayScheduleResponse, ClearWeekDaySchedule [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetWeekDaySchedule, GetWeekDaySchedule, ClearWeekDaySchedule Command from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "10c",
                    "11"
                ],
                "Ref": [
                    "",
                    "5.2.4.14",
                    "",
                    "5.2.4.15",
                    "5.2.4.14",
                    "5.2.4.14",
                    "5.2.4.14",
                    "5.2.4.14",
                    "5.2.4.15",
                    "5.2.4.15",
                    "5.2.4.17",
                    "5.2.4.17",
                    "5.2.4.17",
                    "5.2.4.15"
                ],
                "PICS": [
                    "DRLK.S.F04(WDSCH),DRLK.S.A0014(NumberOfWeekDaysSchedulesSupported)",
                    "DRLK.S.F04(WDSCH), DRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "",
                    "DRLK.S.F04(WDSCH), DRLK.S.C0c.Rsp(GetWeekDaySchedule), DRLK.S.C0c.Tx(GetWeekDayScheduleResponse)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH),\nDRLK.S.C0c.Rsp(GetWeekDaySchedule),DRLK.S.C0c.Tx(GetWeekDayScheduleResponse)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0c.Rsp(GetWeekDaySchedule),\nDRLK.S.C0c.Tx(GetWeekDayScheduleResponse)",
                    "DRLK.S.F04(WDSCH), DRLK.S.C0d.Rsp(ClearWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH), DRLK.S.C0d.Rsp(ClearWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH), DRLK.S.C0d.Rsp(ClearWeekDaySchedule)",
                    "DRLK.S.F04(WDSCH),DRLK.S.C0c.Rsp(GetWeekDaySchedule),\nDRLK.S.C0c.Tx(GetWeekDayScheduleResponse)"
                ],
                "Test Step": [
                    "TH reads NumberOfWeekDay\nSchedulesSupportedPerUser attribute and saves for future use.",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 1UserIndex as 1DaysMaskMap as 1 (Sunday)StartHour as 15StartMinute as 45EndHour as 16EndMinute as 55",
                    "Repeat the above step by setting DaysMaskMap value as 2,4,8,16,32 and 64 ( DaysMaskMap set for each day of the week from Monday to Saturday )Repeat the above step by setting DaysMaskMap value as 24,42,51,107 and 123 ( DaysMaskMap set for multiple days of the week )Repeat the above step by setting DaysMaskMap value as 127 ( DaysMaskMap set for all days of the week )",
                    "TH send GetWeekDaySchedule Command to DUT withWeekDayIndex as 1UserIndex as 1",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 0 (invalid value)UserIndex as 1DaysMaskMap as 2 (valid value)StartHour as 15StartMinute as 45EndHour as 16EndMinute as 55",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 1UserIndex as 1DaysMaskMap as 0 (invalid value)StartHour as 15StartMinute as 45EndHour as 16EndMinute as 55",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 1UserIndex as 1DaysMaskMap as 128 (invalid value -attempting to set the 7th bit of DaysMaskMap)StartHour as 15StartMinute as 45EndHour as 16EndMinute as 55",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 1UserIndex as 1DaysMaskMap as 1StartHour as 18 (invalid value as StartHour > EndHour )StartMinute as 45EndHour as 16EndMinute as 55",
                    "TH send GetWeekDaySchedule Command to DUTWeekDayIndex as 0UserIndex as 1",
                    "TH sends GetWeekDaySchedule Command to DUT with following values:WeekDayIndex as 1 (index of existing Schedule entry)UserIndex as 2 (index on non-existent User)",
                    "TH sends ClearWeekDaySchedule Command to DUT withWeekDayIndex as 1UserIndex as 1",
                    "TH sends ClearWeekDaySchedule Command to DUT withWeekDayIndex as 0 (invalid value)UserIndex as 1",
                    "TH sends ClearWeekDaySchedule Command to DUT withWeekDayIndex as 1UserIndex as 0 (invalid value)",
                    "TH sends GetWeekDaySchedule Command to DUT with following values:WeekDayIndex as 1UserIndex as 1"
                ],
                "Expected Outcome": [
                    "Verify that NumberOfWeekDays\nSchedulesSupporterUser contains valid number in the inclusive range of 0 to 255",
                    "Verify that the DUT sends SUCCESS response",
                    "",
                    "Verify that the DUT responds with GetWeekDayScheduleResponse CommandVerify that the DUT responds with WeekDayIndex as 1 .Verify that the DUT responds with UserIndex as 1 .Verify that the DUT responds with Status as SUCCESS .Verify that the DUT responds with DaysMaskMap as 127 .Verify that the DUT responds with StartHour as 15 .Verify that the DUT responds with StartMinute as 45 .Verify that the DUT responds with EndHour as 16 .Verify that the EndHour is greater than or equal to the StartHour provided in the step 2a.Verify that the DUT responds with EndMinute as 55 .Verify that the EndMinute is greater than the StartMinute provided in the step 2a.",
                    "Verify that the DUT sends the response as INVALID_COMMAND.",
                    "Verify that the DUT sends the response as INVALID_COMMAND.",
                    "Verify that the DUT sends the response as INVALID_COMMAND.",
                    "Verify that the DUT sends the response as INVALID_COMMAND",
                    "Verify that the DUT sends an INVALID_COMMAND .",
                    "Verify that the DUT sends a NOT_FOUND status .",
                    "Verify that the DUT send SUCCESS response.",
                    "Verify that the DUT sends an INVALID_COMMAND",
                    "Verify that the DUT sends an INVALID_COMMAND",
                    "Verify that the DUT sends a NOT_FOUND status ."
                ]
            }
        },
        {
            "Test Case Name": "133.1.6. [TC-DRLK-2.6] Verification for the following Commands - SetHolidaySchedule, GetHolidaySchedule, GetHolidayScheduleResponse , ClearHolidaySchedule [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetHolidaySchedule,GetHolidaySchedule,ClearHolidaySchedule Command from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3a",
                    "4",
                    "5",
                    "6",
                    "7a",
                    "7b",
                    "8"
                ],
                "Ref": [
                    "",
                    "5.2.4.22, 5.2.6.12",
                    "5.2.4.23",
                    "",
                    "5.2.4.23",
                    "5.2.4.23",
                    "5.2.4.25",
                    "5.2.4.25",
                    "5.2.4.23"
                ],
                "PICS": [
                    "DRLK.S.F0b(HDSCH) ,\nDRLK.S.A0016(NumberOfHolidaySchedulesSupported)",
                    "DRLK.S.F0b(HDSCH) ,\nDRLK.S.C11.Rsp(SetHolidaySchedule)",
                    "DRLK.S.F0b(HDSCH),\nDRLK.S.C12.Rsp(GetHolidaySchedule),\nDRLK.S.C12.Tx(GetHolidayScheduleResponse)",
                    "DRLK.S.C11.Rsp(SetHolidaySchedule)",
                    "DRLK.S.F0b(HDSCH) ,DRLK.S.C12.Rsp(GetHolidaySchedule),DRLK.S.C12.Tx(GetHolidayScheduleResponse)",
                    "DRLK.S.F0b(HDSCH) ,\nDRLK.S.C12.Rsp(GetHolidaySchedule)\nDRLK.S.C12.Tx(GetHolidayScheduleResponse)",
                    "DRLK.S.F0b(HDSCH),DRLK.S.C13.Rsp(ClearHolidaySchedule)",
                    "DRLK.S.F0b(HDSCH),DRLK.S.C13.Rsp(ClearHolidaySchedule)",
                    "DRLK.S.F0b(HDSCH) ,\nDRLK.S.C12.Rsp(GetHolidaySchedule)\nDRLK.S.C12.Tx(GetHolidayScheduleResponse)"
                ],
                "Test Step": [
                    "TH reads NumberOfHoliday\nSchedulesSupported and saves for future use.",
                    "TH sends SetHolidaySchedule Command to DUT with the following values:HolidayIndex as 1LocalStartTime as 20 SecondsLocalEndTime as 30 SecondsOperatingMode as 0",
                    "TH sends GetHolidaySchedule Command to DUT with HolidayIndex as 1",
                    "TH sends SetHolidaySchedule Command to DUT with the following values:HolidayIndex as 1LocalStartTime as 20LocalEndTime as 30OperatingMode as 5(Invalid value)",
                    "TH sends GetHolidaySchedule Command to DUT with Invalid HolidayIndex as 15.",
                    "TH sends GetHolidaySchedule Command to DUT with the HolidayIndex as 10  (value is in the the range of step 1 but Holiday\nSchedule entry not available)",
                    "TH send ClearHolidaySchedule Command to DUT with HolidayIndex as 1",
                    "TH send ClearHolidaySchedule Command to DUT with HolidayIndex as 0",
                    "TH sends GetHolidaySchedule Command to DUT with HolidayIndex as 1."
                ],
                "Expected Outcome": [
                    "Verify that NumberOfHoliday\nSchedulesSupported contains valid number in the inclusive range of 0 to 255",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with GetHolidayScheduleResponse command.Verify that the DUT responds with HolidayIndex as 1 .Verify that the DUT responds with Status SUCCESS(0x00) .Verify that the DUT responds with LocalStartTime as 20 Seconds .Verify that the DUT responds with LocalEndTime as 30 Seconds.Verify that the LocalEndTime is greater than the LocalStartTime.Verify that the DUT responds with OperatingMode as 0 .",
                    "Verify that the DUT sends INVALID_COMMAND response .",
                    "Verify that the DUT sends a INVALID_COMMAND.",
                    "Verify that the DUT sends a NOT_FOUND status",
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify that the DUT sends sends INVALID_COMMAND response .",
                    "Verify that the DUT sends a NOT_FOUND status ."
                ]
            }
        },
        {
            "Test Case Name": "133.1.7. [TC-DRLK-2.7] Verification for the following Commands - SetYearDaySchedule, GetYearDaySchedule, GetYearDayScheduleResponse and ClearYearDaySchedule[DUT-Server]",
            "Test Case ID": "TC-DRLK-2.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetYearDaySchedule Command, GetYearDaySchedule Command and ClearYearDaySchedule from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "5.2.4.11.",
                    "5.2.4.11",
                    "",
                    "5.2.4.11.",
                    "5.2.4.11",
                    "5.2.4.11",
                    "5.2.4.11",
                    "5.2.4.11",
                    "5.2.4.11.",
                    "5.2.4.11",
                    "5.2.4.11",
                    "5.2.4.11"
                ],
                "PICS": [
                    "DRLK.S.F0a(YDSCH),DRLK.S.A0015(NumberOfYearDaysSchedulesSupported)",
                    "DRLK.S.F08(USR),DRLK.S.A0011(NumberOfTotalUsersSupported)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0e.Rsp(SetYearDaySchedule)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule)\nDRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "",
                    "DRLK.S.C0e.Rsp(SetYearDaySchedule)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule)\nDRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule)DRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "DRLK.S.C10.Rsp(ClearYearDaySchedule)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule),\nDRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "DRLK.S.C0e.Rsp(SetYearDaySchedule)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule)DRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "DRLK.S.F0a(YDSCH),DRLK.S.C0f.Rsp(GetYearDaySchedule)DRLK.S.C0f.Tx(GetYearDayScheduleResponse)",
                    "DRLK.S.F0a(YDSCH),\nDRLK.S.C10.Rsp(ClearYearDaySchedule)"
                ],
                "Test Step": [
                    "TH reads NumberOfYearDay\nSchedulesSupportedPerUser attribute and saves for future use.",
                    "TH reads NumberOfTotalUsers\nSupported attribute and saves for future use.",
                    "TH sends SetYearDaySchedule Command to DUT with the following values:YearDayIndex as 1UserIndex as 1LocalStartTime as 960 SecondsLocalEndTime as 1980 Seconds",
                    "TH sends GetYearDayScheduleResponse Command to DUT with the following values:YearDayIndex as 1UserIndex as 1",
                    "",
                    "TH send SetYearDaySchedule Command to DUT with the following values:YearDayIndex as 0(Invalid value)UserIndex as 15(Invalid value)LocalStartTime as 1020LocalEndTime as 2040",
                    "TH sends GetYearDayScheduleResponse Command to DUT withYearDayIndex as 0UserIndex as 15",
                    "Create a new user with UserIndex as 5 then TH sends GetYearDayScheduleResponse Command to DUT withYearDayIndex as 10 (value is in the the range of step 1 but YearDay Schedule entry not available)UserIndex as 5",
                    "TH sends ClearYearDaySchedule to DUT withYearDayIndex as 1UserIndex as 1",
                    "TH sends GetYearDayScheduleResponse Command to DUT withYearDayIndex as 1 (value is in the the range of step 1 but YearDay Schedule entry not available)UserDayIndex as 1",
                    "TH sends SetYearDaySchedule Command to DUT with the following values:YearDayIndex as 1UserIndex as 1LocalStartTime as 1080 SecondsLocalEndTime as 2100 Seconds",
                    "TH sends GetYearDayScheduleResponse Command to DUT withYearDayIndex as 1UserDayIndex as 1",
                    "TH sends GetYearDayScheduleResponse Command to DUT withYearDayIndex as 1 (index of existing Schedule entry)UserIndex as 2 (index on non-existent User)",
                    "TH sends ClearYearDaySchedule to DUT withYearDayIndex as 0(Invalid value)UserIndex as 0 (Invalid value)"
                ],
                "Expected Outcome": [
                    "Verify that NumberOfYearDay\nSchedulesSupportedPerUser contains valid number in the inclusive range of 0 to 255",
                    "Verify that NumberOfTotalUsers\nSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT respond with the GetYearDayScheduleResponse Response Command",
                    "Verify that the DUT responds with YearDayIndex as 1 .Verify that the DUT  responds with UserIndex as 1 .Verify that the DUT responds with LocalStartTime as 960 seconds .Verify that the DUT responds with LocalEndTime as 1980 seconds .Verify that the LocalEndTime is greater than LocalStartTime .Verify that the DUT responds with Status as SUCCESS .",
                    "Verify that the DUT sends a INVALID_COMMAND .",
                    "Verify that the DUT sends the Status as INVALID_COMMAND.",
                    "Verify that the DUT sends the Status as NOT_FOUND .",
                    "Verify that the DUT sends Status as SUCCESS.",
                    "Verify that the DUT sends the Status as NOT_FOUND .",
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify that the DUT sends GetYearDayScheduleResponse Response Command.Verify that the DUT responds with  YearDayIndex as 1.Verify that the DUT responds with UserIndex as 1 .Verify that the DUT  responds with status as SUCCESS .Verify that the DUT  responds with  LocalStartTime as 1080 Seconds.Verify that the DUT  responds with LocalEndTime as 2100 Seconds.Verify that the LocalEndTime is greater than LocalStartTime.",
                    "Verify that the DUT sends the Status as NOT_FOUND .",
                    "Verify that the DUT sends Status as INVALID_COMMAND."
                ]
            }
        },
        {
            "Test Case Name": "133.1.8. [TC-DRLK-2.8] Verification for the following Commands - SetUser, GetUser, GetUserResponse,  ClearUser [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetUser Command, GetUser Command and ClearUser Command from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6a",
                    "6b",
                    "6c",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "5.2.4.34",
                    "5.2.4.35",
                    "5.2.4.34",
                    "5.2.4.34",
                    "",
                    "",
                    "",
                    "",
                    "5.2.4.35",
                    "",
                    "5.2.4.35"
                ],
                "PICS": [
                    "DRLK.S.F08(USR),DRLK.S.A0011(NumberOfTotalUsersSupported)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C1b.Rsp(GetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "",
                    "",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C1b.Rsp(GetUser)DRLK.S.C1c.Tx(GetUserResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C1d.Rsp(ClearUser)",
                    "DRLK.S.F08(USR), DRLK.S.C1b.Rsp(GetUser), DRLK.S.C1c.Tx(GetUserResponse)"
                ],
                "Test Step": [
                    "TH reads NumberOfTotalUsers\nSupported attribute and saves for future use.",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0UserIndex as 1UserName as xxxUserUniqueID as 6452UserStatus as 1UserType as 0CredentialRule as 0",
                    "TH sends GetUser Command to DUT with UserIndex as 1",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0UserIndex as 2UserName as xxxUserUniqueID as 6452UserStatus as 1UserType as 10 (Invalid value)CredentialRule as 3",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0UserIndex as 1 (Same as step 2)UserName as xxxUserUniqueID as 8965UserStatus as 1UserType as 0CredentialRule as 0",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0UserIndex as 2UserName as NULLUserUniqueID as NULLUserStatus as NULLUserType as NULLCredentialRule as NULL",
                    "TH sends GetUser Command to DUT with UserIndex as 2",
                    "TH sends GetUser Command to DUT with UserIndex as 0",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 2UserIndex as 2UserName as NULLUserUniqueID as NULLUserStatus as NULLUserType as NULLCredentialRule as NULL",
                    "TH sends GetUser Command to DUT with the UserIndex as 2",
                    "TH sends  ClearUser Command to DUT with the UserIndex as 1",
                    "TH sends GetUser Command to DUT with the UserIndex as 1"
                ],
                "Expected Outcome": [
                    "Verify that NumberOfTotal\nUsersSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with GetUserResponse CommandVerify that the DUT responds with UserIndex as 1 .Verify that the DUT responds with UserName as xxx .Verify that the DUT responds with UserUniqueID as 6452 .Verify that the DUT responds with UserStatus as 1 .Verify that the DUT responds with UserType as 0 .Verify that the DUT responds with CredentialRule as 0 .Verify that the DUT responds with Credentials list with 0 entries .Verify that the DUT responds with NextUserIndex as NOT null if there is at least one occupied entry after the\nrequested UserIndex .Verify that the DUT responds with NextUserIndex as null If the occupied entries are not available",
                    "Verify that the DUT sends INVALID_COMMAND .",
                    "Verify that the DUT sends OCCUPIED .",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with GetUserResponse Command .Verify that the DUT responds with UserName as empty .Verify that the DUT responds with UserUniqueID as NULL .Verify that the DUT responds with UserStatus as default value If the OperationType is Add .Verify that the DUT responds with UserType as default value If the OperationType is Add  .Verify that the DUT responds with CredentialRule as default value If the OperationType is Add  .Verify that the DUT responds with Credentials list with 0 entries .Verify that the DUT responds with NextUserIndex as NOT null if there is at least one occupied entry after the\nrequested UserIndex .Verify that the DUT responds with NextUserIndex as null If the occupied entries are not available .",
                    "Verify that the DUT sends INVALID_COMMAND .",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends  GetUserResponse CommandVerify that the DUT responds with UserIndex as 2 .Verify that the DUT responds with UserName as empty .Verify that the DUT responds with UserUniqueID as null .Verify that the DUT responds with UserStatus as default value If the OperationType is Add .Verify that the DUT responds with UserType as default value If the OperationType is Add .Verify that the DUT responds with CredentialRule as default value If the OperationType is Add .Verify that the DUT responds with Credentials list with 0 entries .Verify that the DUT responds with NextUserIndex as NOT null if there is at least one occupied entry after the\nrequested UserIndex .Verify that the DUT responds with NextUserIndex as null If the occupied entries are not available .",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends  GetUserResponse CommandVerify that the DUT sends the response as NULL"
                ]
            }
        },
        {
            "Test Case Name": "133.1.9. [TC-DRLK-2.9] Verification for the following Commands - SetCredential , SetCredentialResponse, GetCredentialStatus,  GetCredentialStatusResponse, ClearCredential [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetCredential, GetCredentialStatus and ClearCredential from TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6a",
                    "6b",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12a",
                    "12b",
                    "13",
                    "14",
                    "15a",
                    "15b",
                    "15c",
                    "15d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5.2.4.34",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5.2.20",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "DRLK.S.F08(USR),DRLK.S.A0011(NumberOfTotalUsersSupported)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),\nDRLK.S.C24.Rsp(GetCredentialStatus)\nDRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential)\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),\nDRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),DRLK.S.C24.Rsp(GetCredentialStatus)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),DRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),DRLK.S.C24.Rsp(GetCredentialStatus)",
                    "DRLK.S.F08(USR),\nDRLK.S.C24.Rsp(GetCredentialStatus)\nDRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),\nDRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),\nDRLK.S.A001c(NumberOfCredentialsSupportedPerUser)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),DRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C22.Rsp(SetCredential),DRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.C26.Rsp(ClearCredential)"
                ],
                "Test Step": [
                    "TH reads NumberOfTotalUsers\nSupported attribute and saves for future use.",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 1CredentialData as 123456UserIndex as 1UserStatus as nullUserType as null",
                    "TH sends GetCredentialStatus Command withCredentialType as 1CredentialIndex as 1",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 2CredentialData as 4321UserIndex as nullUserStatus as 5(Invalid value)UserType as 10(Invalid value)",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 2CredentialData as 123456 (same as step 2)UserIndex as nullUserStatus as nullUserType as null",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 1 (same as step 2)CredentialData as 123456UserIndex as 1UserStatus as nullUserType as null",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 1 (same as step 2)CredentialData as 123457UserIndex as 1UserStatus as nullUserType as null",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 2Credential as 1 3CredentialData as 1234567UserIndex as 1UserStatus as nullUserType as null",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 1CredentialIndex as 1",
                    "TH sends GetCredentialStatus command to DUT with the following fields:CredentialType as 1CredentialIndex as 1",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0UserIndex as 2UserName as xxxUserUniqueID as 6452UserStatus as 1UserType as 0CredentialRule as 0",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 1CredentialData as 123456UserIndex as 2UserStatus as nullUserType as null",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 1CredentialIndex as 0xFFFE",
                    "TH sends GetCredentialStatus command to DUT with the following fields:CredentialType as 1CredentialIndex as 0xFFFE",
                    "TH sends GetCredentialStatus Command withCredentialType as 1CredentialIndex as 1",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 8(Invalid value)CredentialIndex as 2",
                    "TH reads\nNumberOfCredentialsSupportedPerUser attribute from DUTSave the value as 'max-num-credential-user'",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0Credential as 1 1CredentialData as 123451UserIndex as 1UserStatus as nullUserType as nullNote:Repeat this step by incrementing the CredentialIndex by 1 and setting a unique CredentialData till CredentialIndex is 'max-num-credential-user'This step is valid only when 'max-num-credential-user' is > 1This repetition step is valid only when NumberOfCredentialsSupportedPerUser < NumberOfPINUsersSupported",
                    "TH sends SetCredential Command  with CredentialIndex as 'max-num-credential-user' + 1 to DUT for testing RESOURCE_EXHAUSTION conditionOperationType as 0Credential as 1 'max-num-credential-user' + 1CredentialData as 923456UserIndex as 1UserStatus as nullUserType as nullNote:This step is valid only when NumberOfCredentialsSupportedPerUser < NumberOfPINUsersSupported",
                    "TH sends  ClearCredential Command to DUT to clear all the credentials of PIN typeCredentialType as 1CredentialIndex as 0xFFFE"
                ],
                "Expected Outcome": [
                    "Verify that NumberOfTotalUsers\nSupported contains valid number in the inclusive range of 0 to 65534",
                    "Verify that the DUT responds with SetCredentialResponse command.Verify that the DUT responds with Status as SUCCESS.Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not NULL if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is NULL if the entries are not available",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is of bool type .Verify that the DUT responds with UserIndex as 1.Verify that the NextCredentialIndex value is not NULL if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is NULL if the entries are not available",
                    "Verify that the DUT sends SetCredentialResponse with status as INVALID_COMMAND .",
                    "Verify that the DUT sends SetCredentialResponse command with status as DUPLICATE .",
                    "Verify that the DUT sends SetCredentialResponse command with status as DUPLICATE or OCCUPIED .",
                    "Verify that the DUT sends SetCredentialResponse command with status as DUPLICATE or OCCUPIED .",
                    "Verify that the DUT sends SetCredentialResponse command with status INVALID_COMMAND(0x85) if the CredentialIndex is not associated with the UserIndex.",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with  GetCredentialStatusResponse CommandVerify that the CredentialType for the provided value is cleared.Verify that the CredentialIndex for the provided value is cleared.",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SetCredentialResponse command as SUCCESS.",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the CredentialType for the provided value is cleared.Verify that the CredentialIndex is cleared.",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command with credentialExists==FALSE and userIndex==null",
                    "Verify that the DUT sends a INVALID_COMMAND if any of the values are invalid.",
                    "Verify that\nNumberOfCredentials\nSupportedPerUser contains valid number in the inclusive range of 0 to 255",
                    "Verify that the DUT sends SetCredentialResponse command as SUCCESS.Verify that the nextCredentialIndex is CredentialIndex +1",
                    "Verify that the DUT sends SetCredentialResponse command Status as RESOURCE_EXHAUSTEDVerify that the UserIndex is nullVerify that the NextCredentialIndex is 'max-num-credential-user' +1",
                    "Verify that the DUT sends SUCCESS response"
                ]
            }
        },
        {
            "Test Case Name": "133.1.10. [TC-DRLK-2.10] Verification for the Door Lock Events [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.10",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that all the events are implemented.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "5f",
                    "5g",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "5.2.5.1",
                    "5.2.5.1",
                    "5.2.5.2",
                    "5.2.5.2",
                    "5.2.4.1",
                    "5.2.5.3",
                    "5.2.4.2",
                    "5.2.5.3",
                    "5.2.5.3",
                    "5.2.4.1",
                    "5.2.5.4",
                    "5.2.4.2",
                    "5.2.5.4",
                    "5.2.4.34",
                    "5.2.5.5",
                    "5.2.4.14",
                    "5.2.5.5",
                    "5.2.4.40",
                    "5.2.4.2",
                    "5.2.4.37",
                    "5.2.4.44",
                    "5.2.4.37"
                ],
                "PICS": [
                    "DRLK.S.E00(DoorLockAlarm), DRLK.S.M.DetectLockJammed",
                    "DRLK.S.E00(DoorLockAlarm)",
                    "DRLK.S.F05(DPS),DRLK.S.E01(DoorStateChange)",
                    "DRLK.S.F05(DPS),DRLK.S.E01(DoorStateChange)",
                    "DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.E02(LockOperation)",
                    "DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.E02(LockOperation),DRLK.S.F0c(UBOLT)",
                    "DRLK.S.E02(LockOperation)",
                    "DRLK.S.C00.Rsp(LockDoor)",
                    "DRLK.S.E03(LockOperationError)",
                    "DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.E03(LockOperationError)",
                    "DRLK.S.F08(USR),DRLK.S.C1a.Rsp(SetUser)",
                    "DRLK.S.E04(LockUserChange)",
                    "DRLK.S.F04(WDSCH),\nDRLK.S.C0b.Rsp(SetWeekDaySchedule)",
                    "DRLK.S.E04(LockUserChange)",
                    "DRLK.S.F08(USR),\nDRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.E04(LockUserChange)",
                    "DRLK.S.C1d.Rsp(ClearUser)",
                    "DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.C1d.Rsp(ClearUser)"
                ],
                "Test Step": [
                    "Trigger the DUT to generate DoorLockAlarm Event (by LockJammed scenario)",
                    "TH reads the DoorLockAlarm event from DUT",
                    "Trigger the DUT to generate DoorStateChange Event",
                    "TH reads the DoorStateChange event from DUT",
                    "TH sends the LockDoor command (using Remote) to the DUT with valid PINCode",
                    "TH reads the LockOperation event from DUT",
                    "TH sends the UnlockDoor command(using Remote) to the DUT with valid PINCode",
                    "TH reads the LockOperation event from DUT",
                    "TH reads the LockOperation event from DUT",
                    "TH sends the LockDoor command( using Remote) to the DUT with invalid PINCode",
                    "TH reads the LockOperationError event from DUT",
                    "TH sends UnlockDoor Command to the DUT with  InvalidPINCode.",
                    "TH reads the LockOperationError event from DUT",
                    "TH sends SetUser Command to DUT with the following values:OperationType as 0-AddUserIndex as 2( Different from an existing UserIndex)UserName as xxxUserUniqueID as 6452UserStatus as 1-OccupiedEnabledUserType as 0-UnrestrictedUserCredentialRule as 0-Single",
                    "TH reads the LockUserChange event from DUT",
                    "TH send SetWeekDaySchedule Command to DUT with the following values:WeekDayIndex as 1UserIndex as 1DaysMaskMap as 2StartHour as 15StartMinute as 45EndHour as 16EndMinute as 55",
                    "TH reads the LockUserChange event from DUT",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType as 0-AddCredential as 1 1- PIN, IndexCredentialData as 123456UserIndex as 1UserStatus as nullUserType as null",
                    "TH reads the LockUserChange event from DUT",
                    "TH sends ClearUser Command to DUT for user created in Step 5a",
                    "TH sends ClearCredential Command to DUT for Credential created in Preconditions",
                    "TH sends ClearUser Command to DUT for user created in Preconditions"
                ],
                "Expected Outcome": [
                    "Verify that TH receives the DoorLockAlarm event from DUT",
                    "Verify that the AlarmCode is set to LockJammedVerify that the Event priority is set to CRITICAL",
                    "Verify that TH receives the DoorStateChange event from DUT",
                    "Verify that the DoorState set to DoorClosedVerify that Priority is set to CRITICAL or INFO",
                    "Verify that DUT sends success response to the TH",
                    "Verify that LockOperationType is set to LockVerify that OperationSource is set to RemoteVerify that the Priority is set to CRITICAL or INFO",
                    "Verify that DUT sends success response to the TH",
                    "Verify that LockOperationType is set to UnlatchVerify that OperationSource is set to RemoteVerify that the Priority is set to CRITICAL",
                    "Verify that LockOperationType is set to UnlockVerify that OperationSource is set to RemoteVerify that the Priority is set to CRITICAL",
                    "Verify that DUT sends failure response to the TH",
                    "Verify that LockOperationType is set to LockVerify that OperationError is set to InvalidCredentialVerify that OperationSource is set to RemoteVerify that the Priority is set to CRITICAL",
                    "Verify that DUT sends a Failure response to the TH",
                    "Verify that LockOperationType is set to UnlockVerify that OperationSource is set to RemoteVerify that OperationError is set to InvalidCredentialVerify that the Priority is set to CRITICAL",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that LockDataType is set to UserIndexVerify that DataOperationType is set to AddVerify that OperationSource is set to RemoteVerify that the Priority is set to INFO",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that LockDataType is set to WeekDayScheduleVerify that DataOperationType is set to AddVerify that OperationSource is set to RemoteVerify that the Priority is set to INFO",
                    "Verify that the DUT sends SetCredentialResponse command.Verify that the Status is SUCCESS.",
                    "Verify that LockDataType is set to PINVerify that DataOperationType is set to AddVerify that OperationSource is set to RemoteVerify that the Priority is set to INFO",
                    "Verify that the DUT sends Success response to TH",
                    "Verify that the DUT sends Success response to TH",
                    "Verify that the DUT sends Success response to TH"
                ]
            }
        },
        {
            "Test Case Name": "133.1.11. [TC-DRLK-2.11] Verification for multiple credential types [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.11",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives SetCredential, GetCredentialStatus and ClearCredential for multiple credential types from TH.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "4f",
                    "5a",
                    "5b",
                    "5c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "DRLK.S.F08(USR),\nDRLK.S.A0011(NumberOfTotalUsersSupported)",
                    "DRLK.S.F08(USR),DRLK.S.F00(PIN),",
                    "DRLK.S.F08(USR),\nDRLK.S.F00(PIN),",
                    "DRLK.S.F08(USR),\nDRLK.S.F01(RID),DRLK.S.A001a(MinRFIDCodeLength)",
                    "DRLK.S.F08(USR),DRLK.S.F01(RID),DRLK.S.A0019(MaxRFIDCodeLength)",
                    "DRLK.S.F08(USR),DRLK.S.F00(PIN),DRLK.S.C22.Rsp(SetCredential),\nDRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F01(RID),DRLK.S.C22.Rsp(SetCredential),DRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),DRLK.S.C22.Rsp(SetCredential),DRLK.S.C23.Tx(SetCredentialResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F00(PIN),DRLK.S.C24.Rsp(GetCredentialStatus)DRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F01(RID),DRLK.S.C24.Rsp(GetCredentialStatus)DRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),DRLK.S.C24.Rsp(GetCredentialStatus)DRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F00(PIN),DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),DRLK.S.F01(RID),DRLK.S.C24.Rsp(GetCredentialStatus)\nDRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),DRLK.S.C24.Rsp(GetCredentialStatus),\nDRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F01(RID),DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),\nDRLK.S.C24.Rsp(GetCredentialStatus),\nDRLK.S.C25.Tx(GetCredentialStatusResponse)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),DRLK.S.C26.Rsp(ClearCredential)",
                    "DRLK.S.F08(USR),DRLK.S.F00(PIN),DRLK.S.C24.Rsp(GetCredentialStatus)",
                    "DRLK.S.F08(USR),\nDRLK.S.F01(RID),\nDRLK.S.C24.Rsp(GetCredentialStatus)",
                    "DRLK.S.F08(USR),DRLK.S.F02(FGP),\nDRLK.S.C24.Rsp(GetCredentialStatus)"
                ],
                "Test Step": [
                    "TH reads NumberOfTotalUsersSupported attribute and saves for future use.",
                    "TH reads MinPINCodeLength attribute and saves for future use.",
                    "TH reads MaxPINCodeLength attribute and saves for future use.",
                    "TH reads MinRFIDCodeLength attribute and save for future use.",
                    "TH reads MaxRFIDCodeLength attribute and save for future use.",
                    "TH sends SetCredential Command to DUT with the following fields: Set CredentialData Length in inclusive range MinPINCodeLength to MaxPINCodeLength. i.e. MinPINCodeLength=4 and MaxPINCodeLength=8, CredentialData=\"1234\":OperationType: 0CredentialIndex: 1CredentialType: 1CredentialData: See aboveUserIndex: From pre-condition step 2UserStatus: nullUserType: null",
                    "TH sends SetCredential Command to DUT with the following fields:\nSet CredentialData Length in inclusive range MinRFIDCodeLength to MaxRFIDCodeLength.\ni.e. MinRFIDCodeLength=10 and MaxRFIDCodeLength=20, CredentialData=\"123456789A\".OperationType: 0CredentialIndex: 1CredentialType: 2CredentialData: See aboveUserIndex: From pre-condition step 2UserStatus: nullUserType: null",
                    "TH sends SetCredential Command to DUT with the following fields:OperationType: 0CredentialIndex: 1CredentialType: 4CredentialData: \"123456789A\"UserIndex: From pre-condition step 2UserStatus: nullUserType: null",
                    "TH sends GetCredentialStatus Command withCredentialType as 1CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 2CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 4CredentialIndex as 1",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 1CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 2CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 4CredentialIndex as 1",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 2CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 4CredentialIndex as 1",
                    "TH sends  ClearCredential Command to DUT with the following fields:CredentialType as 4CredentialIndex as 1",
                    "TH sends GetCredentialStatus command to DUT with the following fields:CredentialType as 1CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 2CredentialIndex as 1",
                    "TH sends GetCredentialStatus Command withCredentialType as 4CredentialIndex as 1"
                ],
                "Expected Outcome": [
                    "Verify that NumberOfTotalUsersSupported contains a valid number in the inclusive range of 0 to 65535",
                    "Verify that MinPINCodeLength contains a valid number in the inclusive range of 0 to 255",
                    "Verify that MaxPINCodeLength contains a valid number in the inclusive range of 0 to 255",
                    "Verify that MinRFIDCodeLength contains a valid number in the inclusive range of 0 to 255",
                    "Verify that MaxRFIDCodeLength contains a valid number in the inclusive range of 0 to 255",
                    "Verify that the DUT responds with SetCredentialResponse command.Verify that the DUT responds with Status as SUCCESS.Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not null if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is null if the entries are not available",
                    "Verify that the DUT responds with SetCredentialResponse command.Verify that the DUT responds with Status as SUCCESS.Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not null if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is null if the entries are not available",
                    "Verify that the DUT responds with SetCredentialResponse command.Verify that the DUT responds with Status as SUCCESS, If Failure, skip FingerVein type.Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is null.",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is True and of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2.Verify that the NextCredentialIndex is null .",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is True and is of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2.Verify that the NextCredentialIndex is null .",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists True and is of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2.Verify that the NextCredentialIndex is null",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is True and is of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2 .Verify that the NextCredentialIndex is null .",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists True and is of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2 .Verify that the NextCredentialIndex is null .",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists True and is of bool type .Verify that the DUT responds with UserIndex as from pre-condition step 2.Verify that the NextCredentialIndex value is nullVerify that the NextCredentialIndex is null if the entries are not available",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is False and of bool type .Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not null if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is null if the entries are not available",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is False and of bool type .Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not null if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is null if the entries are not available",
                    "Verify that the DUT responds with  GetCredentialStatusResponse Command .Verify that the CredentialExists is False and of bool type .Verify that the DUT responds with UserIndex as null.Verify that the NextCredentialIndex value is not null if there is at least one\navailable entry after the requested credential indexVerify that the NextCredentialIndex is null if the entries are not available"
                ]
            }
        },
        {
            "Test Case Name": "133.1.12. [TC-DRLK-2.12] Verification for UnboltDoor command [DUT-Server]",
            "Test Case ID": "TC-DRLK-2.12",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives UnboltDoor command from TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2a",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "10c",
                    "11a",
                    "11b",
                    "11c",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.3.36",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.3.33",
                    "5.2.4.2,5.2.3.34",
                    "5.2.4.2",
                    "5.2.4.2",
                    "5.2.3.25",
                    "5.2.3.25",
                    "5.2.4.2",
                    "5.2.3.1"
                ],
                "PICS": [
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) &\nDRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.C27.Rsp(UnboltDoor)",
                    "DRLK.S.C27.Rsp(UnboltDoor)",
                    "DRLK.S.F07(COTA) & DRLK.S.F00(PIN)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) &\nDRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F07(COTA) &\nDRLK.S.F00(PIN) & DRLK.S.M.RequirePINForRemoteOperationAttributeWritable",
                    "DRLK.S.F00(PIN) & DRLK.S.C27.Rsp(UnboltDoor) &  DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) & DRLK.S.C27.Rsp(UnboltDoor) &  DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.C27.Rsp(UnboltDoor)  & DRLK.S.A0033(RequirePINForRemoteOperation)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) | DRLK.S.F01(RID)",
                    "DRLK.S.F00(PIN) & DRLK.S.C27.Rsp(UnboltDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C27.Rsp(UnboltDoor)",
                    "DRLK.S.F00(PIN) & DRLK.S.C01.Rsp(UnlockDoor)",
                    "DRLK.S.A0023(AutoRelockTime)",
                    "DRLK.S.A0023(AutoRelockTime)",
                    "DRLK.S.C27.Rsp(UnboltDoor)",
                    "DRLK.S.A0000(LockState)"
                ],
                "Test Step": [
                    "TH writes the RequirePINforRemoteOperation attribute value as False on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends UnboltDoor Command to the DUT without PINCode",
                    "TH sends UnboltDoor Command to the DUT with valid PINCode",
                    "TH writes the RequirePINforRemoteOperation attribute value as true on the DUT",
                    "TH reads the RequirePINforRemoteOperation attribute from the DUT. Save the current attribute value as Current_RequirePINValue",
                    "TH evaluates the value of saved value Current_RequirePINValue",
                    "TH sends UnboltDoor Command to the DUT with Invalid PINCode",
                    "TH sends UnboltDoor Command to the DUT without PINCode",
                    "TH sends UnboltDoor Command to the DUT with valid PINCode",
                    "TH writes WrongCodeEntryLimit attribute value as 3 on the DUT",
                    "TH reads the value of WrongCodeEntryLimit attribute.",
                    "TH writes WrongCodeEntryLimit attribute value as 0 on the DUT",
                    "TH writes UserCodeTemporaryDisableTime attribute value as 15 seconds on the DUT",
                    "TH reads the value of UserCodeTemporaryDisableTime attribute.",
                    "TH writes UserCodeTemporaryDisableTime attribute value as 0 second on the DUT",
                    "TH sends UnboltDoor Command to the DUT with invalid PINCode, repeated WrongCodeEntryLimit (current value) times",
                    "TH sends UnboltDoor Command to the DUT with valid PINCode before UserCodeTemporaryDisableTime expires",
                    "TH waits UserCodeTemporaryDisableTime (current value) seconds to allow lockout to expire",
                    "TH writes AutoRelockTime attribute value as 60 seconds on the DUT",
                    "TH reads AutoRelockTime attribute from the DUT",
                    "TH sends the UnboltDoor command to the DUT with valid PINCode",
                    "TH reads LockState attribute after AutoRelockTime Expires and the lock action has been completed (e.g. motor movement finished)"
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends SUCCESS response if  DRLK.S.A0033(RequirePINForRemoteOperation).Write is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is FALSE",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT sends SUCCESS response if  DRLK.S.A0033(RequirePINForRemoteOperation).Write is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the read attribute operation completes successfully",
                    "Verify that value of Current_RequirePINValue is TRUE",
                    "Verify that DUT sends failure response to the TH",
                    "Verify that DUT sends SUCCESS response to the TH if value of Current_RequirePINValue == FALSE, and otherwise responds with FAILURE if value of Current_RequirePINValue == TRUE",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT sends Success response if (DRLK.S.M.WrongCodeEntryLimitAttributeWritable ) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that the DUT sends CONSTRAINT_ERROR if (DRLK.S.M.WrongCodeEntryLimitAttributeWritable ) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the DUT send the Success response if (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the returned value is between 1 and 255.",
                    "Verify that the DUT sends CONSTRAINT_ERROR if (DRLK.S.M.UserCodedTemporaryDisableTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that DUT sends failure response to the TH each time",
                    "Verify that DUT sends failure response to the TH",
                    "",
                    "Verify that the DUT sends SUCCESS response if (DRLK.S.M.AutoRelockTimeAttributeWritable) is True, and otherwise responds with UNSUPPORTED_WRITE",
                    "Verify that the AutoRelockTime is a valid value",
                    "Verify that DUT sends SUCCESS response to the TH",
                    "Verify that the DUT is locked."
                ]
            }
        },
        {
            "Test Case Name": "133.2.1. [TC-DRLK-3.2] Commands [DUT - Client]",
            "Test Case ID": "TC-DRLK-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To Verify the door lock commands sent by the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "DRLK.C.C00.Tx(LockDoor)",
                    "DRLK.C.C01.Tx(UnlockDoor)",
                    "DRLK.C.C03.Tx(UnlockWithTimeout)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C0b.Tx(SetWeekDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C0c.Tx(GetWeekDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C0d.Tx(ClearWeekDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C0e.Tx(SetYearDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C0f.Tx(GetYearDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C10.Tx(ClearYearDaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C11.Tx(SetHolidaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C12.Tx(GetHolidaySchedule)",
                    "DRLK.C.F04(WDSCH),DRLK.C.C13.Tx(ClearHolidaySchedule)",
                    "DRLK.C.F08(USR),DRLK.C.C1a.Tx(SetUser)",
                    "DRLK.C.F08(USR),DRLK.C.C1b.Tx(GetUser)",
                    "DRLK.C.F08(USR),DRLK.C.C1d.Tx(ClearUser)",
                    "DRLK.C.F08(USR),DRLK.C.C22.Tx(SetCredential)",
                    "DRLK.C.F08(USR),DRLK.C.C24.Tx(GetCredentialStatus)",
                    "DRLK.C.F08(USR),DRLK.C.C26.Tx(ClearCredential)"
                ],
                "Test Step": [
                    "DUT sends LockDoor command to TH.",
                    "DUT sends UnlockDoor command to TH.",
                    "DUT sends UnlockWithTimeout command to TH.",
                    "DUT sends SetWeekDaySchedule command to TH.",
                    "DUT sends GetWeekDaySchedule command to TH.",
                    "DUT sends ClearWeekDaySchedule command to TH.",
                    "DUT sends SetYearDaySchedule command to TH.",
                    "DUT sends GetYearDayScheduleResponse command to TH.",
                    "DUT sends ClearYearDaySchedule command to TH.",
                    "DUT sends Set Holiday Day Schedule command to TH.",
                    "DUT sends Get Holiday Day Schedule command to TH.",
                    "DUT sends Clear Holiday Day Schedule command to TH.",
                    "DUT sends SetUser command to TH.",
                    "DUT sends GetUser to TH.",
                    "DUT sends ClearUser command to TH.a",
                    "DUT sends SetCredential command to TH.a",
                    "DUT sends GetCredentialStatus to TH.",
                    "DUT sends ClearCredential command to TH."
                ],
                "Expected Outcome": [
                    "Test Harness receives the LockDoor command from the DUT.",
                    "Test Harness receives the UnlockDoor command from the DUT.",
                    "Test Harness receives the UnlockWithTimeout command from the DUT.",
                    "Test  Harness receives the SetWeekDaySchedule command from the DUT.",
                    "Test Harness receives the GetWeekDaySchedule command",
                    "Test Harness receives the ClearWeekDaySchedule command from the DUT.",
                    "Test Harness receives the SetYearDaySchedule command from the DUT.",
                    "Test Harness receives the GetYearDayScheduleResponse command from the DUT.",
                    "Test Harness receives the ClearYearDaySchedule command from the DUT.",
                    "Test Harness receives the Set Holiday Day Schedule command from the DUT.",
                    "Test Harness receives the Get Holiday Day Schedule command from the DUT.",
                    "Test Harness receives the Clear Holiday Day Schedule command from the DUT.",
                    "Test Harness receives the SetUser command from the DUT.",
                    "Test Harness receives the GetUser command from the DUT.",
                    "Test Harness receives the ClearUser command from the DUT.",
                    "Test Harness receives the SetCredential command from the DUT.",
                    "Test Harness receives the GetCredentialStatus command from the DUT.",
                    "Test Harness receives the ClearCredential command command from the DUT."
                ]
            }
        }
    ],
    "Binding": [
        {
            "Test Case Name": "136.1.1. [TC-BIND-2.1] Binding Cluster Attributes-Node [DUT-Controller]",
            "Test Case ID": "TC-BIND-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that TH receives the commands sent by DUT for its binding entries.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "9.6",
                    "",
                    "appclusters-1.5.6.2",
                    "",
                    "",
                    "appclusters-1.5.6.2",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "OO.C.C01.Tx(On)",
                    "OO.C.C01.Tx(On)",
                    "",
                    "OO.C.C00.Tx(Off)",
                    "OO.C.C00.Tx(Off)",
                    "OO.C.C01.Tx(On)"
                ],
                "Test Step": [
                    "Factory Reset DUT",
                    "Commission DUT to TH1\u2019s fabric",
                    "Commission TH2 to TH1\u2019s fabric (Node ID = 2)",
                    "Commission TH3 to TH1\u2019s fabric (Node ID = 3)",
                    "TH1 writes Binding entries into DUT on the endpoint with the On/Off client withEntry 1:Node = 2Cluster = 0x0006(onoff)Endpoint = 1Entry 2:Node = 3Cluster = 0x0006(onoff)Endpoint = 2Note:Node 2 corresponds to TH2\u2019s Node IDNode 3 corresponds to TH3\u2019s Node ID",
                    "TH1 enables DUT as Controller",
                    "DUT is triggered to send  On command to its binding node entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)",
                    "TH1 removes second binding entry corresponding to TH3 from DUT",
                    "DUT is triggered to send  off command to its binding entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)",
                    "TH1 reads OnOff attribute from TH3 (Endpoint 2)"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TH2 receives On command(Endpoint 1)TH3 receives On command(Endpoint 2)",
                    "Verify that the value is set to On",
                    "",
                    "TH2 receives off command (Endpoint 1)TH3 does not receive off command (Endpoint 2)",
                    "Verify that the value is set to Off",
                    "Verify that the value is set to On"
                ]
            }
        },
        {
            "Test Case Name": "136.1.2. [TC-BIND-2.2] Binding Cluster Attributes-DUT handles its Groups settings [DUT-Controller]",
            "Test Case ID": "TC-BIND-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that TH2 receives the multicast commands sent by DUT for its binding entries.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10a",
                    "10b",
                    "11",
                    "12a",
                    "12b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "11.2.9.1.",
                    "11.2.7.1",
                    "appclusters-1.3.6.1",
                    "9.6",
                    "appclusters-1.5.6.2",
                    "",
                    "",
                    "appclusters-1.5.6.2",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "GRPKEY.C.C00.Tx(KeySetWrite)",
                    "GRPKEY.C.A0000(GroupKeyMap)",
                    "G.C.C00.Tx(AddGroup)",
                    "",
                    "OO.C.C01.Tx(On)",
                    "OO.C.C01.Tx(On)",
                    "",
                    "OO.C.C00.Tx(Off)",
                    "OO.C.C01.Tx(On)"
                ],
                "Test Step": [
                    "Factory Reset DUT",
                    "Commission DUT to TH1\u2019s fabric",
                    "TH1 enables DUT as Controller",
                    "Commission TH2 to TH1\u2019s fabric (Node ID = 2)",
                    "DUT generates fabric-unique GroupID, GroupName, random key, EpochKey0 and GroupKeySetID.",
                    "DUT sends KeySetWrite command to GroupKeyManagement cluster to TH2 on Endpoint 0.",
                    "DUT binds GroupId with GroupKeySetID in the GroupKeyMap attribute list on GroupKeyManagement cluster to TH2 on Endpoint 0",
                    "DUT sends AddGroup( Group Name and Group-ID) Command to TH2 on Endpoint 1.",
                    "TH1 writes Binding entry into DUT withEntry 1:Group = The Group ID in the AddGroup command sent from DUT to TH2",
                    "DUT is triggered to send Multicast message On command to its binding entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)",
                    "TH1 removes all the binding entries from DUT",
                    "DUT is triggered to send Multicast message off command to its binding entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TH2 receives the KeySetWrite command from the DUT.",
                    "TH2 receives the binding of GroupKeySetID with the GroupID from DUT",
                    "TH2 receives the AddGroup command from the DUT",
                    "",
                    "TH2 receives On command(Endpoint 1)",
                    "Verify that the value is set to On",
                    "",
                    "TH2 does not receive Off command",
                    "Verify that the value is set to On"
                ]
            }
        },
        {
            "Test Case Name": "136.1.3. [TC-BIND-2.3] Binding Cluster Attributes-TH1 enables DUT to handle its Group settings [DUT-Controller]",
            "Test Case ID": "TC-BIND-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that TH2 receives the multicast commands sent by DUT for its binding entries.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11a",
                    "11b",
                    "12",
                    "13a",
                    "13b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "11.2.5.1.",
                    "",
                    "appclusters-1.3.6.1",
                    "9.6",
                    "",
                    "appclusters-1.5.6.2",
                    "",
                    "",
                    "appclusters-1.5.6.2",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "OO.C.C01.Tx(On)",
                    "OO.C.C01.Tx(On)",
                    "",
                    "OO.C.C00.Tx(Off)",
                    "OO.C.C01.Tx(On)"
                ],
                "Test Step": [
                    "Factory Reset DUT",
                    "Commission DUT to TH1\u2019s fabric",
                    "TH1 enables DUT as Controller",
                    "Commission TH2 to TH1\u2019s fabric (Node ID = 2)",
                    "TH1 generates fabric-unique GroupID, GroupName, random key, EpochKey0 and GroupKeySetID.",
                    "TH1 sends KeySetWrite command to GroupKeyManagement cluster to TH2 on Endpoint 0.",
                    "TH1 binds GroupId with GroupKeySetID in the GroupKeyMap attribute list on GroupKeyManagement cluster to TH2 on Endpoint 0",
                    "TH1 sends AddGroup( Group Name and Group-ID) Command to TH2 on Endpoint 1.",
                    "TH1 writes Binding entry into DUT withEntry 1:Group = The Group ID in the AddGroup command sent from TH1 to TH2",
                    "TH1 sets up group settings on DUT",
                    "DUT is triggered to send Multicast message On command to its binding entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)",
                    "TH1 removes all the binding entries from DUT",
                    "DUT is triggered to send Multicast message off command to its binding entries",
                    "TH1 reads OnOff attribute from TH2 (Endpoint 1)"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "TH2 receives the KeySetWrite command from the TH1",
                    "TH2 receives the binding of GroupKeySetID with the GroupID from TH1",
                    "TH2 receives the AddGroup command from the TH1",
                    "",
                    "",
                    "TH2 receives On command(Endpoint 1)",
                    "Verify that the value is set to On",
                    "",
                    "TH2 does not receive Off command",
                    "Verify that the value is set to On"
                ]
            }
        }
    ],
    "Groups": [
        {
            "Test Case Name": "140.1.1. [TC-G-2.1] Attributes [DUT-Server]",
            "Test Case ID": "TC-G-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the attributes provided by the Groups Cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "1.3.6.1",
                    "1.3.6.1",
                    "1.3.6.1"
                ],
                "PICS": [
                    "G.S.A0000(NameSupport)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads NameSupport attribute from DUT",
                    "TH writes NameSupport attribute as 0x80 EXOR the value as read in step 1",
                    "TH reads NameSupport attribute from DUT"
                ],
                "Expected Outcome": [
                    "If G.S.F00(GN) is set to 1, Verify that NameSupport is 0x80 (bit 7 is 1)If G.S.F00(GN) is set to 0, Verify that NameSupport is 0x00 (bit 7 is 0)",
                    "Verify that the DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the NameSupport attribute value has the same value read on step 1."
                ]
            }
        },
        {
            "Test Case Name": "140.1.2. [TC-G-2.2] Commands - AddGroup, ViewGroup, RemoveGroup, RemoveAllGroups [DUT-Server]",
            "Test Case ID": "TC-G-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives the following Groups commands from TH.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "3",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "7a",
                    "7b",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "appclusters-1.3.7.5",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "11.2.7",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.2",
                    "1.3.7.1",
                    "1.3.7.2",
                    "1.3.7.",
                    "1.3.7.2",
                    "1.3.7.2",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.2",
                    "1.3.7.2",
                    "1.3.7.1",
                    "1.3.7."
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C00.Rsp(AddGroup)G.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "",
                    "G.S.C00.Rsp(AddGroup)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "G.S.C01.Rsp(ViewGroup)\nG.S.C01.Tx(ViewGroupResponse)",
                    "G.S.F00(GN)",
                    "G.S.C01.Rsp(ViewGroup)\nG.S.C01.Tx(ViewGroupResponse)",
                    "G.S.C03.Rsp(RemoveGroup)\nG.S.C03.Tx(RemoveGroupResponse)",
                    "G.S.C01.Rsp(ViewGroup)\nG.S.C01.Tx(ViewGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C03.Rsp(RemoveGroup)\nG.S.C03.Tx(RemoveGroupResponse)",
                    "G.S.C03.Rsp(RemoveGroup)\nG.S.C03.Tx(RemoveGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C01.Rsp(ViewGroup)\nG.S.C01.Tx(ViewGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)\nG.S.F00(GN)",
                    "GRPKEY.S.A0001(GroupTable)\nG.S.F00(GN)"
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614",
                    "TH writes the GroupKeyMap attribute in the GroupKeyManagement cluster on EP0 with maxgroups entries binding GroupId(0x0001 to (maxgroups)) with GroupKeySetID 1",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as 0x0001GroupName as Gp1",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as 0x0002GroupName as Gp2",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on Ep0",
                    "",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT (maxgroups-2) more times, starting with GroupID 0x0003 and incrementing by 1 each time.",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on Ep0",
                    "TH binds GroupId (maxgroups+1) with GroupKeySetID 1",
                    "TH sends AddGroup command to DUT  on PIXIT.G.ENDPOINT as unicast with the GroupID set to (maxgroups+1)",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as 0x0000GroupName as Gp0",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as maxgroups+0x0005GroupName as Gp5",
                    "TH sends ViewGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields:GroupID as 0x0001",
                    "",
                    "TH sends ViewGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields:GroupID as 0x0000",
                    "TH sends RemoveGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following field :GroupID as 0x0001",
                    "TH sends ViewGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following field :GroupID as 0x0001",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends RemoveGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following field :GroupID as 0x0000",
                    "TH sends RemoveGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following field :GroupID as 0x0001",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends RemoveAllGroups command to DUT on PIXIT.G.ENDPOINT as unicast method",
                    "TH sends ViewGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields:GroupID as 0x0002",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields:GroupID as 0x0001GroupName as Gp123456789123456Note: GroupName  length > 16",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as SUCCESSGroup ID is  0x0001GroupID is same as the one which is sent in AddGroup command",
                    "Verify that the GroupTable contains an entry with the following fields:GroupId as 0x0001Endpoints list includes PIXIT.G.ENDPOINT",
                    "Verify that the GroupTable contains an entry with the GroupName as Gp1",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as SUCCESSGroup ID is  0x0002",
                    "Verify that the GroupTable contains an entry with the following fields:GroupId as 0x0002Endpoints list includes PIXIT.G.ENDPOINT",
                    "Verify that the GroupTable contains an entry with the GroupName as Gp2",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as SUCCESS",
                    "Verify that the GroupTable contains entries for each of the IDs added in step 5.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as RESOURCE_EXHAUSTED",
                    "Verify that the GroupTable does not include an entry for GroupId (maxgroups+1)",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as CONSTRAINT_ERROR as GroupID is not in the inclusive range of 0x0001 to 0xffff",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as UNSUPPORTED_ACCESS as GroupID in the AddGroup command does not have the security key",
                    "Verify that the DUT sends a ViewGroupResponse with the following fields :GroupID is 0x0001Status as SUCCESS",
                    "Verify that the ViewGroupResponse contains GroupName belongs to the GroupID in the ViewGroup command",
                    "Verify that the DUT sends a ViewGroupResponse with the following fields :Status as CONSTRAINT_ERROR as GroupID is not in the inclusive range of 0x0001 to 0xffff",
                    "Verify that the DUT sends a RemoveGroupResponse with the Status as SUCCESSGroupID is 0x0001",
                    "Verify that the DUT sends a ViewGroupResponse with the following fields :Verify that the Status is NOT_FOUND",
                    "Verify that none of the entries have a GroupId of 0x0001 associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a RemoveGroupResponse with the following fields:Status as CONSTRAINT_ERROR as GroupID is not in the inclusive range of 0x0001 to 0xffff",
                    "Verify that the DUT sends a RemoveGroupResponse with the following fields:Verify that the Status is NOT_FOUND",
                    "Verify that none of the entries have a GroupId of 0x0001 associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a response with the Status set as SUCCESS",
                    "Verify that the DUT sends a ViewGroupResponse with the following fields :Verify that the Status is NOT_FOUND",
                    "Verify that there are no entries associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a response withStatus as CONSTRAINT_ERROR as the GroupName is of length greater than 16",
                    "Verify that there is no entry with GroupId 0x0001."
                ]
            }
        },
        {
            "Test Case Name": "140.1.3. [TC-G-2.3] Commands - GetGroupMembership, AddGroupIfIdentifying [DUT-Server]",
            "Test Case ID": "TC-G-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives the following Groups commands from TH.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "3",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9a",
                    "9b",
                    "9c",
                    "10",
                    "11a",
                    "11b",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16a",
                    "16b",
                    "17",
                    "18",
                    "19a",
                    "19b",
                    "20",
                    "21a",
                    "21b",
                    "22",
                    "23"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "appclusters-1.3.7.5",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.3",
                    "1.3.7.3",
                    "1.3.7.3",
                    "1.3.7.",
                    "11.2.7",
                    "1.2.6",
                    "1.2.7",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.1",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.1",
                    "1.3.7",
                    "11.2.7",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.3.7.",
                    "1.2.6",
                    "1.2.7",
                    "1.3.7.",
                    "1.3.7."
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C02.Rsp(GetGroupMembership)\nG.S.C02.Tx(GetGroupMembershipResponse)",
                    "G.S.C02.Rsp(GetGroupMembership)\nG.S.C02.Tx(GetGroupMembershipResponse)",
                    "G.S.C02.Rsp(GetGroupMembership)\nG.S.C02.Tx(GetGroupMembershipResponse)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "",
                    "I.S.C00.Rsp(Identify)",
                    "I.S.A0000(IdentifyTime)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)\nG.S.F00(GN)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "I.S.C00.Rsp(Identify)",
                    "I.S.A0000(IdentifyTime)",
                    "G.S.C05.Rsp(AddGroupIfIdentifying)",
                    "GRPKEY.S.A0001(GroupTable)"
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614",
                    "TH writes the GroupKeyMap attribute in the GroupKeyManagement cluster of DUT on EP0 with maxgroups entries binding GroupId(0x0002 to (maxgroups+1)) with GroupKeySetID 1",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as 0x0002GroupName as Gp2",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupID as 0x0003GroupName as Gp3",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "",
                    "TH sends GetGroupMembership command to DUT on PIXIT.G.ENDPOINT with the following fields :GroupList as NULL",
                    "TH sends GetGroupMembership command to DUT on PIXIT.G.ENDPOINT with the following fields :GroupList as [0x0002]",
                    "TH sends GetGroupMembership command to DUT on PIXIT.G.ENDPOINT as unicast with the following fields :GroupList as [0x0002, 0x0003]",
                    "TH sends RemoveAllGroups command to DUT  on PIXIT.G.ENDPOINT as unicast method",
                    "TH writes the GroupKeyMap attribute in the GroupKeyManagement cluster of DUT on EP0 to binds GroupId(0x0006 to  0x0006 + maxgroups-1 ) with GroupKeySetID 1",
                    "TH sends Identify command to DUT on PIXIT.G.ENDPOINT with the IdentifyTime as (0x0078) 120 seconds",
                    "TH reads immediately IdentifyTime attribute from DUT",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT as unicast method with the following fields:GroupID as 0x0006GroupName as Gp6",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster of DUT on EP0",
                    "",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT  as unicast method with the following fields:GroupID as 0x0007GroupName as Gp7",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "",
                    "TH sends AddGroupIfIdentifying command to DUT PIXIT.G.ENDPOINT with (maxgroups - 2) groups, incrementing the GroupId each time starting from 0x0008.",
                    "TH binds GroupId( 0x0006 + maxgroups to 0x0006 + maxgroups+1) with GroupKeySetID 1",
                    "TH sends AddGroupIfIdentifying command to DUT PIXIT.G.ENDPOINT once as unicast method with different GroupID",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends RemoveAllGroups command to DUT on PIXIT.G.ENDPOINT as unicast method",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT as unicast method with the following fields:GroupID as 0x0000GroupName as Gp45",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT as unicast method with the following fields:GroupID as 0x0006 + maxgroupsGroupName as Gp123456789123456",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT as unicast method with the following fields:GroupId as 0x0046GroupName as Gp46",
                    "TH sends Identify command to DUT on PIXIT.G.ENDPOINT with the IdentifyTime as 0x0000 (stop identifying)",
                    "TH reads immediately IdentifyTime attribute from DUT",
                    "TH sends AddGroupIfIdentifying command to DUT on PIXIT.G.ENDPOINT as unicast method with the following fields:GroupId as 0x0004GroupName as Gp4",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster of DUT on EP0"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as SUCCESSGroupID is 0x0002",
                    "Verify that the DUT responds with the GroupTable with the following entry associated to the PIXIT.G.ENDPOINTGroupID as 0x0002",
                    "Verify that the GroupTable contains an entry with the GroupName as Gp2",
                    "Verify that the DUT sends a AddGroupResponse with the following:Status as SUCCESSGroupID is 0x0003",
                    "Verify that the GroupTable list includes two entries and and has one entry with the following fields:GroupId as 0x0003",
                    "Verify that the GroupTable contains an entry with the GroupName as Gp3",
                    "Verify that the DUT sends a GetGroupMembershipResponse with the following fields:Verify that the Capacity is in the inclusive range of 0 to 254 or nullGroupList is in the inclusive range of 0x0001 - 0xffffVerify that the response contains all the GroupID associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a GetGroupMembershipResponse with the following fields:Verify that the Capacity is in the inclusive range of 0 to 254 or nullGroupList contains one item: 0x0002",
                    "Verify that the DUT sends a GetGroupMembershipResponse with the following fields:Verify that the Capacity is in the inclusive range of 0 to 254 or nullGroupList contains two items: 0x0002 and 0x0003",
                    "Verify that the DUT sends a response with the Status set as SUCCESS",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the IdentifyTime attribute has a value approximately equal to 0x0078",
                    "Verify that the DUT sends a response withStatus as SUCCESSGroupId is 0x0006",
                    "Verify DUT responds with the groups that are added in the GroupTable with provided GroupId associated with the PIXIT.G.ENDPOINT",
                    "Verify DUT responds with provided GroupName as Gp6 associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a response withStatus as SUCCESSGroupId is 0x0007",
                    "Verify DUT responds with the groups that are added in the GroupTable with provided GroupId associated with the PIXIT.G.ENDPOINT",
                    "Verify DUT responds with provided GroupName as Gp7 associated with the PIXIT.G.ENDPOINT",
                    "Verify that the DUT sends a response with Status as SUCCESS with the GroupId specified in the command",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a response withStatus of RESOURCE_EXHAUSTED when the number of entries in GroupTable is greater than the MaxGroupsPerFabric attribute.",
                    "Verify that GroupId ( 0x0006 + maxgroups to 0x0006 + maxgroups+1) is not present in the GroupTable",
                    "Verify that the DUT sends a response with the Status set as SUCCESS",
                    "Verify that the DUT sends a response withStatus as CONSTRAINT_ERROR as GroupId is not in the inclusive range of 0x0001 to 0xffff",
                    "Verify that the DUT sends a response withStatus as CONSTRAINT_ERROR as the GroupName is of length greater than 16",
                    "Verify that the DUT sends a response withStatus as UNSUPPORTED_ACCESS as GroupId in the AddGroupIfIdentifying command does not have the security key",
                    "",
                    "Verify that the IdentifyTime attribute has the value as 0x0000",
                    "Verify that the DUT sends a response withStatus as SUCCESSGroupId is 0x0004",
                    "Verify DUT responds that the group is not added in the GroupTable with provided GroupId(0x0004) associated with the PIXIT.G.ENDPOINT"
                ]
            }
        },
        {
            "Test Case Name": "140.1.4. [TC-G-2.4] Commands - AddGroup Command with same GroupID on Multiple Endpoint [DUT-Server]",
            "Test Case ID": "TC-G-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifies the DUT behaviour when it receives the following Groups commands from TH with same Group ID on Multiple Endpoint.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "CoreSpec-11.2.7.2",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "appclusters-1.3.7.5",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.1",
                    "1.3.7.2",
                    "1.3.7.1",
                    "1.3.7.",
                    "1.3.7.2",
                    "1.3.7.",
                    "1.3.7."
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "G.S.C00.Rsp(AddGroup)\nG.S.C00.Tx(AddGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.F00(GN)",
                    "G.S.C01.Rsp(ViewGroup)\nG.S.C01.Tx(ViewGroupResponse)",
                    "G.S.F00(GN)",
                    "G.S.C03.Rsp(RemoveGroup)\nG.S.C03.Tx(RemoveGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "G.S.C03.Rsp(RemoveGroup)\nG.S.C03.Tx(RemoveGroupResponse)",
                    "GRPKEY.S.A0001(GroupTable)"
                ],
                "Test Step": [
                    "",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1:  d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2:  d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614",
                    "TH writes the GroupKeyMap attribute in the GroupKeyManagement cluster on EP0 with one entry binding GroupId(0x0001) with GroupKeySetID 1",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT,PIXIT.G.ENDPOINT2",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT with the following fields:GroupID as 0x0001GroupName as 'Gp1'",
                    "TH sends AddGroup command to DUT on PIXIT.G.ENDPOINT2 with the following fields:GroupID as 0x0001GroupName as 'Gp2'",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "",
                    "TH sends ViewGroup command to DUT on PIXIT.G.ENDPOINT  with the following fields:GroupID as 0x0001",
                    "",
                    "TH sends RemoveGroup command to DUT on PIXIT.G.ENDPOINT as unicast with the following field:GroupID as 0x0001",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0",
                    "TH sends RemoveGroup command to DUT on PIXIT.G.ENDPOINT2 as unicast with the following field:GroupID as 0x0001",
                    "TH reads GroupTable attribute from the GroupKeyManagement cluster from DUT on EP0"
                ],
                "Expected Outcome": [
                    "Verify that PIXIT.G.ENDPOINT and PIXIT.G.ENDPOINT2 are different.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the TH receives a AddGroupResponse the following:Status as SUCCESSGroup ID is 0x0001",
                    "Verify that the TH receives a AddGroupResponse with the following:Status as SUCCESSGroupID is 0x0001",
                    "Verify that the GroupTable contains an entry with the following fields:GroupID as 0x0001Endpoints list includes PIXIT.G.ENDPOINT,PIXIT.G.ENDPOINT2",
                    "Verify that the GroupTable contains an entry with the GroupName as 'Gp2'",
                    "Verify that the DUT sends a ViewGroupResponse with the following fields :GroupID as 0x0001Status as SUCCESS",
                    "Verify that the ViewGroupResponse contains GroupName as 'GP2'Note: GroupName for GroupID 0x0001 is same on PIXIT.G.ENDPOINT and PIXIT.G.ENDPOINT2",
                    "Verify that the DUT sends a RemoveGroupResponse with the Status as SUCCESSGroupID is 0x0001",
                    "Verify that there is one entry with GroupID 0x0001 associated with the PIXIT.G.ENDPOINT2Verify that there is no entry with GroupID 0x0001 associated with the PIXIT.G.ENDPOINT",
                    "",
                    "Verify that there is no entry that has GroupID 0x0001 associated with the PIXIT.G.ENDPOINT2"
                ]
            }
        },
        {
            "Test Case Name": "140.2.1. [TC-G-3.2] Commands [DUT-Client]",
            "Test Case ID": "TC-G-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To Verify the Groups Cluster Commands sent by the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "1.3.7.3",
                    "1.3.7.4",
                    "1.3.7.4",
                    "1.3.7.4"
                ],
                "PICS": [
                    "G.C.C02.Tx(GetGroupMembership)",
                    "G.C.C03.Tx(RemoveGroup)",
                    "G.C.C04.Tx(RemoveAllGroups)",
                    "G.C.C05.Tx(AddGroupIfIdentifying)"
                ],
                "Test Step": [
                    "DUT sends  GetGroupMembership command to TH",
                    "DUT sends  RemoveGroup command to TH",
                    "DUT sends  RemoveAllGroups command to TH",
                    "DUT sends  AddGroupIfIdentifying command to TH"
                ],
                "Expected Outcome": [
                    "Test Harness receives the GetGroupMembership command from the DUT.",
                    "Test Harness receives the  RemoveGroup command from the DUT.",
                    "Test Harness receives the  RemoveAllGroups command from the DUT.",
                    "Test Harness receives the  AddGroupIfIdentifying command from the DUT."
                ]
            }
        }
    ],
    "Scenes_Management": [
        {
            "Test Case Name": "144.1.1. [TC-S-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-S-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Scenes Management Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "S.S.A0000(LastConfiguredBy)",
                    "S.S.A0001(SceneTableSize)",
                    "S.S.A0002(FabricSceneInfo)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theLastConfiguredBy attribute",
                    "TH reads from the DUT theSceneTableSize attribute",
                    "TH reads from the DUT theFabricSceneInfo attribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a node-id or null",
                    "Verify that the DUT response contains an uint16",
                    "Verify that the DUT response contains a list of SceneInfoStruct"
                ]
            }
        },
        {
            "Test Case Name": "144.1.2. [TC-S-2.2] Primary functionality with DUT as Server",
            "Test Case ID": "TC-S-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Scenes Management cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "5a",
                    "5b",
                    "5c",
                    "6",
                    "7a",
                    "7b",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "8e",
                    "8f",
                    "9a",
                    "9b",
                    "9c",
                    "9d",
                    "10a",
                    "10b",
                    "11a",
                    "11b",
                    "12a",
                    "12b",
                    "12c",
                    "13a",
                    "13b",
                    "13c",
                    "14a",
                    "14b",
                    "14c",
                    "15"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CoreSpec-11.2.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C00.Rsp(AddGroup)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "-",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.C04.Rsp(StoreScene)",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    "",
                    "",
                    "-",
                    "-",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    "",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    "-",
                    "S.S.C04.Rsp(StoreScene)",
                    "-",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "G.S.C00.Rsp(AddGroup)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "-",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    ""
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: a0a1a2a3a4a5a6a7a8a9aaabacadaeafEpochStartTime0: 1110000EpochKey1: b0b1b2b3b4b5b6b7b8b9babbbcbdbebfEpochStartTime1: 1110001EpochKey2: c0c1c2c3c4c5c6c7c8c9cacbcccdcecfEpochStartTime2: 1110002",
                    "TH binds GroupIds 0x0001 and 0x0002 with GroupKeySetID 0x01a1 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with two entries as follows:List item 1:FabricIndex: 1GroupId: 0x0001GroupKeySetId: 0x01a1List item 2:FabricIndex: 1GroupId: 0x0002GroupKeySetId: 0x01a1",
                    "TH sends aRemoveAllGroupscommand to DUT.",
                    "TH sends aAddGroupcommand to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table).",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table).",
                    "TH configuresAC1on DUT\nfor all implemented application clusters supporting scenes.",
                    "TH sends a StoreScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH sends a StoreScene command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table) and\ntheSceneIDfield set to 0x01.",
                    "TH configuresAC2on DUT\nfor all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH reads attribute SceneTableSize from DUT.",
                    "TH reads attribute FabricSceneInfo from DUT.",
                    "By application specific means, remove the power source from DUT.",
                    "By application specific means, return the power source to DUT.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH sends a RecallScene command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table) and\ntheSceneIDfield set to 0x01.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table) and\ntheSceneIDfield set to 0x01.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0xfe.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a AddScene command to DUT\nwith theGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\nthe TransitionTime field set to 60,000,000 (60,000s) and\na set of extension fields appropriate toAC1.",
                    "TH sends a AddScene command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table),\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 1,000 (1s) and\na set of extension fields appropriate toAC1.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "TH sends a AddScene command to DUT\nwith theGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\nthe TransitionTime field set to 70,000,000 (70,000s) and\na set of extension fields appropriate toAC1.",
                    "TH sends a AddScene command to DUT\nwith theGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\nthe TransitionTime field set to 60,000,001 (60,000.001s) and\na set of extension fields appropriate toAC1.",
                    "TH sends a AddScene command to DUT\nwith theGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\nthe TransitionTime field set to 1000 (1s) and\nextension field sets holding an invalid ExtensionField\n(Invalid attribute ID for given cluster).",
                    "TH sends a RemoveScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH sends a RemoveScene command to DUT\nwith theGroupIDfield set toGI(WhereGIis a group currently absent from the group table) and\ntheSceneIDfield set to 0x01.",
                    "TH sends a RemoveScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to  0x01.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH configuresAC1on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a StoreScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a StoreScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x02.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG1.",
                    "If capacity allows, TH sends aAddGroupcommand to DUT with\ntheGroupIDfield set toG2.",
                    "TH sends a RemoveAllScenes command to DUT\nwith theGroupIDfield set toG2.",
                    "TH sends a GetSceneMembership command to DUT\nwith theGroupIDfield set toG2.",
                    "TH configuresAC3on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a StoreScene command to DUT\nwith theGroupIDfield set toG2and\ntheSceneIDfield set to 0x03.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG2.",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a1"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).",
                    "DUT sends aAddGroupResponsecommand to TH\nwith theStatusfield set to 0x00 (SUCCESS) and\ntheGroupIDfield set toG1.",
                    "DUT sends a RemoveAllScenesResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "DUT sends a RemoveAllScenesResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND) andGroupIDfield set toGI.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield recorded intoSC0for later use,\ntheGroupIDfield set toG1and\ntheSceneListfield containing 0 entry",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheCapacityfield set to one of the values (SC0), 0xfe or null,\ntheGroupIDfield set toGIand\ntheSceneListfield containing 0 entry",
                    "DUT is configured withAC1.",
                    "DUT sends a StoreSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a StoreSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toGIand\ntheSceneIDfield set to 0x01.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).DUT returns toAC1.",
                    "DUT responds with an uint16.",
                    "DUT provides FabricSceneInfo containing (for the current fabric) following fields:SceneCounthas the value (PIXIT.S.SceneTableEntriesOnFactoryNew + 1)CurrentScenehas the value 0x01CurrentGrouphas the valueG1SceneValidhas the value TRUE.RemainingCapacityhas the value (MaxRemainingCapacity-1)",
                    "DUT is powered off.",
                    "DUT is powered on.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).DUT returns toAC1.",
                    "DUT sends a response to TH with\ntheStatusfield equal to 0x85 (INVALID_COMMAND).",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 0 and\na set of extension fields appropriate toAC1.",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toGI,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield and\nthe extension fields set omitted from the response.",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x8b (NOT_FOUND),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0xfe,\ntheTransitionTimefield and\nthe extension fields set omitted from the response.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 1), 0xfe or null,\ntheGroupIDfield set toG1,\ntheSceneListfield containing only the scene ID 0x01.",
                    "DUT sends a RemoveAllScenesResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the valuesSC0, 0xfe or null,\ntheGroupIDfield set toG1and\ntheSceneListfield containing 0 entry",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toGIand\ntheSceneIDfield set to 0x01.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 1), 0xfe or null,\ntheGroupIDfield set toG1and\ntheSceneListfield containing only the scene ID 0x01.",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a RemoveSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a RemoveSceneResponse command to TH\nwith theStatusfield set to 0x85 (INVALID_COMMAND),\ntheGroupIDfield set toGIand\ntheSceneIDfield set to 0x01.",
                    "DUT sends a RemoveSceneResponse command to TH\nwith theStatusfield set to 0x8b (NOT_FOUND),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to  0x01.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the valuesSC0, 0xfe or null,\ntheGroupIDfield set toG1and\ntheSceneListfield containing 0 entry",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x8b (NOT_FOUND).",
                    "DUT is configured withAC1.",
                    "DUT sends a StoreSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT is configured withAC2which is different toAC1.",
                    "DUT sends a StoreSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) or 0x89 (INSUFFICIENT_SPACE).If SUCCESS,\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x02.If INSUFFICIENT_SPACE,\nthe following steps SHALL NOT be executed.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 2), 0xfe or null,\ntheGroupIDfield set toG1and\ntheSceneListfield containing the scene IDs 0x01 and 0x02.",
                    "DUT sends aAddGroupResponsecommand to TH with\ntheStatusfield set to 0x00 (SUCCESS) and\ntheGroupIDfield set toG2.",
                    "DUT sends a RemoveAllScenesResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG2.",
                    "DUT sends a GetSceneMembershipResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 2), 0xfe or null,\ntheGroupIDfield set toG2and\ntheSceneListfield containing 0 entry",
                    "DUT is configured withAC3which is different to bothAC1andAC2.",
                    "DUT sends a StoreSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) or 0x89 (INSUFFICIENT_SPACE).If SUCCESS,\nwith theGroupIDfield set toG2and\ntheSceneIDfield set to 0x03.IF INSUFFICIENT_SPACE,\nthe following steps SHALL NOT be executed.",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 3), 0xfe or null,\ntheGroupIDfield set toG2and\ntheSceneListfield containing only the scene ID 0x03.",
                    "Verify that the DUT sends SUCCESS response"
                ]
            }
        },
        {
            "Test Case Name": "144.1.3. [TC-S-2.3] Secondary functionality with DUT as Server",
            "Test Case ID": "TC-S-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality of the Scenes Management cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "0c",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "2",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "6i",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "9a",
                    "9b",
                    "10a",
                    "10b",
                    "11",
                    "12"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CoreSpec-11.2.9.4",
                    "CoreSpec-11.2.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "G.S.C00.Rsp(AddGroup)",
                    "G.S.C00.Rsp(AddGroup)",
                    "",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.C01.Rsp(ViewScene)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C06.Rsp(GetSceneMembership)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: a0a1a2a3a4a5a6a7a8a9aaabacadaeafEpochStartTime0: 1110000EpochKey1: b0b1b2b3b4b5b6b7b8b9babbbcbdbebfEpochStartTime1: 1110001EpochKey2: c0c1c2c3c4c5c6c7c8c9cacbcccdcecfEpochStartTime2: 1110002",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a2GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 2220000EpochKey1: e0e1e2e3e4e5e6e7e8e9eaebecedeeefEpochStartTime1: 2220001EpochKey2: f0f1f2f3f4f5f6f7f8f9fafbfcfdfeffEpochStartTime2: 2220002",
                    "TH binds GroupIdG1with GroupKeySetID 0x01a1 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with one entry as follows:List item 1:FabricIndex: 1GroupId :_G1_GroupKeySetId: 0x01a1List item 2:FabricIndex: 1GroupId :_G2_GroupKeySetId: 0x01a2",
                    "TH sends aAddGroupcommand to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends aAddGroupcommand to DUT with\ntheGroupIDfield set toG2.",
                    "TH installs access control on the device to allow group commands to take actions.",
                    "TH sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set toG2.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a AddScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 1,000(1s)\nand a set of extension fields appropriate toAC1.",
                    "TH sends a ViewScene command to DUT with\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG1.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to groupG1with\ntheGroupIDfield set toG1and\nthescene IDfield set to 0x01.",
                    "TH sends a AddScene command to groupG1with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03,\ntheTransitionTimefield set to 1,000(1s)\nand a set of extension fields appropriate toAC1.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a ViewScene command to groupG1with theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a RemoveScene command to groupG1with theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a StoreScene command to groupG1with theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a RemoveScene command to groupG1with theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a ViewScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "TH sends a CopyScene command to DUT with\nthemodefield set to 0x00,\nthegroup identifier fromfield set toG1,\nthescene identifier fromfield set to 0x01,\nthegroup identifier tofield set toG1and\nthescene identifier tofield set to 0x02.",
                    "TH sends a CopyScene command to DUT with\nthemodefield set to 0x00,\nthegroup identifier fromfield set toGI(WhereGIis a group currently absent from the group table),\nthescene identifier fromfield set to 0x01,\nthegroup identifier tofield set toGIand\nthescene identifier tofield set to 0x02.",
                    "TH sends a CopyScene command to DUT with\nthemodefield set to 0x00,\nthegroup identifier fromfield set toG1,\nthescene identifier fromfield set to 0xfe,\nthegroup identifier tofield set toG1and\nthescene identifier tofield set to 0x02.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a CopyScene command to DUT with\nthemodefield set to 0x01,\nthegroup identifier fromfield set toG1,\nthescene identifier fromfield set to 0x01,\nthegroup identifier tofield set toG2and\nthescene identifier tofield set to 0x02.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG2.",
                    "TH sends a CopyScene command to groupG2with\nthemodefield set to 0x00,\nthegroup identifier fromfield set toG2,\nthescene identifier fromfield set to 0x02,\nthegroup identifier tofield set toG2and\nthescene identifier tofield set to 0x03.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG2.",
                    "TH sends a RemoveAllScenes command to groupG1with\ntheGroupIDfield set toG1.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to groupG2with\ntheGroupIDfield set toG2.",
                    "TH sends a GetSceneMembership command to DUT with\ntheGroupIDfield set toG2.",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a1",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a2"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response.",
                    "DUT sends aAddGroupResponsecommand to TH with\ntheStatusfield set to 0x00 (SUCCESS)\ntheGroupIDfield set toG1.",
                    "DUT sends aAddGroupResponsecommand to TH with\ntheStatusfield set to 0x00 (SUCCESS)\ntheGroupIDfield set toG2.",
                    "DUT sends a WriteResponseMessage command to TH with theStatusfield set to 0x00 (SUCCESS).",
                    "DUT sends a RemoveAllScenesResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "DUT sends a RemoveAllScenesResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG2.",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield recorded intoSC0for later use,\ntheGroupIDfield set toG1and\ntheSceneListfield containing 0 entry",
                    "DUT sends a AddSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT sends a ViewSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 1,000(1s) and\na set of extension fields appropriate toAC1.",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 1), 0xfe or null,\ntheGroupIDfield set toG1and\ntheSceneListfield containing only the scene ID 0x01.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "(There is no Status response since this was a groupcast)DUT returns toAC1.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03,\ntheTransitionTimefield set to 1 and\na set of extension fields appropriate toAC1.",
                    "(There is no Status response since this was a groupcast)",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x8b (NOT_FOUND),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03,\ntheTransitionTimefield and\nthe extension fields set omitted from the response.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a ViewSceneResponse command to TH\nwith theStatusfield set to 0x8b (NOT_FOUND),\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03,\ntheTransitionTimefield and\nthe extension fields set omitted from the response.",
                    "DUT sends a CopySceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\nthegroup identifier fromfield set toG1and\nthescene identifier fromfield set to 0x01.",
                    "DUT sends a CopySceneResponse command to TH with\ntheStatusfield set to 0x85 (INVALID_COMMAND),\nthegroup identifier fromfield set toGIand\nthescene identifier fromfield set to 0x01.",
                    "DUT sends a CopySceneResponse command to TH with\ntheStatusfield set to 0x8b (NOT_FOUND),\nthegroup identifier fromfield set toG1and\nthescene identifier fromfield set to 0xfe.",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 2), 0xfe or null,\ntheGroupIDfield set toG1,\ntheSceneListfield containing the scene IDs 0x01 and 0x02.",
                    "DUT sends a CopySceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\nthegroup identifier fromfield set toG1and\nthescene identifier fromfield set to 0x01.",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 4), 0xfe or null,\ntheGroupIDfield set toG2,\ntheSceneListfield containing the scene IDs 0x01 and 0x02.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 5), 0xfe or null,\ntheGroupIDfield set toG2,\ntheSceneListfield containing the scene IDs 0x01, 0x02 and 0x03.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0- 3), 0xfe or null,\nthe _GroupIDfield set toG1,\ntheSceneListfield containing 0 entry.",
                    "(There is no Status response since this was a groupcast)",
                    "DUT sends a GetSceneMembershipResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheCapacityfield set to one of the values (SC0), 0xfe or null,\nthe _GroupIDfield set toG2,\ntheSceneListfield containing 0 entry.",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SUCCESS response"
                ]
            }
        },
        {
            "Test Case Name": "144.1.4. [TC-S-2.4] Recall scene with transition time functionality with DUT as Server",
            "Test Case ID": "TC-S-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the RecallScene command with transition time functionality of the Scenes Management cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "7a",
                    "7b",
                    "8"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CoreSpec-11.2.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C00.Rsp(AddGroup)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C00.Rsp(AddScene)",
                    "-",
                    "S.S.C04.Rsp(StoreScene)",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    "S.S.C05.Rsp(RecallScene) & S.S.C05.Rsp(RecallScene).TransitionTime",
                    "S.S.C05.Rsp(RecallScene) & S.S.C05.Rsp(RecallScene).TransitionTime",
                    "-",
                    "S.S.C05.Rsp(RecallScene)",
                    ""
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: a0a1a2a3a4a5a6a7a8a9aaabacadaeafEpochStartTime0: 1110000EpochKey1: b0b1b2b3b4b5b6b7b8b9babbbcbdbebfEpochStartTime1: 1110001EpochKey2: c0c1c2c3c4c5c6c7c8c9cacbcccdcecfEpochStartTime2: 1110002",
                    "TH binds GroupId 0x0001 with GroupKeySetID 0x01a1 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with one entry as follows:List item 1:FabricIndex: 1GroupId: 0x0001GroupKeySetId: 0x01a1",
                    "TH sends aRemoveAllGroupscommand to DUT.",
                    "TH sends aAddGroupcommand to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a AddScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.",
                    "TH configuresAC1on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a StoreScene command to DUT with\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01 and\ntheTransitionTimefield omitted.",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01 and\ntheTransitionTimefield set to 5,000(5s).",
                    "TH configuresAC2on DUT for all implemented application clusters supporting scenes.",
                    "TH sends a RecallScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01 and\ntheTransitionTimefield set to null (no transition time override).",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a1"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).",
                    "DUT sends aAddGroupResponsecommand to TH with\ntheStatusfield set to 0x00 (SUCCESS) and\ntheGroupIDfield set toG1.",
                    "DUT sends a RemoveAllScenesResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "DUT sends a AddSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT is configured withAC1.",
                    "DUT sends a StoreSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).DUT transitions toAC1over 20s.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).DUT transitions toAC1over 5s.",
                    "DUT is configured withAC2which is different fromAC1.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).DUT transitions toAC1over 20s.",
                    "Verify that the DUT sends SUCCESS response"
                ]
            }
        },
        {
            "Test Case Name": "144.1.5. [TC-S-2.5] RemainingCapacity functionality with DUT as Server",
            "Test Case ID": "TC-S-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the RemainingCapacity attribute is reported via subscriptions by Scenes Management cluster server.",
            "Test Procedure": {
                "#": [
                    "0a",
                    "0b",
                    "1",
                    "2",
                    "3",
                    "4a",
                    "4b",
                    "4c",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "7a",
                    "7b",
                    "8a",
                    "8b",
                    "9a",
                    "9b",
                    "10"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CoreSpec-11.2.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C00.Rsp(AddGroup)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.A0001(SceneTableSize)",
                    "S.S.A0002(FabricSceneInfo)",
                    "",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C02.Rsp(RemoveScene)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.A0002(FabricSceneInfo)",
                    ""
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: a0a1a2a3a4a5a6a7a8a9aaabacadaeafEpochStartTime0: 1110000EpochKey1: b0b1b2b3b4b5b6b7b8b9babbbcbdbebfEpochStartTime1: 1110001EpochKey2: c0c1c2c3c4c5c6c7c8c9cacbcccdcecfEpochStartTime2: 1110002",
                    "TH binds GroupId 0x0001 with GroupKeySetID 0x01a1 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with one entry as follows:List item 1:FabricIndex: 1GroupId: 0x0001GroupKeySetId: 0x01a1",
                    "TH sends aRemoveAllGroupscommand to DUT.",
                    "TH sends aAddGroupcommand to DUT with\ntheGroupIDfield set toG1.",
                    "TH sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set toG1.",
                    "TH reads from the DUT theSceneTableSize attribute",
                    "TH sends a subscription request action for FabricSceneInfo to the DUT.",
                    "Keep subscription session active for the remainder of the test",
                    "TH sends a AddScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.",
                    "",
                    "If RemainingCapacity is greater than 0, TH sends a StoreScene command to DUT with\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x02.If RemainingCapacity is 0, continue to Step 8a.",
                    "",
                    "If RemainingCapacity is greater than 0, TH sends a AddScene command to DUT with\ntheGroupIDfield set toG1,\ntheSceneIDfield set to 0x03,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.If RemainingCapacity is 0, continue to Step 8a.",
                    "",
                    "TH sends a RemoveScene command to DUT\nwith theGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "",
                    "TH sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set toG1.",
                    "",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a1"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response.",
                    "If a status response is expected,\nDUT sends a response to TH with\ntheStatusfield equal to 0x00 (SUCCESS).",
                    "DUT sends aAddGroupResponsecommand to TH with\ntheStatusfield set to 0x00 (SUCCESS) and\ntheGroupIDfield set toG1.",
                    "DUT sends a RemoveAllScenesResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "Verify that the DUT response contains with value; record this value in SceneTableSize",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity).",
                    "",
                    "DUT sends a AddSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity-1).",
                    "DUT sends a StoreSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x02.",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity-2).",
                    "DUT sends a AddSceneResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x03.",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity-3).",
                    "DUT sends a RemoveSceneResponse command to TH\nwith theStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set toG1and\ntheSceneIDfield set to 0x01.",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity-2).",
                    "DUT sends a RemoveAllScenesResponse command to TH with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set toG1.",
                    "Verify that the DUT sends a report data for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into RemainingCapacity;\nverify RemainingCapacity equals (MaxRemainingCapacity).",
                    "Verify that the DUT sends SUCCESS response"
                ]
            }
        },
        {
            "Test Case Name": "144.1.6. [TC-S-2.6] RemainingCapacity functionality with DUT as Server - Multi-Fabric",
            "Test Case ID": "TC-S-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the RemainingCapacity attribute is reported via subscriptions by Scenes Management cluster server with multi-fabrics.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "2e",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "6a",
                    "6b",
                    "7",
                    "8",
                    "9a",
                    "9b",
                    "10a",
                    "10b",
                    "11a",
                    "11b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.A0001(SceneTableSize)",
                    "S.S.A0002(FabricSceneInfo)",
                    "",
                    "",
                    "",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C00.Rsp(AddScene) & S.S.A0002(FabricSceneInfo)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C00.Rsp(AddScene) & S.S.A0002(FabricSceneInfo)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C00.Rsp(AddScene) & S.S.A0002(FabricSceneInfo)",
                    "S.S.C00.Rsp(AddScene)",
                    "S.S.C04.Rsp(StoreScene)",
                    "S.S.C40.Rsp(CopyScene)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.A0002(FabricSceneInfo)",
                    "S.S.C03.Rsp(RemoveAllScenes)",
                    "S.S.A0002(FabricSceneInfo)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set to 0x0000.",
                    "Repeat Step 1a with TH2.",
                    "Repeat Step 1a with TH3.",
                    "TH1 reads from the DUT theSceneTableSize attribute",
                    "TH1 sends a subscription request action for FabricSceneInfo to the DUT.",
                    "Keep subscription session active for the remaining of the test",
                    "Repeat Step 2b and 2c with TH2.",
                    "Repeat Step 2b and 2c with TH3.",
                    "TH1 sends a AddScene command to DUT with\ntheGroupIDfield set to 0x0000,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.",
                    "",
                    "TH1 sends AddScene command to DUT with sameGroupIDandSceneIDvalue starting at 2 and\nincrementing for each iteration for Remaining1stCapacity more times until reported value to TH1 (after MinIntervalFloor) forRemainingCapacityfield from FabricSceneInfo becomes 0.",
                    "TH1 sends a AddScene command to DUT with\ntheGroupIDfield set to 0x0000,\ntheSceneIDfield set to 1 more than last value used in step 4a,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.",
                    "Repeat Step 4a with TH2",
                    "Repeat Step 4b with TH2",
                    "Repeat Step 4a with TH3",
                    "TH3 sends a AddScene command to DUT with\ntheGroupIDfield set to 0x0000,\ntheSceneIDfield set to 0x01,\ntheTransitionTimefield set to 20,000(20s) and\nno extension field sets.",
                    "TH3 sends a StoreScene command to DUT with\ntheGroupIDfield set to 0x0000,\ntheSceneIDfield set to 0xfe.",
                    "TH sends a CopyScene command to DUT with\nthemodefield set to 0x00,\nthegroup identifier fromfield set to 0x0000,\nthescene identifier fromfield set to 0x01,\nthegroup identifier tofield set to 0x0000 and\nthescene identifier tofield set to 0x02.",
                    "TH1 sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set to 0x0000.",
                    "",
                    "TH2 sends a RemoveAllScenes command to DUT with\ntheGroupIDfield set to 0x0000.",
                    "",
                    "TH1 removes the TH2 fabric by sending the RemoveFabric command to the DUT with\nthe FabricIndex set to th2FabricIndex",
                    "TH1 removes the TH3 fabric by sending the RemoveFabric command to the DUT with\nthe FabricIndex set to th3FabricIndex"
                ],
                "Expected Outcome": [
                    "DUT sends a RemoveAllScenesResponse command to TH1 with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set to 0x0000.",
                    "",
                    "",
                    "Verify that the DUT response contains with value which is recorded into SceneTableSize",
                    "Verify that the DUT sends a report data to TH1 for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into Remaining1stCapacity;\nverify Remaining1stCapacity equals (MaxRemainingCapacity).",
                    "",
                    "",
                    "",
                    "DUT sends a AddSceneResponse command to TH1 with\ntheStatusfield set to 0x00 (SUCCESS),\ntheGroupIDfield set to 0x0000 and\ntheSceneIDfield set to 0x01.",
                    "Verify that the DUT sends a report data to TH1 for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into Remaining1stCapacity;\nverify Remaining1stCapacity equals (MaxRemainingCapacity-1).",
                    "DUT sends success AddSceneResponse commands to TH1 for each of the AddScene commands.\nVerify that the DUT sends a report data after the MinIntervalFloor time to TH1 forRemainingCapacityfield from FabricSceneInfo with updated value (decreasing to 0).",
                    "DUT sends a AddSceneResponse command to TH1 with theStatusfield set to status RESOURCE_EXHAUSTED(0x89)",
                    "DUT sends success AddSceneResponse commands to TH2 for each of the AddScene commands.\nVerify that the DUT sends report data messages after the MinIntervalFloor time to TH2 forRemainingCapacityfield in FabricSceneInfo for that fabric with updated value (decreasing to 0).Verify that the DUT sends report data messages after the MinIntervalFloor time to TH3 forRemainingCapacityfield in FabricSceneInfo for that fabric with updated value (decreasing toSceneTableSize- (2 * MaxRemainingCapacity)).",
                    "DUT sends a AddSceneResponse command to TH2 with theStatusfield set to status RESOURCE_EXHAUSTED(0x89)",
                    "DUT sends success AddSceneResponse commands to TH3 for each of the AddScene commands.\nVerify that the DUT sends report data messages after the MinIntervalFloor time to TH3 forRemainingCapacityfield in FabricSceneInfo for that fabric with updated value (decreasing to 0).",
                    "DUT sends a AddSceneResponse command to TH3 with\ntheStatusfield set to status RESOURCE_EXHAUSTED(0x89)",
                    "DUT sends a StoreSceneResponse command to TH3 with\ntheStatusfield set to status RESOURCE_EXHAUSTED(0x89)",
                    "DUT sends a CopySceneResponse command to TH with\ntheStatusfield set to 0x00 status RESOURCE_EXHAUSTED(0x89),\nthegroup identifier fromfield set to 0x0000 and\nthescene identifier fromfield set to 0x01.",
                    "DUT sends a RemoveAllScenesResponse command to TH1 with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set to 0x0000.",
                    "Verify that the DUT sends a report data to TH1 for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry the reported in FabricSceneInfo into Remaining1stCapacity;\nverify Remaining1stCapacity equals (MaxRemainingCapacity).Verify that the DUT does not send report data to TH2 for FabricSceneInfo after the MinIntervalFloor time with updated value\n(it should send 'empty' report data since there is no update for this attribute for TH2).",
                    "DUT sends a RemoveAllScenesResponse command to TH2 with\ntheStatusfield set to 0x00 (SUCCESS) andGroupIDfield set to 0x0000.",
                    "Verify that the DUT sends a report data to TH2 for FabricSceneInfo after the MinIntervalFloor time;\nstore the RemainingCapacity field from this fabric\u2019s entry reported in FabricSceneInfo into Remaining2ndCapacity;\nverify Remaining2ndCapacity equals (MaxRemainingCapacity).Verify that the DUT does not send report data to TH1 or TH3 for FabricSceneInfo after the MinIntervalFloor time with updated value\n(it should send 'empty' report data since there is no update for this attribute for TH1 and TH3).",
                    "DUT sends a response to TH with\nthe Status field set to 0x00 (SUCCESS) and\nthe FabricIndex field set to th2FabricIndex.",
                    "DUT sends a response to TH with\nthe Status field set to 0x00 (SUCCESS) and\nthe FabricIndex field set to th3FabricIndex."
                ]
            }
        },
        {
            "Test Case Name": "144.1.7. [TC-S-3.1] Functionality with DUT as Client",
            "Test Case ID": "TC-S-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the Scenes Management cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "S.C.C00.Tx(AddScene)",
                    "S.C.C01.Tx(ViewScene)",
                    "S.C.C02.Tx(RemoveScene)",
                    "S.C.C03.Tx(RemoveAllScenes)",
                    "S.C.C04.Tx(StoreScene)",
                    "S.C.C05.Tx(RecallScene)",
                    "S.C.C06.Tx(GetSceneMembership)",
                    "S.C.C40.Tx(CopyScene)"
                ],
                "Test Step": [
                    "DUT issues anC_ADD_SCENEcommand to the Test Harness.",
                    "DUT issues anC_VIEW_SCENEcommand to the Test Harness.",
                    "DUT issues anC_REMOVE_SCENEcommand to the Test Harness.",
                    "DUT issues anC_REMOVE_ALL_SCENEScommand to the Test Harness.",
                    "DUT issues anC_STORE_SCENEcommand to the Test Harness.",
                    "DUT issues anC_RECALL_SCENEcommand to the Test Harness.",
                    "DUT issues anC_GET_SCENE_MEMBERSHIPcommand to the Test Harness.",
                    "DUT issues anC_COPY_SCENEcommand to the Test Harness."
                ],
                "Expected Outcome": [
                    "If S.C.C00.Tx(AddScene), Test Harness receives theC_ADD_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.- ID 1 (SceneID): the type is anuint8.- ID 2 (TransitionTime): the type is anuint32; max of 60,000,000.- ID 3 (SceneName): the type is astring; max of 16 bytes- ID 4 (ExtensionFieldSetStructs): the type is a list ofExtensionFieldSetStruct:ClusterIDandAttributeValueList.",
                    "If S.C.C01.Tx(ViewScene), Test Harness receives theC_VIEW_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.- ID 1 (SceneID): the type is anuint8.",
                    "If S.C.C02.Tx(RemoveScene), Test Harness receives theC_REMOVE_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.- ID 1 (SceneID): the type is anuint8.",
                    "If S.C.C03.Tx(RemoveAllScenes), Test Harness receives theC_REMOVE_ALL_SCENEScommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.",
                    "If S.C.C04.Tx(StoreScene), Test Harness receives theC_STORE_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.- ID 1 (SceneID): the type is anuint8.",
                    "If S.C.C05.Tx(RecallScene), Test Harness receives theC_RECALL_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.- ID 1 (SceneID): the type is anuint8.- Optional ID 2 (TransitionTime): the type is anuint32; max of 60,000,000.",
                    "If S.C.C06.Tx(GetSceneMembership), Test Harness receives theC_GET_SCENE_MEMBERSHIPcommand from the DUT.Verify the command has following parameters:- ID 0 (GroupID): the type is agroup-id.",
                    "If S.C.C40.Tx(CopyScene), Test Harness receives theC_COPY_SCENEcommand from the DUT.Verify the command has following parameters:- ID 0 (Mode): the type is aCopyModeBitmap; If this value is set to 1, all scenes are to be copied. Otherwise this bit is set to 0.- ID 1 (GroupIdentifierFrom): the type is angroup-id.- ID 2 (SceneIdentifierFrom): the type is anuint8.- ID 3 (GroupIdentifierTo): the type is angroup-id.- ID 4 (SceneIdentifierTo): the type is anuint8."
                ]
            }
        }
    ],
    "Access_Control": [
        {
            "Test Case Name": "147.1.1. [TC-ACL-2.1] Simple attributes",
            "Test Case ID": "TC-ACL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control Cluster simple attributes are present.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "9.11.5.5",
                    "9.11.5.6",
                    "9.11.5.7"
                ],
                "PICS": [
                    "",
                    "ACL.S.A0002(SubjectsPerAccessControlEntry)",
                    "ACL.S.A0003(TargetsPerAccessControlEntry)",
                    "ACL.S.A0004(AccessControlEntriesPerFabric)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster SubjectsPerAccessControlEntry attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster TargetsPerAccessControlEntry attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntriesPerFabric attribute"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESS,\n                value is an integer with value 4 or greater",
                    "Result is SUCCESS,\n                value is an integer with value 3 or greater",
                    "Result is SUCCESS,\n                value is an integer with value 4 or greater"
                ]
            }
        },
        {
            "Test Case Name": "147.1.2. [TC-ACL-2.2] Cluster endpoint",
            "Test Case ID": "TC-ACL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control Cluster is present on Endpoint 0.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "9.6",
                    "9.6"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Descriptor cluster ServerList attribute from Endpoint 0",
                    "TH1 reads DUT Descriptor cluster ServerList attribute from every Endpoint except 0"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result list contains an element with value 31 (0x001F)",
                    "Result list does not contain an element with value 31 (0x001F)"
                ]
            }
        },
        {
            "Test Case Name": "147.1.3. [TC-ACL-2.3] Extension attribute",
            "Test Case ID": "TC-ACL-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control cluster Extension attribute is present.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20"
                ],
                "Ref": [
                    "",
                    "",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4"
                ],
                "PICS": [
                    "",
                    "",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTY",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_SINGLE",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_FULL",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_LENGTH",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_STRUCT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_LIST",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_ELEM",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_OVERFLOW",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_UNDERFLOW",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_NONE",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 2 elementsvalue is list of AccessControlExtensionStruct containing 2 elementsfirst element contains Data field:D_OK_EMPTYsecond element contains Data field:D_OK_SINGLE",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is an empty list",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "Result is SUCCESS,\n                value is an empty list",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTYFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_SINGLEFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_FULLFabricIndex field:F1",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result is CONSTRAINT_ERROR (0x87)",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTYFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is an empty list"
                ]
            }
        },
        {
            "Test Case Name": "147.1.4. [TC-ACL-2.4] ACL attribute",
            "Test Case ID": "TC-ACL-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control cluster ACL attribute is present.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44"
                ],
                "Ref": [
                    "",
                    "",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3"
                ],
                "PICS": [
                    "",
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: View (1)AuthMode field: Group (3)Subjects field: [111, 222, 333, 444]Targets field: [{Cluster: 11}, {Endpoint: 22}]structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: [{Cluster: 55}, {Endpoint: 66}]",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Manage (4)AuthMode field: Group (3)Subjects field: [444, 333, 222, 111]Targets field: [{Cluster: 44}, {Endpoint: 33}]structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [888, 777, 666, 555]Targets field: [{Cluster: 88}, {Endpoint: 77}]",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [111, 222, 333, 444]Targets field: [{Cluster: 11, Endpoint: 22}, {Cluster: 33, DeviceType: 44}]structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: [{Cluster: 55, Endpoint: 66}, {Cluster: 77, DeviceType: 88}]",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: 11, Endpoint: 22}, {Cluster: 33, DeviceType: 44}]structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: nullTargets field: [{Cluster: 55, Endpoint: 66}, {Cluster: 77, DeviceType: 88}]",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [111, 222, 333, 444]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: nullTargets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: ProxyView (2)AuthMode field: CASE (2)Subjects field: nullTargets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster SubjectsPerAccessControlEntry attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: list ofMAXSUBJECTSrandom node IDs (stored asSUBJECTS)Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [CAT1,CAT2,CAT3,CAT4]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster TargetsPerAccessControlEntry attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: list ofMAXTARGETStargets {Cluster: random} (stored asTARGETS)",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntriesPerFabric attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containingMAXENTRIESelementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: nullsubsequent elements same as second element",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: PASE (1)Subjects field: nullTargets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Administer (5)AuthMode field: Group (3)Subjects field: nullTargets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: invalid value (not 1-5)AuthMode field: CASE (2)Subjects field: nullTargets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: invalid value (not 1-3)Subjects field: nullTargets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0]Targets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0xFFFFFFFFFFFFFFFF]Targets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0xFFFFFFFD00000000]Targets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0xFFFFFFFFFFFF0000]Targets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: 0xFFFFFFFF}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Endpoint: 65535}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{DeviceType: 0xFFFFFFFF}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Endpoint: 22, DeviceType: 33}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: 11, Endpoint: 22, DeviceType: 33}]",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is an empty list"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: View (1)AuthMode field: Group (3)Subjects field: [111, 222, 333, 444]Targets field: [{Cluster: 11}, {Endpoint: 22}]FabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: [{Cluster: 55}, {Endpoint: 66}]FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Manage (4)AuthMode field: Group (3)Subjects field: [444, 333, 222, 111]Targets field: [{Cluster: 44}, {Endpoint: 33}]FabricIndex field:F1structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [888, 777, 666, 555]Targets field: [{Cluster: 88}, {Endpoint: 77}]FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [111, 222, 333, 444]Targets field: [{Cluster: 11, Endpoint: 22}, {Cluster: 33, DeviceType: 44}]FabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: [{Cluster: 55, Endpoint: 66}, {Cluster: 77, DeviceType: 88}]FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: 11, Endpoint: 22}, {Cluster: 33, DeviceType: 44}]FabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: nullTargets field: [{Cluster: 55, Endpoint: 66}, {Cluster: 77, DeviceType: 88}]FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 3 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [111, 222, 333, 444]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [555, 666, 777, 888]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: nullTargets field: nullFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: ProxyView (2)AuthMode field: CASE (2)Subjects field: nullTargets field: nullFabricIndex field:F1",
                    "Result is SUCCESSvalue is stored asMAXSUBJECTS",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field:SUBJECTSTargets field: nullFabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [CAT1,CAT2,CAT3,CAT4]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESSvalue is stored asMAXTARGETS",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field:TARGETSFabricIndex field:F1",
                    "Result is SUCCESSvalue is stored asMAXENTRIES",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containingMAXENTRIESelementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: nullTargets field: nullFabricIndex field:F1subsequent elements same as second element",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullFabricIndex field:F1",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result isSUCCESS for first element pathCONSTRAINT_ERROR (0x87) for second element path",
                    "Result is SUCCESS (note since all ACL entries removed, cannot perform more operations)"
                ]
            }
        },
        {
            "Test Case Name": "147.1.5. [TC-ACL-2.5] AccessControlExtensionChanged event",
            "Test Case ID": "TC-ACL-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control Cluster AccessControlExtensionChanged event functions correctly.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2",
                    "9.11.7.2"
                ],
                "PICS": [
                    "",
                    "",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTY",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_SINGLE",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_BAD_LENGTH",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 2 elementsstructData field:D_OK_EMPTYstructData field:D_OK_SINGLE",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is an empty list",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "Result is SUCCESS, value is empty list",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing 1 elementstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {Data:D_OK_EMPTY, FabricIndex:F1}FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing at least 2 new elementsstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {Data:D_OK_EMPTY, FabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {Data:D_OK_SINGLE, FabricIndex:F1}FabricIndex field:F1",
                    "Result is 0x87 (CONSTRAINT_ERROR)-Data value exceeds maximum length.",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing at least 1 new element,\n                and MUST NOT contain an added event for the extension with data that is too largestructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {Data:D_OK_SINGLE, FabricIndex:F1}FabricIndex field:F1",
                    "Result is 0x87 (CONSTRAINT_ERROR)-as there are more than 1 entry associated with the given accessing fabric index in the extension list",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing at least 1 new element,\n                and MUST NOT contain an added event for the second extensionstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {Data:D_OK_EMPTY, FabricIndex:F1}FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing at least 1 new elementstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {Data:D_OK_EMPTY, FabricIndex:F1}FabricIndex field:F1"
                ]
            }
        },
        {
            "Test Case Name": "147.1.6. [TC-ACL-2.6] AccessControlEntryChanged event",
            "Test Case ID": "TC-ACL-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control Cluster AccessControlEntryChanged event functions correctly.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "9.11.7.1",
                    "9.11.7.1",
                    "9.11.7.1",
                    "9.11.7.1",
                    "9.11.7.1"
                ],
                "PICS": [
                    "",
                    "",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E00(AccessControlEntryChanged)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: nullTargets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elements.\n                The first item is valid, the second item is invalid due to group ID 0\n                being used, which is illegal.structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [0]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "Result is SUCCESS\n                value is list of AccessControlEntryChangedEvent events containing 1 elementstructAdminNodeID field: nullAdminPasscodeID field: 0ChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryChanged events containing at least 3 new elementsstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {\nPrivilege: Operate (3),\nAuthMode: Group (3),\nSubjects: null,\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1",
                    "Result is CONSTRAINT_ERROR",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryChanged events containing at least 3 new elements\n                and MUST NOT contain an added event for second entry written at step 6structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {\nPrivilege: Operate (3),\nAuthMode: Group (3),\nSubjects: null,\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1"
                ]
            }
        },
        {
            "Test Case Name": "147.1.7. [TC-ACL-2.7] Extension multi-fabric",
            "Test Case ID": "TC-ACL-2.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control cluster Extension attribute and event functions correctly.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.7.2",
                    "9.11.7.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.E01(AccessControlExtensionChanged)",
                    "ACL.S.E01(AccessControlExtensionChanged)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 puts DUT into commissioning mode,\n                TH2 commissions DUT using admin node IDN2",
                    "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTY",
                    "TH2 writes DUT Endpoint 0 AccessControl cluster Extension attribute\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_SINGLE",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "DUT is commissioned on TH2 fabric",
                    "Result is SUCCESSvalue is stored asF2",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF2or DataD_OK_SINGLEstructData field:D_OK_EMPTYFabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF1or DataD_OK_EMPTYstructData field:D_OK_SINGLEFabricIndex field:F2",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing 1 element,\n                and MUST NOT contain an element with FabricIndexF2or DataD_OK_SINGLEstructAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {Data:D_OK_EMPTY, FabricIndex:F1}FabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionChanged containing 1 element,\n                and MUST NOT contain an element with FabricIndexF1or DataD_OK_EMPTYstructAdminNodeID field:N2AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {Data:D_OK_SINGLE, FabricIndex:F2}FabricIndex field:F2"
                ]
            }
        },
        {
            "Test Case Name": "147.1.8. [TC-ACL-2.8] ACL multi-fabric",
            "Test Case ID": "TC-ACL-2.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control cluster ACL attribute and event functions correctly.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.7.1",
                    "9.11.7.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E00(AccessControlEntryChanged)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 puts DUT into commissioning mode,\n                TH2 commissions DUT using admin node IDN2",
                    "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1, 1111]Targets field: null",
                    "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N2, 2222]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "DUT is commissioned on TH2 fabric",
                    "Result is SUCCESSvalue is stored asF2",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF2structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1, 1111]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF1structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N2, 2222]Targets field: nullFabricIndex field:F2",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryChanged containing 3 elements,\n                and MUST NOT contain any element with FabricIndexF2structAdminNodeID field: nullAdminPasscodeID field: 0ChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1structAdminNodeID field:N1AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N1, 1111],\nTargets: null,\nFabricIndex:F1}FabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryChanged containing 3 elements,\n                and MUST NOT contain any element with FabricIndexF1structAdminNodeID field: nullAdminPasscodeID field: 0ChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N2],\nTargets: null,\nFabricIndex:F2}FabricIndex field:F2structAdminNodeID field:N2AdminPasscodeID field: nullChangeType field: Removed (2)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N2],\nTargets: null,\nFabricIndex:F2}FabricIndex field:F2structAdminNodeID field:N2AdminPasscodeID field: nullChangeType field: Added (1)LatestValue field: {\nPrivilege: Administer (5),\nAuthMode: CASE (2),\nSubjects: [N2, 2222],\nTargets: null,\nFabricIndex:F2}FabricIndex field:F2"
                ]
            }
        },
        {
            "Test Case Name": "147.1.9. [TC-ACL-2.9] Cluster access",
            "Test Case ID": "TC-ACL-2.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control Cluster contents require correct privilege to access.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.4",
                    "9.11.5.4",
                    "9.11.5.5",
                    "9.11.5.6",
                    "9.11.5.7",
                    "9.11.7.1",
                    "9.11.7.2"
                ],
                "PICS": [
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0002(SubjectsPerAccessControlEntry)",
                    "ACL.S.A0003(TargetsPerAccessControlEntry)",
                    "ACL.S.A0004(AccessControlEntriesPerFabric)",
                    "ACL.S.E00(AccessControlEntryChanged)",
                    "ACL.S.E01(AccessControlExtensionChanged)"
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Manage (4)AuthMode field: CASE (2)Subjects field: [N1]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: null",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is an empty list",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster SubjectsPerAccessControlEntry attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster TargetsPerAccessControlEntry attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntriesPerFabric attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlEntryChanged event",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster AccessControlExtensionChanged event"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS,value is an integer with value 4 or greater.",
                    "Result is SUCCESS,value is an integer with value 3 or greater.",
                    "Result is SUCCESS, value is an integer with value 4 or greater.",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)"
                ]
            }
        },
        {
            "Test Case Name": "147.1.10. [TC-ACL-2.10] Persistence",
            "Test Case ID": "TC-ACL-2.10",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that Access Control cluster persistence functions correctly.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "9.11.5.3",
                    "9.11.5.3",
                    "9.11.5.4",
                    "9.11.5.4",
                    "",
                    "9.11.5.3",
                    "9.11.5.4",
                    "9.11.5.3",
                    "9.11.5.4",
                    "",
                    "",
                    "9.11.5.3",
                    "9.11.5.4",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0001(Extension)",
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0001(Extension)",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0001(Extension)",
                    "",
                    "",
                    "ACL.S.A0000(ACL)",
                    "ACL.S.A0001(Extension)",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 puts DUT into commissioning mode,\n                TH2 commissions DUT using admin node IDN2",
                    "TH2 reads DUT Endpoint 0 OperationalCredentials cluster CurrentFabricIndex attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1, 1111]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [3333]Targets field: null",
                    "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute\n                value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N2, 2222]Targets field: nullstructPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [4444]Targets field: null",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster Extension attribute,\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_EMPTY",
                    "TH2 writes DUT Endpoint 0 AccessControl cluster Extension attribute\n                value is list of AccessControlExtensionStruct containing 1 elementstructData field:D_OK_SINGLE",
                    "Reboot the DUT",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH2 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "If DUT is an app on host, examine persistent storage in/tmp/chip_kvstext file",
                    "TH1 removes fabricF2from DUT",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster ACL attribute",
                    "TH1 reads DUT Endpoint 0 AccessControl cluster Extension attribute",
                    "If DUT is an app on host, examine persistent storage in/tmp/chip_kvstext file"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESSvalue is stored asF1",
                    "DUT is commissioned on TH2 fabric",
                    "Result is SUCCESSvalue is stored asF2",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "DUT is rebooted",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elements,\n                and MUST NOT contain an element with FabricIndexF2structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1, 1111]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [3333]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF2or DataD_OK_SINGLEstructData field:D_OK_EMPTYFabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elements,\n                and MUST NOT contain an element with FabricIndexF1structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N2, 2222]Targets field: nullFabricIndex field:F2structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [4444]Targets field: nullFabricIndex field:F2",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF1or DataD_OK_EMPTYstructData field:D_OK_SINGLEFabricIndex field:F2",
                    "Persistent storage in/tmp/chip_kvscontains keys for FabricIndexF1and FabricIndexF2F1ACL attribute:f/<F1>/ac/0/0,f/<F1>/ac/0/1F1extension attribute:f/<F1>/ac/1F2ACL attribute:f/<F2>/ac/0/0,f/<F2>/ac/0/1F2extension attribute:f/<F2>/ac/1",
                    "Result is SUCCESS",
                    "Result is SUCCESS,\n                value is list of AccessControlEntryStruct containing 2 elements,\n                and MUST NOT contain an element with FabricIndexF2structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1, 1111]Targets field: nullFabricIndex field:F1structPrivilege field: Operate (3)AuthMode field: Group (3)Subjects field: [3333]Targets field: nullFabricIndex field:F1",
                    "Result is SUCCESS,\n                value is list of AccessControlExtensionStruct containing 1 element,\n                and MUST NOT contain an element with FabricIndexF2or DataD_OK_SINGLEstructData field:D_OK_EMPTYFabricIndex field:F1",
                    "Persistent storage in/tmp/chip_kvscontains keys for FabricIndexF1,\n                and MUST NOT contain any keys for FabricIndexF2F1ACL attribute:f/<F1>/ac/0/0,f/<F1>/ac/0/1F1extension attribute:f/<F1>/ac/1F2ACL attribute:f/<F2>/ac/0/0,f/<F2>/ac/0/1MUST NOT BE PRESENTF2extension attribute:f/<F2>/ac/1MUST NOT BE PRESENT"
                ]
            }
        }
    ],
    "Bridged_Device_Basic_Information": [
        {
            "Test Case Name": "151.1.1. [TC-BRBINFO-2.1] Attributes [DUT-Server]",
            "Test Case ID": "TC-BRBINFO-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if all the server attributes have been implemented correctly on the DUT.",
            "Test Procedure": {
                "#": [
                    "2",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "51",
                    "52",
                    "52b",
                    "53",
                    "54",
                    "55",
                    "56",
                    "59",
                    "60",
                    "61",
                    "62",
                    "63"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "BRBINFO.S",
                    "BRBINFO.S.A0001(VendorName)",
                    "BRBINFO.S.A0001(VendorName)",
                    "BRBINFO.S.A0001(VendorName)",
                    "BRBINFO.S.A0002(VendorID)",
                    "BRBINFO.S.A0002(VendorID)",
                    "BRBINFO.S.A0002(VendorID)",
                    "BRBINFO.S.A0003(ProductName)",
                    "BRBINFO.S.A0003(ProductName)",
                    "BRBINFO.S.A0003(ProductName)",
                    "BRBINFO.S",
                    "BRBINFO.S.A0005(NodeLabel)",
                    "BRBINFO.S.A0005(NodeLabel)",
                    "BRBINFO.S.A0005(NodeLabel)",
                    "BRBINFO.S",
                    "BRBINFO.S.A0007(HardwareVersion)",
                    "BRBINFO.S.A0007(HardwareVersion)",
                    "BRBINFO.S.A0007(HardwareVersion)",
                    "BRBINFO.S.A0008(HardwareVersionString)",
                    "BRBINFO.S.A0008(HardwareVersionString)",
                    "BRBINFO.S.A0008(HardwareVersionString)",
                    "BRBINFO.S.A0009(SoftwareVersion)",
                    "BRBINFO.S.A0009(SoftwareVersion)",
                    "BRBINFO.S.A0009(SoftwareVersion)",
                    "BRBINFO.S.A000a(SoftwareVersionString)",
                    "BRBINFO.S.A000a(SoftwareVersionString)",
                    "BRBINFO.S.A000a(SoftwareVersionString)",
                    "BRBINFO.S.A000b(ManufacturingDate)",
                    "BRBINFO.S.A000b(ManufacturingDate)",
                    "BRBINFO.S.A000b(ManufacturingDate)",
                    "BRBINFO.S.A000c(PartNumber)",
                    "BRBINFO.S.A000c(PartNumber)",
                    "BRBINFO.S.A000c(PartNumber)",
                    "BRBINFO.S.A000d(ProductURL)",
                    "BRBINFO.S.A000d(ProductURL)",
                    "BRBINFO.S.A000d(ProductURL)",
                    "BRBINFO.S.A000e(ProductLabel)",
                    "BRBINFO.S.A000e(ProductLabel)",
                    "BRBINFO.S.A000e(ProductLabel)",
                    "BRBINFO.S.A000f(SerialNumber)",
                    "BRBINFO.S.A000f(SerialNumber)",
                    "BRBINFO.S.A000f(SerialNumber)",
                    "BRBINFO.S",
                    "BRBINFO.S.A0011(Reachable)",
                    "BRBINFO.S.A0011(Reachable)",
                    "BRBINFO.S.A0011(Reachable)",
                    "BRBINFO.S.A0012(UniqueID)",
                    "BRBINFO.S.A0012(UniqueID)",
                    "BRBINFO.S.A0012(UniqueID)",
                    "BRBINFO.S",
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S",
                    "BRBINFO.S"
                ],
                "Test Step": [
                    "TH reads attribute ID 0 from the DUT (matches in ID to DataModelRevision in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads VendorName from the DUT.",
                    "TH writes VendorName as \"sample\"",
                    "TH reads VendorName",
                    "TH reads VendorID from the DUT.",
                    "TH writes VendorID as \"0x0011\"",
                    "TH reads VendorID",
                    "TH reads ProductName from the DUT.",
                    "TH writes ProductName as \"newproduct\"",
                    "TH reads ProductName",
                    "TH reads attribute ID 4 from the DUT (matches in ID to ProductID in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads NodeLabel from the DUT",
                    "TH writes \"newnode\" to NodeLabel",
                    "TH reads NodeLabel",
                    "TH reads attribute ID 6 from the DUT (matches in ID to Location in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads HardwareVersion from the DUT.",
                    "TH writes HardwareVersion as \"0x4531\"",
                    "TH reads HardwareVersion",
                    "TH reads HardwareVersionString from the DUT.",
                    "TH writes HardwareVersionString as \"newhardwareversion\"",
                    "TH reads HardwareVersionString",
                    "TH reads SoftwareVersion from the DUT.",
                    "TH  writes SoftwareVersion as \"0x8213\"",
                    "TH reads SoftwareVersion",
                    "TH reads SoftwareVersionString from the DUT.",
                    "TH writes SoftwareVersionString as \"1.0\"",
                    "TH reads SoftwareVersionString",
                    "TH reads ManufacturingDate from the DUT.",
                    "TH writes ManufacturingDate as \"20210814789452IN\"",
                    "TH reads ManufacturingDate",
                    "TH reads PartNumber from the DUT.",
                    "TH writes PartNumber as \"newpart\"",
                    "TH reads PartNumber",
                    "TH reads ProductURL from the DUT.",
                    "TH writes ProductURL as \"https://www.example.com\"",
                    "TH reads ProductURL",
                    "TH reads ProductLabel from the DUT.",
                    "TH writes ProductLabel as \"newproductlabel\"",
                    "TH reads ProductLabel",
                    "TH reads SerialNumber from the DUT.",
                    "TH writes SerialNumber_test as \"newserialnumber\"",
                    "TH reads SerialNumber",
                    "TH reads attribute ID 0x0010 from the DUT (matches in ID to LocalConfigDisabled in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads Reachable from the DUT.",
                    "TH sends Write request message to DUT to change value of Reachable to \"false\".",
                    "TH reads Reachable from the DUT.",
                    "TH reads UniqueID from the DUT.",
                    "TH writes UniqueID as \"newid\"",
                    "TH reads UniqueID",
                    "TH reads attribute ID 0x0013 from the DUT (matches in ID to CapabilityMinima in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads ProductAppearance from the DUT.",
                    "TH writes ProductAppearance  to the DUT.",
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads attribute ID 0x0015 from the DUT (matches in ID to SpecificationVersion in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster).",
                    "TH reads attribute ID 0x0016 from the DUT (matches in ID to MaxPathsPerInvoke in the parent cluster, but is absent on the BridgedDeviceBasicInformation cluster)."
                ],
                "Expected Outcome": [
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify it is of type string.Verify it is less than or equal to 32 bytes and (when not empty) a meaningful name matching the\nmanufacturer of the bridged device.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the VendorName remains unchanged",
                    "Verify that the value is in the range of 0x0001 to 0xFFF0, and matches the\nvalue assigned to this manufacturer of the bridged device, see list inCSA Manufacturer Code Database.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the VendorID remains unchanged",
                    "Verify it is a human readable string.Verify that the length is less than or equal to 32 bytes.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductName remains unchanged",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify it is of type string.Verify that the current value has a length between 0 and 32 bytes inclusive.",
                    "Verify that the DUT sends success response",
                    "Verify that the NodeLabel is changed as \"newnode\"",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify that the value is in range of 0 to 65534",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the HardwareVersion remains unchanged",
                    "Verify it is of type string.Verify it has a length in the inclusive range of 1 to 64 bytes",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the HardwareVersionString remains unchanged",
                    "Verify that the value is the range of 0 to 4294967294",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SoftwareVersion remains unchanged",
                    "Verify it is of type string.Verify that it has a length of 1 to 64 bytes of UTF-8 characters.Verify that it uses 7-bit ASCII alphanumeric or punctuation characters.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SoftwareVersionString remains unchanged",
                    "Verify it is of type string.Verify it has length in the inclusive range of 8 to 16 bytes.Verify if the first 8 characters specify date according to ISO 8601, i.e, YYYYMMDD.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ManufacturingDate remains unchanged",
                    "Verify it is a human readable string.Verify that the string has a maximum length of 32 bytes",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the PartNumber remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 256 ASCII characters.Verify that it specifies a link to a specific web page.Verify that it follows the syntax rules specified inRFC\u00a03986.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductURL remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 64 bytes.Verify that it does not include the name of the vendor as defined within the VendorName attribute",
                    "Verify  DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductLabel remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 32 bytes.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SerialNumber remains unchanged",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify it is of type boolVerify that the value is true",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Reachable flag remains unchanged",
                    "Verify it is of type stringVerify that the value is not be identical to SerialNumber attributeVerify that the value is not be printed on the bridged device or on any included materials.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the UniqueID remains unchanged",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify it is of type ProductAppearanceStruct.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductAppearance remains unchanged",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE",
                    "Verify that DUT responds with UNSUPPORTED_ATTRIBUTE"
                ]
            }
        },
        {
            "Test Case Name": "151.1.2. [TC-BRBINFO-2.2] Events [DUT-Server]",
            "Test Case ID": "TC-BRBINFO-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if all the events have been implemented correctly on the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "BRBINFO.S.E00(StartUp)",
                    "BRBINFO.S.E03(ReachableChanged)",
                    "BRBINFO.S.E01(ShutDown)"
                ],
                "Test Step": [
                    "Reboot the DUT (i.e. restart by power cycle, not by making it factory new)TH receives the StartUp event from DUT",
                    "Make the device on the\nbridged endpoint unreachable across the bridge, such that the Reachable\nattribute changes, in a manufacturer-specific way, such as powering off or\notherwise disabling the bridged device or the connectivity to it.",
                    "TH subscribes to the shutdown event on the DUT. Shutdown DUT."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends the StartUp event before other events to THVerify that the SoftwareVersion field in the event data is equivalent to the preconditionVerify that StartUp event has priority set as CRITICAL",
                    "Verify that the DUT sends the ReachableChanged event when the Reachable attribute is changed from the precondition.Verify that the ReachableNewValue is of boolean type and not equivalent to precondition.Verify that the Reachable event has priority set as INFO",
                    "Verify that ShutDown event is received and has priority set as CRITICAL"
                ]
            }
        },
        {
            "Test Case Name": "151.1.3. [TC-BRBINFO-3.1] Appearance Attribute DUT as Server - REMOVED",
            "Test Case ID": "TC-BRBINFO-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if the appearance is correctly set within the allowed ranges.\nFinish and PrimaryColor should reasonably reflect the appearance of the product.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S.A0014(ProductAppearance)",
                    "BRBINFO.S.A0014(ProductAppearance)"
                ],
                "Test Step": [
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT."
                ],
                "Expected Outcome": [
                    "ProductAppearance.Finish       Value has to be between a range of [min=Other(0), max=Fabric(5)]",
                    "ProductAppearance.PrimaryColor Value has to be between a range of [min=Black(0),         max=Gold(20)        ]",
                    "ProductAppearance.Finish       Value has to be equal to PIXIT.BRBINFO.Finish",
                    "ProductAppearance.PrimaryColor Value has to be equal to PIXIT.BRBINFO.PrimaryColor"
                ]
            }
        }
    ],
    "Time_Synchronization": [
        {
            "Test Case Name": "154.1.1. [TC-TIMESYNC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "11.16.8.2",
                    "11.16.8.3",
                    "11.16.8.4",
                    "11.16.8.5",
                    "11.16.8.6",
                    "11.16.8.7",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.8.9",
                    "11.16.8.10",
                    "11.16.8.11",
                    "11.16.8.12",
                    "11.16.8.13"
                ],
                "PICS": [
                    "",
                    "TIMESYNC.S.A0001(Granularity)",
                    "TIMESYNC.S.A0002(TimeSource)",
                    "TIMESYNC.S.A0003(TrustedTimeSource)",
                    "TIMESYNC.S.A0004(DefaultNTP)",
                    "TIMESYNC.S.A0005(TimeZone)",
                    "TIMESYNC.S.A0006(DSTOffset)",
                    "TIMESYNC.S.A0000(UTCTime)",
                    "TIMESYNC.S.A0007(LocalTime)",
                    "TIMESYNC.S.A0008(TimeZoneDatabase)",
                    "TIMESYNC.S.A0009(NTPServerAvailable)",
                    "TIMESYNC.S.A000a(TimeZoneListMaxSize)",
                    "TIMESYNC.S.A000b(DSTOffsetListMaxSize)",
                    "TIMESYNC.S.A000c(SupportsDNSResolve)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theGranularityattribute.",
                    "TH reads from the DUT theTimeSourceattribute.",
                    "TH reads from the DUT theTrustedTimeSourceattribute.",
                    "TH reads from the DUT theDefaultNTPattribute.",
                    "TH reads from the DUT theTimeZoneattribute.",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH reads from the DUT theTimeZoneDatabaseattribute.",
                    "TH reads from the DUT theNTPServerAvailableattribute.",
                    "TH reads from the DUT theTimeZoneListMaxSizeattribute.",
                    "TH reads from the DUT theDSTOffsetListMaxSizeattribute.",
                    "TH reads from the DUT theSupportsDNSResolveattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a value in the GranularityEnum range.\n        Save the value asgranularity_dut",
                    "Verify that the DUT response contains a value in the GranularityEnum range.\n        Ifgranularity_dutisNoTimeGranularity, verify that the returned value isNone.\n        ifgranularity_dutis notNoTimeGranularity, verify that the returned value is notNone",
                    "If the returned value is non-null, verify that the FabricIndex is in the range of 1 to 0xFE.",
                    "Verify that the DUT response contains either a null value, or a character string that is less than 128 bytes.\n        If the value is a string, verify that it contains either an IPv6 address as specified inRFC\u00a05952OR a domain name",
                    "Verify that the DUT response contains a lit of TimeZoneStructs with 1 or 2 entries.Save the list astz_dut.For each entry in the list, verify that the Offset is in the range of -43200 to 50400.For each entry in the list, verify that if the Name field is present it contains contains a character string in the range of 0 to 64 bytes.Verify that the ValidAt time for the first entry is 0.If there is a second entry in the list, verify that the ValidAt time is non-zero.",
                    "Verify that the DUT response contains a list of DSTOffsetStruct with 0 or more entries.Save the list asdst_dut.Verify that the list is sorted by ValidStarting time.Verify that no list entry has a ValidStarting time that is smaller than the ValidUntil time of the previous entry.Verify that there is at most one entry with a null ValidUntil time.If there exists an entry with a null ValidUntil time, verify it is at the end of the list.",
                    "Save the returned UTCTime as 'utc_dut'Save the current TH UTC time in epoch-us as 'utc_th'If theutc_dutis null, verify that thegranularity_dutisNoTimeGranularity.If theutc_dutis not null, verify that thegranularity_dutis notNoTimeGranularity.Ifgranularity_dutisMinutesGranularity, verify thatutc_dutis equal toutc_th+/- 10 minutes.Ifgranularity_dutisSecondsGramularity,MillisecondsGranularityorMicrosecondsGranularityverify thatutc_dutis equal toutc_th+/- 1 minute.",
                    "Ifutc_dutis null, verify that the returned value is null.If the returned value is non-null, TH calculates the local time using the information inutc_dut,dst_dutandtz_dutand verifies that the returned value is equal to the calculated value +/1 1 minute.",
                    "Verify that the DUT response contains a value in the range of TimeZoneDatabaseEnum.",
                    "Verify that the DUT response contains any boolean value.",
                    "Verify that the DUT response contains either a 1 or a 2.",
                    "Verify that the DUT response contains a value of at least 1.",
                    "Verify that the DUT response contains any boolean value."
                ]
            }
        },
        {
            "Test Case Name": "154.1.2. [TC-TIMESYNC-2.2] SetUTCTime command with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the SetUTCTime command of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.16.8.1",
                    "11.16.9.1",
                    "11.16.8.2",
                    "11.16.8.1",
                    "11.16.8.3"
                ],
                "PICS": [
                    "",
                    "",
                    "TIMESYNC.S.A0001(Granularity)",
                    "",
                    "TIMESYNC.S.A0002(TimeSource)"
                ],
                "Test Step": [
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT withUTCTime field set toutc_thGranularity field set to MillisecondsGranularityTimeSource set to CloudSource.",
                    "TH reads from the DUT theGranularityattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theTimeSourceattribute."
                ],
                "Expected Outcome": [
                    "Save the value asutc_dut_initial",
                    "If `utc_dut_initial` is null:Verify DUT responds w/ status SUCCESS(0x00)If `utc_dut_initial` is non-null:Verify DUT responds w/ status SUCCESS(0x00) or with the cluster-specific error code TimeNotAccepted",
                    "Verify that the DUT response contains a value in the GranularityEnum range.Save the value asgranularity_dutVerify thatgranularity_dutis notNoTimeGranularity",
                    "Save the response asutc_dutVerify thatutc_dutis not nullIfgranularity_dutisMinutesGranularity, verify thatutc_dutis equal toutc_th+/- 10 minutes.Ifgranularity_dutisSecondsGramularity,MillisecondsGranularityorMicrosecondsGranularityverify thatutc_dutis equal toutc_th+/- 1 minute.",
                    "ifutc_dut_initialis null, verify that the returned value is set to Admin."
                ]
            }
        },
        {
            "Test Case Name": "154.1.3. [TC-TIMESYNC-2.3] SetTrustedTimeSource command with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the SetTrustedTimeSource command of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.16.9.2",
                    "11.17.5.6",
                    "11.16.8.4",
                    "11.16.9.2",
                    "11.16.8.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends theSetTrustedTimeSourcecommand to the DUT with the TrustedTimeSource fields set as follows:NodeID:th_node_idEndpoint: 0",
                    "TH reads from the DUT theCurrentFabricIndexattribute from the Node Operational Credentials Cluster and saves asth_fabric_idx",
                    "TH reads from the DUT theTrustedTimeSourceattribute.",
                    "TH sends theSetTrustedTimeSourcecommand to the DUT with the TrustedTimeSource set to null.",
                    "TH reads from the DUT theTrustedTimeSourceattribute."
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that FabricIndex field isth_fabric_idxVerify that NodeID isth_node_idVerify that Endpoint is 0",
                    "",
                    "Verify that the returned value is null."
                ]
            }
        },
        {
            "Test Case Name": "154.1.4. [TC-TIMESYNC-2.4] SetTimeZone command with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the SetTimeZone command of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "11.16.8.9",
                    "11.16.8.11",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theTimeZoneDatabaseattribute.",
                    "TH reads from the DUT theTimeZoneListMaxSizeattribute.",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 3600ValidAt: 0Name: omitted",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 3600ValidAt: 0Name: \"\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: -43200ValidAt: 0Name: omitted",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 50400ValidAt: 0Name: omitted",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 3600ValidAt: 0Name: \"FakeCountry/FakeCity\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 3600ValidAt: 0Name: \"Europe/Dublin\"",
                    "Iftz_max_size_dutis 2, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetTimeZonecommand with the TimeZone field as a two list entry as:List entry 1:Offset: 3600ValidAt: 0Name: \"Europe/Dublin\"List entry 2:Offset: 7200ValidAt:utc_th+ 2 minutes (1.2e+8)Name: \"Europe/Athens\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 3600ValidAt:th_utcName: \"Europe/Dublin\"",
                    "Iftz_max_size_dutis 2, TH sends theSetTimeZonecommand with the TimeZone field as a two list entry as:List entry 1:Offset: 3600ValidAt: 0Name: \"Europe/Dublin\"List entry 2:Offset: 0ValidAt: 0Name: \"Europe/Athens\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: -43201ValidAt:th_utcName: omitted",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 50401ValidAt:th_utcName: omitted",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 0ValidAt: 0Name: \"AVeryLongStringWithSixtyFourChars/ThisIsSomeExtraPaddingForTheSt\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 0ValidAt: 0Name: \"AVeryLongStringWithSixtyFiveChars/ThisIsSomeExtraPaddingForTheStr\"",
                    "Iftz_max_size_dutis 2, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetTimeZonecommand with the TimeZone field as a three list entry as:List entry 1:Offset: 3600ValidAt: 0Name: \"Europe/Dublin\"List entry 2:Offset: 7200ValidAt:utc_th+ 2 minutes (1.2e+8)Name: \"Europe/Athens\"List entry 3:Offset: 10800ValidAt:utc_th+ 4 minutes (2.4e+8)Name: \"Europe/Istanbul\"",
                    "Iftz_max_size_dutis 1, TH sends theSetTimeZonecommand with the TimeZone field as a two list entry as:List entry 1:Offset: 3600ValidAt: 0Name: \"Europe/Dublin\"List entry 2:Offset: 7200ValidAt:utc_th+ 2 minutes (1.2e+8)Name: \"Europe/Athens\"",
                    "TH sends theSetTimeZonecommand with the TimeZone field as a single list entry as:Offset: 0ValidAt: 0Name: Omitted"
                ],
                "Expected Outcome": [
                    "Save the response astz_database_dut.",
                    "Save the response astz_max_size_dut.",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since no time zone name was given",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since no time zone name was given",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since no time zone name was given",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since no time zone name was given",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since this name will not match the database",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Iftz_database_dutNone, Verify that the DSTOffsetsRequired field is set to true",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Iftz_database_dutNone, Verify that the DSTOffsetsRequired field is set to true",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify that the DUT responds with aSetTimeZoneResponse.Verify that the DSTOffsetsRequired field is set to true since this name will not match the database",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.5. [TC-TIMESYNC-2.5] SetDSTOffset command with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the SetDSTOffset command of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20"
                ],
                "Ref": [
                    "11.16.8.12",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5",
                    "11.16.8.7",
                    "11.16.9.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theDSTOffsetListMaxSizeattribute.",
                    "TH sends aSetDSTOffsetcommand to the DUT with the DSTOffset field set to an empty list.",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "Ifdst_max_size_dut> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 2 item list that is not sorted by ValidStarting time. The list is as follows:List entry 1:Offset: 3600ValidStarting:th_utcValidUntil: 'th_utc' + 1.577e+13  (6 months)List entry 2:offset: 3600ValidStarting: 0ValidUntil:th_utc",
                    "Ifdst_max_size_dut> 1, TH reads from the DUT theDSTOffsetattribute.",
                    "Ifdst_max_size_dut> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 2 item list where the second entry has a ValidStarting time that is\n                            smaller than the previous ValidUntil time. The list is as follows:List entry 1:Offset: 3600ValidStarting: 0ValidUntil: 'th_utc' + 3e+8 (5 minutes)List entry 2:offset: 1800ValidStarting:th_utcValidUntil:th_utc+ 1.577e+13  (6 months)",
                    "Ifdst_max_size_dut> 1, TH reads from the DUT theDSTOffsetattribute.",
                    "Ifdst_max_size_dut> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 2 item list with 2 null ValidUntil entries. The list is as follows:List entry 1:Offset: 3600ValidStarting: 0ValidUntil: nullList entry 2:offset: 1800ValidStarting:th_utc+ 3e+8 (5 minutes)ValidUntil: null",
                    "Ifdst_max_size_dut> 1, TH reads from the DUT theDSTOffsetattribute.",
                    "Ifdst_max_size_dut> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 2 item list with null ValidUntil entry not at the end. The list is as follows:List entry 1:Offset: 3600ValidStarting: 0ValidUntil: nullList entry 2:offset: 1800ValidStarting:th_utc+ 3e+8 (5 minutes)ValidUntil:th_utc+ 1.577e+13  (6 months)",
                    "Ifdst_max_size_dut> 1, TH reads from the DUT theDSTOffsetattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a list withdst_max_size_dut+ 1 items.For each list item at index i=(0:`dst_max_size_dut`):\n- Offset: 3600\n- ValidStarting: (`th_utc` + (3.156e+13 * i) + (1.577e+13)) : (1 year * i + 6 months)\n- ValidUntil: (`th_utc` + (3.156e+13 * i+1)) : (1 year * i+1)",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 1 item list with null ValidUntil entry. The list is as follows:List entry 1:Offset: 3600ValidStarting:th_utc+ 3e+8 (5 minutes)ValidUntil: null",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a 1 item list with non-null ValidUntil entry. The list is as follows:List entry 1:Offset: 3600ValidStarting:th_utc+ 3e+8 (5 minutes)ValidUntil:th_utc+ 1.577e+13  (6 months)",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            containing a list withdst_max_size_dutitems.\n                            For each list item at index i=(0:`dst_max_size_dut`-1):Offset: 3600ValidStarting: (th_utc+ (3.156e+13 * i) + (1.577e+13)) : (1 year * i + 6 months)ValidUntil: (th_utc+ (3.156e+13 * i+1)) : (1 year * i+1)",
                    "TH reads from the DUT theDSTOffsetattribute.",
                    "TH sends aSetDSTOffsetcommand to the DUT with the DSTOffset field set to an empty list."
                ],
                "Expected Outcome": [
                    "Save the response asdst_max_size_dut. Verify thatdst_max_size_dutis at least 1.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    "Verify the returned list is empty.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify the returned list contains a single entry that matches the list sent in the previous step.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify the returned list contains a single entry that matches the list sent in the previous step.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify the returned list hasdst_max_size_dutentries that matches the list sent in the previous step.",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "154.1.6. [TC-TIMESYNC-2.6] SetDefaultNTP command with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the SetDefaultNTP command of the Time Synchronization cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "11.16.8.13",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5",
                    "11.16.9.6",
                    "11.16.8.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theSupportsDNSResolveattribute",
                    "TH clears theDefaultNTPattribute by sending aSetDefaultNTPcommand with the DefaultNTP field set to null.",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH sends aSetDefaultNTPcommand to with the DefaultNTP field set to \"time.nist.gov\"",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH clears theDefaultNTPattribute by sending aSetDefaultNTPcommand with the DefaultNTP field set to null.",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH sends aSetDefaultNTPcommand to with the DefaultNTP field set to \"RandomString\"",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH sends aSetDefaultNTPcommand to with the DefaultNTP field set to \"fe80:1\" (malformed IPv6 address)",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH sends aSetDefaultNTPcommand to with the DefaultNTP field set to \"fz80::1\" (malformed IPv6 address)",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH sends aSetDefaultNTPcommand to with the DefaultNTP field set to \"fe80::1\" (good IPv6 address)",
                    "TH reads from the DUT theDefaultNTPattribute",
                    "TH clears theDefaultNTPattribute by sending aSetDefaultNTPcommand with the DefaultNTP field set to null.",
                    "TH reads from the DUT theDefaultNTPattribute"
                ],
                "Expected Outcome": [
                    "Save asdns_resolve_supported",
                    "",
                    "Verify thatDefaultNTPis null.",
                    "Ifdns_resolve_supportedis true, Verify DUT responds w/ status SUCCESS(0x00)Ifdns_resolve_supportedis false, Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Ifdns_resolve_supportedis true, verify thatDefaultNTPis \"time.nist.gov\".Ifdns_resolve_supportedis false,DefaultNTPis null.",
                    "",
                    "Verify thatDefaultNTPis null.",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify thatDefaultNTPis null.",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify thatDefaultNTPis null.",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify thatDefaultNTPis null.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify thatDefaultNTPis \"fe80::1\"",
                    "",
                    "Verify thatDefaultNTPis null."
                ]
            }
        },
        {
            "Test Case Name": "154.1.7. [TC-TIMESYNC-2.7] LocalTime calculation for time zone with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.7",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LocalTime is calculated correct for the given TZ values and changes as appropriate.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19"
                ],
                "Ref": [
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.9.1",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.8.11",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.8.8",
                    "11.16.8.8",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.8.8",
                    "11.16.9.3",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 3600ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH reads from the DUT theTimeZoneListMaxSizeattribute and saves astz_list_size.",
                    "Iftz_list_size> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetTimeZonecommand\n                            to the DUT with the TimeZone field set to a list with a single elements as follows:List item 1:Offset 3600ValidAt: 0Name: omittedList Item 2:Offset: 7200ValidAt:th_utc+ 1e+7 (10 seconds)Name: Omitted",
                    "Iftz_list_size> 1, TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field\n                            set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "Iftz_list_size> 1, TH reads from the DUT theLocalTimeattribute.",
                    "Iftz_list_size> 1, TH waits 15 seconds and TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: -3600ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6) (no offset).",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6)",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + the time zone offset ((th_utc+ 3.6e+9) +/- 5e+6).",
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` Verify the returned time is within 5 seconds ofth_utc+ 3600s ((th_utc+ 3.6e+9) +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` Verify the returned time is within 5 seconds ofth_utc+ 7200s ((th_utc+ 7.2e+9) +/- 5e+6).",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + the time zone offset ((th_utc- 3.6e+9) +/- 5e+6).",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.8. [TC-TIMESYNC-2.8] LocalTime calculation for DST offset with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.8",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LocalTime is calculated correct for the given DST values and changes as appropriate.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31"
                ],
                "Ref": [
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.9.1",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.8",
                    "",
                    "11.16.8.8",
                    "11.16.8.12",
                    "11.16.9.4",
                    "11.16.8.8",
                    "",
                    "11.16.8.8",
                    "",
                    "11.16.8.8",
                    "",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.8",
                    "",
                    "11.16.8.8",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil:th_utc+ 1e+7 (10 seconds)",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH waits 15 seconds",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH waits 15 seconds",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH reads from the DUT theDSTOffsetListMaxSizeattribute and saves asdst_list_size.",
                    "Ifdst_list_size> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the\n                            DUT with the DSTOffset field set to a list with a two items as follows:List item 1:Offset: 3600ValidStarting: 0ValidUntil:th_utc+ 1e+7 (10 seconds)List item 2:Offset: 7200ValidStarting:th_utc+ 2.5e+7 (25 seconds)ValidUntil:th_utc+ 4e+7 (40 seconds)",
                    "Ifdst_list_size> 1, TH reads from the DUT theLocalTimeattribute.",
                    "Ifdst_list_size> 1, TH waits 15 seconds",
                    "Ifdst_list_size> 1, TH reads from the DUT theLocalTimeattribute.",
                    "Ifdst_list_size> 1, TH waits 15 seconds",
                    "Ifdst_list_size> 1, TH reads from the DUT theLocalTimeattribute.",
                    "Ifdst_list_size> 1, TH waits 15 seconds",
                    "Ifdst_list_size> 1, TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: -3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH saves the current time asth_utcand sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting:th_utc+ 1e+7 (10 seconds)ValidUntil: null",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH waits 15 seconds",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6) (no offset).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + DST offset ((th_utc+  3.6e+9) +/- 5e+6).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "Verify the returned value is null.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + DST offset ((th_utc+  3.6e+9) +/- 5e+6).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + DST offset ((th_utc+  3.6e+9) +/- 5e+6).",
                    "",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds ofth_utc+ 3600s ((th_utc+  3.6e+9) +/- 5e+6)",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6) (no offset).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds ofth_utc+ 7200s ((th_utc+  7.2e+9) +/- 5e+6)",
                    "",
                    "Verify the returned value is null.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + DST offset ((th_utc-  3.6e+9) +/- 5e+6).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6) (no offset).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + DST offset ((th_utc+  3.6e+9) +/- 5e+6).",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.9. [TC-TIMESYNC-2.9] LocalTime calculation for time zone with DST offset with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.9",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LocalTime is calculated correct for the given DST values and changes as appropriate.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "11.16.9.1",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.4",
                    "11.16.8.1",
                    "11.16.8.8",
                    "11.16.9.3",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 7200ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: -3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: -7200ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: -3600ValidStarting: 0ValidUntil: null",
                    "TH reads from the DUT theUTCTimeattribute.",
                    "TH reads from the DUT theLocalTimeattribute.",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + time zone offset + DST offset ((th_utc+  1.08e+10) +/- 5e+6).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + time zone offset + DST offset ((th_utc+  3.6+9) +/- 5e+6).",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + time zone offset + DST offset ((th_utc-  3.6+9) +/- 5e+6).",
                    "",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time (`th_utc` +/- 5e+6).",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc`. Verify the returned time is within 5 seconds of the saved time + time zone offset + DST offset ((th_utc-  1.08e+10) +/- 5e+6).",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.10. [TC-TIMESYNC-2.10] DSTTableEmpty event generation with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.10",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DSTTableEmpty is correctly generated",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "11.16.9.1",
                    "11.16.9.3",
                    "11.16.9.4",
                    "11.16.10.1",
                    "11.16.9.3",
                    "11.16.10.1",
                    "11.16.9.4",
                    "",
                    "",
                    "",
                    "11.16.9.3",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 7200ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil: null",
                    "TH subscribes to theDSTTableEmptyevent by sending a SubscribeRequest action with:KeepSubscriptions: falseMinIntervalFloor: 3MaxIntervalCeiling: 60AttributeRequests: []DataVersionFilters: []EventRequests: [{Path: {Node:N1,Endpoint: 0,Cluster: 0x0038 (Time sync ClusterID)},Event: 0x00 (DSTTableEmpty event ID),IsUrgent: true}]EventFilters: []FabricFiltered: true",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 3600ValidAt: 0Name: Omitted",
                    "TH waits for aDSTTableEmptyevent with a timeout of 5 seconds",
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil:th_utc+ 1e+7 (10 seconds)",
                    "TH waits untilth_utc+ 15 seconds",
                    "TH reads theLocalTimeattribute from the DUT",
                    "TH waits for aDSTTableEmptyevent untilth_utc+ 20s seconds",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "Confirm receipt of theDSTTableEmptyevent",
                    "",
                    "",
                    "",
                    "Confirm receipt of theDSTTableEmptyevent",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.11. [TC-TIMESYNC-2.11] DSTStatus event generation with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.11",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DSTStatus is correctly generated",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "11.16.9.1",
                    "11.16.9.3",
                    "11.16.10.2",
                    "11.16.8.12",
                    "11.16.9.4",
                    "11.16.9.4",
                    "",
                    "11.16.10.1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "11.16.10.1",
                    "11.16.9.3",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 7200ValidAt: 0Name: Omitted",
                    "TH subscribes to theDSTStatusevent by sending a SubscribeRequest action with:KeepSubscriptions: falseMinIntervalFloor: 1MaxIntervalCeiling: 3AttributeRequests: []DataVersionFilters: []EventRequests: [{Path: {Node:N1,Endpoint: 0,Cluster: 0x0038 (Time sync ClusterID)},Event: 0x01 (DSTStatus event ID),IsUrgent: true}]EventFilters: []FabricFiltered: true",
                    "TH reads from the DUT theDSTOffsetListMaxSizeattribute and saves asdst_list_size.",
                    "Ifdst_list_size> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetDSTOffsetcommand to the\n                            DUT with the DSTOffset field set to a list with a two items as follows:List item 1:Offset: 3600ValidStarting: 0ValidUntil:th_utc+ 1e+7 (10 seconds)List item 2:Offset: 7200ValidStarting:th_utc+ 2.5e+7 (25 seconds)ValidUntil:th_utc+ 4e+7 (40 seconds)",
                    "Ifdst_list_size== 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 3600ValidStarting: 0ValidUntil:th_utc+ 1e+7 (10 seconds)",
                    "TH reads theLocalTimeattribute from the DUT",
                    "TH waits for aDSTStatusevent untilth_utc+ 5s",
                    "Ifdst_list_size> 1, TH waits untilth_utc+ 15s",
                    "Ifdst_list_size> 1, TH reads theLocalTimeattribute from the DUT",
                    "Ifdst_list_size> 1, TH waits for aDSTStatusevent untilth_utc+ 20s",
                    "Ifdst_list_size> 1, TH waits untilth_utc+ 30s",
                    "Ifdst_list_size> 1, TH reads theLocalTimeattribute from the DUT",
                    "Ifdst_list_size> 1 TH waits for aDSTStatusevent untilth_utc+ 35s",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Confirm receipt of theDSTStatusevent with the DSTOffsetActive field set to True.",
                    "",
                    "",
                    "Confirm receipt of theDSTStatusevent with the DSTOffsetActive field set to False.",
                    "",
                    "",
                    "Confirm receipt of theDSTStatusevent with the DSTOffsetActive field set to True.",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.12. [TC-TIMESYNC-2.12] TimeZoneStatus event generation with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.12",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the TimeZoneStatus is correctly generated",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "11.16.9.1",
                    "11.16.9.3",
                    "11.16.10.3",
                    "11.16.8.11",
                    "11.16.9.3",
                    "11.16.9.3",
                    "11.16.9.4",
                    "",
                    "11.16.10.1",
                    "",
                    "",
                    "11.16.10.1",
                    "11.16.9.3",
                    "11.16.9.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with the fields set as follows:UTCTime:th_utcGranularity: MillisecondsGranularityTimeSource: omitted",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 7200ValidAt: 0Name: Omitted",
                    "TH subscribes to theTimeZoneStatusevent by sending a SubscribeRequest action with:KeepSubscriptions: falseMinIntervalFloor: 1MaxIntervalCeiling: 3AttributeRequests: []DataVersionFilters: []EventRequests: [{Path: {Node:N1,Endpoint: 0,Cluster: 0x0038 (Time sync ClusterID)},Event: 0x02 (TimeZoneStatus event ID),IsUrgent: true}]EventFilters: []FabricFiltered: true",
                    "TH reads from the DUT theTimeZoneListMaxSizeattribute and saves astz_list_size.",
                    "Iftz_list_size> 1, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends theSetTimeZonecommand\n                            to the DUT with the TimeZone field set to a list with a single elements as follows:List item 1:Offset 3600ValidAt: 0Name: \"Not/Real\"List Item 2:Offset: 7200ValidAt:th_utc+ 1e+7 (10 seconds)Name: \"Un/Real\"",
                    "Iftz_list_size== 1, TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 3600ValidAt: 0Name: \"Not/Real\"",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null",
                    "TH reads theLocalTimeattribute from the DUT",
                    "TH waits for aTimeZoneStatusevent untilth_utc+ 5s",
                    "Iftz_list_size> 1, TH waits untilth_utc+ 15s",
                    "Iftz_list_size> 1, TH reads theLocalTimeattribute from the DUT",
                    "Iftz_list_size> 1, TH waits for aTimeZoneStatusevent untilth_utc+ 20s",
                    "TH sends theSetTimeZonecommand to the DUT with the TimeZone field set to a list with a single elements as follows:Offset: 0ValidAt: 0Name: Omitted",
                    "TH sends theSetDSTOffsetcommand to the DUT with the DSTOffset field set to a list with a single item as follows:Offset: 0ValidStarting: 0ValidUntil: null"
                ],
                "Expected Outcome": [
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    "",
                    "",
                    "Confirm receipt of theTimeZoneStatusevent with the Offset set to 3600 and the Name set to \"Not/Real\".",
                    "",
                    "",
                    "Confirm receipt of theTimeZoneStatusevent with the Offset set to 7200 and the Name set to \"Un/Real\".",
                    "Verify the DUT returns aSetTimeZoneResponsewith the DSTOffsetsRequired field set to true.",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "154.1.13. [TC-TIMESYNC-2.13] MissingTrustedTimeSource event generation with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-2.13",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DSTStatus is correctly generated",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "11.18.8.1",
                    "5.5",
                    "11.17.5.6",
                    "11.16.9.2",
                    "11.16.10.5",
                    "11.17.7.12",
                    "11.16.10.1",
                    "11.16.9.2",
                    "",
                    "11.16.9.2",
                    "11.16.10.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 opens a commissioning window on the DUT by sending an OpenCommissioningWindow\n                            command to the Administrator Commissioning Cluster on EP0. TH1 saves the generated QR or manual setup code for commissioning asWindowSetupPayload",
                    "TH2 fully commissions the DUT usingWindowSetupPayload",
                    "TH2 reads theCurrentFabricIndexattribute from the Node Operational Credentials Cluster on EP0 and saves asth2_fabric_idx",
                    "TH2 send theSetTrustedTimeSourcecommand to the DUT with the TrustedTimeSource fields set as follows:NodeID:th2_node_idEndpoint: 0",
                    "TH1 subscribes to theMissingTrustedTimeSourceevent by sending a SubscribeRequest action with:KeepSubscriptions: falseMinIntervalFloor: 1MaxIntervalCeiling: 3AttributeRequests: []DataVersionFilters: []EventRequests: [{Path: {Node:N1,Endpoint: 0,Cluster: 0x0038 (Time sync ClusterID)},Event: 0x03 (MissingTrustedTimeSource event ID),IsUrgent: true}]EventFilters: []FabricFiltered: true",
                    "TH1 removes the TH2 fabric by sending the RemoveFabric command to the DUT with the FabricIndex set toth2_fabric_idx",
                    "TH waits for aMissingTrustedTimeSourceevent with a timeout of 5 seconds",
                    "TH1 send theSetTrustedTimeSourcecommand to the DUT with the TrustedTimeSource fields set as follows:NodeID:th1_node_idEndpoint: 0",
                    "TH1 Waits 5 seconds",
                    "TH1 sends theSetTrustedTimeSourcecommand to the DUT with the TrustedTimeSource set to null.",
                    "TH waits for aMissingTrustedTimeSourceevent with a timeout of 5 seconds"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Confirm receipt of theMissingTrustedTimeSourceevent.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "",
                    "Confirm receipt of theMissingTrustedTimeSourceevent."
                ]
            }
        },
        {
            "Test Case Name": "154.1.14. [TC-TIMESYNC-3.1] Endpoint composition with DUT as Server",
            "Test Case ID": "TC-TIMESYNC-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the node properly implements the endpoint composition requirements.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "C.11.17",
                    "C.11.17"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH does a wildcard read of the time sync cluster UTCTime attribute across all endpoints.",
                    "TH does a wildcard read of the descriptor cluster ServerList attribute across all endpoint."
                ],
                "Expected Outcome": [
                    "Verify that only one AttributeReportIB is returned for endpoint 0.",
                    "Verify that the time synchronization cluster id (0x0038) is listed in the ServerList attribute from endpoint 0 and is not listed in the ServerList attribute for any other endpoints."
                ]
            }
        }
    ],
    "Carbon_Monoxide_Concentration_Measurement": [
        {
            "Test Case Name": "157.1.1. [TC-CMOCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-CMOCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if CMOCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if CMOCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if CMOCONC.S.F02(MED) & CMOCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if CMOCONC.S.F03(CRI) & CMOCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if CMOCONC.S.F04(PEA) & CMOCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if CMOCONC.S.F05(AVG) & CMOCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if CMOCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if CMOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if CMOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if CMOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if CMOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if CMOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if CMOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if CMOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if CMOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if CMOCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "157.2.1. [TC-CMOCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-CMOCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Carbon Monoxide Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "CMOCONC.S.A0001(MinMeasuredValue)",
                    "CMOCONC.S.A0002(MaxMeasuredValue)",
                    "CMOCONC.S.A0000(MeasuredValue)",
                    "CMOCONC.S.A0003(PeakMeasuredValue)",
                    "CMOCONC.S.A0004(PeakMeasuredValueWindow)",
                    "CMOCONC.S.A0005(AverageMeasuredValue)",
                    "CMOCONC.S.A0006(AverageMeasuredValueWindow)",
                    "CMOCONC.S.A0008(MeasurementUnit)",
                    "CMOCONC.S.A0009(MeasurementMedium)",
                    "CMOCONC.S.A000a(LevelValue)",
                    "CMOCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Carbon_Dioxide_Concentration_Measurement": [
        {
            "Test Case Name": "160.1.1. [TC-CDOCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-CDOCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if CDOCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if CDOCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if CDOCONC.S.F02(MED) & CDOCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if CDOCONC.S.F03(CRI) & CDOCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if CDOCONC.S.F04(PEA) & CDOCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if CDOCONC.S.F05(AVG) & CDOCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if CDOCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if CDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if CDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if CDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if CDOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if CDOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if CDOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if CDOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if CDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if CDOCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "160.2.1. [TC-CDOCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-CDOCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Carbon Dioxide Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "CDOCONC.S.A0001(MinMeasuredValue)",
                    "CDOCONC.S.A0002(MaxMeasuredValue)",
                    "CDOCONC.S.A0000(MeasuredValue)",
                    "CDOCONC.S.A0003(PeakMeasuredValue)",
                    "CDOCONC.S.A0004(PeakMeasuredValueWindow)",
                    "CDOCONC.S.A0005(AverageMeasuredValue)",
                    "CDOCONC.S.A0006(AverageMeasuredValueWindow)",
                    "CDOCONC.S.A0008(MeasurementUnit)",
                    "CDOCONC.S.A0009(MeasurementMedium)",
                    "CDOCONC.S.A000a(LevelValue)",
                    "CDOCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Nitrogen_Dioxide_Concentration_Measurement": [
        {
            "Test Case Name": "163.1.1. [TC-NDOCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-NDOCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if NDOCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if NDOCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if NDOCONC.S.F02(MED) & NDOCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if NDOCONC.S.F03(CRI) & NDOCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if NDOCONC.S.F04(PEA) & NDOCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if NDOCONC.S.F05(AVG) & NDOCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if NDOCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if NDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if NDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if NDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if NDOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if NDOCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if NDOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if NDOCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if NDOCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if NDOCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "163.2.1. [TC-NDOCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-NDOCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Nitrogen Dioxide Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "NDOCONC.S.A0001(MinMeasuredValue)",
                    "NDOCONC.S.A0002(MaxMeasuredValue)",
                    "NDOCONC.S.A0000(MeasuredValue)",
                    "NDOCONC.S.A0003(PeakMeasuredValue)",
                    "NDOCONC.S.A0004(PeakMeasuredValueWindow)",
                    "NDOCONC.S.A0005(AverageMeasuredValue)",
                    "NDOCONC.S.A0006(AverageMeasuredValueWindow)",
                    "NDOCONC.S.A0008(MeasurementUnit)",
                    "NDOCONC.S.A0009(MeasurementMedium)",
                    "NDOCONC.S.A000a(LevelValue)",
                    "NDOCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Ozone_Concentration_Measurement": [
        {
            "Test Case Name": "166.1.1. [TC-OZCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-OZCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if OZCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if OZCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if OZCONC.S.F02(MED) & OZCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if OZCONC.S.F03(CRI) & OZCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if OZCONC.S.F04(PEA) & OZCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if OZCONC.S.F05(AVG) & OZCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if OZCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if OZCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if OZCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if OZCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if OZCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if OZCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if OZCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if OZCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if OZCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if OZCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "166.2.1. [TC-OZCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-OZCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Ozone Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "OZCONC.S.A0001(MinMeasuredValue)",
                    "OZCONC.S.A0002(MaxMeasuredValue)",
                    "OZCONC.S.A0000(MeasuredValue)",
                    "OZCONC.S.A0003(PeakMeasuredValue)",
                    "OZCONC.S.A0004(PeakMeasuredValueWindow)",
                    "OZCONC.S.A0005(AverageMeasuredValue)",
                    "OZCONC.S.A0006(AverageMeasuredValueWindow)",
                    "OZCONC.S.A0008(MeasurementUnit)",
                    "OZCONC.S.A0009(MeasurementMedium)",
                    "OZCONC.S.A000a(LevelValue)",
                    "OZCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "PM2.5_Concentration_Measurement": [
        {
            "Test Case Name": "169.1.1. [TC-PMICONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-PMICONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if PMICONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if PMICONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if PMICONC.S.F02(MED) & PMICONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if PMICONC.S.F03(CRI) & PMICONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if PMICONC.S.F04(PEA) & PMICONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if PMICONC.S.F05(AVG) & PMICONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if PMICONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if PMICONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if PMICONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if PMICONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if PMICONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if PMICONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if PMICONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if PMICONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if PMICONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if PMICONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "169.2.1. [TC-PMICONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-PMICONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the PM2.5 Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "PMICONC.S.A0001(MinMeasuredValue)",
                    "PMICONC.S.A0002(MaxMeasuredValue)",
                    "PMICONC.S.A0000(MeasuredValue)",
                    "PMICONC.S.A0003(PeakMeasuredValue)",
                    "PMICONC.S.A0004(PeakMeasuredValueWindow)",
                    "PMICONC.S.A0005(AverageMeasuredValue)",
                    "PMICONC.S.A0006(AverageMeasuredValueWindow)",
                    "PMICONC.S.A0008(MeasurementUnit)",
                    "PMICONC.S.A0009(MeasurementMedium)",
                    "PMICONC.S.A000a(LevelValue)",
                    "PMICONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Formaldehyde_Concentration_Measurement": [
        {
            "Test Case Name": "172.1.1. [TC-FLDCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-FLDCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if FLDCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if FLDCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if FLDCONC.S.F02(MED) & FLDCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if FLDCONC.S.F03(CRI) & FLDCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if FLDCONC.S.F04(PEA) & FLDCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if FLDCONC.S.F05(AVG) & FLDCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if FLDCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if FLDCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if FLDCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if FLDCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if FLDCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if FLDCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if FLDCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if FLDCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if FLDCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if FLDCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "172.2.1. [TC-FLDCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-FLDCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Formaldehyde Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "FLDCONC.S.A0001(MinMeasuredValue)",
                    "FLDCONC.S.A0002(MaxMeasuredValue)",
                    "FLDCONC.S.A0000(MeasuredValue)",
                    "FLDCONC.S.A0003(PeakMeasuredValue)",
                    "FLDCONC.S.A0004(PeakMeasuredValueWindow)",
                    "FLDCONC.S.A0005(AverageMeasuredValue)",
                    "FLDCONC.S.A0006(AverageMeasuredValueWindow)",
                    "FLDCONC.S.A0008(MeasurementUnit)",
                    "FLDCONC.S.A0009(MeasurementMedium)",
                    "FLDCONC.S.A000a(LevelValue)",
                    "FLDCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "PM1_Concentration_Measurement": [
        {
            "Test Case Name": "175.1.1. [TC-PMHCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-PMHCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if PMHCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if PMHCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if PMHCONC.S.F02(MED) & PMHCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if PMHCONC.S.F03(CRI) & PMHCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if PMHCONC.S.F04(PEA) & PMHCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if PMHCONC.S.F05(AVG) & PMHCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if PMHCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if PMHCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if PMHCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if PMHCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if PMHCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if PMHCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if PMHCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if PMHCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if PMHCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if PMHCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "175.2.1. [TC-PMHCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-PMHCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the PM1 Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "PMHCONC.S.A0001(MinMeasuredValue)",
                    "PMHCONC.S.A0002(MaxMeasuredValue)",
                    "PMHCONC.S.A0000(MeasuredValue)",
                    "PMHCONC.S.A0003(PeakMeasuredValue)",
                    "PMHCONC.S.A0004(PeakMeasuredValueWindow)",
                    "PMHCONC.S.A0005(AverageMeasuredValue)",
                    "PMHCONC.S.A0006(AverageMeasuredValueWindow)",
                    "PMHCONC.S.A0008(MeasurementUnit)",
                    "PMHCONC.S.A0009(MeasurementMedium)",
                    "PMHCONC.S.A000a(LevelValue)",
                    "PMHCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "PM10_Concentration_Measurement": [
        {
            "Test Case Name": "178.1.1. [TC-PMKCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-PMKCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if PMKCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if PMKCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if PMKCONC.S.F02(MED) & PMKCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if PMKCONC.S.F03(CRI) & PMKCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if PMKCONC.S.F04(PEA) & PMKCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if PMKCONC.S.F05(AVG) & PMKCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if PMKCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if PMKCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if PMKCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if PMKCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if PMKCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if PMKCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if PMKCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if PMKCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if PMKCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if PMKCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "178.2.1. [TC-PMKCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-PMKCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the PM10 Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "PMKCONC.S.A0001(MinMeasuredValue)",
                    "PMKCONC.S.A0002(MaxMeasuredValue)",
                    "PMKCONC.S.A0000(MeasuredValue)",
                    "PMKCONC.S.A0003(PeakMeasuredValue)",
                    "PMKCONC.S.A0004(PeakMeasuredValueWindow)",
                    "PMKCONC.S.A0005(AverageMeasuredValue)",
                    "PMKCONC.S.A0006(AverageMeasuredValueWindow)",
                    "PMKCONC.S.A0008(MeasurementUnit)",
                    "PMKCONC.S.A0009(MeasurementMedium)",
                    "PMKCONC.S.A000a(LevelValue)",
                    "PMKCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Total_Volatile_Organic_Compounds_Concentration_Measurement": [
        {
            "Test Case Name": "181.1.1. [TC-TVOCCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-TVOCCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if TVOCCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if TVOCCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if TVOCCONC.S.F02(MED) & TVOCCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if TVOCCONC.S.F03(CRI) & TVOCCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if TVOCCONC.S.F04(PEA) & TVOCCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if TVOCCONC.S.F05(AVG) & TVOCCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if TVOCCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if TVOCCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if TVOCCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if TVOCCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if TVOCCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if TVOCCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if TVOCCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if TVOCCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if TVOCCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if TVOCCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "181.2.1. [TC-TVOCCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-TVOCCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Total Volatile Organic Compounds Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "TVOCCONC.S.A0001(MinMeasuredValue)",
                    "TVOCCONC.S.A0002(MaxMeasuredValue)",
                    "TVOCCONC.S.A0000(MeasuredValue)",
                    "TVOCCONC.S.A0003(PeakMeasuredValue)",
                    "TVOCCONC.S.A0004(PeakMeasuredValueWindow)",
                    "TVOCCONC.S.A0005(AverageMeasuredValue)",
                    "TVOCCONC.S.A0006(AverageMeasuredValueWindow)",
                    "TVOCCONC.S.A0008(MeasurementUnit)",
                    "TVOCCONC.S.A0009(MeasurementMedium)",
                    "TVOCCONC.S.A000a(LevelValue)",
                    "TVOCCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Radon_Concentration_Measurement": [
        {
            "Test Case Name": "184.1.1. [TC-RNCONC-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-RNCONC-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if RNCONC.S.F00(MEA)- bit 1: SHALL be 1 if and only if RNCONC.S.F01(LEV)- bit 2: SHALL be 1 if and only if RNCONC.S.F02(MED) & RNCONC.S.F01(LEV)- bit 3: SHALL be 1 if and only if RNCONC.S.F03(CRI) & RNCONC.S.F01(LEV)- bit 4: SHALL be 1 if and only if RNCONC.S.F04(PEA) & RNCONC.S.F00(MEA)- bit 5: SHALL be 1 if and only if RNCONC.S.F05(AVG) & RNCONC.S.F00(MEA)At least one of bit 0 and bit 1 SHALL be 1.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0009,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0007: MAY be included if and only if RNCONC.S.F00(MEA)The list includes entries based on feature support:- 0x0000 SHALL be included if RNCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0001 SHALL be included if RNCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0002 SHALL be included if RNCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x0003 SHALL be included if RNCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0004 SHALL be included if RNCONC.S.F04(PEA) and SHALL NOT be included otherwise.- 0x0005 SHALL be included if RNCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0006 SHALL be included if RNCONC.S.F05(AVG) and SHALL NOT be included otherwise.- 0x0007 SHALL be included if {PICS_SF_CLUSTER_FEATURE} and SHALL NOT be included otherwise.- 0x0008 SHALL be included if RNCONC.S.F00(MEA) and SHALL NOT be included otherwise.- 0x000a SHALL be included if RNCONC.S.F01(LEV) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:"
                ]
            }
        },
        {
            "Test Case Name": "184.2.1. [TC-RNCONC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-RNCONC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Radon Concentration Measurement cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.2.10.6.2",
                    "AC.2.10.6.3",
                    "AC.2.10.6.1",
                    "AC.2.10.6.4",
                    "AC.2.10.6.5",
                    "AC.2.10.6.6",
                    "AC.2.10.6.7",
                    "AC.2.10.6.9",
                    "AC.2.10.6.10",
                    "AC.2.10.6.11",
                    "AC.2.10.6.8"
                ],
                "PICS": [
                    "",
                    "RNCONC.S.A0001(MinMeasuredValue)",
                    "RNCONC.S.A0002(MaxMeasuredValue)",
                    "RNCONC.S.A0000(MeasuredValue)",
                    "RNCONC.S.A0003(PeakMeasuredValue)",
                    "RNCONC.S.A0004(PeakMeasuredValueWindow)",
                    "RNCONC.S.A0005(AverageMeasuredValue)",
                    "RNCONC.S.A0006(AverageMeasuredValueWindow)",
                    "RNCONC.S.A0008(MeasurementUnit)",
                    "RNCONC.S.A0009(MeasurementMedium)",
                    "RNCONC.S.A000a(LevelValue)",
                    "RNCONC.S.A0007(Uncertainty)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theMinMeasuredValueattribute.",
                    "TH reads from the DUT theMaxMeasuredValueattribute.",
                    "TH reads from the DUT theMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueattribute.",
                    "TH reads from the DUT thePeakMeasuredValueWindowattribute.",
                    "TH reads from the DUT theAverageMeasuredValueattribute.",
                    "TH reads from the DUT theAverageMeasuredValueWindowattribute.",
                    "TH reads from the DUT theMeasurementUnitattribute.",
                    "TH reads from the DUT theMeasurementMediumattribute.",
                    "TH reads from the DUT theLevelValueattribute.",
                    "TH reads from the DUT theUncertaintyattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Save this value for later. Verify that MaxMeasuredValue > MinMeasuredValue.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 MeasuredValue and MeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 PeakMeasuredValue and PeakMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that MinMeasuredValue \u2264 AverageMeasuredValue and AverageMeasuredValue \u2264 MaxMeasuredValue unless any of the values being compared are null.",
                    "Verify that the DUT response contains an integer number less that or equal to 604800.",
                    "Verify that the DUT response contains an enum between 0 and 7.",
                    "Verify that the DUT response contains an enum between 0 and 2.",
                    "Verify that the DUT response contains an enum between 0 and 4.",
                    "Verify that the DUT response contains single-precision floating-point number or null. Verify that Uncertainty \u2265 0."
                ]
            }
        }
    ],
    "Temperature_Control": [
        {
            "Test Case Name": "187.1.1. [TC-TCTL-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-TCTL-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7*"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.4",
                    "C.7.13.5",
                    "C.7.13.6"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute.",
                    "TH reads from the DUT theEventListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute with the value {clusterrev}.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if TCTL.S.F00(TN) & !TCTL.S.F01(TL)- bit 1: SHALL be 1 if and only if TCTL.S.F01(TL) & !TCTL.S.F00(TN)- bit 2: SHALL be 1 if and only if TCTL.S.F02(A_STEP) & TCTL.S.F00(TN)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0000: SHALL be included if and only if TCTL.S.F00(TN)- 0x0001: SHALL be included if and only if TCTL.S.F00(TN)- 0x0002: SHALL be included if and only if TCTL.S.F00(TN)- 0x0003: SHALL be included if and only if TCTL.S.F02(A_STEP)- 0x0004: SHALL be included if and only if TCTL.S.F01(TL)- 0x0005: SHALL be included if and only if TCTL.S.F01(TL)",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list SHALL include all the mandatory entries:- 0x0000",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "187.2.1. [TC-TCTL-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-TCTL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to TemperatureControl cluster attribute read commands.\nThis test case is only required if the A_STEP and TN features are supported (TCTL.S.F02(A_STEP) and TCTL.S.F00(TN)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TCTL.S.A0001(MinTemperature)",
                    "TCTL.S.A0002(MaxTemperature)",
                    "TCTL.S.A0003(Step)",
                    "TCTL.S.A0000(TemperatureSetpoint)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theMinTemperatureattribute",
                    "TH reads from the DUT theMaxTemperatureattribute",
                    "TH reads from the DUT theStepattribute",
                    "TH reads from the DUT theTemperatureSetpointattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Save value to minTemperature",
                    "Save value to maxTemperature",
                    "Verify that the DUT response contains a temperature value <= maxTemperature - minTemperatureand (maxTemperature - minTemperature) % the received value of theStepattribute == 0.",
                    "Verify that the DUT response contains a temperature with value between minTemperature and maxTemperature inclusive\n                                                                                               and (temperature value - minTemperature) % the received value of theStepattribute from step 4 == 0."
                ]
            }
        },
        {
            "Test Case Name": "187.2.2. [TC-TCTL-2.2] Optional Temperature number attributes with DUT as Server",
            "Test Case ID": "TC-TCTL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to TemperatureControl cluster attribute read commands.\nThis test case is only required if the TN feature is supported (TCTL.S.F00(TN)).\n===== PICS",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TCTL.S.A0001(MinTemperature)",
                    "TCTL.S.A0002(MaxTemperature)",
                    "TCTL.S.A0000(TemperatureSetpoint)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theMinTemperatureattribute",
                    "TH reads from the DUT theMaxTemperatureattribute",
                    "TH reads from the DUT theTemperatureSetpointattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Save value to minTemperature",
                    "Save value to maxTemperature.Verify that the DUT response contains a temperature with value greater than minTemperature.",
                    "Verify that the DUT response contains a temperature with value between minTemperature and maxTemperature inclusive."
                ]
            }
        },
        {
            "Test Case Name": "187.2.3. [TC-TCTL-2.3] Optional temperature level attributes with DUT as Server",
            "Test Case ID": "TC-TCTL-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to TemperatureControl cluster attribute read commands.\nThis test case is only required if the TL feature is supported (TCTL.S.F01(TL)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "TCTL.S.A0004(SelectedTemperatureLevel)",
                    "TCTL.S.A0005(SupportedTemperatureLevels)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theSelectedTemperatureLevelattribute",
                    "TH reads from the DUT theSupportedTemperatureLevelsattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a uint8 with value between 0 and 31 inclusive.",
                    "Verify that the DUT response contains a list of up to 32 strings with each string length not exceeding 16 characters."
                ]
            }
        },
        {
            "Test Case Name": "187.2.4. [TC-TCTL-3.2] Optional temperature number functionality with DUT as Server",
            "Test Case ID": "TC-TCTL-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the TemperatureControl cluster server.\nThis test case is only required if the TN feature is supported (TCTL.S.F00(TN)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "TCTL.S.A0001(MinTemperature)",
                    "TCTL.S.A0002(MaxTemperature)",
                    "TCTL.S.C00.Rsp(SetTemperatureCommand)",
                    "TCTL.S.A0000(TemperatureSetpoint)",
                    "TCTL.S.C00.Rsp(SetTemperatureCommand)",
                    "TCTL.S.A0000(TemperatureSetpoint)",
                    "TCTL.S.M.SupportsInvalidInState",
                    "TCTL.S.M.SupportsInvalidInState&\n             TCTL.S.C00.Rsp(SetTemperatureCommand)",
                    "TCTL.S.M.SupportsInvalidInState&\n             TCTL.S.A0000(TemperatureSetpoint)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Operate device such that a temperature number can be accepted",
                    "TH reads from the DUT theMinTemperatureattribute",
                    "TH reads from the DUT theMaxTemperatureattribute",
                    "TH sends commandSetTemperatureCommandwith a temperature number\n                                                 between minTemp and maxTemp inclusive, saved as setTemp.",
                    "After a few seconds, TH reads from the DUT theTemperatureSetpointattribute.",
                    "TH sends commandSetTemperatureCommandwith an invalid value.",
                    "After a few seconds, TH reads from the DUT theTemperatureSetpointattribute.",
                    "Operate device such that a temperature number cannot be accepted",
                    "TH sends commandSetTemperatureCommandwith a temperature number\n                                                 between minTemp and maxTemp inclusive that is different from setTemp.",
                    "after a few seconds, TH reads from the DUT theTemperatureSetpointattribute."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save response as minTemp",
                    "Save response as maxTemp",
                    "Verify that the DUT response contains SUCCESS",
                    "Value is the same setTemp value written in step 5",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Value is the same setTemp value written in step 5",
                    "",
                    "Verify that the DUT response contains INVALID_IN_STATE",
                    "Value is the same setTemp value written in step 5"
                ]
            }
        },
        {
            "Test Case Name": "187.2.5. [TC-TCTL-3.3] Optional temperature level functionality with DUT as Server",
            "Test Case ID": "TC-TCTL-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the TemperatureControl cluster server.\nThis test case is only required if the TL feature is supported (TCTL.S.F01(TL)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "TCTL.S.A0005(SupportedTemperatureLevels)",
                    "TCTL.S.C00.Rsp(SetTemperatureCommand)",
                    "TCTL.S.A0004(SelectedTemperatureLevel)",
                    "TCTL.S.M.SupportsInvalidInState",
                    "TCTL.S.M.SupportsInvalidInState&\n             TCTL.S.C00.Rsp(SetTemperatureCommand)",
                    "TCTL.S.M.SupportsInvalidInState&\n             TCTL.S.A0004(SelectedTemperatureLevel)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Operate device such that a temperature level can be accepted",
                    "TH reads from the DUT theSupportedTemperatureLevelsattribute",
                    "TH sends commandSetTemperatureCommandwith a value from supportedLevels saved as setLevel",
                    "After a few seconds, TH reads from the DUT theSelectedTemperatureLevelattribute",
                    "Operate device such that a temperature level cannot be accepted",
                    "TH sends commandSetTemperatureCommandwith a value from supportedLevels that is different from setLevel",
                    "after a few seconds, TH reads from the DUT theSelectedTemperatureLevelattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save result list as supportedLevels",
                    "Verify that the DUT response contains SUCCESS",
                    "Value is the same setLevel written in step 4",
                    "",
                    "Verify that the DUT response contains CONSTRAINT_ERROR",
                    "Value is the same setLevel written in step 4"
                ]
            }
        }
    ],
    "Laundry_Dryer_Controls": [
        {
            "Test Case Name": "190.1.1. [TC-DRYERCTRL-2.1] Optional Dryness attributes with DUT as Server",
            "Test Case ID": "TC-DRYERCTRL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Laundry Dryer Controls cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DRYERCTRL.S.A0000(SupportedDrynessLevels)",
                    "DRYERCTRL.S.A0001(SelectedDrynessLevel)",
                    "DRYERCTRL.S.A0001(SelectedDrynessLevel)",
                    "DRYERCTRL.S.A0001(SelectedDrynessLevel)",
                    "DRYERCTRL.S.A0001(SelectedDrynessLevel)",
                    "DRYERCTRL.S.M.ManuallyControlled",
                    "DRYERCTRL.S.M.ManuallyControlled&\n              DRYERCTRL.S.A0001(SelectedDrynessLevel)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theSupportedDrynessLevelsattribute",
                    "TH reads from the DUT theSelectedDrynessLevelattribute",
                    "TH writes a supportedSelectedDrynessLevelattribute that is within the list ofSupportedDrynessLevels",
                    "after a few seconds, TH reads from the DUT theSelectedDrynessLevelattribute",
                    "TH writes an unsupportedSelectedDrynessLevelattribute that is not in list ofSupportedDrynessLevelsto DUT",
                    "Operate device to set the condition to read only",
                    "TH writes a supportedSelectedDrynessLevelattribute to DUT while DUT is not in a valid state."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of at least 1 but up to 4 enum values that are within the range of 0 - 3.",
                    "Verify that the DUT response contains a value that is included within the set provided in the previous step and that is different than the currently selected dryness level value.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value is the same as was written in step 4",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "",
                    "Verify DUT responds w/ status INVALID_IN_STATE(0xcb)"
                ]
            }
        }
    ],
    "Laundry_Washer_Mode": [
        {
            "Test Case Name": "195.1.1. [TC-LWM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-LWM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Laundry Washer Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_LWM_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "LWM.S.A0000(SupportedModes)",
                    "LWM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value ( Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster derived tag value ( Normal, Delicate, Heavy, Whites) or in the  MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Normal, Delicate, Heavy, Whites)Verify that at least one ModeOptionsStruct entry includes the Normal mode tagSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "195.2.1. [TC-LWM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-LWM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "LWM.S.A0000(SupportedModes)",
                    "LWM.S.A0001(CurrentMode)",
                    "LWM.S.C00.Rsp(ChangeToMode)",
                    "LWM.S.M.CAN_TEST_MODE_FAILURE & LWM.S.M.CAN_MANUALLY_CONTROLLED",
                    "LWM.S.A0001(CurrentMode) & LWM.S.M.CAN_MANUALLY_CONTROLLED",
                    "LWM.S.M.CAN_TEST_MODE_FAILURE & LWM.S.C00.Rsp(ChangeToMode)",
                    "LWM.S.A0001(CurrentMode)",
                    "LWM.S.M.CAN_MANUALLY_CONTROLLED",
                    "LWM.S.A0001(CurrentMode) & LWM.S.M.CAN_MANUALLY_CONTROLLED",
                    "LWM.S.C00.Rsp(ChangeToMode)",
                    "LWM.S.A0001(CurrentMode)",
                    "LWM.S.C00.Rsp(ChangeToMode)",
                    "LWM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.LWM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.LWM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.LWM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.LWM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.LWM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.LWM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.LWM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "195.3.1. [TC-LWM-3.1] On Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-LWM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "LWM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "LWM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "LWM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "LWM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "LWM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "195.3.2. [TC-LWM-3.2] Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-LWM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0000(SupportedModes)",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0001(CurrentMode)",
                    "LWM.S.A0000(SupportedModes)",
                    "LWM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "195.3.3. [TC-LWM-3.3] On Mode and Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-LWM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0000(SupportedModes)",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0003(OnMode), LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0000(SupportedModes), LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0003(OnMode)",
                    "LWM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "LWM.S.A0002(StartUpMode)",
                    "LWM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Washer_Controls": [
        {
            "Test Case Name": "198.1.1. [TC-WASHERCTRL-2.1] Optional Spin attributes with DUT as Server",
            "Test Case ID": "TC-WASHERCTRL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Laundry Washer Controls cluster attribute read commands.\nThis test case is only required if the SPIN feature is supported (WASHERCTRL.S.F00(SPIN)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WASHERCTRL.S.A0000(SpinSpeeds)",
                    "WASHERCTRL.S.A0001(SpinSpeedCurrent)",
                    "WASHERCTRL.S.A0001(SpinSpeedCurrent)",
                    "WASHERCTRL.S.A0001(SpinSpeedCurrent)",
                    "WASHERCTRL.S.A0001(SpinSpeedCurrent)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theSpinSpeedsattribute",
                    "TH reads from the DUT the theSpinSpeedCurrentattribute",
                    "TH writes a supportedSpinSpeedCurrentattribute that is a valid index into the list of spin speeds (0 to numSpinSpeeds-1)",
                    "after a few seconds, TH reads from the DUT theSpinSpeedCurrentattribute",
                    "TH writes an unsupportedSpinSpeedCurrentattribute that is other than 0 to DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of strings. The maximum size of  the list is 16. Record the actual size (number of strings) as numSpinSpeeds.",
                    "Verify that the DUT response contains a uint8 with value between 0 and numSpinSpeeds-1 inclusive.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value is the same as was written in step 4",
                    "Verify that the DUT response contains Status CONSTRAINT_ERROR response"
                ]
            }
        },
        {
            "Test Case Name": "198.1.2. [TC-WASHERCTRL-2.2] Optional rinse attributes with DUT as Server",
            "Test Case ID": "TC-WASHERCTRL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Laundry Washer Controls cluster attribute read commands.\nThis test case is only required if the RINSE feature is supported (WASHERCTRL.S.F01(RINSE)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "WASHERCTRL.S.A0002(NumberOfRinses)",
                    "WASHERCTRL.S.A0003(SupportedRinses)",
                    "WASHERCTRL.S.A0002(NumberOfRinses)",
                    "WASHERCTRL.S.A0002(NumberOfRinses)",
                    "WASHERCTRL.S.A0002(NumberOfRinses)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theNumberOfRinsesattribute",
                    "TH reads from the DUT the theSupportedRinsesattribute",
                    "TH writes a supportedNumberOfRinsesattribute to DUT within the range of the SupportedRinses list",
                    "after a few seconds, TH reads from the DUT theNumberOfRinsesattribute",
                    "TH writes an unsupportedNumberOfRinsesattribute to DUT while DUT is not in a valid state."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains if not null, an enum with up to 4 values.",
                    "Verify that the DUT response contains a list of enums each containing up to 4 values.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value is the same as was written in step 4",
                    "Verify that the DUT response contains Status INVALID_IN_STATE response."
                ]
            }
        }
    ],
    "Fan_Control": [
        {
            "Test Case Name": "201.1.1. [TC-FAN-2.1] Mandatory Attributes with DUT as Server",
            "Test Case ID": "TC-FAN-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Fan Control cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0000(FanMode)",
                    "FAN.S.A0001(FanModeSequence)",
                    "FAN.S.A0002(PercentSetting)",
                    "FAN.S.A0003(PercentCurrent)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theFanModeattribute",
                    "TH reads from the DUT the theFanModeSequenceattribute",
                    "TH reads from the DUT the thePercentSettingattribute",
                    "TH reads from the DUT the thePercentCurrentattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an enum8 with a value between 0 and 5, but not including 4",
                    "Verify that the DUT response contains an enum8 with value between 0 and 5 inclusive.",
                    "Verify that the DUT response contains a uint8 with value between 0 and 100 inclusive.",
                    "Verify that the DUT response contains a uint8 with value between 0 and 100 inclusive."
                ]
            }
        },
        {
            "Test Case Name": "201.1.2. [TC-FAN-2.2] Optional speed attributes with DUT as Server",
            "Test Case ID": "TC-FAN-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Fan Control cluster attribute read commands.\nThis test case is only required if the SPD feature is supported (FAN.S.F00(SPD)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0004(SpeedMax)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.A0006(SpeedCurrent)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theSpeedMaxattribute",
                    "TH reads from the DUT the theSpeedSettingattribute",
                    "TH reads from the DUT the theSpeedCurrentattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a uint8 with value between 1 and 100 inclusive.",
                    "Verify that the DUT response contains a uint8 with value between 0 and the value of SpeedMax inclusive.",
                    "Verify that the DUT response contains a uint8 with value between 0 and the value of SpeedMax inclusive."
                ]
            }
        },
        {
            "Test Case Name": "201.1.3. [TC-FAN-2.3] Optional rock attributes with DUT as Server",
            "Test Case ID": "TC-FAN-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Fan Control cluster attribute read commands.\nThis test case is only required if the RCK feature is supported (FAN.S.F02(RCK)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0007(RockSupport)",
                    "FAN.S.A0008(RockSetting)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theRockSupportattribute",
                    "TH reads from the DUT the theRockSettingattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a map8 bitmap.",
                    "Verify that the DUT response contains a map8 bitmap."
                ]
            }
        },
        {
            "Test Case Name": "201.1.4. [TC-FAN-2.4] Optional wind attributes with DUT as Server",
            "Test Case ID": "TC-FAN-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Fan Control cluster attribute read commands.\nThis test case is only required if the WND feature is supported (FAN.S.F03(WND)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0009(WindSupport)",
                    "FAN.S.A000a(WindSetting)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theWindSupportattribute",
                    "TH reads from the DUT the theWindSettingattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a map8 bitmap.",
                    "Verify that the DUT response contains a map8 bitmap."
                ]
            }
        },
        {
            "Test Case Name": "201.1.5. [TC-FAN-2.5] Optional direction attributes with DUT as Server",
            "Test Case ID": "TC-FAN-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Fan Control cluster attribute read commands.\nThis test case is only required if the DIR feature is supported (FAN.S.F05(DIR)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.F05(DIR)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT the theAirflowDirectionattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an AirflowDirectionEnum."
                ]
            }
        },
        {
            "Test Case Name": "201.1.6. [TC-FAN-3.1] Mandatory functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the mandatory functionality of the Fan Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theFanModeattribute and store",
                    "TH writes to the DUT theFanModeattribute to the High value",
                    "After a few seconds, TH reads from the DUT theFanModeattribute",
                    "TH reads from the DUT thePercentSettingattribute and store",
                    "TH writes to the DUT theFanModeto the Off value",
                    "After a few seconds, TH reads from the DUT thePercentSettingattribute",
                    "TH reads from the DUT thePercentCurrentattribute",
                    "TH reads from the DUT thePercentSettingattribute and store",
                    "TH writes to the DUT thePercentSettingto a non-zero value",
                    "After a few seconds, TH reads from the DUT thePercentSettingattribute",
                    "After a few seconds, TH reads from the DUT thePercentCurrentattribute",
                    "TH reads from the DUT theFanModeattribute and store",
                    "TH writes to the DUT thePercentSettingto a zero value",
                    "After a few seconds, TH reads from the DUT theFanModeattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a FanModeEnum",
                    "Device shall return either SUCCESS or INVALID_IN_STATE",
                    "If device returned SUCCESS in 2b, value shall be the same as was written in step 2b. If device returned INVALID_IN_STATE in 2b, value shall be the same as was read in step 2a",
                    "Verify that the DUT response contains a percentage value",
                    "Device shall return either SUCCESS or INVALID_IN_STATE",
                    "If device returned SUCCESS in 3b, the value shall be zero. If device returned INVALID_IN_STATE in 3b, the value shall equal the value read in step 3a",
                    "If device returned SUCCESS in 3b, the value shall be zero. If device returned INVALID_IN_STATE in 3b, the value shall equal the value read in step 3a",
                    "Verify that the DUT response contains a percentage value",
                    "Device shall return either SUCCESS or INVALID_IN_STATE",
                    "If device returned SUCCESS in 4b, value shall be the same as was written in step 4b. If device returned INVALID_IN_STATE in 4b, value shall be the same as was read in step 4a",
                    "If device returned SUCCESS in 4b, value shall be the same as was written in step 4b. If device returned INVALID_IN_STATE in 4b, value shall be the same as was read in step 4a",
                    "Verify that the DUT response contains a FanModeEnum",
                    "Device shall return either SUCCESS or INVALID_IN_STATE",
                    "If device returned SUCCESS in 5b, value shall be 0. If device returned INVALID_IN_STATE in 5b, value shall be the same as was read in step 5a"
                ]
            }
        },
        {
            "Test Case Name": "201.1.7. [TC-FAN-3.2] Optional speed functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Fan Control cluster server.\nThis test case is only required if the SPD feature is supported (FAN.S.F00(SPD)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theSpeedSettingattribute and store",
                    "TH reads from the DUT theSpeedMaxattribute",
                    "TH writes to the DUT theSpeedSettinga value less than or equal to the value read in step 3",
                    "After a few seconds, TH reads from the DUT theSpeedSettingattribute",
                    "After a few seconds, TH reads from the DUT theSpeedCurrentattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a uint8 with value between 0 and the value of SpeedMax inclusive.",
                    "Verify that the DUT response contains a uint8 with value between 1 and 100 inclusive.",
                    "Device shall return either SUCCESS or INVALID_VALUE",
                    "If device returned SUCCESS in 4, value shall be the same as was written in step 4. If device returned INVALID_VALUE in 4, value shall be the same as was read in step 2",
                    "If device returned SUCCESS in 4, value shall be the same as was written in step 4. If device returned INVALID_VALUE in 4, value shall be the same as was read in step 2"
                ]
            }
        },
        {
            "Test Case Name": "201.1.8. [TC-FAN-3.3] Optional rock functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Fan Control cluster server.\nThis test case is only required if the RCK feature is supported (FAN.S.F02(RCK)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0007(RockSupport)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)",
                    "FAN.S.A0008(RockSetting)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theRockSupportattribute and store",
                    "If theRockSupportattribute read above has bit 0 set,\n                                      then TH writes to the DUT theRockSettingattribute with 0x01",
                    "If the previous step is written, after a few seconds,\n                                      TH reads from the DUT theRockSettingattribute",
                    "If theRockSupportattribute read above has bit 1 set,\n                                      then TH writes to the DUT theRockSettingattribute with 0x02",
                    "If the previous step is written, after a few seconds,\n                                      TH reads from the DUT theRockSettingattribute",
                    "If theRockSupportattribute read above has bit 2 set,\n                                      then TH writes to the DUT theRockSettingattribute with 0x04",
                    "If the previous step is written, after a few seconds,\n                                      TH reads from the DUT theRockSettingattribute",
                    "TH writes to the DUT theRockSettingattribute with 0x00"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Value is 0x01",
                    "",
                    "Value is 0x02",
                    "",
                    "Value is 0x04",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "201.1.9. [TC-FAN-3.4] Optional wind functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Fan Control cluster server.\nThis test case is only required if the WND feature is supported (FAN.S.F03(WND)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0009(WindSupport)",
                    "FAN.S.A000a(WindSetting)",
                    "FAN.S.A000a(WindSetting)",
                    "FAN.S.A000a(WindSetting)",
                    "FAN.S.A000a(WindSetting)",
                    "FAN.S.A000a(WindSetting)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theWindSupportattribute and store",
                    "If theWindSupportattribute read above has bit 0 set,\n                                      then TH writes to the DUT theWindSettingattribute with 0x01",
                    "If the previous step is written, after a few seconds,\n                                      TH reads from the DUT theWindSettingattribute",
                    "If theWindSupportattribute read above has bit 1 set,\n                                      then TH writes to the DUT theWindSettingattribute with 0x02",
                    "If the previous step is written, after a few seconds,\n                                      TH reads from the DUT theWindSettingattribute",
                    "TH writes to the DUT theWindSettingattribute with 0x00"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Value is 0x01",
                    "",
                    "Value is 0x02",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "201.1.10. [TC-FAN-3.5] Optional step functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Fan Control cluster server.\nThis test case is only required if the STEP feature is supported (FAN.S.F04(STEP)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c",
                    "6a",
                    "6b",
                    "6c",
                    "7a",
                    "7b",
                    "7c",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "9a",
                    "9b",
                    "9c",
                    "9d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A0002(PercentSetting)",
                    "FAN.S.A0003(PercentCurrent)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0003(PercentCurrent)",
                    "FAN.S.A0002(PercentSetting)",
                    "FAN.S.A0003(PercentCurrent)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0003(PercentCurrent)",
                    "FAN.S.A0004(SpeedMax)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)",
                    "FAN.S.A0004(SpeedMax)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)",
                    "FAN.S.A0004(SpeedMax)",
                    "FAN.S.A0005(SpeedSetting)",
                    "FAN.S.C00.Rsp(Step)",
                    "FAN.S.A0006(SpeedCurrent)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH writes to the DUT thePercentSettingattribute with50",
                    "after a few seconds, TH reads from the DUT thePercentCurrentattribute",
                    "TH sendsStep commandto DUT with Direction set to Increase",
                    "after a few seconds, TH reads from the DUT thePercentCurrentattribute",
                    "TH writes to the DUT thePercentSettingattribute with50",
                    "after a few seconds, TH reads from the DUT thePercentCurrentattribute",
                    "TH sendsStep commandto DUT with Direction set to Decrease",
                    "after a few seconds, TH reads from the DUT thePercentCurrentattribute",
                    "TH reads from the DUT theSpeedMaxattribute",
                    "TH writes to the DUT theSpeedSettingattribute with value read from step4a",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Increase and Wrap set to false",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute",
                    "TH writes to the DUT theSpeedSettingattribute with value read from step4a",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Increase, Wrap set to true, and LowestOff set to false",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute",
                    "TH writes to the DUT theSpeedSettingattribute with value read from step4a",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Increase, Wrap set to true, and LowestOff set to true",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute",
                    "TH writes to the DUT theSpeedSettingattribute with a value of 1",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Decrease and Wrap set to false and LowestOff set to\n                                                               false",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute",
                    "TH reads from the DUT theSpeedMaxattribute",
                    "TH writes to the DUT theSpeedSettingattribute with a value of 1",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Decrease, Wrap set to true, and LowestOff set to false",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute",
                    "TH reads from the DUT theSpeedMaxattribute",
                    "TH writes to the DUT theSpeedSettingattribute with value of zero",
                    "after a few seconds, TH sendsStep commandto DUT\n                                                               with Direction set to Decrease, Wrap set to true, and LowestOff set to true",
                    "after a few seconds, TH reads from the DUT theSpeedCurrentattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "Value is higher than the value read in step 2b",
                    "",
                    "",
                    "",
                    "Value is lower than the value read in step 3b",
                    "",
                    "",
                    "",
                    "Value is the same as the value read in step 4a",
                    "",
                    "",
                    "Value should be 1 (one)",
                    "",
                    "",
                    "Value should be 0 (zero)",
                    "",
                    "",
                    "Value should be 1 (one)",
                    "",
                    "",
                    "",
                    "Value should be the same as the value read in step 8a",
                    "",
                    "",
                    "",
                    "Value should be the same as the value read in step 9a"
                ]
            }
        },
        {
            "Test Case Name": "201.1.11. [TC-FAN-3.6] Optional direction functionality with DUT as Server",
            "Test Case ID": "TC-FAN-3.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Fan Control cluster server.\nThis test case is only required if the DIR feature is supported (FAN.S.F05(DIR)).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "FAN.S.A000b(AirflowDirection)",
                    "FAN.S.A000b(AirflowDirection)",
                    "FAN.S.A000b(AirflowDirection)",
                    "FAN.S.A000b(AirflowDirection)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH writes a value ofForwardto the DUT",
                    "after a few seconds, TH reads from the DUT theAirflowDirectionattribute",
                    "TH writes a value ofReverseto the DUT",
                    "after a few seconds, TH reads from the DUT theAirflowDirectionattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Value isForward",
                    "",
                    "Value isReverse"
                ]
            }
        }
    ],
    "Dishwasher_Mode": [
        {
            "Test Case Name": "206.1.1. [TC-DISHM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-DISHM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Dishwasher Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_DISHM_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DISHM.S.A0000(SupportedModes)",
                    "DISHM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster-derived tag value (Normal, Heavy, Light) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Normal, Heavy, Light)Verify that at least one ModeOptionsStruct entry includes the Normal mode tagSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "206.2.1. [TC-DISHM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-DISHM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DISHM.S.A0000(SupportedModes)",
                    "DISHM.S.A0001(CurrentMode)",
                    "DISHM.S.C00.Rsp(ChangeToMode)",
                    "DISHM.S.M.CAN_TEST_MODE_FAILURE & DISHM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DISHM.S.A0001(CurrentMode) & DISHM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DISHM.S.M.CAN_TEST_MODE_FAILURE & DISHM.S.C00.Rsp(ChangeToMode)",
                    "DISHM.S.A0001(CurrentMode)",
                    "DISHM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DISHM.S.A0001(CurrentMode) & DISHM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DISHM.S.C00.Rsp(ChangeToMode)",
                    "DISHM.S.A0001(CurrentMode)",
                    "DISHM.S.C00.Rsp(ChangeToMode)",
                    "DISHM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.DISHM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.DISHM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.DISHM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.DISHM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.DISHM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.DISHM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.DISHM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "206.3.1. [TC-DISHM-3.1] On Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DISHM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "DISHM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "DISHM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "DISHM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "DISHM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "206.3.2. [TC-DISHM-3.2] Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0000(SupportedModes)",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0001(CurrentMode)",
                    "DISHM.S.A0000(SupportedModes)",
                    "DISHM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "206.3.3. [TC-DISHM-3.3] On Mode and Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0000(SupportedModes)",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0003(OnMode), DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0000(SupportedModes), DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0003(OnMode)",
                    "DISHM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "DISHM.S.A0002(StartUpMode)",
                    "DISHM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Dishwasher_Alarm": [
        {
            "Test Case Name": "209.1.1. [TC-DISHALM-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-DISHALM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can respond to Dishwasher Alarm cluster attribute read commands.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.A0000(Mask)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0001(Latch)",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.A0003(Supported)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theMaskattribute",
                    "TH reads from the DUT theLatchattribute",
                    "TH reads from the DUT theStateattribute",
                    "TH reads from the DUT theSupportedattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a 32-bit value.",
                    "Verify that the DUT response contains a 32-bit value.",
                    "Verify that the DUT response contains a 32-bit value.",
                    "Verify that the DUT response contains a 32-bit value."
                ]
            }
        },
        {
            "Test Case Name": "209.1.2. [TC-DISHALM-3.1] Inflow alarm functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHALM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional Inflow functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theInflowalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theInflowalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 0 (Inflow) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 0 set to TRUE.",
                    "Bit 0 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 0 set to FALSE\n                                                                                                             if bit 0 in LatchResponse is 0.",
                    "Bit 0 of response SHALL be 0 if bit 0 of LatchResponse is 0.Bit 0 of response SHALL be 1 if bit 0 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 0 set to FALSE\n                                                                                                             if bit 0 of LatchResponse is 1.",
                    "Bit 0 of response SHALL be 0."
                ]
            }
        },
        {
            "Test Case Name": "209.1.3. [TC-DISHALM-3.2] Drain alarm functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHALM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional Drain functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theDrainalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theDrainalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 1 (Drain) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 1 set to TRUE.",
                    "Bit 1 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 1 set to FALSE\n                                                                                                             if bit 1 in LatchResponse is 0.",
                    "Bit 1 of response SHALL be 0 if bit 1 of LatchResponse is 0.Bit 1 of response SHALL be 1 if bit 1 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 1 set to FALSE\n                                                                                                             if bit 1 of LatchResponse is 1.",
                    "Bit 1 of response SHALL be 0."
                ]
            }
        },
        {
            "Test Case Name": "209.1.4. [TC-DISHALM-3.3] Door alarm functionality with DUT as Server",
            "Test Case ID": "TC-DISHALM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional Door functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theDooralarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theDooralarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 2 (Door) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 2 set to TRUE.",
                    "Bit 2 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 2 set to FALSE\n                                                                                                             if bit 2 in LatchResponse is 0.",
                    "Bit 2 of response SHALL be 0 if bit 2 of LatchResponse is 0.Bit 2 of response SHALL be 1 if bit 2 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 2 set to FALSE\n                                                                                                             if bit 2 of LatchResponse is 1.",
                    "Bit 2 of response SHALL be 0."
                ]
            }
        },
        {
            "Test Case Name": "209.1.5. [TC-DISHALM-3.4] Temperature Low alarm functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHALM-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional TempLow functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theTempLowalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theTempLowalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 3 (TempLow) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 3 set to TRUE.",
                    "Bit 3 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 3 set to FALSE\n                                                                                                             if bit 3 in LatchResponse is 0.",
                    "Bit 3 of response SHALL be 0 if bit 3 of LatchResponse is 0.Bit 3 of response SHALL be 1 if bit 3 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 3 set to FALSE\n                                                                                                             if bit 3 of LatchResponse is 1.",
                    "Bit 3 of response SHALL be 0."
                ]
            }
        },
        {
            "Test Case Name": "209.1.6. [TC-DISHALM-3.5] Temperature High alarm functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHALM-3.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional TempHigh functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theTempHighalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theTempHighalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 4 (TempHigh) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 4 set to TRUE.",
                    "Bit 4 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 4 set to FALSE\n                                                                                                             if bit 4 in LatchResponse is 0.",
                    "Bit 4 of response SHALL be 0 if bit 4 of LatchResponse is 0.Bit 4 of response SHALL be 1 if bit 4 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 4 set to FALSE\n                                                                                                             if bit 4 of LatchResponse is 1.",
                    "Bit 4 of response SHALL be 0."
                ]
            }
        },
        {
            "Test Case Name": "209.1.7. [TC-DISHALM-3.6] Water Level alarm functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-DISHALM-3.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional WaterLevel functionality of the Dishwasher Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DISHALM.S.E00(Notify)",
                    "DISHALM.S.A0001(Latch)",
                    "!DISHALM.S.A0001(Latch)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.M.ManuallyControlled",
                    "DISHALM.S.A0002(State)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.C00.Rsp(Reset)",
                    "DISHALM.S.F00(Reset)&\n              DISHALM.S.A0002(State)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up subscription toNotifyevent",
                    "TH reads from the DUT theLatchattribute.",
                    "",
                    "Operate device to set the condition to raise theWaterLevelalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "Operate device to set the condition to lower theWaterLevelalarm",
                    "After a few seconds, TH reads from the DUT theStateattribute",
                    "TH sends commandResetto DUT\n                                   with bit 5 (WaterLevel) of Alarms set to 1",
                    "After a few seconds, TH reads from the DUT theStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Save the value returned in the response as LatchResponse.",
                    "Set the value of LatchResponse to 0.",
                    "ReceiveNotifyevent with State bit 5 set to TRUE.",
                    "Bit 5 of response SHALL be 1.",
                    "ReceiveNotifyevent with State bit 5 set to FALSE\n                                                                                                             if bit 5 in LatchResponse is 0.",
                    "Bit 5 of response SHALL be 0 if bit 5 of LatchResponse is 0.Bit 5 of response SHALL be 1 if bit 5 of LatchResponse is 1.",
                    "ReceiveNotifyevent with State bit 5 set to FALSE\n                                                                                                             if bit 5 of LatchResponse is 1.",
                    "Bit 5 of response SHALL be 0."
                ]
            }
        }
    ],
    "Operational_State": [
        {
            "Test Case Name": "213.1.1. [TC-OPSTATE-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-OPSTATE-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Operational State Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "7",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "7e",
                    "7f",
                    "7g",
                    "7h"
                ],
                "Ref": [
                    "",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6"
                ],
                "PICS": [
                    "",
                    "OPSTATE.S.A0000(PhaseList)",
                    "OPSTATE.S.A0001(CurrentPhase)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.A0003(OperationalStateList)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_STOPPED",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_STOPPED",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_RUNNING",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_RUNNING",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_PAUSED",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_PAUSED",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_ERROR",
                    "OPSTATE.S.A0004(OperationalState) & OPSTATE.S.M.ST_ERROR",
                    "OPSTATE.S.A0005(OperationalError)",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_NO_ERROR",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_NO_ERROR",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE",
                    "OPSTATE.S.A0005(OperationalError) & OPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads from the DUT thePhaseListattribute",
                    "TH reads from the DUT theCurrentPhaseattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Running(0x01) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Paused(0x02) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the NoError(0x00) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToStartOrResume(0x01) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToCompleteOperation(0x02) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the CommandInvalidInState(0x03) error state",
                    "TH reads from the DUT theOperationalErrorattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of strings, no more than 32 or null. Record 'phase-list-size', the number of entries in the list if not null or an empty list, for use in step 3.",
                    "Verify that the DUT response contains a uint8 value or null. This shall only be null ifPhaseListis also null or an empty list. If not null or an empty list, ensure that it is equal to a value between 0 and 'phase-list-size' minus 1.",
                    "Verify that the DUT response contains an instance of elapsed-s (derived from uint32) or null. If not null, Value has to be between a range of 0 to 259200.",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). Each struct shall contain an OperationalStateID (enum8 that defines the state) and an OperationalStateLabel, which is a user understandable string describing the state. For each instance of an OperationalStateID, verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03)) or in the range 0x80 to 0xBF. The list shall include a struct with an OperationalStateID of Error(0x03).",
                    "Verify that the DUT response contains an instance of enum8. This is an OperationalStateID (value that defines the state) from the set of OperationalStateIDs in the list of structs returned in step 5. Verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Stopped(0x00)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Running(0x01)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Paused(0x02)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Error(0x03)",
                    "Verify that the DUT response contains an instance of ErrorStateStruct.This shall contain an ErrorStateId (enum8 value that defines the error).If the ErrorStateId is in the range 0x80 to 0xBF then an ErrorStateLabel, which is a user understandable string describing the state which may be empty.If the ErrorStateId is not in the range 0x80 to 0xBF then no ErrorStateLabel shall be present.Optionally an ErrorStateDetails, which is an additional user understandable string.Verify the ErrorStateID is a defined error (NoError(0x00), UnableToStartOrResume(0x01), UnableToCompleteOperation(0x02), CommandInvalidInState(0x03)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of NoError(0x00)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToStartOrResume(0x01)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToCompleteOperation(0x02)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of CommandInvalidInState(0x03)"
                ]
            }
        },
        {
            "Test Case Name": "213.1.2. [TC-OPSTATE-2.2] Start and Stop commands with DUT as Server",
            "Test Case ID": "TC-OPSTATE-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the Start and Stop commands of the Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "",
                    "",
                    "1.12.6",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "",
                    "1.12.6",
                    "1.12.7.3",
                    "1.12.7.2",
                    "1.12.7.2",
                    "1.12.7.2",
                    "",
                    "1.12.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    "OPSTATE.S.A0003(OperationalStateList)",
                    "OPSTATE.S.C02.Rsp(Start),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.A0005(OperationalError)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.A0000(PhaseList)",
                    "OPSTATE.S.A0001(CurrentPhase)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.C02.Rsp(Start),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.C01.Rsp(Stop),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.C01.Rsp(Stop),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME,OPSTATE.S.C02.Rsp(Start),OPSTATE.S.C04.Tx(OperationalCommandResponse)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the DUT into a state wherein it can receive a Start Command",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT thePhaseListattribute",
                    "TH reads from the DUT theCurrentPhaseattribute",
                    "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH sends Start command to the DUT",
                    "TH sends Stop command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Stop command to the DUT",
                    "Manually put the DUT into a state wherein it cannot receive a Start Command",
                    "TH sends Start command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). The list shall include structs with the following OperationalStateIds: Running(0x01), Stopped(0x00), and Error(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains the ErrorStateId set to NoError(0x00).",
                    "Verify that the DUT response contains an integer value, Value has to be between a range of 1 to 259200 or null. Record this value in 'initial-countdown-time'.",
                    "Verify that the DUT response contains a list of possible phases or null. If not null, record 'phase-list-size', the number of entries in the list.",
                    "Verify that the DUT response contains a uint8 value or null. Value has to be between a range of 0 to the size of 'phase-list-size' minus 1 in casePhaseListis different than null. Otherwise, it shall be null.",
                    "",
                    "Verify that the DUT response contains a non-zero integer value that is approximately the wait time from step 10 less than 'initial-countdown-time' or null.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Stopped(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to UnableToStartOrResume(0x01)."
                ]
            }
        },
        {
            "Test Case Name": "213.1.3. [TC-OPSTATE-2.3] Pause and Resume commands with DUT as Server",
            "Test Case ID": "TC-OPSTATE-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the Pause and Resume commands of the Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.1",
                    "1.12.6",
                    "",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    "OPSTATE.S.A0003(OperationalStateList)",
                    "OPSTATE.S.C00.Rsp(Pause),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.C00.Rsp(Pause),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.C03.Rsp(Resume),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.C03.Rsp(Resume),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.M.ST_STOPPED",
                    "OPSTATE.S.C00.Rsp(Pause),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.C03.Rsp(Resume),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.M.ST_ERROR",
                    "OPSTATE.S.C00.Rsp(Pause),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.C03.Rsp(Resume),OPSTATE.S.C04.Tx(OperationalCommandResponse)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the DUT into a state wherein it can receive a Pause Command",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH sends Pause command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). The list shall include structs with the following OperationalStateIds: Running(0x01), Paused(0x02), and Error(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Paused(0x02).",
                    "Verify that the DUT response contains an integer value, Value has to be between a range of 1 to 259200 or null. Record this value in 'initial-countdown-time'.",
                    "",
                    "Verify that the DUT response contains a non-zero integer value that is the same as 'initial-countdown-time' or null.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03)."
                ]
            }
        },
        {
            "Test Case Name": "213.1.4. [TC-OPSTATE-2.4] Mandatory Events with DUT as Server",
            "Test Case ID": "TC-OPSTATE-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the generation and population of the OperationalError event of the Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OPSTATE.S.E00(OperationalError)",
                    "OPSTATE.S.E00(OperationalError)",
                    "OPSTATE.S.A0004(OperationalState)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up a subscription to theOperationalErrorevent",
                    "At the DUT take the vendor defined action to generate anOperationalErrorevent",
                    "TH reads from the DUT theOperationalStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Receive anOperationalErrorevent containing an ErrorState struct populated as follows:An ErrorStateID that shall contain an enum 8. Verify the ErrorStateID is valid for an for an Error State (UnableToStartOrResume(0x01), UnableToCompleteOperation(0x02), CommandInvalidInState(0x03) or in the range 0x80 to 0xBF).If the ErrorStateID is in the range 0x80 to 0xBF, then an ErrorStateLabel that is a human readable string.If the ErrorStateId is not in the range 0x80 to 0xBF then no ErrorStateLabel shall be present.Optionally an ErrorStateDetails. If present, this shall be a human readable string.",
                    "Verify that the DUT response contains an enum8 set to Error(0x03)."
                ]
            }
        },
        {
            "Test Case Name": "213.1.5. [TC-OPSTATE-2.5] Optional Events with DUT as Server - REMOVED",
            "Test Case ID": "TC-OPSTATE-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the generation and population of the OperationCompletion event of the Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "1.12.7.3",
                    "1.12.6",
                    "1.12.7.3",
                    "",
                    "1.12.7.2",
                    "",
                    "1.12.7.2",
                    "1.12.7.2",
                    "",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.7.1",
                    "1.12.7.2",
                    "",
                    "1.12.7.4",
                    "1.12.7.3",
                    "",
                    "1.12.7.2",
                    ""
                ],
                "PICS": [
                    "",
                    "OPSTATE.S.E01(OperationCompletion)",
                    "",
                    "OPSTATE.S.C02.Rsp(Start),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0002(CountdownTime)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "",
                    "OPSTATE.S.C01.Rsp(Stop),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.E01(OperationCompletion)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "",
                    "",
                    "OPSTATE.S.C02.Rsp(Start),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "OPSTATE.S.C00.Rsp(Pause),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "",
                    "OPSTATE.S.C03.Rsp(Resume),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.A0004(OperationalState)",
                    "",
                    "OPSTATE.S.C01.Rsp(Stop),OPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OPSTATE.S.E01(OperationCompletion)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up a subscription to theOperationCompletionevent",
                    "Manually put the DUT into a state wherein it can receive a Start Command",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for initial-countdown-time",
                    "TH sends Stop command to the DUT",
                    "TH waits for OperationCompletion event",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Restart DUT",
                    "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for half of initial-countdown-time",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for initial-countdown-time",
                    "TH sends Stop command to the DUT",
                    "TH waits for OperationCompletion event"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Record this value in 'initial-countdown-time'.Note: Continue with this test case only whenCountdownTimeis not null",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify TH receives an OperationCompletion event from the DUT\nwith the following fields populated as follows:CompletionErrorCode set to NoError(0x00)TotalOperationalTime is approximately initial-countdown-time\nor nullPausedTime is zero",
                    "Verify that the DUT response contains an enum8 set to Stopped(0x00).",
                    "",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Paused(0x02).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify TH receives anOperationCompletionevent with the following fields populated as follows:CompletionErrorCode set to NoError(0x00)TotalOperationalTime is approximately 1.5 times the initial-countdown-time or nullPausedTime is 0.5 times the  initial-countdown-time"
                ]
            }
        }
    ],
    "Oven_Cavity_Operational_State": [
        {
            "Test Case Name": "217.1.1. [TC-OVENOPSTATE-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-OVENOPSTATE-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Oven Cavity Operational State Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "7",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "7e",
                    "7f",
                    "7g",
                    "7h"
                ],
                "Ref": [
                    "",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6"
                ],
                "PICS": [
                    "",
                    "OVENOPSTATE.S.A0000(PhaseList)",
                    "OVENOPSTATE.S.A0001(CurrentPhase)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.A0003(OperationalStateList)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_STOPPED",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_STOPPED",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_RUNNING",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_RUNNING",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_PAUSED",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_PAUSED",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_ERROR",
                    "OVENOPSTATE.S.A0004(OperationalState) & OVENOPSTATE.S.M.ST_ERROR",
                    "OVENOPSTATE.S.A0005(OperationalError)",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_NO_ERROR",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_NO_ERROR",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE",
                    "OVENOPSTATE.S.A0005(OperationalError) & OVENOPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads from the DUT thePhaseListattribute",
                    "TH reads from the DUT theCurrentPhaseattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Running(0x01) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Paused(0x02) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the NoError(0x00) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToStartOrResume(0x01) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToCompleteOperation(0x02) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the CommandInvalidInState(0x03) error state",
                    "TH reads from the DUT theOperationalErrorattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of strings, no more than 32 or null. Record 'phase-list-size', the number of entries in the list if not null or an empty list, for use in step 3.",
                    "Verify that the DUT response contains a uint8 value or null. This shall only be null ifPhaseListis also null or an empty list. If not null or an empty list, ensure that it is equal to a value between 0 and 'phase-list-size' minus 1.",
                    "Verify that the DUT response contains an instance of elapsed-s (derived from uint32) or null. If not null, Value has to be between a range of 0 to 259200.",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). Each struct shall contain an OperationalStateID (enum8 that defines the state) and an OperationalStateLabel, which is a user understandable string describing the state. For each instance of an OperationalStateID, verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03)) or in the range 0x80 to 0xBF. The list shall include a struct with an OperationalStateID of Error(0x03).",
                    "Verify that the DUT response contains an instance of enum8. This is an OperationalStateID (value that defines the state) from the set of OperationalStateIDs in the list of structs returned in step 5. Verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Stopped(0x00)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Running(0x01)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Paused(0x02)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Error(0x03)",
                    "Verify that the DUT response contains an instance of ErrorStateStruct.This shall contain an ErrorStateId (enum8 value that defines the error).If the ErrorStateId is in the range 0x80 to 0xBF then an ErrorStateLabel, which is a user understandable string describing the state which may be empty.If the ErrorStateId is not in the range 0x80 to 0xBF then no ErrorStateLabel shall be present.Optionally an ErrorStateDetails, which is an additional user understandable string.Verify the ErrorStateID is a defined error (NoError(0x00), UnableToStartOrResume(0x01), UnableToCompleteOperation(0x02), CommandInvalidInState(0x03)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of NoError(0x00)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToStartOrResume(0x01)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToCompleteOperation(0x02)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of CommandInvalidInState(0x03)"
                ]
            }
        },
        {
            "Test Case Name": "217.1.2. [TC-OVENOPSTATE-2.2] Start and Stop commands with DUT as Server",
            "Test Case ID": "TC-OVENOPSTATE-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the Start and Stop commands of the Oven Cavity Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "",
                    "",
                    "1.12.6",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "",
                    "1.12.6",
                    "1.12.7.3",
                    "1.12.7.2",
                    "1.12.7.2",
                    "1.12.7.2",
                    "",
                    "1.12.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    "OVENOPSTATE.S.A0003(OperationalStateList)",
                    "OVENOPSTATE.S.C02.Rsp(Start),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.A0005(OperationalError)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.A0000(PhaseList)",
                    "OVENOPSTATE.S.A0001(CurrentPhase)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.C02.Rsp(Start),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.C01.Rsp(Stop),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.C01.Rsp(Stop),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "OVENOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME,OVENOPSTATE.S.C02.Rsp(Start),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the DUT into a state wherein it can receive a Start Command",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT thePhaseListattribute",
                    "TH reads from the DUT theCurrentPhaseattribute",
                    "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH sends Start command to the DUT",
                    "TH sends Stop command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Stop command to the DUT",
                    "Manually put the DUT into a state wherein it cannot receive a Start Command",
                    "TH sends Start command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). The list shall include structs with the following OperationalStateIds: Running(0x01), Stopped(0x00), and Error(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains the ErrorStateId set to NoError(0x00).",
                    "Verify that the DUT response contains an integer value, Value has to be between a range of 1 to 259200 or null. Record this value in 'initial-countdown-time'.",
                    "Verify that the DUT response contains a list of possible phases or null. If not null, record 'phase-list-size', the number of entries in the list.",
                    "Verify that the DUT response contains a uint8 value or null. Value has to be between a range of 0 to the size of 'phase-list-size' minus 1 in casePhaseListis different than null. Otherwise, it shall be null.",
                    "",
                    "Verify that the DUT response contains a non-zero integer value that is approximately the wait time from step 10 less than 'initial-countdown-time' or null.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Stopped(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to UnableToStartOrResume(0x01)."
                ]
            }
        },
        {
            "Test Case Name": "217.1.3. [TC-OVENOPSTATE-2.3] Pause and Resume commands with DUT as Server",
            "Test Case ID": "TC-OVENOPSTATE-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the Pause and Resume commands of the Oven Cavity Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.1",
                    "1.12.6",
                    "",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    "OVENOPSTATE.S.A0003(OperationalStateList)",
                    "OVENOPSTATE.S.C00.Rsp(Pause),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.C00.Rsp(Pause),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.C03.Rsp(Resume),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.C03.Rsp(Resume),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.M.ST_STOPPED",
                    "OVENOPSTATE.S.C00.Rsp(Pause),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.C03.Rsp(Resume),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.M.ST_ERROR",
                    "OVENOPSTATE.S.C00.Rsp(Pause),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.C03.Rsp(Resume),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the DUT into a state wherein it can receive a Pause Command",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH sends Pause command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH waits for {PIXIT.WAITTIME.COUNTDOWN}",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). The list shall include structs with the following OperationalStateIds: Running(0x01), Paused(0x02), and Error(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Paused(0x02).",
                    "Verify that the DUT response contains an integer value, Value has to be between a range of 1 to 259200 or null. Record this value in 'initial-countdown-time'.",
                    "",
                    "Verify that the DUT response contains a non-zero integer value that is the same as 'initial-countdown-time' or null.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03)."
                ]
            }
        },
        {
            "Test Case Name": "217.1.4. [TC-OVENOPSTATE-2.4] Mandatory Events with DUT as Server",
            "Test Case ID": "TC-OVENOPSTATE-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the generation and population of the OperationalError event of the Oven Cavity Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "OVENOPSTATE.S.E00(OperationalError)",
                    "OVENOPSTATE.S.E00(OperationalError)",
                    "OVENOPSTATE.S.A0004(OperationalState)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up a subscription to theOperationalErrorevent",
                    "At the DUT take the vendor defined action to generate anOperationalErrorevent",
                    "TH reads from the DUT theOperationalStateattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Receive anOperationalErrorevent containing an ErrorState struct populated as follows:An ErrorStateID that shall contain an enum 8. Verify the ErrorStateID is valid for an for an Error State (UnableToStartOrResume(0x01), UnableToCompleteOperation(0x02), CommandInvalidInState(0x03) or in the range 0x80 to 0xBF).If the ErrorStateID is in the range 0x80 to 0xBF, then an ErrorStateLabel that is a human readable string.If the ErrorStateId is not in the range 0x80 to 0xBF then no ErrorStateLabel shall be present.Optionally an ErrorStateDetails. If present, this shall be a human readable string.",
                    "Verify that the DUT response contains an enum8 set to Error(0x03)."
                ]
            }
        },
        {
            "Test Case Name": "217.1.5. [TC-OVENOPSTATE-2.5] Optional Events with DUT as Server - REMOVED",
            "Test Case ID": "TC-OVENOPSTATE-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the generation and population of the OperationCompletion event of the Oven Cavity Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "1.12.7.3",
                    "1.12.6",
                    "1.12.7.3",
                    "",
                    "1.12.7.2",
                    "",
                    "1.12.7.2",
                    "1.12.7.2",
                    "",
                    "1.12.7.3",
                    "1.12.7.3",
                    "1.12.7.1",
                    "1.12.7.2",
                    "",
                    "1.12.7.4",
                    "1.12.7.3",
                    "",
                    "1.12.7.2",
                    ""
                ],
                "PICS": [
                    "",
                    "OVENOPSTATE.S.E01(OperationCompletion)",
                    "",
                    "OVENOPSTATE.S.C02.Rsp(Start),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0002(CountdownTime)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "",
                    "OVENOPSTATE.S.C01.Rsp(Stop),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.E01(OperationCompletion)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "",
                    "",
                    "OVENOPSTATE.S.C02.Rsp(Start),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "OVENOPSTATE.S.C00.Rsp(Pause),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "",
                    "OVENOPSTATE.S.C03.Rsp(Resume),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.A0004(OperationalState)",
                    "",
                    "OVENOPSTATE.S.C01.Rsp(Stop),OVENOPSTATE.S.C04.Tx(OperationalCommandResponse)",
                    "OVENOPSTATE.S.E01(OperationCompletion)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set up a subscription to theOperationCompletionevent",
                    "Manually put the DUT into a state wherein it can receive a Start Command",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for initial-countdown-time",
                    "TH sends Stop command to the DUT",
                    "TH waits for OperationCompletion event",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Restart DUT",
                    "TH waits for {PIXIT.WAITTIME.REBOOT}",
                    "TH sends Start command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for half of initial-countdown-time",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH waits for initial-countdown-time",
                    "TH sends Stop command to the DUT",
                    "TH waits for OperationCompletion event"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Record this value in 'initial-countdown-time'.Note: Continue with this test case only whenCountdownTimeis not null",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify TH receives an OperationCompletion event from the DUT\nwith the following fields populated as follows:CompletionErrorCode set to NoError(0x00)TotalOperationalTime is approximately initial-countdown-time\nor nullPausedTime is zero",
                    "Verify that the DUT response contains an enum8 set to Stopped(0x00).",
                    "",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Paused(0x02).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an enum8 set to Running(0x01).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify TH receives anOperationCompletionevent with the following fields populated as follows:CompletionErrorCode set to NoError(0x00)TotalOperationalTime is approximately 1.5 times the initial-countdown-time or nullPausedTime is 0.5 times the  initial-countdown-time"
                ]
            }
        }
    ],
    "Air_Quality": [
        {
            "Test Case Name": "220.1.1. [TC-AIRQUAL-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-AIRQUAL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Air Quality cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "AC.2.9.6.1"
                ],
                "PICS": [
                    "",
                    "AIRQUAL.S.A0000(AirQuality)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAirQualityattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an enum8 value.Value has to be 0, 1 or 4.2: If AIRQUAL.S.F00(Fair)3: If AIRQUAL.S.F01(Moderate)5: If AIRQUAL.S.F02(VeryPoor)6: If AIRQUAL.S.F03(ExtremelyPoor)"
                ]
            }
        }
    ],
    "HEPA_Filter_Monitoring": [
        {
            "Test Case Name": "223.1.1. [TC-HEPAFREMON-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-HEPAFREMON-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the HEPA Filter Monitoring cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "AC.2.8.6.1",
                    "AC.2.8.6.2",
                    "AC.2.8.6.3",
                    "AC.2.8.6.4",
                    "AC.2.8.6.5",
                    "AC.2.8.6.6"
                ],
                "PICS": [
                    "",
                    "HEPAFREMON.S.A0000(Condition)",
                    "HEPAFREMON.S.A0001(DegradationDirection)",
                    "HEPAFREMON.S.A0002(ChangeIndication)",
                    "HEPAFREMON.S.A0003(InPlaceIndicator)",
                    "HEPAFREMON.S.A0004(LastChangedTime)",
                    "HEPAFREMON.S.A0005(ReplacementProductList)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theConditionattribute.",
                    "TH reads from the DUT theDegradationDirectionattribute.",
                    "TH reads from the DUT theChangeIndicationattribute.",
                    "TH reads from the DUT theInPlaceIndicatorattribute.",
                    "TH reads from the DUT theLastChangedTimeattribute.",
                    "TH reads from the DUT theReplacementProductListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a uint8 value.The value has to be in the range of 0 to 100.",
                    "Verify that the DUT response contains an enum8 value.Value has to be 0 or 1.",
                    "Verify that the DUT response contains an enum8 value.Value has to be 0 or 2.1: If HEPAFREMON.S.F01(Warning)",
                    "Verify that the DUT response contains any boolean value.",
                    "Verify that the DUT response contains a null or a epoch_s value.",
                    "Verify that the DUT response contains a list of zero or more product replacement options (each being an instance of ReplacementProductStruct).All fields have values present and conformance matches."
                ]
            }
        }
    ],
    "Activated_Carbon_Filter_Monitoring": [
        {
            "Test Case Name": "226.1.1. [TC-ACFREMON-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-ACFREMON-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Activated Carbon Filter Monitoring cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "AC.2.8.6.1",
                    "AC.2.8.6.2",
                    "AC.2.8.6.3",
                    "AC.2.8.6.4",
                    "AC.2.8.6.5",
                    "AC.2.8.6.6"
                ],
                "PICS": [
                    "",
                    "ACFREMON.S.A0000(Condition)",
                    "ACFREMON.S.A0001(DegradationDirection)",
                    "ACFREMON.S.A0002(ChangeIndication)",
                    "ACFREMON.S.A0003(InPlaceIndicator)",
                    "ACFREMON.S.A0004(LastChangedTime)",
                    "ACFREMON.S.A0005(ReplacementProductList)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theConditionattribute.",
                    "TH reads from the DUT theDegradationDirectionattribute.",
                    "TH reads from the DUT theChangeIndicationattribute.",
                    "TH reads from the DUT theInPlaceIndicatorattribute.",
                    "TH reads from the DUT theLastChangedTimeattribute.",
                    "TH reads from the DUT theReplacementProductListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a uint8 value.The value has to be in the range of 0 to 100.",
                    "Verify that the DUT response contains an enum8 value.Value has to be 0 or 1.",
                    "Verify that the DUT response contains an enum8 value.Value has to be 0 or 2.1: If ACFREMON.S.F01(Warning)",
                    "Verify that the DUT response contains any boolean value.",
                    "Verify that the DUT response contains a null or a epoch_s value.",
                    "Verify that the DUT response contains a list of zero or more product replacement options (each being an instance of ReplacementProductStruct).All fields have values present and conformance matches."
                ]
            }
        }
    ],
    "Refrigerator_and_Temperature_Controlled_Cabinet_Mode": [
        {
            "Test Case Name": "231.1.1. [TC-TCCM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-TCCM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Refrigerator and Temperature Controlled Cabinet Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_TCC_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "TCCM.S.A0000(SupportedModes)",
                    "TCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the semantic tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster alias tag value (RapidCool, RapidFreeze) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (RapidCool, RapidFreeze)Verify that at least one ModeOptionsStruct entry includes either the RapidCool semantic tag or the RapidFreeze semantic tag in the SemanticTags fieldSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "231.2.1. [TC-TCCM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-TCCM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "TCCM.S.A0000(SupportedModes)",
                    "TCCM.S.A0001(CurrentMode)",
                    "TCCM.S.C00.Rsp(ChangeToMode)",
                    "TCCM.S.M.CAN_TEST_MODE_FAILURE & TCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "TCCM.S.A0001(CurrentMode) & TCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "TCCM.S.M.CAN_TEST_MODE_FAILURE & TCCM.S.C00.Rsp(ChangeToMode)",
                    "TCCM.S.A0001(CurrentMode)",
                    "TCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "TCCM.S.A0001(CurrentMode) & TCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "TCCM.S.C00.Rsp(ChangeToMode)",
                    "TCCM.S.A0001(CurrentMode)",
                    "TCCM.S.C00.Rsp(ChangeToMode)",
                    "TCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.TCCM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.TCCM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.TCCM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.TCCM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.TCCM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.TCCM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.TCCM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "231.3.1. [TC-TCCM-3.1] On Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-TCCM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "TCCM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "TCCM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "TCCM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "TCCM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "TCCM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "231.3.2. [TC-TCCM-3.2] Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-TCCM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0000(SupportedModes)",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0001(CurrentMode)",
                    "TCCM.S.A0000(SupportedModes)",
                    "TCCM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "231.3.3. [TC-TCCM-3.3] On Mode and Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-TCCM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0000(SupportedModes)",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0003(OnMode), TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0000(SupportedModes), TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0003(OnMode)",
                    "TCCM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "TCCM.S.A0002(StartUpMode)",
                    "TCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Refrigerator_Alarm": [
        {
            "Test Case Name": "235.1.1. [TC-REFALM-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-REFALM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Refrigerator Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "REFALM.S.A0000(Mask)",
                    "REFALM.S.A0002(State)",
                    "REFALM.S.A0003(Supported)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Ensure that the door alarm is not locally suppressed and the door is closed",
                    "TH reads from the DUT theMaskattribute",
                    "TH reads from the DUT theStateattribute",
                    "TH reads from the DUT theSupportedattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1.",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0.",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1."
                ]
            }
        },
        {
            "Test Case Name": "235.1.2. [TC-REFALM-2.2] Primary functionality with DUT as Server",
            "Test Case ID": "TC-REFALM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Refrigerator Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "REFALM.S.A0002(State)",
                    "",
                    "",
                    "REFALM.S.A0002(State)",
                    "",
                    "REFALM.S.A0002(State)",
                    "REFALM.S.C00.Rsp(Reset)",
                    "REFALM.S.C01.Rsp(ModifyEnabledAlarms)",
                    "REFALM.S.E00(Notify),REFALM.S.A0002(State)",
                    "REFALM.S.E00(Notify)",
                    "REFALM.S.E00(Notify)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Ensure that the door on the DUT is closed",
                    "TH reads from the DUT theStateattribute",
                    "Manually open the door on the DUT",
                    "Wait for the time defined in PIXIT.REFALM.AlarmThreshold",
                    "TH reads from the DUT theStateattribute",
                    "Ensure that the door on the DUT is closed",
                    "TH reads from the DUT theStateattribute",
                    "TH sendsResetcommand to the DUT",
                    "TH sendsModifyEnabledAlarmscommand to the DUT",
                    "Set up subscription to theNotifyevent.",
                    "Repeat steps 4 then 5",
                    "Repeat step 7"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)",
                    "Verify DUT responds w/ status UNSUPPORTED_COMMAND(0x81)",
                    "",
                    "After step 5 (repeated), receive aNotifyevent with theStateattribute bit 0 set to 1.",
                    "Receive aNotifyevent with theStateattribute bit 0 set to 0."
                ]
            }
        },
        {
            "Test Case Name": "235.1.3. [TC-REFALM-2.3] Local suppression of the door alarm with DUT as Server",
            "Test Case ID": "TC-REFALM-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behaviour if the door alarm can be locally suppressed of the Refrigerator Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "REFALM.S.A0002(State)",
                    "REFALM.S.A0000(Mask)",
                    "",
                    "",
                    "REFALM.S.A0002(State)",
                    "",
                    "REFALM.S.A0002(State)",
                    "REFALM.S.A0000(Mask)",
                    "REFALM.S.A0003(Supported)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Ensure that the door on the DUT is closed",
                    "TH reads from the DUT theStateattribute",
                    "TH reads from the DUT theMaskattribute",
                    "Manually open the door on the DUT",
                    "Wait for the time defined in PIXIT.REFALM.AlarmThreshold",
                    "TH reads from the DUT theStateattribute",
                    "Invoke the on DUT sequence to suppress the alarm, do not close the door",
                    "TH reads from the DUT theStateattribute",
                    "TH reads from the DUT theMaskattribute",
                    "TH reads from the DUT theSupportedattribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1",
                    "",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1",
                    "",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 0",
                    "Verify that the DUT response contains a 32-bit value with bit 0 set to 1"
                ]
            }
        }
    ],
    "RVC_Operational_State": [
        {
            "Test Case Name": "238.1.1. [TC-RVCOPSTATE-2.1] Attribute verification [DUT as Server]",
            "Test Case ID": "TC-RVCOPSTATE-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the RVC Operational State Cluster attributes with server as DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "6f",
                    "6g",
                    "6h",
                    "6i",
                    "6j",
                    "6k",
                    "6l",
                    "6m",
                    "6n",
                    "7",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "7e",
                    "7f",
                    "7g",
                    "7h",
                    "7i",
                    "7j",
                    "7k",
                    "7l",
                    "7m",
                    "7n",
                    "7o",
                    "7p",
                    "7q",
                    "7r",
                    "7s",
                    "7t",
                    "7u",
                    "7v",
                    "7w",
                    "7x"
                ],
                "Ref": [
                    "",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6"
                ],
                "PICS": [
                    "",
                    "RVCOPSTATE.S.A0000(PhaseList)",
                    "RVCOPSTATE.S.A0001(CurrentPhase)",
                    "RVCOPSTATE.S.A0002(CountdownTime)",
                    "RVCOPSTATE.S.A0003(OperationalStateList)",
                    "RVCOPSTATE.S.A0004(OperationalState)",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_RUNNING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_RUNNING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_PAUSED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_PAUSED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.A0005(OperationalError)",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_NO_ERROR",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_NO_ERROR",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_UNABLE_TO_START_OR_RESUME",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_UNABLE_TO_COMPLETE_OPERATION",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_COMMAND_INVALID_IN_STATE",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_FAILED_TO_FIND_CHARGING_DOCK",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_FAILED_TO_FIND_CHARGING_DOCK",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_STUCK",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_STUCK",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_DUST_BIN_MISSING",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_DUST_BIN_MISSING",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_DUST_BIN_FULL",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_DUST_BIN_FULL",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_EMPTY",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_EMPTY",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_MISSING",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_MISSING",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_LID_OPEN",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_WATER_TANK_LID_OPEN",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_MOP_CLEANING_PAD_MISSING",
                    "RVCOPSTATE.S.A0005(OperationalError) & RVCOPSTATE.S.M.ERR_MOP_CLEANING_PAD_MISSING"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads from the DUT thePhaseListattribute",
                    "TH reads from the DUT theCurrentPhaseattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Running(0x01) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Paused(0x02) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the SeekingCharger(0x40) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Charging(0x41) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Docked(0x42) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the NoError(0x00) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToStartOrResume(0x01) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the UnableToCompleteOperation(0x02) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the CommandInvalidInState(0x03) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the FailedToFindChargingDock(0x40) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the Stuck(0x41) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the DustBinMissing(0x42) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the DustBinFull(0x43) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the WaterTankEmpty(0x44) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the WaterTankMissing(0x45) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the WaterTankLidOpen(0x46) error state",
                    "TH reads from the DUT theOperationalErrorattribute",
                    "Manually put the device in the MopCleaningPadMissing(0x47) error state",
                    "TH reads from the DUT theOperationalErrorattribute"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of strings, no more than 32 or null. Record 'phase-list-size', the number of entries in the list if not null for use in step 3.",
                    "Verify that the DUT response contains a uint8 value or null. This shall only be null ifPhaseListis also null. If not null, ensure that it is equal to a value between 0 and 'phase-list-size' minus 1.",
                    "Verify that the DUT response contains an instance of elapsed-s (derived from uint32) or null. If not null, Value has to be between a range of 0 to 259200.",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). Each struct shall contain an OperationalStateId (integer that defines the state) and an OperationalStateLabel, which is a user understandable string describing the state. For each instance of an OperationalStateID, verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03), SeekingCharger(0x40), Charging(0x41), Docked(0x42)) or in the range 0x80 to 0xBF. The list shall include a struct with an OperationalStateId of Error(0x03).",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify the OperationalStateID is a defined state (Stopped(0x00), Running(0x01), Paused(0x02), Error(0x03), SeekingCharger(0x40), Charging(0x41), Docked(0x42)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Stopped(0x00)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Running(0x01)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Paused(0x02)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Error(0x03)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to SeekingCharger(0x40)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Charging(0x41)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Docked(0x42)",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId (enum8 value that defines the error), an ErrorStateLabel, which is a user understandable string describing the state which may be null, and an ErrorStateDetails, which is an additional user understandable string. Verify the ErrorStateID is a defined error (NoError(0x00), UnableToStartOrResume(0x01), UnableToCompleteOperation(0x02), CommandInvalidInState(0x03), FailedToFindChargingDock(0x40), Stuck(0x41), DustBinMissing(0x42), DustBinFull(0x43), WaterTankEmpty(0x44), WaterTankMissing(0x45), WaterTankLidOpen(0x46), MopCleaningPadMissing(0x47)) or in the range 0x80 to 0xBF.",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of NoError(0x00)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToStartOrResume(0x01)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of UnableToCompleteOperation(0x02)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of CommandInvalidInState(0x03)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of FailedToFindChargingDock(0x40)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of Stuck(0x41)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of DustBinMissing(0x42)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of DustBinFull(0x43)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of WaterTankEmpty(0x44)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of WaterTankMissing(0x45)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of WaterTankLidOpen(0x46)",
                    "",
                    "Verify that the DUT response contains an instance of ErrorStateStruct. This shall contain an ErrorStateId with a value of MopCleaningPadMissing(0x47)"
                ]
            }
        },
        {
            "Test Case Name": "238.1.2. [TC-RVCOPSTATE-2.3] Pause and Resume commands [DUT as Server]",
            "Test Case ID": "TC-RVCOPSTATE-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the Pause and Resume commands of the RVC Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45"
                ],
                "Ref": [
                    "",
                    "1.12.6",
                    "1.12.6",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.1",
                    "1.12.6",
                    "",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "1.12.7.4",
                    "",
                    "",
                    "1.12.6",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.6",
                    "",
                    "12.1.6.6",
                    "1.12.7.4",
                    "12.1.6.6",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.1",
                    "1.12.7.4",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.1",
                    "1.12.7.1",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.1",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.5",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.1",
                    "1.12.6",
                    "1.12.7.5",
                    "1.12.6",
                    "12.1.6.6",
                    "1.12.7.1"
                ],
                "PICS": [
                    "",
                    "",
                    "RVCOPSTATE.S.A0003(OperationalStateList)",
                    "RVCOPSTATE.S.A0004(OperationalState)",
                    "",
                    "RVCOPSTATE.S.A0004(OperationalState)",
                    "RVCOPSTATE.S.A0002(CountdownTime)",
                    "RVCOPSTATE.S.A0002(CountdownTime)",
                    "RVCOPSTATE.S.A0002(CountdownTime)",
                    "",
                    "",
                    "RVCOPSTATE.S.A0004(OperationalState)",
                    "",
                    "RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "",
                    "RVCOPSTATE.S.M.ST_RUNNING & RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.RESUME_AFTER_ERR",
                    "RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.M.ST_STOPPED",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.A0004(OperationalState) & RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.M.ST_SEEKING_CHARGER"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the DUT into a state wherein it can receive a Pause Command",
                    "TH reads from the DUT theOperationalStateListattribute",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH waits for 5 seconds",
                    "TH reads from the DUT theCountdownTimeattribute",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT",
                    "Continue at step 16",
                    "Continue at step 24",
                    "Manually put the device in the Running(0x01) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually cause the device to pause running due to an error, and be able to resume after clearing the error",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually clear the error",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT",
                    "TH reads from the DUT theOperationalStateattribute",
                    "Manually put the device in the Stopped(0x00) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Charging(0x41) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "Manually put the device in the Charging(0x41) operational state and RVC Run Mode cluster\u2019s CurrentMode attribute set to a mode with the Idle mode tag",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the Docked(0x42) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Pause command to the DUT",
                    "Manually put the device in the Docked(0x42) operational state and RVC Run Mode cluster\u2019s CurrentMode attribute set to a mode with the Idle mode tag",
                    "TH sends Resume command to the DUT",
                    "Manually put the device in the SeekingCharger(0x40) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends Resume command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a list of states (each being an instance of OperationalStateStruct). The list shall include structs with the following OperationalStateIds: Running(0x01), Paused(0x02), and Error(0x03).",
                    "Verify that the DUT response contains an OperationalStateEnum value. Save the value asold_opstate_dut.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains the OperationalStateId set to Paused(0x02).",
                    "Verify that the DUT response contains an integer value, Value has to be between a range of 1 to 259200 or null. Record this value ininitial_countdown_time.",
                    "",
                    "Verify that the DUT response contains a non-zero integer value that is the same asinitial_countdown_timeor null.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains the OperationalStateId isold_opstate_dut.",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "",
                    "",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Running(0x01)",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to  Error(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Paused(0x02).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to NoError(0x00).",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Running(0x01).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Stopped(0x00).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Error(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Charging(0x41).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Charging(0x41).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Docked(0x42).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to SeekingCharger(0x40).",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03)."
                ]
            }
        },
        {
            "Test Case Name": "238.1.3. [TC-RVCOPSTATE-2.4] GoHome command [DUT as Server] - REMOVED",
            "Test Case ID": "TC-RVCOPSTATE-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the operation of the GoHome command of the RVC Operational State cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "1.12.6",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.6",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.6",
                    "1.12.6",
                    "1.12.7.1",
                    "1.12.6",
                    "1.12.6",
                    "1.12.7.1"
                ],
                "PICS": [
                    "",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_ERROR",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_CHARGING",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_DOCKED",
                    "RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.M.ST_SEEKING_CHARGER",
                    "RVCOPSTATE.S.M.ST_SEEKING_CHARGER"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "Manually put the device in the Error(0x03) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends GoHome command to the DUT",
                    "Manually put the device in the Charging(0x41) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends GoHome command to the DUT",
                    "Manually put the device in the Docked(0x42) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends GoHome command to the DUT",
                    "Manually put the device in the SeekingCharger(0x40) operational state",
                    "TH reads from the DUT theOperationalStateattribute",
                    "TH sends GoHome command to the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Error(0x03)",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Charging(0x41)",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to Docked(0x42)",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to CommandInvalidInState(0x03).",
                    "",
                    "Verify that the DUT response contains an OperationalStateEnum value. Verify this is set to SeekingCharger(0x40)",
                    "Verify that the DUT response contains an instance of OperationalCommandResponse. Verify that the ErrorStateId field is set to {E_ES_NOERR}."
                ]
            }
        }
    ],
    "Smoke_CO_Alarm": [
        {
            "Test Case Name": "243.1.1. [TC-SMOKECO-1.1] Global attributes with DUT as Server",
            "Test Case ID": "TC-SMOKECO-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "REF_CLUSTERREVISION",
                    "REF_FEATUREMAP",
                    "REF_ATTRIBUTELIST",
                    "REF_EVENTLIST",
                    "REF_ACCEPTEDCOMMANDLIST",
                    "REF_GENERATEDCOMMANDLIST"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads theClusterRevision attributefrom the DUT",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the ClusterRevision attribute is of uint16 and reflects the highest revision number.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:bit 0 set to 1 if DUT supports Smoke Alarm and bit 1 set to 1 if DUT supports CO Alarm.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes.The list shall include all mandatory attributes: 0x0000, 0x0003, 0x0005, 0x0006, and 0x0007.Depending on its feature support it shall also include the following mandatory attributes:if SMOKECO.S.F00(SMOKE): 0x0001if SMOKECO.S.F01(CO): 0x0002.It may include these optional attributes: 0x0004, 0x0008, 0x0009, 0x000a, 0x000b, and 0x000c.It shall include global attributes (0xFFFD)ClusterRevision, (0xFFFC)FeatureMap, (0xFFFB)AttributeList, (0xFFF9)AcceptedCommandList & (0xFFF8)GeneratedCommandList.",
                    "Verify that the DUT response contains theEventListattribute and have the list of eleven (11) supported events: 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, and 0x0a.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command: Optional: 0x00.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command. For this cluster the list is usually empty."
                ]
            }
        },
        {
            "Test Case Name": "243.2.1. [TC-SMOKECO-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Smoke CO Alarm cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "REF_SMOKECO_A_ExpressedState",
                    "REF_SMOKECO_A_SmokeState",
                    "REF_SMOKECO_A_COState",
                    "REF_SMOKECO_A_BatteryAlert",
                    "REF_SMOKECO_A_DeviceMuted",
                    "REF_SMOKECO_A_TestInProgress",
                    "REF_SMOKECO_A_HardwareFaultAlert",
                    "REF_SMOKECO_A_EndOfServiceAlert",
                    "REF_SMOKECO_A_InterconnectSmokeAlarm",
                    "REF_SMOKECO_A_InterconnectCOAlarm",
                    "REF_SMOKECO_A_ContaminationState",
                    "REF_SMOKECO_A_SensitivityLevel",
                    "REF_SMOKECO_A_ExpiryDate"
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0004(DeviceMuted)",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "SMOKECO.S.A0006(HardwareFaultAlert)",
                    "SMOKECO.S.A0007(EndOfServiceAlert)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel)",
                    "SMOKECO.S.A000c(ExpiryDate)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theExpressedStateattribute.",
                    "TH reads from the DUT theSmokeStateattribute.",
                    "TH reads from the DUT theCOStateattribute.",
                    "TH reads from the DUT theBatteryAlertattribute.",
                    "TH reads from the DUT theDeviceMutedattribute.",
                    "TH reads from the DUT theTestInProgressattribute.",
                    "TH reads from the DUT theHardwareFaultAlertattribute.",
                    "TH reads from the DUT theEndOfServiceAlertattribute.",
                    "TH reads from the DUT theInterconnectSmokeAlarmattribute.",
                    "TH reads from the DUT theInterconnectCOAlarmattribute.",
                    "TH reads from the DUT theContaminationStateattribute.",
                    "TH reads from the DUT theSmokeSensitivityLevelattribute.",
                    "TH reads from the DUT theExpiryDateattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a value between 0 and 8",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains a value between 0 and 1",
                    "Verify that the DUT response contains a bool value",
                    "Verify that the DUT response contains a bool value",
                    "Verify that the DUT response contains a value between 0 and 1",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains a value between 0 and 3",
                    "Verify that the DUT response contains a value between 0 and 2",
                    "Verify that the DUT response contains epoch-s format"
                ]
            }
        },
        {
            "Test Case Name": "243.2.2. [TC-SMOKECO-2.2] Primary Functionality - Smoke Alarm with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the smoke alarm functionality of the Smoke CO Alarm cluster server. The test also verifies that device self-test is not permitted to run during an alarm condition. The test case is Not Applicable if DUT only has CO alarm functionality.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E00(SmokeAlarm)",
                    "SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0005(TestInProgress) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.C00.Rsp(SelfTestRequest)",
                    "",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E00(SmokeAlarm)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH subscribes to SmokeState attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning Smoke Alarm Test Event",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads SmokeAlarm event from DUT",
                    "Start manually DUT self-test",
                    "After a few seconds, TH reads TestInProgress attribute from DUT",
                    "TH sendsSelfTestRequestcommand to DUT",
                    "After a few seconds, TH receives the cluster-specific Status Code from DUT",
                    "TH reads TestInProgress attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Critical Smoke Alarm Test Event",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads SmokeAlarm event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Alarm Test Event Clear",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Verify that SmokeState attribute has a value of 1 (Warning)",
                    "Verify that ExpressedState attribute has a value of 1 (SmokeAlarm)",
                    "Verify that SmokeAlarm event has a new event record and AlarmSeverityLevel field indicates the SmokeState attribute current value of 1",
                    "",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "",
                    "Verify that Status Code shows BUSY",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "",
                    "Verify that SmokeState attribute has a value of 2 (Critical)",
                    "Verify that ExpressedState attribute has a value of 1 (SmokeAlarm)",
                    "Verify that SmokeAlarm event has a new event record and AlarmSeverityLevel field indicates the SmokeState attribute current value of 2",
                    "",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record"
                ]
            }
        },
        {
            "Test Case Name": "243.2.3. [TC-SMOKECO-2.3] Primary Functionality - CO Alarm with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the CO alarm functionality of the Smoke CO Alarm cluster server. The test also verifies that device self-test is not permitted to run during an alarm condition. The test case is Not Applicable if DUT only has smoke alarm functionality.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E01(COAlarm)",
                    "SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0005(TestInProgress) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.C00.Rsp(SelfTestRequest)",
                    "",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E01(COAlarm)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH subscribes to COState attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning CO Alarm Test Event",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads COAlarm event from DUT",
                    "Start manually DUT self-test",
                    "After a few seconds, TH reads TestInProgress attribute from DUT",
                    "TH sendsSelfTestRequestcommand to DUT",
                    "After a few seconds, TH receives the cluster-specific Status Code from DUT",
                    "TH reads TestInProgress attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Critical CO Alarm Test Event",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads COAlarm event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for CO Alarm Test Event Clear",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that COState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Verify that COState attribute has a value of 1 (Warning)",
                    "Verify that ExpressedState attribute has a value of 2 (COAlarm)",
                    "Verify that COAlarm event has a new event record and AlarmSeverityLevel field indicates the COState attribute current value of 1",
                    "",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "",
                    "Verify that Status Code shows BUSY",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "",
                    "Verify that COState attribute has a value of 2 (Critical)",
                    "Verify that ExpressedState attribute has a value of 2 (COAlarm)",
                    "Verify that COAlarm event has a new event record and AlarmSeverityLevel field indicates the COState attribute current value of 2",
                    "",
                    "Verify that COState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record"
                ]
            }
        },
        {
            "Test Case Name": "243.2.4. [TC-SMOKECO-2.4] Secondary Functionality - Mandatory with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality - mandatory of the Smoke CO Alarm cluster server. It verifies Battery Alert, Hardware Fault Alert, End of Service Alert and Test in Progress.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E02(LowBattery)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E02(LowBattery)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)",
                    "SMOKECO.S.A0006(HardwareFaultAlert)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0006(HardwareFaultAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E03(HardwareFault)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0006(HardwareFaultAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)",
                    "SMOKECO.S.A0007(EndOfServiceAlert)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0007(EndOfServiceAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E04(EndOfService)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0007(EndOfServiceAlert)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0005(TestInProgress) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0000(ExpressedState) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0005(TestInProgress) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.E05(SelfTestComplete) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.A0000(ExpressedState) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.E0a(AllClear) & SMOKECO.M.ManuallyControlledTest",
                    "SMOKECO.S.C00.Rsp(SelfTestRequest)",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0005(TestInProgress)",
                    "SMOKECO.S.E05(SelfTestComplete)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.E0a(AllClear)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH subscribes to BatteryAlert attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning Battery Alert Test Event",
                    "TH waits for a report of BatteryAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads LowBattery event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Critical Battery Alert Test Event",
                    "TH waits for a report of BatteryAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads LowBattery event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Battery Alert Test Event Clear",
                    "TH waits for a report of BatteryAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH subscribes to HardwareFaultAlert attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Hardware Fault Alert Test Event",
                    "TH waits for a report of HardwareFaultAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads HardwareFault event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Hardware Fault Alert Test Event Clear",
                    "TH waits for a report of HardwareFaultAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH subscribes to EndOfServiceAlert attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for End of Service Alert Test Event",
                    "TH waits for a report of EndOfServiceAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads EndOfService event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for End of Service Alert Test Event Clear",
                    "TH waits for a report of EndOfServiceAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH subscribes to TestInProgress attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "Start manually DUT self-test",
                    "TH waits for a report of TestInProgress attribute from DUT with a timeout of 180 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH waits for a report of TestInProgress attribute from DUT with a timeout of 180 seconds",
                    "TH reads SelfTestComplete event from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH sendsSelfTestRequestcommand to DUT",
                    "TH waits for a report of TestInProgress attribute from DUT with a timeout of 180 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH waits for a report of TestInProgress attribute from DUT with a timeout of 180 seconds",
                    "TH reads SelfTestComplete event from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that BatteryAlert attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Verify that BatteryAlert attribute has a value of 1 (Warning)",
                    "Verify that ExpressedState attribute has a value of 3 (BatteryAlert)",
                    "Verify that LowBattery event has a new event record and AlarmSeverityLevel field indicates the BatteryAlert attribute current value of 1",
                    "",
                    "Verify that BatteryAlert attribute has a value of 2 (Critical)",
                    "Verify that ExpressedState attribute has a value of 3 (BatteryAlert)",
                    "Verify that LowBattery event has a new event record and AlarmSeverityLevel field indicates the BatteryAlert attribute current value of 2",
                    "",
                    "Verify that BatteryAlert attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "Verify that HardwareFaultAlert attribute has a value of 0 (False)",
                    "",
                    "Verify that HardwareFaultAlert attribute has a value of 1 (True)",
                    "Verify that ExpressedState attribute has a value of 5 (HardwareFault)",
                    "Verify that HardwareFault event has a new event record",
                    "",
                    "Verify that HardwareFaultAlert attribute has a value of 0 (False)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "Verify that EndOfServiceAlert attribute has a value of 0 (Normal)",
                    "",
                    "Verify that EndOfServiceAlert attribute has a value of 1 (Expired)",
                    "Verify that ExpressedState attribute has a value of 6 (EndOfService)",
                    "Verify that EndOfService event has a new event record",
                    "",
                    "Verify that EndOfServiceAlert attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that TestInProgress attribute has a value of 1 (True)",
                    "Verify that ExpressedState attribute has a value of 4 (Testing)",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "Verify that SelfTestComplete event has a new event record",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "",
                    "Verify that TestInProgress attribute has a value of 1 (True)",
                    "Verify that ExpressedState attribute has a value of 4 (Testing)",
                    "Verify that TestInProgress attribute has a value of 0 (False)",
                    "Verify that SelfTestComplete event has a new event record",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record"
                ]
            }
        },
        {
            "Test Case Name": "243.2.5. [TC-SMOKECO-2.5] Secondary Functionality - Optional with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality - optional of the Smoke CO Alarm cluster server. It verifies interconnect smoke alarm, interconnect CO alarm, contamination state, smoke sensitivity level\n, and manual device mute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "54",
                    "55",
                    "56",
                    "57",
                    "58",
                    "59",
                    "60",
                    "61",
                    "62",
                    "63",
                    "64",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "70",
                    "71",
                    "72",
                    "73"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nDGGEN.S.A0008(TestEventTriggersEnabled)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nSMOKECO.S.E08(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nSMOKECO.S.E0a(AllClear)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nSMOKECO.S.E09(InterconnectCOAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nSMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nSMOKECO.S.E0a(AllClear)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000a(ContaminationState),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000a(ContaminationState),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000a(ContaminationState),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000a(ContaminationState),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000a(ContaminationState)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "{PICS_SA_SmokeSensitivityLevel\n}",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A000b(SmokeSensitivityLevel)",
                    "SMOKECO.S.A0004(DeviceMuted)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.E06(AlarmMuted)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.E07(MuteEnded)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F00(SMOKE),\nSMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.E06(AlarmMuted)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.E07(MuteEnded)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0004(DeviceMuted),\nSMOKECO.S.F01(CO),\nSMOKECO.S.A0002(COState)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH subscribes to InterconnectSmokeAlarm attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect Smoke Alarm Test Event",
                    "TH waits for a report of InterconnectSmokeAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads InterconnectSmokeAlarm event from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect Smoke Alarm Test Event Clear",
                    "TH waits for a report of InterconnectSmokeAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH subscribes to InterconnectCOAlarm attribute from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect CO Alarm Test Event",
                    "TH waits for a report of InterconnectCOAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads InterconnectCOAlarm event from DUT",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect CO Alarm Test Event Clear",
                    "TH waits for a report of InterconnectCOAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH reads AllClear event from DUT",
                    "TH subscribes to ContaminationState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Contamination State (High) Test Event",
                    "TH waits for a report of ContaminationState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Contamination State Test Event Clear",
                    "TH waits for a report of ContaminationState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Contamination State (Low) Test Event",
                    "TH waits for a report of ContaminationState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Contamination State Test Event Clear",
                    "TH waits for a report of ContaminationState attribute from DUT with a timeout of 300 seconds",
                    "TH subscribes to SmokeSensitivityLevel attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Sensitivity Level (High) Test Event",
                    "TH waits for a report of SmokeSensitivityLevel attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Sensitivity Level\n Test Event Clear",
                    "TH waits for a report of SmokeSensitivityLevel attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Sensitivity Level\n (Low) Test Event",
                    "TH waits for a report of SmokeSensitivityLevel attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Sensitivity Level Test Event Clear",
                    "TH waits for a report of SmokeSensitivityLevel attribute from DUT with a timeout of 300 seconds",
                    "TH subscribes to DeviceMuted attribute from DUT",
                    "TH readsFeatureMapattribute from DUT",
                    "TH subscribes to SmokeState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning Smoke Alarm Test Event",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event",
                    "TH waits for a report of DeviceMuted attribute from DUT with a timeout of 120 seconds",
                    "TH reads AlarmMuted event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event Clear",
                    "TH waits for a report of DeviceMuted attribute from DUT with a timeout of 120 seconds",
                    "TH reads MuteEnded event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Critical Smoke Alarm Test Event",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event",
                    "TH waits 5 seconds and then reads DeviceMuted attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Alarm Test Event Clear",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH readsFeatureMapattribute from DUT",
                    "TH subscribes to COState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning CO Alarm Test Event",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event",
                    "TH waits for a report of DeviceMuted attribute from DUT with a timeout of 120 seconds",
                    "TH reads AlarmMuted event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event Clear",
                    "TH waits for a report of DeviceMuted attribute from DUT with a timeout of 120 seconds",
                    "TH reads MuteEnded event from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Critical CO Alarm Test Event",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Manual Device Mute Test Event",
                    "TH waits 5 seconds and then reads DeviceMuted attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for CO Alarm Test Event Clear",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 2 (Critical) or 1 (Warning)",
                    "Verify that InterconnectSmokeAlarm event has a new event record and AlarmSeverityLevel field indicates the current value of InterconnectSmokeAlarm attribute",
                    "Verify that ExpressedState attribute has a value of 7 (InterconnectSmoke)",
                    "",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "Verify that InterconnectCOAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that InterconnectCOAlarm attribute has a value of 2 (Critical) or 1 (Warning)",
                    "Verify that InterconnectCOAlarm event has a new event record and AlarmSeverityLevel field indicates the current value of InterconnectCOAlarm attribute",
                    "Verify that ExpressedState attribute has a value of 8 (InterconnectCO)",
                    "",
                    "Verify that InterconnectCOAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that AllClear event has a new event record",
                    "Verify that ContaminationState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that ContaminationState attribute has a value of 2 (Warning) or 3 (Critical)",
                    "",
                    "Verify that ContaminationState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that ContaminationState attribute has a value of 1 (Low)",
                    "",
                    "Verify that ContaminationState attribute has a value of 0 (Normal)",
                    "Verify that SmokeSensitivityLevel attribute has a value of 1 (Standard)",
                    "",
                    "Verify that SmokeSensitivityLevel attribute has a value of 0 (High)",
                    "",
                    "Verify that SmokeSensitivityLevel attribute has a value of 1 (Standard)",
                    "",
                    "Verify that SmokeSensitivityLevel attribute has a value of 2 (Low)",
                    "",
                    "Verify that SmokeSensitivityLevel attribute has a value of 1 (Standard)",
                    "Verify that DeviceMuted attribute has a value of 0 (NotMuted)",
                    "Verify that Smoke Alarm feature is supported",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that SmokeState attribute has a value of 1 (Warning)",
                    "",
                    "Verify that DeviceMuted attribute has a value of 1 (Muted)",
                    "Verify that AlarmMuted event has a new record",
                    "",
                    "Verify that DeviceMuted attribute has a value of 0 (NotMuted)",
                    "Verify that MuteEnded event has a new record",
                    "",
                    "Verify that SmokeState attribute has a value of 2 (Critical)",
                    "",
                    "Verify that DeviceMuted attribute has a value of 0 (NotMuted)",
                    "",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "Verify that CO Alarm feature is supported",
                    "Verify that COState attribute has a value of 0 (Normal)",
                    "",
                    "Verify that COState attribute has a value of 1 (Warning)",
                    "",
                    "Verify that DeviceMuted attribute has a value of 1 (Muted)",
                    "Verify that AlarmMuted event has a new record",
                    "",
                    "Verify that DeviceMuted attribute has a value of 0 (NotMuted)",
                    "Verify that MuteEnded event has a new record",
                    "",
                    "Verify that COState attribute has a value of 2 (Critical)",
                    "",
                    "Verify that DeviceMuted attribute has a value of 0 (NotMuted)",
                    "",
                    "Verify that COState attribute has a value of 0 (Normal)"
                ]
            }
        },
        {
            "Test Case Name": "243.2.6. [TC-SMOKECO-2.6] ExpressedState Attribute - Multiple Alarms with DUT as Server",
            "Test Case ID": "TC-SMOKECO-2.6",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the ExpressedState Attribute indicates the highest priority alarm during multiple alarms condition of the Smoke CO Alarm cluster server. The design of the test case intends to include both Smoke and CO alarms in multiple alarms condition, therefore a Smoke and CO combo device is required.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0002(COState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0001(SmokeState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0002(COState)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0009(InterconnectCOAlarm)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm),\nDGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0008(InterconnectSmokeAlarm)",
                    "SMOKECO.S.A0000(ExpressedState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "SMOKECO.S.A0003(BatteryAlert)",
                    "SMOKECO.S.A0000(ExpressedState)"
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads ExpressedState attribute from DUT",
                    "TH subscribes to BatteryAlert attribute from DUT",
                    "TH subscribes to InterconnectSmokeAlarm attribute from DUT",
                    "TH subscribes to InterconnectCOAlarm attribute from DUT",
                    "TH subscribes to COState attribute from DUT",
                    "TH subscribes to SmokeState attribute from DUT",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning Battery Alert Test Event",
                    "TH waits for a report of BatteryAlert attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect Smoke Alarm Test Event",
                    "TH waits for a report of InterconnectSmokeAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect CO Alarm Test Event",
                    "TH waits for a report of InterconnectCOAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning CO Alarm Test Event",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Warning Smoke Alarm Test Event",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Smoke Alarm Test Event Clear",
                    "TH waits for a report of SmokeState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for CO Alarm Test Event clear",
                    "TH waits for a report of COState attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect CO Alarm Test Event Clear",
                    "TH waits for a report of InterconnectCOAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Interconnect Smoke Alarm Test Event Clear",
                    "TH waits for a report of InterconnectSmokeAlarm attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.SMOKECO.TEST_EVENT_TRIGGER for Battery Alert Test Event Clear",
                    "TH waits for a report of BatteryAlert attribute from DUT with a timeout of 300 seconds",
                    "TH reads ExpressedState attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)",
                    "Verify that BatteryAlert attribute has a value of 0 (Normal)",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 0 (Normal)",
                    "Verify that InterconnectCOAlarm attribute has a value of 0 (Normal)",
                    "Verify that COState attribute has a value of 0 (Normal)",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Verify that BatteryAlert attribute has a value of 1 (Warning)",
                    "",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 2 (Critical) or 1 (Warning)",
                    "",
                    "Verify that InterconnectCOAlarm attribute has a value of 2 (Critical) or 1 (Warning)",
                    "",
                    "Verify that COState attribute has a value of 1 (Warning)",
                    "",
                    "Verify that SmokeState attribute has a value of 1 (Warning)",
                    "Verify that ExpressedState attribute has a value that indicates\nPIXIT.SMOKECO.HIEST_PRI_ALARM",
                    "",
                    "Verify that SmokeState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value that indicates PIXIT.SMOKECO.HIEST_PRI_ALARM",
                    "",
                    "Verify that COState attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value that indicates PIXIT.SMOKECO.HIEST_PRI_ALARM",
                    "",
                    "Verify that InterconnectCOAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value that indicates PIXIT.SMOKECO.HIEST_PRI_ALARM",
                    "",
                    "Verify that InterconnectSmokeAlarm attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value that indicates PIXIT.SMOKECO.HIEST_PRI_ALARM",
                    "",
                    "Verify that BatteryAlert attribute has a value of 0 (Normal)",
                    "Verify that ExpressedState attribute has a value of 0 (Normal)"
                ]
            }
        }
    ],
    "Device_Energy_Management": [
        {
            "Test Case Name": "247.1.1. [TC-DEM-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-DEM-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 3.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if DEM.S.F00(PowerAdjustment).- bit 1: SHALL be 1 if and only if DEM.S.F01(PowerForecastReporting).- bit 2: SHALL be 1 if and only if DEM.S.F02(StateForecastReporting).- bit 3: SHALL be 1 if and only if DEM.S.F03(StartTimeAdjustment).- bit 4: SHALL be 1 if and only if DEM.S.F04(Pausable).All remaining bits SHALL be 0. Provisional features DEM.S.F05(ForecastAdjustment) and DEM.S.F06(ConstraintBasedAdjustment) must not be supported.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x0001, 0x0002, 0x0003, 0x0004\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0005: SHALL be included if and only if DEM.S.F00(PowerAdjustment).- 0x0006: SHALL be included if and only if DEM.S.F01(PowerForecastReporting) | DEM.S.F02(StateForecastReporting).- 0x0007: SHALL be included if and only if DEM.S.F00(PowerAdjustment) | DEM.S.F03(StartTimeAdjustment) | DEM.S.F04(Pausable) | DEM.S.F05(ForecastAdjustment) | DEM.S.F06(ConstraintBasedAdjustment).",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:The list includes entries based on feature support:- 0x00, 0x01: SHALL be included if and only if DEM.S.F00(PowerAdjustment).- 0x02, 0x03: SHALL be included if and only if DEM.S.F04(Pausable).",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list includes entries based on feature support:- 0x00, 0x01: SHALL be included if and only if DEM.S.F00(PowerAdjustment).- 0x02: SHALL be included if and only if DEM.S.F03(StartTimeAdjustment).- 0x03, 0x04: SHALL be included if and only if DEM.S.F04(Pausable).- 0x05: SHALL be included if and only if DEM.S.F05(ForecastAdjustment).- 0x06: SHALL be included if and only if DEM.S.F06(ConstraintBasedAdjustment).- 0x07: SHALL be included if and only if DEM.S.F03(StartTimeAdjustment)|DEM.S.F05(ForecastAdjustment)|DEM.S.F06(ConstraintBasedAdjustment)",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "247.1.2. [TC-DEM-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-DEM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Device Energy Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "9.2.7.1",
                    "9.2.7.2",
                    "9.2.7.3",
                    "9.2.7.4",
                    "9.2.7.5",
                    "9.2.7.6",
                    "9.2.7.7",
                    "9.2.7.8"
                ],
                "PICS": [
                    "",
                    "DEM.S.A0000(ESAType)",
                    "DEM.S.A0001(ESACanGenerate)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0003(AbsMinPower)",
                    "DEM.S.A0004(AbsMaxPower)",
                    "DEM.S.A0005(PowerAdjustmentCapability)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.A0007(OptOutState)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theESATypeattribute.",
                    "TH reads from the DUT theESACanGenerateattribute.",
                    "TH reads from the DUT theESAStateattribute.",
                    "TH reads from the DUT theAbsMinPowerattribute.",
                    "TH reads from the DUT theAbsMaxPowerattribute.",
                    "TH reads from the DUT thePowerAdjustmentCapabilityattribute.",
                    "TH reads from the DUT theForecastattribute.",
                    "TH reads from the DUT theOptOutStateattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an a ESATypeEnum (enum8) value to match the DUT type.",
                    "Verify that the DUT response contains a boolean value to match the DUT capability.",
                    "Verify that the DUT response contains an a ESAStateEnum (enum8) value to match the DUT state (Online or Offline).",
                    "Verify that the DUT response contains a power-mW value to match the DUT capability, and is negative if and only if the ESACanGenerate read in step 3 is TRUE.",
                    "Verify that the DUT response contains a power-mW value to match the DUT capability, and greater than or equal to the AbsMinPower read in step 5.",
                    "Verify that the DUT response contains a list of PowerAdjustStruct value.",
                    "Verify that the DUT response contains a ForecastStruct value.",
                    "Verify that the DUT response contains an OptOutStateEnum (enum8) value 0 (NoOptOut)."
                ]
            }
        },
        {
            "Test Case Name": "247.1.3. [TC-DEM-2.2] Power Adjustment feature functionality with DUT as Server",
            "Test Case ID": "TC-DEM-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Device Energy Management cluster server with Power Adjustment feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "13a",
                    "13b",
                    "14",
                    "15",
                    "15a",
                    "15b",
                    "16",
                    "16a",
                    "16b",
                    "17"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0005(PowerAdjustmentCapability)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.C01.Rsp(CancelPowerAdjustRequest)",
                    "DEM.S.C01.Rsp(CancelPowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C00.Rsp(PowerAdjustRequest)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Power Adjustment Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT thePowerAdjustmentCapability",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandPowerAdjustRequestwith power=MinPower and duration=MaxDuration from first PowerAdjustStruct, Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends commandCancelPowerAdjustRequest",
                    "TH sends commandCancelPowerAdjustRequest",
                    "TH sends commandPowerAdjustRequestwith power=OverallMaxPower+1 duration=OverallMinDuration Cause=LocalOptimization",
                    "TH sends commandPowerAdjustRequestwith power=OverallMinPower duration=OverallMaxDuration+1 Cause=LocalOptimization",
                    "TH sends commandPowerAdjustRequestwith power=OverallMinPower-1 duration=OverallMaxDuration Cause=LocalOptimization",
                    "TH sends commandPowerAdjustRequestwith power=OverallMaxPower duration=OverallMinDuration-1 Cause=LocalOptimization",
                    "TH sends commandPowerAdjustRequestwith power=MaxPower,duration=MinDuration from first PowerAdjustStruct Cause=LocalOptimization",
                    "TH sends commandPowerAdjustRequestwith power=MinPower,duration=MaxDuration from first PowerAdjustStruct Cause=LocalOptimization",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandPowerAdjustRequestwith power=MaxPower,duration=MinDuration from first PowerAdjustStruct Cause=GridOptimization",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Power Adjustment Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Note value for later. Determine the OverallMaxPower and OverallMaxDuration as the largest MaxPower and MaxDuration of the PowerAdjustStructs returned, and similarly the OverallMinPower and OverallMinDuration as the smallest of the MinPower and MinDuration values.",
                    "Value has to be 0x00 (NoOptOut)",
                    "Event DEM.S.E00(PowerAdjustStart) sent",
                    "Value has to be 0x04 (PowerAdjustActive)",
                    "Event DEM.S.E01(PowerAdjustEnd) sent with Cause=Cancelled",
                    "Command response is FAILURE",
                    "Command response is FAILURE",
                    "Command response is FAILURE",
                    "Command response is FAILURE",
                    "Command response is FAILURE",
                    "Event DEM.S.E00(PowerAdjustStart) sent",
                    "No event sent",
                    "No event sent",
                    "Value has to be 0x04 (PowerAdjustActive)",
                    "Value has to be 0x02 (GridOptOut)",
                    "Command response is FAILURE",
                    "Event DEM.S.E01(PowerAdjustEnd) sent with Cause=UserOptOut, Duration= approx time from step 11 to step 15, EnergyUse= a valid value",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x03 (OptOut)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x00 (NoOptOut)",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "247.1.4. [TC-DEM-2.3] Start Time Adjustment feature functionality with DUT as Server",
            "Test Case ID": "TC-DEM-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Device Energy Management cluster server with Start Time Adjustment feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "4b",
                    "5",
                    "5a",
                    "5b",
                    "6",
                    "6a",
                    "6b",
                    "7",
                    "7a",
                    "7b",
                    "8",
                    "8a",
                    "8b",
                    "8c",
                    "9",
                    "9a",
                    "9b",
                    "10",
                    "10a",
                    "10b",
                    "11",
                    "11a",
                    "11b",
                    "12",
                    "12a",
                    "12b",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.A0007(OptOutState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C02.Rsp(StartTimeAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C02.Rsp(StartTimeAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C02.Rsp(StartTimeAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C07.Rsp(CancelRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C02.Rsp(StartTimeAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C02.Rsp(StartTimeAdjustRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Start Time Adjustment Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH reads from the DUT theOptOutState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandStartTimeAdjustRequestwith RequestedStartTime=EarliestStartTime from Forecast, Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandStartTimeAdjustRequestwith RequestedStartTime=EarliestStartTime from Forecast, Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandStartTimeAdjustRequestwith RequestedStartTime=StartTime+(LatestEndTime-EndTime) from Forecast, Cause=GridOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandCancelRequest",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandStartTimeAdjustRequestwith RequestedStartTime=EarliestStartTime-1 from Forecast, Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandStartTimeAdjustRequestwith RequestedStartTime=StartTime+(LatestEndTime-EndTime)+1 from Forecast, Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Start Time Adjustment Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to include EarliestStartTime\u21d0StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "Value has to be 0x00 (NoOptOut)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x01 (LocalOptOut)",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Value has to be unchanged from step 3b",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x00 (NoOptOut)",
                    "Command accepted",
                    "Value has to be 0x01 (Online)",
                    "Value has to include EarliestStartTime=StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Local Optimization",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x01 (LocalOptOut)",
                    "Value has to include EarliestStartTime\u21d0StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "Command accepted",
                    "Value has to be 0x01 (Online)",
                    "Value has to include EarliestStartTime\u21d0StartTime, LatestEndTime=EndTime, and ForecastUpdateReason=Grid Optimization",
                    "Command accepted",
                    "Value has to be 0x01 (Online)",
                    "Value has to include EarliestStartTime\u21d0StartTime, LatestEndTime>=EndTime, and ForecastUpdateReason=Internal Optimization",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Value has to include StartTime and EndTime unchanged from step 10b",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Value has to include StartTime and EndTime unchanged from step 10b",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "247.1.5. [TC-DEM-2.4] Pausable feature functionality with DUT as Server",
            "Test Case ID": "TC-DEM-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Device Energy Management cluster server with Pausable feature.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "5",
                    "5a",
                    "6",
                    "6a",
                    "6b",
                    "7",
                    "7a",
                    "8",
                    "8a",
                    "9",
                    "9a",
                    "9b",
                    "9c",
                    "10",
                    "10a",
                    "10b",
                    "11",
                    "11a",
                    "11b",
                    "12",
                    "12a",
                    "12b",
                    "13",
                    "13a",
                    "13b",
                    "14",
                    "14a",
                    "15",
                    "15a",
                    "16",
                    "16a",
                    "17",
                    "17a",
                    "17b",
                    "18",
                    "18a",
                    "19",
                    "20"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.A0006(Forecast)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0007(OptOutState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C04.Rsp(ResumeRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C04.Rsp(ResumeRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "Wait for minPauseDuration",
                    "DEM.S.A0002(ESAState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.A0006(Forecast)",
                    "DEM.S.C03.Rsp(PauseRequest)",
                    "DEM.S.A0002(ESAState)",
                    "DEM.S.C04.Rsp(ResumeRequest)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration-1 from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends commandPauseRequestwith Duration=MaxPauseDuration+1 from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Grid Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=GridOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Local Optimization Test Event",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH reads from the DUT theForecast",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for User Opt-out Test Event Clear",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theOptOutState",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandResumeRequest",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandResumeRequest",
                    "TH reads from the DUT theESAState",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "",
                    "TH reads from the DUT theESAState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event Next Slot",
                    "TH reads from the DUT theESAState",
                    "TH reads from the DUT theForecast",
                    "TH sends commandPauseRequestwith Duration=MinPauseDuration from Forecast for slot[0], Cause=LocalOptimization",
                    "TH reads from the DUT theESAState",
                    "TH sends commandResumeRequest",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.DEM.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.DEM.TEST_EVENT_TRIGGER for Pausable Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to include IsPausable=True, slot[0].SlotIsPausable=True, slot[0].MinPauseDuration>1, slot[0].MaxPauseDuration>1, slot[1].SlotIsPausable=False, ActiveSlotNumber=0, and ForecastUpdateReason=Internal Optimization",
                    "Value has to be 0x00 (NoOptOut)",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x02 (GridOptOut)",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Event DEM.S.E02(Paused) sent",
                    "Value has to be 0x05 (Paused)",
                    "Event DEM.S.E03(Resumed) sent with Cause=3 (UserOptOut)",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x03 (OptOut)",
                    "Value has to include  ForecastUpdateReason=Internal Optimization",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to be 0x00 (NoOptOut)",
                    "Event DEM.S.E02(Paused) sent",
                    "Value has to be 0x05 (Paused)",
                    "Value has to include ForecastUpdateReason=Local Optimization",
                    "Event DEM.S.E03(Resumed) sent with Cause=4 (Cancelled)",
                    "Value has to be 0x01 (Online)",
                    "Value has to include IsPausable=True, slot[0].SlotIsPausable=True, slot[0].MinPauseDuration>1, slot[0].MaxPauseDuration>1, slot[1].SlotIsPausable=False, ActiveSlotNumber=0, ForecastUpdateReason=Internal Optimization",
                    "Event DEM.S.E02(Paused) sent",
                    "Value has to be 0x05 (Paused)",
                    "Value has to include ForecastUpdateReason=Local Optimization",
                    "Event DEM.S.E03(Resumed) sent with Cause=4 (Cancelled)",
                    "Value has to be 0x01 (Online)",
                    "Event DEM.S.E02(Paused) sent",
                    "Value has to be 0x05 (Paused)",
                    "Event DEM.S.E03(Resumed) sent with Cause=0 (NormalCompletion)",
                    "Value has to be 0x01 (Online)",
                    "",
                    "Value has to be 0x01 (Online)",
                    "Value has to include ActiveSlotNumber=1",
                    "Command rejected",
                    "Value has to be 0x01 (Online)",
                    "Command rejected",
                    ""
                ]
            }
        }
    ],
    "Device_Energy_Management_Mode": [
        {
            "Test Case Name": "252.1.1. [TC-DEMM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-DEMM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Device Energy Management Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_DEMM_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DEMM.S.A0000(SupportedModes)",
                    "DEMM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster-derived tag value (No Optimization, Device Optimization, Local Optimization, Grid Optimization) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (RapidCool, RapidFreeze)Verify that at least one ModeOptionsStruct entry includes either the RapidCool semantic tag or the RapidFreeze semantic tag in the SemanticTags fieldSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "252.2.1. [TC-DEMM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-DEMM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DEMM.S.A0000(SupportedModes)",
                    "DEMM.S.A0001(CurrentMode)",
                    "DEMM.S.C00.Rsp(ChangeToMode)",
                    "DEMM.S.M.CAN_TEST_MODE_FAILURE & DEMM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DEMM.S.A0001(CurrentMode) & DEMM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DEMM.S.M.CAN_TEST_MODE_FAILURE & DEMM.S.C00.Rsp(ChangeToMode)",
                    "DEMM.S.A0001(CurrentMode)",
                    "DEMM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DEMM.S.A0001(CurrentMode) & DEMM.S.M.CAN_MANUALLY_CONTROLLED",
                    "DEMM.S.C00.Rsp(ChangeToMode)",
                    "DEMM.S.A0001(CurrentMode)",
                    "DEMM.S.C00.Rsp(ChangeToMode)",
                    "DEMM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.DEMM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.DEMM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.DEMM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.DEMM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.DEMM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.DEMM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.DEMM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "252.3.1. [TC-DEMM-3.1] On Mode functionality with DUT as Server ",
            "Test Case ID": "TC-DEMM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DEMM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "DEMM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "DEMM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "DEMM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "DEMM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "252.3.2. [TC-DEMM-3.2] Startup Mode functionality with DUT as Server ",
            "Test Case ID": "TC-DEMM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0000(SupportedModes)",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0001(CurrentMode)",
                    "DEMM.S.A0000(SupportedModes)",
                    "DEMM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "252.3.3. [TC-DEMM-3.3] On Mode and Startup Mode functionality with DUT as Server ",
            "Test Case ID": "TC-DEMM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0000(SupportedModes)",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0003(OnMode), DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0000(SupportedModes), DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0003(OnMode)",
                    "DEMM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "DEMM.S.A0002(StartUpMode)",
                    "DEMM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Microwave_Oven_Control": [
        {
            "Test Case Name": "255.1.1. [TC-MWOCTRL-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-MWOCTRL-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if MWOCTRL.S.F00(PWRNUM) and !MWOCTRL.S.F01(WATTS)- bit 1: SHALL be 1 if and only if MWOCTRL.S.F01(WATTS) and !MWOCTRL.S.F00(PWRNUM)- bit 2: SHALL be 1 if and only if MWOCTRL.S.F02(PWRLMTS)All remaining bits SHALL be 0.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x0001\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list MAY include these optional entries:- 0x0002: SHALL be included if and only if MWOCTRL.S.F00(PWRNUM) supported.- 0x0003: SHALL be included if and only if MWOCTRL.S.F02(PWRLMTS) supported.- 0x0004: SHALL be included if and only if MWOCTRL.S.F02(PWRLMTS) supported.- 0x0005: SHALL be included if and only if MWOCTRL.S.F02(PWRLMTS) supported.- 0x0006: SHALL be included if and only if MWOCTRL.S.F01(WATTS) supported.- 0x0007: SHALL be included if and only if MWOCTRL.S.F01(WATTS) supported.- 0x0008",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list SHALL include all the mandatory entries:0x00.The list MAY include these optional entries:- 0x01.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "255.1.2. [TC-MWOCTRL-2.1] Primary functionality with DUT as Server",
            "Test Case ID": "TC-MWOCTRL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Microwave Oven Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.8.13.5.1",
                    "AC.8.13.5.0",
                    "AC.8.13.6.2",
                    "AC.8.13.5.0",
                    "AC.8.13.6.2",
                    "AC.8.13.5.0",
                    "AC.8.13.6.2",
                    "AC.8.13.5.0",
                    "AC.8.13.5.8",
                    "AC.8.13.6.2",
                    "AC.8.13.6.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MWOCTRL.S.A0008(WattRating)",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theMaxCookTimeattribute.",
                    "TH reads from the DUT theCookTimeattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                         with CookTime set to 60",
                    "TH reads from the DUT theCookTimeattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                         with CookTime set to 1",
                    "TH reads from the DUT theCookTimeattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                         with CookTime set to MaxCookTime",
                    "TH reads from the DUT theCookTimeattribute.",
                    "TH reads from the DUT theWattRatingattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                         with CookTime set to 0",
                    "TH sends commandSetCookingParametersto DUT\n                                                                         with CookTime set to MaxCookTime+1"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an elapsed-s value between 1 and 86400 inclusive.Save value as MaxCookTime.",
                    "Verify that the DUT response contains an elapsed-s value between 1 and MaxCookTime inclusive.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the CookTime value 60.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the CookTime value 1.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the CookTime value MaxCookTime.",
                    "Verify that the DUT response contains a uint16 value.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)"
                ]
            }
        },
        {
            "Test Case Name": "255.1.3. [TC-MWOCTRL-2.2] Secondary functionality with DUT as Server",
            "Test Case ID": "TC-MWOCTRL-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the secondary functionality of the Microwave Oven Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "",
                    "",
                    "AC.8.13.5.3",
                    "",
                    "AC.8.13.5.4",
                    "",
                    "AC.8.13.5.5",
                    "AC.8.13.5.2",
                    "AC.8.13.6.2",
                    "AC.8.13.5.2",
                    "AC.8.13.6.2",
                    "AC.8.13.5.2",
                    "AC.8.13.6.2",
                    "AC.8.13.5.2",
                    "AC.8.13.6.2",
                    "AC.8.13.5.5",
                    "AC.8.13.6.2"
                ],
                "PICS": [
                    "",
                    "",
                    "MWOCTRL.S.F02(PWRLMTS)",
                    "",
                    "MWOCTRL.S.F02(PWRLMTS)",
                    "",
                    "MWOCTRL.S.F02(PWRLMTS)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "Set variable MinPowerValue to 10",
                    "TH reads from the DUT theMinPowerattribute.",
                    "Set variable MaxPowerValue to 100",
                    "TH reads from the DUT theMaxPowerattribute.",
                    "Set variable PowerStepValue to 10",
                    "TH reads from the DUT thePowerStepattribute.",
                    "TH reads from the DUT thePowerSettingattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                     with PowerSetting set to\n                                                                     (PowerValue-MinPowerValue)%(MaxPowerValue-MinPowerValue)+PowerStepValue+MinPowerValue\n                                                                     and Store the value as NewPowerValue",
                    "TH reads from the DUT thePowerSettingattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                     with PowerSetting set to MinPowerValue",
                    "TH reads from the DUT thePowerSettingattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                     with PowerSetting set to MaxPowerValue",
                    "TH reads from the DUT thePowerSettingattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                     with PowerSetting set to MaxPowerValue+1",
                    "If PowerStepValue=1, exit test case.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                     with PowerSetting = MinPowerValue+(PowerStepValue/2)"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify that the DUT response contains a uint8 value with a value between 1 and 99.Store the value as MinPowerValue.",
                    "",
                    "Verify that the DUT response contains a unit8 value with a value from MinPowerValue + 1 to 100 inclusive.Store the value as MaxPowervalue.",
                    "",
                    "Verify that the DUT response contains a uint8 value with a value between 1 and MaxPowerValue inclusive.Verify that the DUT response contains a value such that(MaxPower - MinPower) % PowerStep == 0Store the value as PowerStepValue.",
                    "1. Verify that the DUT response contains a uint8.2. Verify that the DUT response contains a value between MinPowerValue and MaxPowerValue inclusive.3. Verify that the DUT response contains a value such that(PowerSetting - MinPower) % PowerStep == 04. Store the value as PowerValue.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the same value as NewPowerValue.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the same value as MinPowerValue.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the same value as MaxPowerValue.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)"
                ]
            }
        },
        {
            "Test Case Name": "255.1.4. [TC-MWOCTRL-2.4] WATTS functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-MWOCTRL-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the WATTS functionality of the Microwave Oven Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "AC.8.13.5.6",
                    "AC.8.13.5.7",
                    "AC.8.13.6.2",
                    "AC.8.13.5.7"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH reads from the DUT theSupportedWattsattribute.",
                    "TH reads from the DUT theSelectedWattIndexattribute.",
                    "TH sends commandSetCookingParametersto DUT\n                                                                                    with WattSettingIndex set to\n                                                                                    (SelectedWattIndex + 1) % (len(SupportedWattsList))\n                                                                                    and save value written as wattSettingIndex",
                    "TH reads from the DUT theSelectedWattIndexattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of uint16 values.Save response as SupportedWattsList.",
                    "Verify that the DUT response contains a unit8 value with a value between 0\n                                                                                                                                    and the length of SupportedWattsList - 1.Save response as SelectedWattIndex.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains wattSettingIndex."
                ]
            }
        },
        {
            "Test Case Name": "255.1.5. [TC-MWOCTRL-2.5] Add More Time command with DUT as Server",
            "Test Case ID": "TC-MWOCTRL-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional functionality of the Microwave Oven Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "AC.8.13.6.2",
                    "AC.8.13.6.3",
                    "AC.8.13.5.0"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH",
                    "TH sends commandSetCookingParametersto DUT\n                                                                                    with CookTime set to 60",
                    "TH sends commandAddMoreTimecommand to DUT\n                                                                                    with a value of 30.",
                    "TH reads from the DUT theCookTimeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains with a value of 90."
                ]
            }
        }
    ],
    "Microwave_Oven_Mode": [
        {
            "Test Case Name": "260.1.1. [TC-MWOM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-MWOM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Microwave Oven Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, AC.8.12.5",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "MWOM.S.A0000(SupportedModes)",
                    "MWOM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster-derived tag value (Normal, Defrost) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Normal, Defrost)Verify that at least one ModeOptionsStruct entry includes the Normal mode tagSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        }
    ],
    "Boolean_State_Configuration": [
        {
            "Test Case Name": "265.1.1. [TC-BOOLCFG-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Boolean State Configuration cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theSupportedSensitivityLevelsattribute. Store the value as numberOfSupportedLevels.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theCurrentSensitivityLevelattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theDefaultSensitivityLevelattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theAlarmsSuppressedattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theAlarmsEnabledattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theAlarmsSupportedattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theSensorFaultattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 2 and 10.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 0 and the value of numberOfSupportedLevels.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 0 and the value of numberOfSupportedLevels.",
                    "Verify that the DUT response contains an map8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an map8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an map8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an map8 value. Value has to be between a range of 0 and 3.",
                    "Verify that the DUT response contains an map8 value. Value has to be between a range of 0 and 1."
                ]
            }
        },
        {
            "Test Case Name": "265.1.2. [TC-BOOLCFG-3.1] SensitivityLevel with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the sensitivity level functionality of the cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "2c",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If theSENSLVLfeature is not supported on the cluster, skip remaining steps and end test case.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theSupportedSensitivityLevelsattribute. Store the value as numberOfSupportedLevels.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theDefaultSensitivityLevelattribute. Store the value as defaultLevel.",
                    "TH reads from the DUT theCurrentSensitivityLevelattribute. Store the value as currentLevel.",
                    "TH loops through the number of supported sensitivity levels (0 to numberOfSupportedLevels - 1) and\n                TH writes to the DUT the each value to theCurrentSensitivityLevelattribute.",
                    "If theDefaultSensitivityLevelattribute is supported on the cluster, TH writes to the DUT theCurrentSensitivityLevelattribute to a supported value that is NOT the value of defaultLevel.",
                    "If theDefaultSensitivityLevelattribute is supported on the cluster, TH writes to the DUT theCurrentSensitivityLevelattribute to the value of defaultLevel.",
                    "TH writes to the DUT theCurrentSensitivityLevelattribute to numberOfSupportedLevels.",
                    "TH writes to the DUT theCurrentSensitivityLevelattribute to 255.",
                    "TH writes to the DUT theCurrentSensitivityLevelattribute to the value of currentLevel."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) for all write interactions.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87).",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87).",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "265.1.3. [TC-BOOLCFG-4.1] AlarmsSupported attribute with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the value of the AlarmsSupported attribute matches the bits set in the feature map.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4a",
                    "4b",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If theVISorAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsSupportedattribute. Store the value as supportedAlarms.",
                    "If theVISfeature is supported on the cluster.",
                    "If theVISfeature is not supported on the cluster.",
                    "If theAUDfeature is supported on the cluster.",
                    "If theAUDfeature is not supported on the cluster."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is not 0.",
                    "Verify that bit 0 in supportedAlarms is set to 1.",
                    "Verify that bit 0 in supportedAlarms is set to 0.",
                    "Verify that bit 1 in supportedAlarms is set to 1.",
                    "Verify that bit 1 in supportedAlarms is set to 0."
                ]
            }
        },
        {
            "Test Case Name": "265.1.4. [TC-BOOLCFG-4.2] AlarmsActive attribute with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-4.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the AlarmsActive attribute is updated according to the trigger and untrigger of the alarms.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4",
                    "5",
                    "6a",
                    "6b",
                    "7a",
                    "7b",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If theAlarmsEnabledattribute is supported on the cluster, create variable named enabledAlarms",
                    "If theAlarmsEnabledattribute is supported on the cluster andVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "If theAlarmsEnabledattribute is supported on the cluster andAUDfeature is supported on the cluster, set bit 1 in enabledAlarms to 1.",
                    "If the attribute is supported on the cluster, TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theVISorAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute. Store the value as activeAlarms.",
                    "If theVISfeature is supported on the cluster.",
                    "If theVISfeature is not supported on the cluster.",
                    "If theAUDfeature is supported on the cluster.",
                    "If theAUDfeature is not supported on the cluster.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event.",
                    "If theVISorAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is not 0.",
                    "Verify that bit 0 in activeAlarms is set to 1.",
                    "Verify that bit 0 in activeAlarms is set to 0.",
                    "Verify that bit 1 in activeAlarms is set to 1.",
                    "Verify that bit 1 in activeAlarms is set to 0.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0."
                ]
            }
        },
        {
            "Test Case Name": "265.1.5. [TC-BOOLCFG-4.3] AlarmsEnabled functionality for inactive alarms with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-4.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the AlarmsActive attribute is updated according to the enabled and disabled alarms set\nin the AlarmsEnabled attribute, when alarms are inactive.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15a",
                    "15b",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If theAlarmsEnabledattribute is not supported on the cluster, skip remaining steps and end test case.",
                    "Create variable named enabledAlarms and set the value to 0.",
                    "If theVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theVISfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If theVISfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event.",
                    "If theVISfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "Set the value of enabledAlarms to 0.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theVISfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If theVISfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event.",
                    "If theAUDfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If theAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event.",
                    "If theAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "Set the value of enabledAlarms to 0.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If theAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 0 is set to 1 and bit 1 is set to 0, in the received value.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 0 is set to 0 and bit 1 is set to 1, in the received value.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0.",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "265.1.6. [TC-BOOLCFG-4.4] AlarmsEnabled functionality for active alarms with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-4.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the AlarmsActive attribute is updated according to the enabled and disabled alarms set\nin the AlarmsEnabled attribute, when alarms are active.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "5c",
                    "6",
                    "7",
                    "8",
                    "9a",
                    "9b",
                    "10",
                    "11",
                    "12a",
                    "12b",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If theAlarmsEnabledattribute is not supported on the cluster, skip remaining steps and end test case.",
                    "Create variable named enabledAlarms and set the value to 0.",
                    "If theVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "If theAUDfeature is supported on the cluster, set bit 1 in enabledAlarms to 1.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theVISorAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute. Store the value as activeAlarms.",
                    "If theVISfeature is supported on the cluster.",
                    "If theVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 0.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute. Store the value as activeAlarms.",
                    "If theAUDfeature is supported on the cluster.",
                    "If theAUDfeature is supported on the cluster, set bit 1 in enabledAlarms to 0.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsActiveattribute.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is not 0.",
                    "Verify that bit 0 in activeAlarms is set to 1.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 0 is set to 0, in the received value.",
                    "Verify that bit 1 in activeAlarms is set to 1.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 1 is set to 0, in the received value.",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "265.1.7. [TC-BOOLCFG-5.1] SuppressAlarm functionality for inactive alarms with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-5.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the SuppressAlarm command and that the AlarmsSuppressed attribute\nis updated according to the enabled and disabled alarms set in the AlarmsEnabled attribute,\nwhen alarms are inactive or not supported.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "5c",
                    "6",
                    "7a",
                    "7b",
                    "8",
                    "9a",
                    "9b",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If theSPRSfeature is not supported on the cluster, skip remaining steps and end test case.",
                    "Create variable named enabledAlarms and set the value to 0.",
                    "If theVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "If theAUDfeature is supported on the cluster, set bit 1 in enabledAlarms to 1.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event.",
                    "If theVISfeature is supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b01.",
                    "If theVISfeature is not supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b01.",
                    "TH reads from the DUT theAlarmsSuppressedattribute.",
                    "If theAUDfeature is supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b10.",
                    "If theVISfeature is not supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b10.",
                    "TH reads from the DUT theAlarmsSuppressedattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "status INVALID_IN_STATE(0xcb).",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0.",
                    "status INVALID_IN_STATE(0xcb).",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that the received value is 0."
                ]
            }
        },
        {
            "Test Case Name": "265.1.8. [TC-BOOLCFG-5.2] SuppressAlarm functionality for active alarms with DUT as Server",
            "Test Case ID": "TC-BOOLCFG-5.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the SuppressAlarm command and that the AlarmsSuppressed attribute\nis updated according to the enabled and disabled alarms set in the AlarmsEnabled attribute,\nwhen alarms are active.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "5c",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If theSPRSfeature is not supported on the cluster, skip remaining steps and end test case.",
                    "Create variable named enabledAlarms and set the value to 0.",
                    "If theVISfeature is supported on the cluster, set bit 0 in enabledAlarms to 1.",
                    "If theAUDfeature is supported on the cluster, set bit 1 in enabledAlarms to 1.",
                    "TH sends commandEnableDisableAlarmcommand with the value of enabledAlarms in the AlarmsToEnableDisable field.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorTrigger event.",
                    "If theVISfeature is supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b01.",
                    "If theVISfeature is supported on the cluster, TH reads from the DUT theAlarmsSuppressedattribute.",
                    "If theAUDfeature is supported on the cluster, TH sends commandSuppressAlarmcommand with AlarmsToSuppress field set to 0b10.",
                    "If theAUDfeature is supported on the cluster, TH reads from the DUT theAlarmsSuppressedattribute.",
                    "If theVISorAUDfeature is supported on the cluster, TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0\n                with EnableKey field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.BOOLCFG.S.TEST_EVENT_TRIGGER for SensorUntrigger event."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "",
                    "",
                    "",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 0 is set to 1, in the received value.",
                    "status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and that bit 1 is set to 1, in the received value.",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        }
    ],
    "Valve_Configuration_and_Control": [
        {
            "Test Case Name": "268.1.1. [TC-VALCC-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-VALCC-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Valve Configuration and Control cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theOpenDurationattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theDefaultOpenDurationattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theAutoCloseTimeattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theRemainingDurationattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theCurrentStateattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theTargetStateattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theCurrentLevelattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theTargetLevelattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theDefaultOpenLevelattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theValveFaultattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theLevelStepattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "Verify that the DUT response contains an uint32 value. Value has to be between a range of 1 and 4294967294 or null.",
                    "Verify that the DUT response contains an uint32 value. Value has to be between a range of 1 and 4294967294 or null.",
                    "Verify that the DUT response contains an uint64 value. Value has to be between a range of 0 and 18446744073709551614 or null.",
                    "Verify that the DUT response contains an uint32 value. Value has to be between a range of 0 and 4294967294 or null.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 2 or null.",
                    "Verify that the DUT response contains an enum8 value. Value has to be between a range of 0 and 2 or null.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 0 and 100 or null.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 0 and 100 or null.",
                    "Verify that the DUT response contains an uint8 value. Value has to be between a range of 1 and 100 or null.",
                    "Verify that the DUT response contains a map16 value. Value has to be between a range of 0 and 63.",
                    "Verify that the DUT response contains a uint8 value. Value has to be between a range of 1 and 50."
                ]
            }
        },
        {
            "Test Case Name": "268.1.2. [TC-VALCC-3.1] Basic state functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the basic behavior of the state attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH sends commandOpencommand with no fields populated.",
                    "TH reads from the DUT theTargetStateattribute.",
                    "TH reads from the DUT theCurrentStateattribute continuously until theOpenstate is returned.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theTargetStateattribute.",
                    "TH reads from the DUT theCurrentStateattribute continuously until theClosedstate is returned."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and received value isOpen.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains theTransitioningstate and,\n                                                                                      the final response contains theOpenstate.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and received value isClosed.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains theTransitioningstate and,\n                                                                                      the final response contains theClosedstate."
                ]
            }
        },
        {
            "Test Case Name": "268.1.3. [TC-VALCC-3.2] Basic level functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the basic behavior of the level attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If theLVLfeature is supported on the cluster, TH sends commandOpencommand withTargetLevelfield set to 100 and the remaining fields not populated.",
                    "If theLVLfeature is supported on the cluster, TH reads from the DUT theTargetLevelattribute.",
                    "If theLVLfeature is supported on the cluster, TH reads from the DUT theCurrentLevelattribute continuously until a value of 100 is returned.",
                    "If theLVLfeature is supported on the cluster, TH sends commandClosecommand.",
                    "If theLVLfeature is supported on the cluster, TH reads from the DUT theTargetLevelattribute.",
                    "If theLVLfeature is supported on the cluster, TH reads from the DUT theCurrentLevelattribute continuously until a value of 0 is returned."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is 100.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains raising values, which are not 100, and,\n                                                                                      the final response contains a value of 100.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is 0.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains decreasing values, which are not 0, and,\n                                                                                      the final response contains a value of 0."
                ]
            }
        },
        {
            "Test Case Name": "268.1.4. [TC-VALCC-3.3] DefaultOpenLevel functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior related to the DefaultOpenLevel attribute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If the attribute is supported on the cluster, TH reads from the DUT theDefaultOpenLevelattribute. Store the value as defaultOpenLevel.",
                    "If theDefaultOpenLevelattribute is supported on the cluster, TH sends commandOpencommand with no fields populated.",
                    "If theDefaultOpenLevelfeature is supported on the cluster, TH reads from the DUT theTargetLevelattribute.",
                    "If theDefaultOpenLevelfeature is supported on the cluster, TH reads from the DUT theCurrentLevelattribute continuously until a value equal to defaultOpenLevel is returned.",
                    "If theDefaultOpenLevelfeature is supported on the cluster, TH sends commandClosecommand.",
                    "If theDefaultOpenLevelfeature is supported on the cluster, TH reads from the DUT theTargetLevelattribute.",
                    "If theDefaultOpenLevelfeature is supported on the cluster, TH reads from the DUT theCurrentLevelattribute continuously until a value of 0 is returned."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is equal to defaultOpenLevel.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains raising values, which are not equal to defaultOpenLevel, and,\n                                                                                      the final response contains a value equal to defaultOpenLevel.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is 0.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains decreasing values, which are not 0, and,\n                                                                                      the final response contains a value of 0."
                ]
            }
        },
        {
            "Test Case Name": "268.1.5. [TC-VALCC-3.4] LevelStep behavior with DUT as Server",
            "Test Case ID": "TC-VALCC-3.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior related to the LevelStep attribute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAttributeListattribute.",
                    "If theLevelStepattribute is not supported on the cluster, skip remaining steps and end test case.",
                    "TH reads from the DUT theLevelStepattribute. Store the value as levelStep.",
                    "Create variable named levelValue and set the value to 1.TH sends commandOpencommand withTargetLevelfield set to levelValue and the remaining fields not populated.Perform this step for all levelValue in the range 1 - 99.",
                    "TH sends commandClosecommand."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theAttributeListattribute.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "If levelValue % levelStep = 0: Verify DUT responds w/ status SUCCESS(0x00).If levelValue % levelStep != 0: Verify DUT responds w/ status CONSTRAINT_ERROR(0x87).",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "268.1.6. [TC-VALCC-4.1] Duration functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-4.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior related to the duration functionality of a valve.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH sends commandOpencommand with OpenDuration field set to 60 and the remaining fields not populated.",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "Wait for 5 seconds",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is 60.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of 55 to 60.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of 50 to 55.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned."
                ]
            }
        },
        {
            "Test Case Name": "268.1.7. [TC-VALCC-4.2] DefaultOpenDuration functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-4.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior related to the DefaultOpenDuration attribute.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theDefaultOpenDurationattribute. Store the value as defaultOpenDuration.",
                    "If defaultOpenDuration is Null, set defaultOpenDuration to 60 and TH writes to the DUT theDefaultOpenDurationattribute with the defaultOpenDuration value.",
                    "TH sends commandOpencommand with no fields populated.",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "Wait for 5 seconds",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is equal to defaultOpenDuration.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of (defaultOpenDuration - 5) to defaultOpenDuration.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of (defaultOpenDuration - 10) to (defaultOpenDuration - 5).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned."
                ]
            }
        },
        {
            "Test Case Name": "268.1.8. [TC-VALCC-4.3] AutoCloseTime functionality (no synchronized time) with DUT as Server",
            "Test Case ID": "TC-VALCC-4.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the AutoCloseTime attribute\nwhen time has not been synchronized in the Time Synchronization cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If the TimeSync feature is not supported on the cluster, skip remaining steps and end test case.",
                    "TH reads from the DUT theUTCTimeattribute in Time Synchronization cluster on EP0.",
                    "If theUTCTimeattribute is not null, skip remaining steps and end test case.",
                    "TH sends commandOpencommand with no fields populated.",
                    "TH reads from the DUT theAutoCloseTimeattribute.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theAutoCloseTimeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned."
                ]
            }
        },
        {
            "Test Case Name": "268.1.9. [TC-VALCC-4.4] AutoCloseTime functionality (synchronized time) with DUT as Server",
            "Test Case ID": "TC-VALCC-4.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the AutoCloseTime attribute\nwhen time has been synchronized in the Time Synchronization cluster.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9a",
                    "9b",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeaturemapattribute.",
                    "If the TimeSync feature is not supported on the cluster, skip remaining steps and end test case.",
                    "TH reads from the DUT theUTCTimeattribute in Time Synchronization cluster on EP0.",
                    "If theUTCTimeattribute is null, TH saves the current UTC time expressed in the Matter epoch as `th_utc` and sends aSetUTCTimecommand to the DUT with- UTCTime field set toth_utc- Granularity field set to MillisecondsGranularity",
                    "TH sends commandOpencommand with OpenDuration field set to 60 and the remaining fields not populated.",
                    "TH reads from the DUT theUTCTimeattribute in Time Synchronization cluster on EP0. Store the value as utcTime.",
                    "TH reads from the DUT theAutoCloseTimeattribute.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theAutoCloseTimeattribute.",
                    "TH reads from the DUT theDefaultOpenDurationattribute. Store the value as defaultOpenDuration.",
                    "If defaultOpenDuration is Null, set defaultOpenDuration to 60 and TH writes to the DUT theDefaultOpenDurationattribute with the defaultOpenDuration value.",
                    "TH sends commandOpencommand with no fields populated.",
                    "TH reads from the DUT theUTCTimeattribute in Time Synchronization cluster on EP0. Store the value as utcTime2.",
                    "TH reads from the DUT theAutoCloseTimeattribute.",
                    "TH sends commandClosecommand.",
                    "TH reads from the DUT theAutoCloseTimeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theFeaturemapattribute.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of utcTime + 55000000 (55 seconds as microseconds) to utcTime + 60000000 (60 seconds as microseconds).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and verify the value it not null.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of utcTime2 + ((defaultOpenDuration - 5) * 1000000) to utcTime2 + (defaultOpenDuration * 1000000).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned."
                ]
            }
        },
        {
            "Test Case Name": "268.1.10. [TC-VALCC-4.5] Auto close functionality with DUT as Server",
            "Test Case ID": "TC-VALCC-4.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior related to the auto close functionality of a valve.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH sends commandOpencommand with OpenDuration field set to 5 and the remaining fields not populated.",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "TH reads from the DUT theCurrentStateattribute continuously until theOpenstate is returned.",
                    "Wait for 6 seconds",
                    "TH reads from the DUT theOpenDurationattribute.",
                    "TH reads from the DUT theRemainingDurationattribute.",
                    "TH reads from the DUT theCurrentStateattribute continuously until theClosedstate is returned."
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is 5.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and the received value is in the range of 1 to 5.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains theTransitioningstate and,\n                                                                                      the final response contains theOpenstate.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00) and a null is returned.",
                    "Verify DUT responds w/ status SUCCESS(0x00), the intermediate responses contains theTransitioningstate and,\n                                                                                      the final response contains theClosedstate."
                ]
            }
        }
    ],
    "Oven_Mode": [
        {
            "Test Case Name": "273.1.1. [TC-OTCCM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-OTCCM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Oven Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, AC.8.12.5",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "OTCCM.S.A0000(SupportedModes)",
                    "OTCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined derived cluster tag value (Bake(0x4000), Convection(0x4001), Grill(0x4002), Roast(0x4003), Clean(0x4004), Convection Bake(0x4005), Convection Roast(0x4006), Warming(0x4007), Proofing(0x4008)) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Normal, Defrost)Verify that at least one ModeOptionsStruct entry includes the Bake(0x4000) mode tag in the ModeTags fieldSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "273.2.1. [TC-OTCCM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-OTCCM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "OTCCM.S.A0000(SupportedModes)",
                    "OTCCM.S.A0001(CurrentMode)",
                    "OTCCM.S.C00.Rsp(ChangeToMode)",
                    "OTCCM.S.M.CAN_TEST_MODE_FAILURE & OTCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "OTCCM.S.A0001(CurrentMode) & OTCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "OTCCM.S.M.CAN_TEST_MODE_FAILURE & OTCCM.S.C00.Rsp(ChangeToMode)",
                    "OTCCM.S.A0001(CurrentMode)",
                    "OTCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "OTCCM.S.A0001(CurrentMode) & OTCCM.S.M.CAN_MANUALLY_CONTROLLED",
                    "OTCCM.S.C00.Rsp(ChangeToMode)",
                    "OTCCM.S.A0001(CurrentMode)",
                    "OTCCM.S.C00.Rsp(ChangeToMode)",
                    "OTCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.OTCCM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.OTCCM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.OTCCM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.OTCCM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.OTCCM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.OTCCM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.OTCCM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "273.3.1. [TC-OTCCM-3.1] On Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-OTCCM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "OTCCM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OTCCM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "OTCCM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "OTCCM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "OTCCM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "273.3.2. [TC-OTCCM-3.2] Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-OTCCM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0000(SupportedModes)",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0001(CurrentMode)",
                    "OTCCM.S.A0000(SupportedModes)",
                    "OTCCM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "273.3.3. [TC-OTCCM-3.3] On Mode and Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-OTCCM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0000(SupportedModes)",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0003(OnMode), OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0000(SupportedModes), OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0003(OnMode)",
                    "OTCCM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "OTCCM.S.A0002(StartUpMode)",
                    "OTCCM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Energy_EVSE": [
        {
            "Test Case Name": "278.1.1. [TC-EEVSE-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-EEVSE-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Energy EVSE cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "11a",
                    "12",
                    "12a",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "17a",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "",
                    "9.6.8.1",
                    "9.6.8.2",
                    "9.6.8.3",
                    "9.6.8.4",
                    "9.6.8.5",
                    "9.6.8.6",
                    "9.6.8.7",
                    "9.6.8.8",
                    "9.6.8.9",
                    "9.6.8.10",
                    "9.6.8.10",
                    "9.6.8.11",
                    "9.6.8.11",
                    "9.6.8.14",
                    "9.6.8.15",
                    "9.6.8.16",
                    "9.6.8.17",
                    "9.6.8.18",
                    "9.6.8.18",
                    "9.6.8.19",
                    "9.6.8.20",
                    "9.6.8.21",
                    "9.6.8.22.1",
                    "9.6.8.22.2",
                    "9.6.8.22.3",
                    "9.6.8.22.4"
                ],
                "PICS": [
                    "",
                    "{PICS_SPICS_SA_STATE}",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0002(FaultState)",
                    "EEVSE.S.A0003(ChargingEnabledUntil)",
                    "EEVSE.S.A0004(DischargingEnabledUntil)",
                    "EEVSE.S.A0005(CircuitCapacity)",
                    "EEVSE.S.A0006(MinimumChargeCurrent)",
                    "EEVSE.S.A0007(MaximumChargeCurrent)",
                    "EEVSE.S.A0008(MaximumDischargeCurrent)",
                    "EEVSE.S.A0009(UserMaximumChargeCurrent)",
                    "EEVSE.S.A0009(UserMaximumChargeCurrent)",
                    "EEVSE.S.A000a(RandomizationDelayWindow)",
                    "EEVSE.S.A000a(RandomizationDelayWindow)",
                    "EEVSE.S.A0023(NextChargeStartTime)",
                    "EEVSE.S.A0024(NextChargeTargetTime)",
                    "EEVSE.S.A0025(NextChargeRequiredEnergy)",
                    "EEVSE.S.A0026(NextChargeTargetSoC)",
                    "EEVSE.S.A0027(ApproximateEVEfficiency)",
                    "EEVSE.S.A0027(ApproximateEVEfficiency)",
                    "EEVSE.S.A0030(StateOfCharge)",
                    "EEVSE.S.A0031(BatteryCapacity)",
                    "EEVSE.S.A0032(VehicleID)",
                    "EEVSE.S.A0040(SessionID)",
                    "EEVSE.S.A0041(SessionDuration)",
                    "EEVSE.S.A0042(SessionEnergyCharged)",
                    "EEVSE.S.A0043(SessionEnergyDischarged)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStateattribute.",
                    "TH reads from the DUT theSupplyStateattribute.",
                    "TH reads from the DUT theFaultStateattribute.",
                    "TH reads from the DUT theChargingEnabledUntilattribute.",
                    "TH reads from the DUT theDischargingEnabledUntilattribute.",
                    "TH reads from the DUT theCircuitCapacityattribute.",
                    "TH reads from the DUT theMinimumChargeCurrentattribute.",
                    "TH reads from the DUT theMaximumChargeCurrentattribute.",
                    "TH reads from the DUT theMaximumDischargeCurrentattribute.",
                    "TH writes to the DUT theUserMaximumChargeCurrentattribute value 30000.",
                    "TH reads from the DUT theUserMaximumChargeCurrentattribute.",
                    "TH writes to the DUT theRandomizationDelayWindowattribute value 600.",
                    "TH reads from the DUT theRandomizationDelayWindowattribute.",
                    "TH reads from the DUT theNextChargeStartTimeattribute.",
                    "TH reads from the DUT theNextChargeTargetTimeattribute.",
                    "TH reads from the DUT theNextChargeRequiredEnergyattribute.",
                    "TH reads from the DUT theNextChargeTargetSoCattribute.",
                    "TH writes to the DUT theApproximateEVEfficiencyattribute value 3500.",
                    "TH reads from the DUT theApproximateEVEfficiencyattribute.",
                    "TH reads from the DUT theStateOfChargeattribute.",
                    "TH reads from the DUT theBatteryCapacityattribute.",
                    "TH reads from the DUT theVehicleIDattribute.",
                    "TH reads from the DUT theSessionIDattribute.",
                    "TH reads from the DUT theSessionDurationattribute.",
                    "TH reads from the DUT theSessionEnergyChargedattribute.",
                    "TH reads from the DUT theSessionEnergyDischargedattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an enum value to match the DUT state.",
                    "Verify that the DUT response contains an enum value to match the DUT supply state.",
                    "Verify that the DUT response contains an enum value to match the DUT fault state.",
                    "Verify that the DUT response contains an epoch-s value in the future, or null.",
                    "Verify that the DUT response contains an epoch-s value in the future, or null.",
                    "Verify that the DUT response contains an amperage-mA value in the valid range.",
                    "Verify that the DUT response contains an amperage-mA value in the valid range.",
                    "Verify that the DUT response contains an amperage-mA value in the valid range.",
                    "Verify that the DUT response contains an amperage-mA value in the valid range.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the amperage-mA value 30000.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the elapsed-s value 600.",
                    "Verify that the DUT response contains an epoch-s value in the future, or null.",
                    "Verify that the DUT response contains an epoch-s value in the future, or null.",
                    "Verify that the DUT response contains an energy-mWh value in the valid range, or null.",
                    "Verify that the DUT response contains a percent value, or null.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains the uint16 value 3500.",
                    "Verify that the DUT response contains a percent value, or null.",
                    "Verify that the DUT response contains an energy-mWh value.",
                    "Verify that the DUT response contains a string value, or null.",
                    "Verify that the DUT response contains a uint32 value, or null.",
                    "Verify that the DUT response contains an elapsed-s value.",
                    "Verify that the DUT response contains an energy-mWh value in the valid range.",
                    "Verify that the DUT response contains an energy-mWh value in the valid range."
                ]
            }
        },
        {
            "Test Case Name": "278.1.2. [TC-EEVSE-2.2] Primary functionality with DUT as Server",
            "Test Case ID": "TC-EEVSE-2.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Energy EVSE cluster server without any optional feature supported.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "7",
                    "7a",
                    "7b",
                    "8",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "8e",
                    "9",
                    "9a",
                    "10",
                    "10a",
                    "11",
                    "11a",
                    "12",
                    "12a",
                    "13",
                    "13a",
                    "13b",
                    "13c",
                    "13d",
                    "14",
                    "14a",
                    "14b",
                    "15",
                    "15a",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0002(FaultState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0040(SessionID)",
                    "EEVSE.S.C02.Rsp(EnableCharging)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0003(ChargingEnabledUntil)",
                    "EEVSE.S.A0006(MinimumChargeCurrent)",
                    "EEVSE.S.A0007(MaximumChargeCurrent)",
                    "",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.C02.Rsp(EnableCharging)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0003(ChargingEnabledUntil)",
                    "EEVSE.S.A0006(MinimumChargeCurrent)",
                    "EEVSE.S.A0007(MaximumChargeCurrent)",
                    "EEVSE.S.A0009(UserMaximumChargeCurrent)",
                    "EEVSE.S.A0007(MaximumChargeCurrent)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0040(SessionID)",
                    "EEVSE.S.A0041(SessionDuration)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0040(SessionID)",
                    "EEVSE.S.C01.Rsp(Disable)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "After a few seconds TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theFaultState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSessionID",
                    "TH sends commandEnableChargingwith ChargingEnabledUntil=2 minutes in the future, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theChargingEnabledUntil",
                    "TH reads from the DUT theMinimumChargeCurrent",
                    "TH reads from the DUT theMaximumChargeCurrent",
                    "Wait 2 minutes",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends commandEnableChargingwith ChargingEnabledUntil=NULL, minimumChargeCurrent=6000, maximumChargeCurrent=12000",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theChargingEnabledUntil",
                    "TH reads from the DUT theMinimumChargeCurrent",
                    "TH reads from the DUT theMaximumChargeCurrent",
                    "If the optional attribute is supported, TH writes to the DUT theUserMaximumChargeCurrent=6000",
                    "After a few seconds TH reads from the DUT theMaximumChargeCurrent",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "TH reads from the DUT theState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "TH reads from the DUT theState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "TH reads from the DUT theState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theSessionID",
                    "TH reads from the DUT theSessionDuration",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "TH reads from the DUT theSessionID",
                    "TH sends commandDisable",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x00 (Disabled)",
                    "Value has to be 0x00 (NoError)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "Value has to be 0x01 (PluggedInNoDemand)",
                    "Value is noted for later",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "Value has to be 0x03 (PluggedInCharging)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Value has to be the ChargingEnabledUntil commanded value",
                    "Value has to be the minimumChargeCurrent commanded value",
                    "Value has to be the min(maximumChargeCurrent commanded value,CircuitCapacity)",
                    "Event EEVSE.S.E03(EnergyTransferStopped) sent with reason EvseStopped",
                    "Value has to be 0x02 (PluggedInDemand)",
                    "Value has to be 0x00 (Disabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and Event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "Value has to be 0x03 (PluggedInCharging)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Value has to be the ChargingEnabledUntil commanded value",
                    "Value has to be the minimumChargeCurrent commanded value",
                    "Value has to be the min(maximumChargeCurrent commanded value,CircuitCapacity)",
                    "Charging rate reduced to 6A",
                    "Value has to be the configured UserMaximumChargeCurrent value",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E03(EnergyTransferStopped) sent with reason EvStopped",
                    "Value has to be 0x01 (PluggedInNoDemand)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "Value has to be 0x03 (PluggedInCharging)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E03(EnergyTransferStopped) sent with reason EvStopped",
                    "Value has to be 0x01 (PluggedInNoDemand)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Value has to be the same value noted in 4b",
                    "Value has to be greater than 120 (and match the time taken for the tests from step 4 to step 13)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "Value has to be 1 more than the value noted in 4b",
                    "Verify DUT responds w/ status SUCCESS(0x00) and Event EEVSE.S.E03(EnergyTransferStopped) sent with reason EvseStopped",
                    "Value has to be 0x00 (Disabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "278.1.3. [TC-EEVSE-2.3] Optional ChargingPreferences feature functionality with DUT as Server",
            "Test Case ID": "TC-EEVSE-2.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Energy EVSE cluster server with the optional ChargingPreferences feature supported.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "6",
                    "7",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "8",
                    "9",
                    "9a",
                    "9b",
                    "9c",
                    "9d",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "14a",
                    "14b",
                    "14c",
                    "14d",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.C07.Rsp(ClearTargets)",
                    "EEVSE.S.A0023(NextChargeStartTime)",
                    "EEVSE.S.A0024(NextChargeTargetTime)",
                    "EEVSE.S.A0025(NextChargeRequiredEnergy)",
                    "EEVSE.S.A0026(NextChargeTargetSoC)",
                    "EEVSE.S.C06.Rsp(GetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "EEVSE.S.A0023(NextChargeStartTime)",
                    "EEVSE.S.A0024(NextChargeTargetTime)",
                    "EEVSE.S.A0025(NextChargeRequiredEnergy)",
                    "EEVSE.S.A0026(NextChargeTargetSoC)",
                    "EEVSE.S.C06.Rsp(GetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "EEVSE.S.A0023(NextChargeStartTime)",
                    "EEVSE.S.A0024(NextChargeTargetTime)",
                    "EEVSE.S.A0025(NextChargeRequiredEnergy)",
                    "EEVSE.S.A0026(NextChargeTargetSoC)",
                    "EEVSE.S.C06.Rsp(GetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "EEVSE.S.C06.Rsp(GetTargets)",
                    "EEVSE.S.C07.Rsp(ClearTargets)",
                    "EEVSE.S.A0023(NextChargeStartTime)",
                    "EEVSE.S.A0024(NextChargeTargetTime)",
                    "EEVSE.S.A0025(NextChargeRequiredEnergy)",
                    "EEVSE.S.A0026(NextChargeTargetSoC)",
                    "EEVSE.S.C06.Rsp(GetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "EEVSE.S.C05.Rsp(SetTargets)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "TH sends commandClearTargets",
                    "TH reads from the DUT theNextChargeStartTime",
                    "TH reads from the DUT theNextChargeTargetTime",
                    "TH reads from the DUT theNextChargeRequiredEnergy",
                    "TH reads from the DUT theNextChargeTargetSoC",
                    "TH sends commandGetTargets",
                    "TH sends commandSetTargetswith DayOfTheWeekforSequence=0x7F (i.e. having all days set) and a single ChargingTargets={TargetTime=1439, TargetSoC=null, AddedEnergy=25000000}",
                    "TH reads from the DUT theNextChargeStartTime",
                    "TH reads from the DUT theNextChargeTargetTime",
                    "TH reads from the DUT theNextChargeRequiredEnergy",
                    "TH reads from the DUT theNextChargeTargetSoC",
                    "TH sends commandGetTargets",
                    "TH sends commandSetTargetswith DayOfTheWeekforSequence=0x7F (i.e. having all days set) and a single ChargingTargets={TargetTime=1, TargetSoC=100, AddedEnergy=null}",
                    "TH reads from the DUT theNextChargeStartTime",
                    "TH reads from the DUT theNextChargeTargetTime",
                    "TH reads from the DUT theNextChargeRequiredEnergy",
                    "TH reads from the DUT theNextChargeTargetSoC",
                    "TH sends commandGetTargets",
                    "TH sends commandSetTargetswith DayOfTheWeekforSequence=0x40 (i.e. having Saturday set) and 10 ChargingTargets with TargetTimes=60,180,300,420,540,660,780,900,1020,1140 and all with TargetSoC=null, AddedEnergy=2500000",
                    "TH sends commandSetTargetswith DayOfTheWeekforSequence=0x01 (i.e. having Sunday set) and no ChargingTargets",
                    "TH sends commandGetTargets",
                    "TH sends commandClearTargets",
                    "TH reads from the DUT theNextChargeStartTime",
                    "TH reads from the DUT theNextChargeTargetTime",
                    "TH reads from the DUT theNextChargeRequiredEnergy",
                    "TH reads from the DUT theNextChargeTargetSoC",
                    "TH sends commandGetTargets",
                    "TH sends commandSetTargetswith two identical ChargingTargetSchedules={DayOfTheWeekforSequence=0x01,ChargingTarget[0]={TargetTime=60,TargetSoC=null,AddedEnergy=2500000}}",
                    "TH sends commandSetTargetswith DayOfTheWeekforSequence=0x40 and 11 ChargingTargets with TargetTimes=60,180,300,420,540,660,780,900,1020,1140,1260 and all with TargetSoC=null, AddedEnergy=2500000",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with no targets defined.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be before the next TargetTime above.",
                    "Value has to be TargetTime above.",
                    "Value has to be AddedEnergy above.",
                    "Value has to be null.",
                    "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with targets equivalent to the above (Note 1).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be before the next TargetTime above.",
                    "Value has to be TargetTime above.",
                    "Value has to be null.",
                    "Value has to be 100.",
                    "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with targets equivalent to the above (Note 1).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with 1 target for each day Monday to Friday equivalent to step 9 (Note 1), 10 targets for Saturday as step 11, and no targets for Sunday.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Value has to be null.",
                    "Response EEVSE.S.C00.Tx(GetTargetsResponse) sent with no targets defined.",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "278.1.4. [TC-EEVSE-2.4] Fault handling functionality with DUT as Server",
            "Test Case ID": "TC-EEVSE-2.4",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the key fault handling functionality of the Energy EVSE cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "7",
                    "7a",
                    "7b",
                    "8",
                    "8a",
                    "8b",
                    "9",
                    "9a",
                    "9b",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0002(FaultState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0040(SessionID)",
                    "EEVSE.S.C02.Rsp(EnableCharging)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "After a few seconds TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theFaultState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSessionID",
                    "TH sends commandEnableChargingwith ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Ground Fault Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Over Temperature Fault Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Fault Test Event Clear",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Charge Demand Test Event Clear",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EV Plugged-in Test Event Clear",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x00 (Disabled)",
                    "Value has to be 0x00 (NoError)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E00(EVConnected) sent",
                    "Value has to be 0x01 (PluggedInNoDemand)",
                    "Value is noted for later",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E02(EnergyTransferStarted) sent",
                    "Value has to be 0x03 (PluggedInCharging)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event {PICS_SE_FAULT) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x00 (NoError), FaultStateCurrentFaultState = 0x07 (GroundFault)",
                    "Value has to be 0x06 (Fault)",
                    "Value has to be 0x04 (DisabledError)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event {PICS_SE_FAULT) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x07 (GroundFault), FaultStateCurrentFaultState = 0x0F (OverTemperature)",
                    "Value has to be 0x06 (Fault)",
                    "Value has to be 0x04 (DisabledError)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event {PICS_SE_FAULT) sent with SessionID matching value in step 4b, FaultStatePreviousFaultState = 0x0F (OverTemperature), FaultStateCurrentFaultState = 0x00 (NoError)",
                    "Value has to be 0x03 (PluggedInCharging)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00) and event EEVSE.S.E01(EVNotDetected) sent",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "278.1.5. [TC-EEVSE-2.5] Optional diagnostics functionality with DUT as Server",
            "Test Case ID": "TC-EEVSE-2.5",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the optional diagnostics functionality of the Energy EVSE cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "3c",
                    "4",
                    "4a",
                    "4b",
                    "5",
                    "6",
                    "6a",
                    "6b",
                    "7",
                    "7a",
                    "8",
                    "8a",
                    "9",
                    "9a",
                    "9b",
                    "10"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "DGGEN.S.A0008(TestEventTriggersEnabled)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.A0002(FaultState)",
                    "EEVSE.S.C02.Rsp(EnableCharging)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.C04.Rsp(StartDiagnostics)",
                    "EEVSE.S.C01.Rsp(Disable)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.C04.Rsp(StartDiagnostics)",
                    "EEVSE.S.A0001(SupplyState)",
                    "EEVSE.S.C02.Rsp(EnableCharging)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)",
                    "EEVSE.S.A0000(State)",
                    "EEVSE.S.A0001(SupplyState)",
                    "DGGEN.S.C00.Rsp(TestEventTrigger)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test)",
                    "TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH reads from the DUT theFaultState",
                    "TH sends commandEnableChargingwith ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends commandStartDiagnostics",
                    "TH sends commandDisable",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends commandStartDiagnostics",
                    "TH reads from the DUT theSupplyState",
                    "TH sends commandEnableChargingwith ChargingEnabledUntil=null, minimumChargeCurrent=6000, maximumChargeCurrent=60000",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for EVSE Diagnostics Complete Event",
                    "TH reads from the DUT theState",
                    "TH reads from the DUT theSupplyState",
                    "TH sends TestEventTrigger command to General Diagnostics Cluster on Endpoint 0 with EnableKey field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER_KEY and EventTrigger field set to PIXIT.EEVSE.TEST_EVENT_TRIGGER for Basic Functionality Test Event Clear"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x00 (Disabled)",
                    "Value has to be 0x00 (NoError)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x01 (ChargingEnabled)",
                    "Verify DUT responds w/ status FAILURE(0x01)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x00 (Disabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x04 (DisabledDiagnostics)",
                    "Verify DUT responds w/ status FAILURE(0x01)",
                    "Value has to be 0x04 (DisabledDiagnostics)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Value has to be 0x00 (NotPluggedIn)",
                    "Value has to be 0x00 (Disabled)",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        }
    ],
    "EnergyPreference": [
        {
            "Test Case Name": "281.1.1. [TC-EPREF-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-EPREF-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 2.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if EPREF.S.F00(EnergyBalance).- bit 1: SHALL be 1 if and only if EPREF.S.F01(LowPowerModeSensitivity).All remaining bits SHALL be 0.",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0000, 0x0001, 0x0002 : SHALL be included if and only if EPREF.S.F00(EnergyBalance).- 0x0003, 0x0004: SHALL be included if and only if EPREF.S.F01(LowPowerModeSensitivity)",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:The list includes entries based on feature support:",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list includes entries based on feature support:",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "281.1.2. [TC-EPREF-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-EPREF-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Energy Preference cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b",
                    "4",
                    "5",
                    "6",
                    "6a",
                    "6b"
                ],
                "Ref": [
                    "",
                    "9.2.7.1",
                    "9.2.7.2",
                    "9.2.7.2",
                    "9.2.7.2",
                    "9.2.7.3",
                    "9.2.7.4",
                    "9.2.7.5",
                    "9.2.7.5",
                    "9.2.7.5"
                ],
                "PICS": [
                    "",
                    "EPREF.S.A0000(EnergyBalances)",
                    "EPREF.S.A0001(CurrentEnergyBalance)",
                    "EPREF.S.A0001(CurrentEnergyBalance)",
                    "EPREF.S.A0001(CurrentEnergyBalance)",
                    "EPREF.S.A0002(EnergyPriorities)",
                    "EPREF.S.A0003(LowPowerModeSensitivites)",
                    "EPREF.S.A0004(CurrentLowPowerModeSensitivity)",
                    "EPREF.S.A0004(CurrentLowPowerModeSensitivity)",
                    "EPREF.S.A0004(CurrentLowPowerModeSensitivity)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT the{A_A_ENERGY_BALANCES}attribute.",
                    "TH reads from the DUT theCurrentEnergyBalanceattribute.",
                    "TH writes to the DUT theCurrentEnergyBalanceattribute.",
                    "TH writes to the DUT theCurrentEnergyBalanceattribute with an out of index value.",
                    "TH reads from the DUT theEnergyPrioritiesattribute.",
                    "TH reads from the DUT theLowPowerModeSensitivitesattribute.",
                    "TH reads from the DUT theCurrentLowPowerModeSensitivityattribute.",
                    "TH writes to the DUT the{A_CURRENT_ENERGY_BALANC}attribute.",
                    "TH writes to the DUT the{A_CURRENT_ENERGY_BALANC}attributewith an out of index value."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an a list of BalanceStruct Type.Verify size of list is atleast 2 and not more than 10.Verify the \"step\" value of the first BalanceStruct is 0.Verify the \"step\" value of the last BalanceStruct is 100.If there are more than 2 BalanceStructs, Verify that the Step field is larger than the Step field on the previous BalanceStruct in the list.",
                    "Verify that the DUT response contains a uint8 type value. Verify that the value is in the range of 0-255.",
                    "Verify by sending a read command that the attribute value has been changed.",
                    "Verify that the DUT response contains with a constraint error.",
                    "Verify that the DUT response contains an a list of EnergyPriorityEnum.Verify the list size is 2.Verify that the list items are eithera: Comfort(0) and Efficiency(2)b: Speed(1) and Water Consumption(3)",
                    "Verify that the DUT response contains an a list of BalanceStruct Type.Verify size of list is atleast 2 and not more than 10.If there are more than 2 BalanceStructs, Verify that the Step field is larger than the Step field on the previous BalanceStruct in the list.",
                    "Verify that the DUT response contains a uint8 type value. Verify that the value is in the range of 0-255.",
                    "Verify by sending a read command that the attribute value has been changed.",
                    "Verify that the DUT response contains with a constraint error."
                ]
            }
        }
    ],
    "Energy_EVSE_Mode": [
        {
            "Test Case Name": "287.1.1. [TC-EEVSEM-1.2] Cluster attributes with DUT as Server",
            "Test Case ID": "TC-EEVSEM-1.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Energy EVSE Mode cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8, {REF_EEVSEM_MODE_CONSTRAINTS}",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "EEVSEM.S.A0000(SupportedModes)",
                    "EEVSEM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has at least 2 and at most 255 entriesVerify that each ModeOptionsStruct entry has a unique Mode field valueVerify that each ModeOptionsStruct entry has a unique Label field valueVerify that each ModeOptionsStruct entry\u2019s ModeTags field has:at least one entrythe values of the Value fields that are not larger than 16 bitsfor each Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a defined cluster-derived tag value (Manual, Time of Use, (T_SOLAR_CHARGING)) or in the MfgTags (0x8000 to 0xBFFF) rangefor at least one Value field: Is the mode tag value a defined common tag value (Auto(0x0000), Quick(0x0001), Quiet(0x0002), LowNoise(0x0003), LowEnergy(0x0004), Vacation(0x0005), Min(0x0006), Max(0x0007), Night(0x0008), Day(0x0009)) or a derived cluster value (Bake(0x4000), Convection(0x4001), Grill(0x4002), Roast(0x4003), Clean(0x4004), Convection Bake(0x4005), Convection Roast(0x4006), Warming(0x4007), Proofing(0x4008))Verify that at least one ModeOptionsStruct entry includes the Manual mode tagSave the Mode field values assupported_modes_dut",
                    "Verify that the DUT response contains an integer fromsupported_modes_dut"
                ]
            }
        },
        {
            "Test Case Name": "287.2.1. [TC-EEVSEM-2.1] Change to Mode functionality with DUT as Server",
            "Test Case ID": "TC-EEVSEM-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality associated with the ChangeToMode command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1,\n        AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "EEVSEM.S.A0000(SupportedModes)",
                    "EEVSEM.S.A0001(CurrentMode)",
                    "EEVSEM.S.C00.Rsp(ChangeToMode)",
                    "EEVSEM.S.M.CAN_TEST_MODE_FAILURE & EEVSEM.S.M.CAN_MANUALLY_CONTROLLED",
                    "EEVSEM.S.A0001(CurrentMode) & EEVSEM.S.M.CAN_MANUALLY_CONTROLLED",
                    "EEVSEM.S.M.CAN_TEST_MODE_FAILURE & EEVSEM.S.C00.Rsp(ChangeToMode)",
                    "EEVSEM.S.A0001(CurrentMode)",
                    "EEVSEM.S.M.CAN_MANUALLY_CONTROLLED",
                    "EEVSEM.S.A0001(CurrentMode) & EEVSEM.S.M.CAN_MANUALLY_CONTROLLED",
                    "EEVSEM.S.C00.Rsp(ChangeToMode)",
                    "EEVSEM.S.A0001(CurrentMode)",
                    "EEVSEM.S.C00.Rsp(ChangeToMode)",
                    "EEVSEM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toold_current_mode_dut",
                    "Manually put the device in a state from which it will FAIL to transition to PIXIT.EEVSEM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.EEVSEM.MODE_CHANGE_FAIL",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "Manually put the device in a state from which it will SUCCESSFULLY transition to PIXIT.EEVSEM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set to PIXIT.EEVSEM.MODE_CHANGE_OK",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                            NewMode set toinvalid_mode_th",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutVerify that PIXIT.EEVSEM.MODE_CHANGE_FAIL is one ofsupported_modes_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutSelect a value which is NOT insupported_modes_dutand save it asinvalid_mode_th",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                            * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to GenericFailure(0x02), InvalidInMode(0x03) , or in the MfgCodes (0x80 to 0xBF) rangeVerify that the StatusText field has a length between 1 and 64",
                    "Verify that the DUT response contains an integer value equal toold_current_mode_dut",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dut",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to Success(0x00)",
                    "Verify that the DUT response contains an integer value equal to PIXIT.EEVSEM.MODE_CHANGE_OK",
                    "Verify that the DUT responds with aChangeToModeResponsecommand.Verify that the Status field is set to UnsupportedMode(0x01).",
                    "Verify that the DUT response contains an integer value equal to PIXIT.EEVSEM.MODE_CHANGE_OK"
                ]
            }
        },
        {
            "Test Case Name": "287.3.1. [TC-EEVSEM-3.1] On Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-EEVSEM-3.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper OnMode when the On/Off attribute of the On/Off cluster changes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.5",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "AC.1.5.7.1",
                    "AC.1.5.7.2",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "EEVSEM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "EEVSEM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)",
                    "EEVSEM.S.A0000(SupportedModes), MOD.S.F00(DEPONOFF)",
                    "EEVSEM.S.C00.Rsp(ChangeToMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.C00.Rsp MOD.S.F00(DEPONOFF)",
                    "OO.S.C01.Rsp, MOD.S.F00(DEPONOFF)",
                    "EEVSEM.S.A0001(CurrentMode), MOD.S.F00(DEPONOFF)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                  NewMode set tonew_mode_th",
                    "TH sends aOffcommand to the DUT",
                    "TH sends aOncommand to the DUT",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer valueSave the value ason_mode_dut",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfon_mode_dutis equal toold_current_mode_dutproceed to step 4.\nElse proceed to step 6.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromon_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                  * Status, set to Success(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueThe value is equal toon_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "287.3.2. [TC-EEVSEM-3.2] Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-EEVSEM-3.2",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.7.1, AC.1.9.7.2",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0000(SupportedModes)",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0001(CurrentMode)",
                    "EEVSEM.S.A0000(SupportedModes)",
                    "EEVSEM.S.C00.Rsp(ChangeToMode)",
                    "",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theCurrentModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH sends aChangeToModecommand to the DUT with\n                                 NewMode set tonew_mode_th",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_current_mode_dutIfstartup_mode_dutis equal toold_current_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify that the DUT response contains aChangeToModeResponsecommand w/ data fields:\n                                 * Status, set to Success(0x00).",
                    "",
                    "Verify that the DUT response contains an integer valueSave the value asnew_start_up_mode_dutThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_dut"
                ]
            }
        },
        {
            "Test Case Name": "287.3.3. [TC-EEVSEM-3.3] On Mode and Startup Mode functionality with DUT as Server - REMOVED",
            "Test Case ID": "TC-EEVSEM-3.3",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT switches to the proper mode when power cycled, if the device supports OnMode, and StartUpOnOff (from the OnOff cluster).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.2",
                    "AC.1.9.6.4",
                    "AC.1.9.6.5",
                    "AC.1.9.6.2, AC.1.9.8",
                    "AC.1.9.6.5",
                    "AC.1.9.6.5",
                    "AC.1.5.6.6",
                    "",
                    "AC.1.9.6.4",
                    "AC.1.9.6.3"
                ],
                "PICS": [
                    "",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0000(SupportedModes)",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0003(OnMode), EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0000(SupportedModes), EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0003(OnMode)",
                    "EEVSEM.S.A0003(OnMode), MOD.S.F00(DEPONOFF)",
                    "OO.S.A4003",
                    "",
                    "EEVSEM.S.A0002(StartUpMode)",
                    "EEVSEM.S.A0001(CurrentMode)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theStartUpModeattribute with thenew_start_up_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH reads from the DUT theSupportedModesattribute.",
                    "TH writes to the DUT theOnModeattribute with thenew_mode_thvalue",
                    "TH reads from the DUT theOnModeattribute.",
                    "TH writes to the DUT theStartUpOnOffattribute with the value 1.",
                    "Physically power cycle the device",
                    "TH reads from the DUT theStartUpModeattribute.",
                    "TH reads from the DUT theCurrentModeattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains an integer value or nullSave the value asstartup_mode_dutifstartup_mode_dutis null proceed to step 3.\nElse savestartup_mode_dutasnew_start_up_mode_thand proceed to step 5.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutand save the value\nasnew_start_up_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asold_on_mode_dutIfstartup_mode_dutis equal toold_on_mode_dutproceed to step 6.\nElse proceed to step 8.",
                    "Verify that the DUT response contains a list of ModeOptionsStruct entriesVerify that the list has two or more entriesSave the Mode field values assupported_modes_dutSelect a value fromsupported_modes_dutdifferent fromstartup_mode_dut.\nSave the value asnew_mode_th.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT response contains an integer valueSave the value asnew_on_mode_dutThe value is equal tonew_mode_th",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_start_up_mode_th",
                    "Verify that the DUT response contains an integer valueThe value is equal tonew_on_mode_dut"
                ]
            }
        }
    ],
    "Messages": [
        {
            "Test Case Name": "290.1.1. [TC-MESS-2.1] Present and Cancel Messages Verification (DUT as Server)",
            "Test Case ID": "TC-MESS-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device can return a message list and an active message ids list, as well as present new and cancel existing messages.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MESS.S.A0000(Messages)",
                    "MESS.S.A0001(ActiveMessageIDs)",
                    "MESS.S.C00.Rsp(PresentMessagesRequest)",
                    "MESS.S.C00.Rsp(PresentMessagesRequest)",
                    "MESS.S.A0000(Messages)",
                    "MESS.S.A0001(ActiveMessageIDs)",
                    "MESS.S.C01.Rsp(CancelMessagesRequest)",
                    "MESS.S.A0000(Messages)",
                    "MESS.S.A0001(ActiveMessageIDs)",
                    "MESS.S.C01.Rsp(CancelMessagesRequest)",
                    "MESS.S.A0000(Messages)",
                    "MESS.S.A0001(ActiveMessageIDs)"
                ],
                "Test Step": [
                    "TH reads from the DUT theMessagesattribute.",
                    "TH reads from the DUT theActiveMessageIDsattribute.",
                    "TH sends aPresentMessagesRequestcommand to the DUT with message id1234567890123456",
                    "TH sends aPresentMessagesRequestcommand to the DUT with message id2234567890123456",
                    "TH reads from the DUT theMessagesattribute.",
                    "TH reads from the DUT theActiveMessageIDsattribute.",
                    "TH sends aCancelMessagesRequestcommand to the DUT with a list containing message ID1234567890123456(ascii encoded as31323334353637383930313233343536)",
                    "TH reads from the DUT theMessagesattribute.",
                    "TH reads from the DUT theActiveMessageIDsattribute.",
                    "TH sends aCancelMessagesRequestcommand to the DUT with a list containing message ID2234567890123456(ascii encoded as32323334353637383930313233343536)",
                    "TH reads from the DUT theMessagesattribute.",
                    "TH reads from the DUT theActiveMessageIDsattribute."
                ],
                "Expected Outcome": [
                    "Verify that an empty list of messages (type MessageStruct) is returned.",
                    "Verify that an empty list of message ids (type MessageID) is returned.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that a list containing two messages (type MessageStruct) with message id values of1234567890123456(ascii encoded as31323334353637383930313233343536) or2234567890123456(ascii encoded as32323334353637383930313233343536) is returned.",
                    "Verify that a list containing at least one message id (type MessageID) with value of1234567890123456(ascii encoded as31323334353637383930313233343536) or2234567890123456(ascii encoded as32323334353637383930313233343536) is returned.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that a list containing one message (type MessageStruct) with message id value of2234567890123456(ascii encoded as32323334353637383930313233343536) is returned.",
                    "Verify that a list containing message id (type MessageID) with value of2234567890123456(ascii encoded as32323334353637383930313233343536) is returned.",
                    "Verify that a successful (status 0) response is received.",
                    "Verify that an empty list of messages (type MessageStruct) is returned.",
                    "Verify that an empty list of message ids (type MessageID) is returned."
                ]
            }
        }
    ],
    "Power_Topology": [
        {
            "Test Case Name": "293.1.1. [TC-PWRTL-1.1] Global Attributes with DUT as Server",
            "Test Case ID": "TC-PWRTL-1.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 1.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bits set:\n                                                                                             - bit 0: SHALL be 1 if and only if PWRTL.S.F00(NODE)\n                                                                                             - bit 1: SHALL be 1 if and only if PWRTL.S.F01(LEAF)\n                                                                                             - bit 2: SHALL be 1 if and only if PWRTL.S.F02(SET)\n                                                                                             - bit 3: SHALL be 1 if and only if PWRTL.S.F03(DYPF)\n                                                                                             All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes\n                                                                                             The list includes entries based on feature support:- 0x0000: SHALL be included if PWRTL.S.F02(SET) and SHALL NOT be included otherwise.\n                                                                                             - 0x0001: SHALL be included if PWRTL.S.F03(DYPF) and SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:\n                                                                                             This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:\n                                                                                             This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:\n                                                                                             This cluster has no entries in the standard or scoped range."
                ]
            }
        },
        {
            "Test Case Name": "293.1.2. [TC-PWRTL-2.1] Attributes with Server as DUT",
            "Test Case ID": "TC-PWRTL-2.1",
            "Test Plan": "App testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Power Topology cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "{REF_SA_AVAILABLE_ENDPOINTS}",
                    "{REF_SA_ACTIVE_ENDPOINTS}"
                ],
                "PICS": [
                    "",
                    "PWRTL.S.A0000(AvailableEndpoints)",
                    "PWRTL.S.A0001(ActiveEndpoints)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theAvailableEndpointsattribute.",
                    "TH reads from the DUT theActiveEndpointsattribute."
                ],
                "Expected Outcome": [
                    "",
                    "- Verify that the DUT response contains a list of endpoint-no entries\n                                                                                                                         - Verify that the list has no more than 20 entries",
                    "- Verify that the DUT response contains a list of endpoint-no entries\n                                                                                                                         - Verify that the list has no more than 20 entries\n                                                                                                                         - Verify that the list is a subset of AvailableEndpoints"
                ]
            }
        }
    ],
    "Device_Discovery": [
        {
            "Test Case Name": "8.1.1. [TC-DD-1.1] QR Code Onboarding Payload Verification [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the onboarding QR code contains the necessary information to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "2.c",
                    "2.d",
                    "2.e",
                    "2.f",
                    "2.g",
                    "2.h",
                    "3"
                ],
                "Ref": [
                    "",
                    "5.1.3.1 Table 34",
                    "5.1.3.1 Table 34",
                    "5.1.3.1 Table 34",
                    "5.1.3.1 Table 34",
                    "5.1.3.1 Table 34",
                    "5.1.3.1 Table 34",
                    "5.1.7.1",
                    "5.1.3.1",
                    "5.1.3.1 Table 34"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Scan the DUT\u2019s QR code using a QR code reader",
                    "Verify the QR code payload version",
                    "Verify Vendor ID and Product ID",
                    "Verify the Custom Flow bit",
                    "Verify 8-bit Discovery Capabilities bit mask",
                    "Verify the 12-bit discriminator bit mask",
                    "Verify the onboarding payload contains a 27-bit Passcode",
                    "Verify passcode is valid",
                    "Verify QR code prefix",
                    "Verify the packed binary data structure"
                ],
                "Expected Outcome": [
                    "Verify the QR code is scanned successfully.",
                    "Verify the QR code payload version is '000'.",
                    "Verify Vendor ID and Product ID match the values submitted by manufacturer in Distributed Compliance Ledger",
                    "Verify the Custom Flow bit has one of the following values: 0, 1 or 2",
                    "Verify the onboarding payload contains an 8-bit Discovery Capabilities bit mask describing the transports which can be used for commissioning the DUT.",
                    "Verify the 12-bit discriminator matches the value which a device advertises during commissioning.",
                    "Verify the 27-bit unsigned integer encodes an 8-digit decimal numeric value and shall be a value between 0x0000001 to 0x5f5e0fe (00000001 to 99999998)",
                    "Verify passcode does not use any trivial values:\n00000000, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999, 12345678, 87654321Verify Passcode is not derived from public information as serial number, manufacturer date, MAC address, region of origin etc.",
                    "Verify QR code prefix is \"MT:\"",
                    "Verify the packed binary data structure  is padded with '0' bits at the end of the structure to the nearest byte boundary."
                ]
            }
        },
        {
            "Test Case Name": "8.1.2. [TC-DD-1.2] Manual Pairing Code Payload Verification [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Manual Pairing Code contains the necessary information to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2.b",
                    "3"
                ],
                "Ref": [
                    "5.1.4.1 Table 38",
                    "5.1.4.1 Table 38",
                    "5.1.4.1 - Table 39",
                    "5.1.4.1 Check Digit"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Verify the first digit of the Manual Pairing Code for the DUT",
                    "If the Manual Pairing Code is 11 digits/the VID_PID flag is not set, verify the encoded elements.",
                    "If the Manual Pairing Code is 21 digits/the VID_PID flag is set, verify the encoded elements.",
                    "Verify the Check Digit (last digit of the Manual Pairing Code) by entering the preceding digits into the checksum script/Test Harness"
                ],
                "Expected Outcome": [
                    "The first digit must be between 0 and 7. If the digit is between 0 and 3, the code length must be 11 digits (VID_PID flag not set).If the digit is between 4 and 7, the code length must be 21 digits (VID_PID flag set)",
                    "Digits 2 through 6 must be between 00000 and 65535\nDigits 7 through 10 must be between 0000 and 8191",
                    "Digits 2 through 6 must be between 00000 and 65535.\nDigits 7 through 10 must be between 0000 and 8191.\nDigits 11 through 15 must be between 00000 and 65535.\nDigits 16 through 20 must be between 00000 and 65535.",
                    "Verify the final digit, the Check Digit, of the Manual Pairing Code printed on the DUT matches the generated digit by the script/Test Harness."
                ]
            }
        },
        {
            "Test Case Name": "8.1.3. [TC-DD-1.3] NFC Onboarding Payload Verification [DUT - Commissionee] - REMOVED",
            "Test Case ID": "TC-DD-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the NFC tag\u2019s onboarding payload contains the necessary information to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3.a",
                    "3.b",
                    "3.c",
                    "3.d",
                    "3.e",
                    "3.f",
                    "3.g",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "",
                    "5.1.3.1 Table 33/34",
                    "5.1.3.1 Table 34/35",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "5.1.3 Table 33",
                    "5.1.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Power up the DUT and put the DUT in pairing mode",
                    "Bring the NFC code reader close to the DUT",
                    "Verify the NFC\u2019s onboarding payload code version",
                    "Verify 8-bit Discovery Capabilities bit mask",
                    "Verify the 12-bit discriminator bit mask",
                    "Verify the onboarding payload contains a 27-bit Passcode",
                    "Verify passcode is valid",
                    "Verify NFC\u2019s onboarding payload code prefix",
                    "Verify Vendor ID and Product ID",
                    "Verify the packed binary data structure",
                    "Verify Custom payload support"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify the NFC\u2019s onboarding payload code version is '000'.",
                    "Verify the onboarding payload contains an 8-bit Discovery Capabilities bit mask describing the transports which can be used for commissioning the DUT. Refer to spec 5.1.3 Table 35 for specifics of the bit mask.",
                    "Verify the 12-bit discriminator matches the value which a device advertises during commissioning.",
                    "Verify the 27-bit unsigned integer encodes an 8-digit decimal numeric value and shall be a value between 0x0000001 to 0x5f5e0fe (00000001 to 99999998)",
                    "Verify passcode does not use any trivial values:\n00000000, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999, 12345678, 87654321Verify Passcode is not derived from public information as serial number, manufacturer date, MAC address, region of origin etc.",
                    "Verify NFC\u2019s onboarding payload code prefix is \"MT:\"",
                    "Verify Vendor ID and Product ID match the values submitted by manufacturer in Distributed Compliance Ledger",
                    "Verify the packed binary data structure  is padded with '0' bits at the end of the structure to the nearest byte boundary.",
                    "Verify the custom payload is a 2 bit field and the Values supported are 0, 1 and 2."
                ]
            }
        },
        {
            "Test Case Name": "8.1.4. [TC-DD-1.4] Concatenation - QR Code Onboarding Payload Verification [DUT - Commissionee] - REMOVED",
            "Test Case ID": "TC-DD-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the onboarding QR code contains information on the onboarding of multiple DUT.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "5.1.6"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "Scan larger QR code that will support the commissioning of all the DUTs in the packaging using the QR code scanner"
                ],
                "Expected Outcome": [
                    "Verify that each DUT onboarding payload is delimited with a * depending on the number of DUTs that will be onboarded.Example: MT:<onboarding-base-38-content_bulb1>*<onboarding-base-38-content_bulb2>*<onboarding-base-38-content_bulb3>*<onboarding-base-38-content_bulb4>"
                ]
            }
        },
        {
            "Test Case Name": "8.1.5. [TC-DD-1.5] NFC Rules of Advertisement and Onboarding [DUT - Commissionee] - REMOVED",
            "Test Case ID": "TC-DD-1.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the NFC Tag setup experience follows guidance in section 5.1.8",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "2.c",
                    "2.d",
                    "2.e",
                    "2.f",
                    "3",
                    "4.a",
                    "4.b",
                    "5"
                ],
                "Ref": [
                    "5.1.7",
                    "5.1.7",
                    "13.3",
                    "13.3",
                    "13.3",
                    "5.1.7",
                    "5.1.7",
                    "5.1.5",
                    "5.1.5",
                    "5.1.5",
                    "5.1.5"
                ],
                "PICS": [
                    "",
                    "",
                    "MCORE.DD.PHYSICAL_TAMPERING",
                    "MCORE.DD.PHYSICAL_TAMPERING",
                    "MCORE.DD.PHYSICAL_TAMPERING",
                    "!(MCORE.DD.PHYSICAL_TAMPERING)",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Keep the DUT in packaging and bring in TH NFC scanner close to the DUT packaging.",
                    "Unpack DUT from its packaging, make sure DUT is not powered on and do not put the DUT in pairing mode. Bring in TH NFC scanner close to the DUT\u2019s NFC tag",
                    "Power on DUT and do not put the DUT in pairing mode. Bring in TH NFC scanner close to the DUT\u2019s NFC tag",
                    "DUT must have an explicit trigger of the the NFC pairing mode",
                    "Power on DUT and put the DUT in pairing mode. Bring in TH NFC scanner close to NFC tag",
                    "Power on DUT. Bring in NFC scanner close to NFC tag",
                    "Wait for the pairing mode to expire on device",
                    "For Read only Tags, try to write using NFC tool a payload to DUT",
                    "For Programmable Tag, NFC tag must be read only OTA. Try to write a payload to DUT using NFC tool",
                    "Optional\u2009\u2014\u2009For Programmable Tag, NFC tag may be reconfigured using wired means",
                    "Using TH NFC scanner - read NFC tag Reader type"
                ],
                "Expected Outcome": [
                    "Bring in the TH NFC scanner close to the DUT packaging and verify the DUT\u2019s NFC tag containing Onboarding Payload is not scannable and readable",
                    "Verify that the programmable tag does not advertise the Onboarding Payload and cannot be modified over the air.",
                    "Verify programmable tag when not in pairing mode, does not advertise the Onboarding Payload and cannot be modified over the air.",
                    "Verify the DUT has an explicit trigger (a physical action that enables the NFC pairing flow)",
                    "Verify the complete onboarding payload is presented",
                    "Verify\nthe complete onboarding payload is presented",
                    "Verify the DUT terminates the advertising upon termination of pairing mode.",
                    "Verify it is rejected and payload can\u2019t be written to tag",
                    "Verify the write is rejected and payload can\u2019t be written to tag",
                    "Verify payload can be written through wired means",
                    "Verify the NFC tag on a device is Type 2 or greater"
                ]
            }
        },
        {
            "Test Case Name": "8.1.6. [TC-DD-1.6] QR Code Format and Label [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the onboarding QR code is of scannable size.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "5.1.3.2",
                    "5.1.3.2"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "Scan the DUT\u2019s QR code using the TH QR code reader",
                    "Verify QR code version"
                ],
                "Expected Outcome": [
                    "Verify the QR code gets scanned successfully.\nVerify The QR code must be of sufficient size and contrast respective to surface material as to be readable with standard readers such as smartphones in normal lighting conditions. Refer to spec 5.1.3.3\u201cExample\u201d",
                    "QR code version must be of Version 1 or higher."
                ]
            }
        },
        {
            "Test Case Name": "8.1.7. [TC-DD-1.7] Setup Code Format and Label [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Manual Pairing Code size meets the minimum requirements.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "5.1.4, 1.6.1, 5.7.4"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "Verify using instruments"
                ],
                "Expected Outcome": [
                    "The Manual Pairing Code shall meet the following requirements:- Printed using a minimum font size of 6 points, typically producing a typeface height of 2.1 mm (6/72 inches)- Include dashes between the groups of Manual Pairing Code digits with the following spacing:- For 11 or 21-digit codes, the first row spacing is 4-3-4 (First Row: \"1234-567-8901\")- For 21-digit codes, the second row spacing is 4-3-2-1 (Second Row:\"9876-543-21-0\")"
                ]
            }
        },
        {
            "Test Case Name": "8.1.8. [TC-DD-1.8] QR Code Onboarding Payload Verification [DUT - Commissioner]",
            "Test Case ID": "TC-DD-1.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Commissioner is able to scan and parse the QR code to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    ""
                ],
                "Test Step": [
                    "Scan the TH Device\u2019s QR code using DUT",
                    "Using the DUT, parse the TH\u2019s QR code to onboard the TH Device onto the Matter network.",
                    "Scan the TH Device\u2019s QR code (that includes the additional TLV data) using DUT.Using the example provided above, the payload would be \"MT:-24J029Q00KA064IJ3P0IXZB0DK5N1K8SQ1RYCU1-A40\".",
                    "Using the DUT, parse the TH\u2019s QR code to onboard the TH Device onto the Matter network.",
                    "Scan the TH Device\u2019s QR code using the DUT. The number of alphanumeric characters in the QR code is 255 characters. Using the example provided above, the payload would be \"MT:-24J029Q00KA064IJ3P082W94DK5N1K8SQ1RYCU1\u2014\u200bZL15PKP1CD5T1VFSK1S3DO1ZTZR1UNMJ1DK5N1K8SQ1RYCU1\u2014\u200bZL15PKP1CD5T1VFSK1S3DO1ZTZR1UNMJ1DK5N1K8SQ1RYCU1\u2014\u200bZL15PKP1CD5T1VFSK1S3DO1ZTZR1UNMJ1DK5N1K8SQ1RYCU1\u2014\u200bZL15PKP1CD5T1VFSK1S3DO1ZTZR1UNMJ1DK5N1K8SQ1RYCU1\u2014\u200bZL15PKP1O0\"",
                    "Using the DUT, parse the TH\u2019s QR code to onboard the TH Device onto the Matter network."
                ],
                "Expected Outcome": [
                    "Verify the QR code has been scanned successfully.",
                    "Verify the TH\u2019s QR code was parsed successfully by the DUT",
                    "Verify the QR code has been scanned successfully.",
                    "Verify the TH\u2019s QR code with the appended TLV data was parsed successfully by the DUT (where the DUT may ignore the TLV contents)",
                    "Verify the QR code has been scanned successfully.",
                    "Verify the TH\u2019s QR code with the appended TLV data was parsed successfully by the DUT (where the DUT may ignore the TLV contents)"
                ]
            }
        },
        {
            "Test Case Name": "8.1.9. [TC-DD-1.9] Manual Pairing Code Payload Verification [DUT - Commissioner]",
            "Test Case ID": "TC-DD-1.9",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Manual Pairing Code can be provided to the Commissioner and parsed to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "5.1.4.1"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "Provide the 11-digit/21-digit Manual Pairing Code from the TH Device in text, speech or any format supported by DUT"
                ],
                "Expected Outcome": [
                    "Verify that the Manual Pairing Code can be provided to DUT and parsed to onboard the device onto the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.1.10. [TC-DD-1.10] NFC Onboarding Payload Verification [DUT - Commissioner] - REMOVED",
            "Test Case ID": "TC-DD-1.10",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Commissioner is able to read and decode the NFC code to onboard the device onto the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "Power up the TH Device and put the TH Device in commissioning mode",
                    "Bring the DUT close to the NFC tag for the TH Device"
                ],
                "Expected Outcome": [
                    "TH is in a state to be commissioned by the DUT Commissioner",
                    "Verify the DUT is able to read and decode the NFC tag\u2019s onboarding payload successfully to onboard the TH Device onto the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.1.11. [TC-DD-1.11] Concatenation - QR Code Onboarding Payload Verification [DUT - Commissioner] - REMOVED",
            "Test Case ID": "TC-DD-1.11",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the onboarding QR code contains information on the onboarding of multiple DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "5.1.6",
                    "5.1.6",
                    "5.1.6",
                    "5.1.6",
                    "5.1.6"
                ],
                "PICS": [
                    "MCORE.DD.CTRL_CONCATENATED_QR_CODE_1",
                    "MCORE.DD.CTRL_CONCATENATED_QR_CODE_1_INORDER",
                    "!(MCORE.DD.CTRL_CONCATENATED_QR_CODE_1) & MCORE.DD.CTRL_CONCATENATED_QR_CODE_2",
                    "!(MCORE.DD.CTRL_CONCATENATED_QR_CODE_1) & !(MCORE.DD.CTRL_CONCATENATED_QR_CODE_2)",
                    ""
                ],
                "Test Step": [
                    "Scan QR code using concatenation (which supports the commissioning of all the TH devices)",
                    "",
                    "",
                    "",
                    "Scan QR code using concatenation (which supports the commissioning of all the TH devices)"
                ],
                "Expected Outcome": [
                    "Verify the DUT is able to scan and parse the concatenated QR code successfully",
                    "Verify the DUT follows the correct order of onboarding the TH devices which must be from first to last starting from left to right.Example: MT:<onboarding-base-38-content_bulb1>*<onboarding-base-38-content_bulb2>*<onboarding-base-38-content_bulb3>*<onboarding-base-38-content_bulb4>content_bulb1 gets onboarded first, content_bulb2 gets onboarded second and so forth.",
                    "Verify the DUT indicates to the user the need to commission TH devices one by one by scanning their individual QR codes.",
                    "Verify the DUT does NOT indicate to the user the need to commission TH devices one by one by scanning their individual QR codes, but instead warns the user (in a way described by the provider of the DUT) that the QR code cannot be processed.",
                    "Verify the DUT recognizes the * separator from the QR code as an indication concatenation is used by parsing the QR code successfully as multiple TH QR codes."
                ]
            }
        },
        {
            "Test Case Name": "8.1.12. [TC-DD-1.12] Onboarding Payload Verification - Custom Flow = 0 [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.12",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the interactions defined by the Custom Flow field are reflected by the DUT supporting Standard Commissioning Flow",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "5.1.3",
                    "5.7.1"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "Scan the DUT\u2019s QR code using the TH.",
                    "Reboot the DUT device."
                ],
                "Expected Outcome": [
                    "Verify the QR code is scanned successfully and that the TH parses QR code.",
                    "Upon power up, verify the DUT Commissionee is advertising to be commissioned to a Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.1.13. [TC-DD-1.13] Onboarding Payload Verification - Custom Flow = 1 [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.13",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the interactions defined by the Custom Flow field are reflected by the DUT supporting User-Intent Commissioning Flow",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "5.1.3",
                    "5.7.2"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Power on the DUT device.",
                    "Scan the DUT\u2019s QR code from the previous step using the TH.",
                    "Follow any DUT-specific steps for putting the DUT Commissionee into commissioning mode"
                ],
                "Expected Outcome": [
                    "Verify DUT Commissionee is NOT in commissioning mode. User has a QR code to pass into DUT.",
                    "Verify the QR code is scanned successfully and that the TH parses QR code.",
                    "Verify the DUT Commissionee is advertising to be commissioned to a Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.1.14. [TC-DD-1.14] Onboarding Payload Verification - Custom Flow = 2 [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.14",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the interactions defined by the Custom Flow field are reflected by the DUT supporting Custom Commissioning Flow",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "5.1.3",
                    "5.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Power on the DUT device.",
                    "Scan the DUT\u2019s QR code from the previous step using the TH.",
                    "Follow any DUT-specific steps, guided by a service provided by the DUT\u2019s manufacturer for initial device setup, then place the DUT Commissionee into commissioning mode."
                ],
                "Expected Outcome": [
                    "Verify DUT Commissionee is NOT in commissioning mode. User has a QR code to pass into DUT.",
                    "Verify the QR code is scanned successfully and that the TH parses QR code.",
                    "Verify the DUT Commissionee is advertising to be commissioned to a Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.1.15. [TC-DD-1.15] Onboarding Payload Verification - Unique Discriminator and Passcode Values [DUT - Commissionee]",
            "Test Case ID": "TC-DD-1.15",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Discriminator and Passcode values are unique across two different hardware units of the same product coming for certification testing.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "2.a",
                    "2.b",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "5.7.1",
                    "",
                    "5.7.1",
                    "5.1.1.5",
                    "5.1.1.6"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Using the TH Onboarding payload reader, scan or read the Onboarding payload from DUT1",
                    "Using the TH, parse the Onboarding payload from previous step and verify that the Discriminator and Passcode for DUT1 are present.",
                    "Using the TH Onboarding payload reader, scan or read the Onboarding payload from DUT2",
                    "Using the TH, parse the Onboarding payload from previous step and verify that the Discriminator and Passcode for DUT2 are present.",
                    "Compare the Discriminator values for DUT1 (Step 1.b) and DUT2 (Step 2.b)",
                    "Compare the Passcode values for DUT1 (Step 1.b) and DUT2 (Step 2.b)"
                ],
                "Expected Outcome": [
                    "Verify the Onboarding payload is scanned successfully.",
                    "Note down the Discriminator and Passcode values of the parsed payload.",
                    "Verify the Onboarding payload is scanned successfully.",
                    "Note down the Discriminator and Passcode values of the parsed payload.",
                    "Verify that DUT1\u2019s Discriminator value is different than DUT2\u2019s Discriminator value.",
                    "Verify that DUT1\u2019s Passcode value is different than DUT2\u2019s Passcode value."
                ]
            }
        },
        {
            "Test Case Name": "8.2.1. [TC-DD-2.1] Announcement by Device Verification [DUT - Commissionee]",
            "Test Case ID": "TC-DD-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify if the DUT properly announces its uncommissioned state to allow a Matter Commissioner to discover the DUT to be commissioned.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7.a",
                    "7.b",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12.a",
                    "12.b",
                    "12.c",
                    "12.d",
                    "12.e",
                    "12.f",
                    "13",
                    "14.a",
                    "14.b",
                    "14.c",
                    "15.a",
                    "15.b"
                ],
                "Ref": [
                    "5.4.2.1",
                    "5.4.2.2",
                    "5.4.2.5",
                    "5.4.2.5",
                    "5.4.2.5",
                    "5.4.2.5",
                    "5.4.2.5",
                    "5.4.2.5",
                    "5.4.2.6",
                    "5.4.2.6",
                    "5.4.2.6",
                    "5.4.2.1, 4.3.1.5., 4.3.1.7., 4.3.1.11.",
                    "4.3.1.6.",
                    "4.3.1.8.",
                    "4.3.1.9.",
                    "4.3.1.10.",
                    "4.3.1.11.",
                    "4.3.1.12.",
                    "4.3.1.2., 4.3.1.3.",
                    "4.3.1.3.",
                    "4.3.1.3.",
                    "4.3.1.3.",
                    "4.3.1",
                    "4.3.1.3., 4.3.1.13."
                ],
                "PICS": [
                    "",
                    "MCORE.DD.CHIP_DEV |!(MCORE.DD.CHIP_DEV) |MCORE.DD.DEV_LOCK |MCORE.DD.DEV_BARRIER",
                    "MCORE.COM.BLE",
                    "MCORE.COM.BLE",
                    "MCORE.COM.BLE",
                    "MCORE.COM.BLE",
                    "MCORE.COM.BLE",
                    "{PICS_MCODE_COM_BLE}",
                    "MCORE.COM.WIFI",
                    "MCORE.COM.WIFI",
                    "MCORE.COM.WIFI & MCORE.DD.IE",
                    "",
                    "MCORE.DD.TXT_KEY_VP",
                    "MCORE.DD.TXT_KEY_DT",
                    "MCORE.DD.TXT_KEY_DN",
                    "MCORE.DD.TXT_KEY_RI",
                    "MCORE.DD.TXT_KEY_PH",
                    "MCORE.DD.TXT_KEY_PI",
                    "MCORE.DD.EXTENDED_DISCOVERY",
                    "",
                    "",
                    "MCORE.DD.COMMISSIONING_SUBTYPE_V | MCORE.DD.COMMISSIONING_SUBTYPE_T",
                    "",
                    ""
                ],
                "Test Step": [
                    "If TH is aware of the DUT\u2019s Discovery Capability Bitmask, it SHALL initiate Device Discovery in any order of priority on all the networking technologies that are supported by both the TH and the DUTIf TH is unaware of the DUT\u2019s Discovery Capability Bitmask, it SHALL initiate Device Discovery in any order on all the networking technologies it supports out of Wi-Fi Soft-AP, BLE, and on IP network discovery.",
                    "If (MCORE.DD.CHIP_DEV) thenIf !(MCORE.DD.CHIP_DEV) thenIf (MCORE.DD.DEV_LOCK) thenIf (MCORE.DD.DEV_BARRIER) then",
                    "DUT begins sending ADVs. TH does not respond to these DUT ADVs so that the DUT can keep sending ADVs",
                    "TH does not respond to DUT and DUT keeps sending ADVs",
                    "TH does not respond to DUT and DUT keeps sending ADVs",
                    "TH does not respond to DUT. User power cycles the DUT",
                    "TH waits untilT0+ 2 minutes and 45 seconds and confirms that the DUT is still sending ADVs.",
                    "TH waits untilT0+ 15 minutes and checks if the DUT is sending ADVs.",
                    "TH scans and finds the DUT SSID",
                    "TH scans and finds the DUT SSIDTH sends to DUT a 1st power cycle command (or reset manually)TH sends to DUT a 2nd power cycle command (or reset manually)",
                    "TH scans and finds the DUT SSID",
                    "TH and DUT are connected to the same network through vendor-unique means or by commissioning the DUT onto the Matter network and opening a commissioning window. The DUT is sending mandatory Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "TH and DUT are connected to the same network and the DUT is sending optional Commissionable Node Discovery service records over DNS-SD.",
                    "Place the DUT device into a non-commissionable state",
                    "TH and DUT are connected to the same network and the DUT is sending a Commissionable Node Discovery service record over DNS-SD.",
                    "Mandatory Commissioning Subtypes: Send a browse request for '_services._dns-sd._udp' using a DNS-SD records command-line test tool (i.e. 'dns-sd -B _services._dns-sd._udp' or 'avahi-browse _services._dns-sd._udp -r')",
                    "Optional Commissioning Subtypes: Send a browse request for '_services._dns-sd._udp' using a DNS-SD records command-line test tool (i.e. 'dns-sd -B _services._dns-sd._udp' or 'avahi-browse _services._dns-sd._udp -r')",
                    "Place the DUT device into Commissioning mode",
                    "Send a browse request for '_matterc._udp' using a DNS-SD records command-line test tool (i.e. 'dns-sd -B _matterc._udp' or 'avahi-browse _matterc._udp -r')"
                ],
                "Expected Outcome": [
                    "DUT selects a transport in any order of priority.",
                    "DUT starts announcing automaticallyDUT does not start announcingDUT does not start announcingDUT does not start announcing",
                    "The following Advertising PDU payload fields shall comply with section 5.4.2.5.6. \"Advertising Data\".Verify that:12-bit \"Discriminator\" field in Matter service data is populated16-bit \"Vendor ID\" field in Matter service data is set to Vendor ID or 0 if elided16-bit \"Product ID\" field in Matter service data is set to Product ID or 0 elided\"Extended Data\" bit is set to 1 if Extended Data exists otherwise set to 0 (Bit[0] of last byte)\"Extended Announcement\" bit is set to 0 in Matter service data (Bit[1] of last byte)",
                    "The ADV contains a GAP peripheral and uses the GAP General Discoverable mode",
                    "Between T0 and 30s, DUT should send ADVs each 20ms to 60msBetween 30s and 900s, DUT should send ADVs each 150ms to 1285ms. Allow +/- 10ms margin on the measured value.",
                    "DUT restarts the ADV sending process upon reboot and uses a new address (the previous address must be stored by TH in the previous step). Record the current time asT0",
                    "",
                    "If the DUT is still sending ADVs:DUT must send ADVs at an interval greater than 1200ms.\nAutomated versions of this test case should add a visible note in the logs or reports if the advertising rate is not 1285ms +/- 10ms, even though this is legal, since 1285ms is a SHOULD in the core specification.The following Advertising PDU payload fields shall comply with section 5.4.2.5.6. \"Advertising Data\".\nVerify that:12-bit \"Discriminator\" field in Matter service data is populated16-bit \"Vendor ID\" field in Matter service data is set to 016-bit \"Product ID\" field in Matter service data is set to 0\"Extended Data\" bit is set to 1 if Extended Data exists otherwise set to 0 (Bit[0] of last byte)\"Extended Announcement\" bit is set to 1 in Matter service data (Bit[1] of last byte)",
                    "DUT SSID is not hidden and has the format: MATTER-ddd-vvvv-pppp",
                    "DUT BSSID is random on each boot. DUT BSSID has the value XAfter 1st power cycle, DUT BSSID is random with respect X (is not X, X+1, X-1, X*2, X/2, etc.)After 2nd power cycle, DUT BSSID is random with respect X (is not X, X+1, X-1, X*2, X/2, etc.)DUT bcast bit is set.DUT locally-administered bit is set.",
                    "DUT IE is carried in the Wi-Fi Soft-AP Beacon and Probe response framesANDDUT includes in that IE the following fields:0x00 (Reserved)0x01 (Device State)0x02 (Device Information)0x03 (Rotating Device Id)0x04 - 0xFF (Reserved)",
                    "DUT is able to be discovered over DNS-SD.For each of the following required TXT record keys for DNS-SD based discovery, validate that the DUT\u2019s TXT records contain a valid key/value pair corresponding to the rules for each TXT key listed:D: Full 12-bit discriminator for the Commissionable Node (Spec. 4.3.1.5.). The discriminator value SHALL be encoded as a variable-length decimal number in ASCII text, with up to four digits, omitting any leading zeroes. For example, value D=840 would indicate that this Commissionable Node has a decimal long discriminator=840.CM: Commissioning Mode,\nThe absence of key CM SHALL imply a value of 0 (CM=0).\nCM=0 SHALL indicate that the publisher is not currently in Commissioning Mode.\nCM=1 SHALL indicate that the publisher is currently in Commissioning Mode and requires use of a passcode for commissioning provided by the Commissionee\nCM=2 SHALL indicate that the publisher is currently in Commissioning Mode and requires use of a dynamically generated passcode for commissioning corresponding to the verifier that was passed to the device using the Open Commissioning Window command.",
                    "Validate that the following TXT key record is compliant:VP: Vendor ID and Product ID (Spec 4.3.1.6.) SHALL both be expressed as variable-length decimal numbers, encoded as ASCII text, omitting any leading zeroes, and of maximum length of 5 characters each to fit their 16-bit numerical range. For example,\nIf the Product ID is present, it SHALL be separated from the Vendor ID using a '' character.\nIf the VP key is present without a Product ID, the value SHALL contain only the Vendor ID alone, with no '' character.For example,\n(1) VP=123 gives Vendor ID.\n(2) VP=123+456 gives Vendor ID=123 + Product ID=456.",
                    "Validate that the following TXT key record is compliant:DT: Device Type (Spec 4.3.1.8.) MAY provide the publisher\u2019s primary device type (see Section 11.22.5.3, \u201cDeviceTypeID\u201d). In case the device combines multiple device types, the manufacturer SHOULD choose the device type identifier of the primary function of the device for which the device wishes to be discoverable. If present, it SHALL be encoded as a variable-length decimal number in ASCII text, omitting any leading zeroes.For example, the DT=10 key/value pair would indicate that the primary device type is 10 (0x000a), which is the device type identifier for a Door Lock.",
                    "Validate that the following TXT key record is compliant:DN: Device Name (Spec 4.3.1.9.) MAY provide a device advertisement name. If present, it SHALL be encoded as a valid UTF-8 string with a maximum length of 32 bytes (matching the maximum length of the NodeLabel string in the Basic Information Cluster).For example, the DN=Living Room key/value pair indicates that the advertisement name specified by the user is 'Living Room'.",
                    "Validate that the following TXT key record is compliant:RI: Rotating Identifier (Spec 4.3.1.10.) MAY provide a Rotating Device Identifier. If present, the value associated with the RI key SHALL contain the octets of the Rotating Device Identifier octet string encoded as the concatenation of each octet\u2019s value as a 2-digit uppercase hexadecimal number.\nThe resulting ASCII string SHALL NOT be longer than 100 characters, which implies a Rotating Device Identifier of at most 50 octets.",
                    "Validate that the following TXT key record is compliant:PH: Pairing Hint (Spec 4.3.1.11.) MAY provide a pairing hint. If present, it SHALL be encoded as a variable-length decimal number in ASCII text, omitting any leading zeroes.\nThe pairing hint represents a base-10 numeric value for a bitmap of methods supported by the Commissionee in its current state for putting it in Commissioning Mode.For example, the PH=5 key/value pair represents a hint value with bits 0 and 2 are set.For the Pairing Hint TXT key, verify the following bits are set according to the requirement listed for the bit:Bit 0: This bit SHALL be set to 1 for devices using Standard Commissioning Flow , and set to 0 otherwise.Bit 1: This SHALL be set to 1 for devices requiring Custom Commissioning Flow before they can be available for Commissioning by any Commissioner.Bits 8, 10, 12, 15, 17, 19: If the following bits are set to 1 in the PH, verify that the PI key is set with a value N representing a value the PH key needs to indicate action for the user to take (i.e. PH Bit 8: hold reset button for N seconds, PH Bit 12: press reset button N times)If the DUT=Commissionee has enabled Extended Discovery, then the PH record is required when not in Commissioning Mode (CM=0).",
                    "Validate that the following TXT key record is compliant:PI: Pairing Instruction (Spec 4.3.1.12.) MAY give the pairing instruction. If present, the value SHALL be encoded as a valid UTF-8 string with a maximum length of 128 bytes.\nThe meaning of this key is dependent upon the PH key value, see Table 6, \u201cPairing Hint Values\u201d.\nThis key/value pair SHALL only be returned in the DNS-SD TXT record if the PH bitmap value has a bit set which has PI Dependency = True, see Table 6, \u201cPairing Hint Values\u201d. The PH key SHALL NOT have more than one bit set which has a dependency on the PI key (PI Dependency = True) to avoid ambiguity in PI key usage.For example, given PH=256, bit 8 is set which indicates \"Press Reset Button for N seconds\". Therefore, a value of PI=10 would indicate that N is 10 in that context.",
                    "Verify DUT is not able to be commissioned over DNS-SD.Verify that Commissioning Subtype='_CM' is NOT being published in the DUT\u2019s Commissionable Node Discovery service record over DNS-SD.",
                    "DUT is able to be discovered over DNS-SD.",
                    "Verify each of the following Commissioning Subtypes, published in the DUT\u2019s Commissionable Node Discovery service record over DNS-SD, matches one of the following valid subtypes:1. _L<dddd>, where <dddd> provides the full 12-bit discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeroes.2. _S<dd>, where <dd> provides the upper 4 bits of the discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeroes.3. _CM, which represents \"currently in Commissioning Mode\" (due to any method, for example, a factory new device that has just been put into commissioning mode by the user, or an already- commissioned device which has just received the Open Commissioning Window command).",
                    "Verify each of the following Commissioning Subtypes, published in the DUT\u2019s Commissionable Node Discovery service record over DNS-SD, matches one of the following valid subtypes:1. _V<ddddd>, where <ddddd> provides the 16-bit Vendor ID, encoded as a variable-length decimal number in ASCII text, omitting any leading zeroes.2. _T<ddd>, where <ddd> provides the device type identifier for the device, encoded as a variable- length decimal number in ASCII (UTF-8) text, omitting any leading zeroes. In case the device combines multiple device types, the manufacturer SHOULD choose the device type identifier of the primary function of the device for which the device wishes to be discoverable.",
                    "DUT is able to be discovered over DNS-SD.",
                    "DUT responds to the '_matterc._udp' browse request from the TH. Verify TH is able to read the Matter pointer records for the DUT"
                ]
            }
        },
        {
            "Test Case Name": "8.2.2. [TC-DD-2.2] Discovery by Commissioner Verification [DUT - Commissioner]",
            "Test Case ID": "TC-DD-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the test case is to verify that a device acting as Commissioner is able to properly discover an uncommissioned matter device that wants to join the network using all discovery transport technologies specified.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "2.a",
                    "2.b",
                    "2.c",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b",
                    "4.c",
                    "5"
                ],
                "Device": [
                    "TH",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.4.3.1",
                    "5.4.3.1",
                    "5.4.3.1",
                    "5.4.3.1",
                    "5.4.3.1",
                    "5.4.3.2",
                    "5.4.3.2",
                    "5.4.3.2",
                    "5.4.3.2",
                    "5.4.3.2",
                    "5.4.3.3"
                ],
                "PICS": [
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    ""
                ],
                "Test Step": [
                    "TH starts matter announcement procedure using BLE transport",
                    "DUT starts BLE scan across all three advertising channels with a sufficient dwell time, interval, and overall duration of scan",
                    "DUT starts scan in background using BLE transport",
                    "TH starts matter announcement using BLE transport",
                    "",
                    "TH starts SoftAP and begin matter announcement procedure",
                    "DUT starts Wi-Fi scan of all 2.4 GHz Wi-Fi channels allowed per its operational regulatory domain (channels 1, 6, and 11 are preferred)",
                    "DUT scans using Wi-Fi in background",
                    "TH starts SoftAP and begin matter announcement procedure",
                    "",
                    "With DUT and TH connected to the same network over IP, DUT performs service discovery using DNS-SD"
                ],
                "Expected Outcome": [
                    "TH must start sending BLE advertisements.",
                    "DUT must find TH and provide onboarding data to for validation.Pass Criteria: DUT is able to report the Onboarding payload as set on TH",
                    "",
                    "TH must start sending BLE advertisements.",
                    "DUT must find TH and provide onboarding data for validation.Pass Criteria: DUT is able to report the Onboarding payload as set on TH",
                    "TH must start SoftAP using Wi-Fi transport",
                    "DUT must find TH and provide onboarding data for validation.Pass Criteria: DUT is able to report the Onboarding payload as set on TH",
                    "",
                    "TH must start SoftAP using Wi-Fi transport",
                    "DUT must find TH and provide onboarding data for validation.Pass Criteria: DUT is able to report the Onboarding payload as set on TH",
                    "DUT must find TH and provide onboarding data for validation.Pass Criteria: DUT is able to report the Onboarding payload as set on TH"
                ]
            }
        },
        {
            "Test Case Name": "8.3.1. [TC-DD-3.1] Commissioning Flow - Concurrent [DUT - Commissionee]",
            "Test Case ID": "TC-DD-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Concurrent Commissioning Flow of a device that is\ncommissioned into a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Device": [
                    "",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    ""
                ],
                "Ref": [
                    "5.5 - 2",
                    "5.5 - 3",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 10",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on DUT if needed",
                    "Commissioner configures operational network on DUT if DUT both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network if not already connected",
                    "Commissioner starts discovery of DUT using Operational Discovery",
                    "Commissioner opens a CASE session with DUT over operational network",
                    "Commissioner sends CommissioningComplete command",
                    "Commissioning channel between the Commissioner and Commissionee is terminated."
                ],
                "Expected Outcome": [
                    "Commissioner and Commissionee can discover each other and connect to each other by establishing a commissioning channel between each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "DUT arms the Fail-safe timer with success",
                    "DUT sets the regulatory values configured by the Commissioner",
                    "DUT generate a new operational key pair",
                    "DUT is able to install Trusted Root Certificate if needed",
                    "DUT configures the ACL with success",
                    "DUT configure the correct operational network credentials",
                    "DUT successfully connect to operational network",
                    "",
                    "DUT is able to open the CASE session with TH",
                    "DUT responds with success at CommissioningComplete command sent by TH",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "8.3.2. [TC-DD-3.2] Commissioning Flow - Non-concurrent [DUT - Commissionee] - REMOVED",
            "Test Case ID": "TC-DD-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Non-Concurrent Commissioning Flow of a device that is commissioned into a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "2a",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Device": [
                    "",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.5 - 2",
                    "5.5 - 3",
                    "5.5",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13, 11.8.7.9",
                    "5.5 - 13, 11.8.7.9",
                    "5.5 - 13, 11.8.7.9",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5 - 16"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner reads commissioning information, including SupportsConcurrentConnection attribute from General Commissioning cluster",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on DUT if needed",
                    "Commissioner configures operational network on DUT if DUT both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network",
                    "Commissioning channel between the Commissioner and Commissionee is closed",
                    "Commissionee starts the operational channel",
                    "Commissioner starts discovery of DUT using Operational Discovery",
                    "Commissioner opens a CASE session with DUT over operational network",
                    "Commissioner sends CommissioningComplete command"
                ],
                "Expected Outcome": [
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "Verify SupportsConcurrentConnection is false",
                    "DUT arms the Fail-safe timer with success",
                    "DUT sets the values configured by the Commissioner",
                    "DUT generates a new operational key pair",
                    "DUT is able to install Trusted Root Certificate if needed",
                    "DUT configures the ACL with success",
                    "DUT configures the correct operational network credentials",
                    "DUT responds with success in the ConnectNetworkResponse command on the commissioning channel",
                    "DUT closes the commissioning channel",
                    "DUT starts the operational channel",
                    "",
                    "DUT is able to open the CASE session with TH",
                    "DUT respond with success at CommissioningComplete command sent by TH"
                ]
            }
        },
        {
            "Test Case Name": "8.3.3. [TC-DD-3.3] User Directed Commissioning [DUT - Commissionee]",
            "Test Case ID": "TC-DD-3.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that a Commissionee is able to initiate the commissioning procedure using User Directed Commissioning.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Device": [
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "TH",
                    "TH"
                ],
                "Ref": [
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT starts scanning for available commissioners using Commissioner Discovery",
                    "TH is instructed to advertise Commissioner Discovery service",
                    "DUT starts scanning for available commissioners using Commissioner Discovery",
                    "DUT is instructed to start the commissioning procedure with the TH found at Step 3",
                    "TH verifies the Identification Declaration message",
                    "TH starts the commissioning procedure with DUT"
                ],
                "Expected Outcome": [
                    "DUT should make 4 retries and each retry should be delayed by 100ms from the previous transmission",
                    "",
                    "DUT must find the TH Commissioner Discovery DNS-SD service",
                    "DUT should send an Identification Declaration message to selected Commissioner",
                    "Identification Declaration message should have:- protocol ID 0x0003- protocol opcode 0x00- Session ID field must be set to 0- Session Type bits from Security Flags and Session ID must be set to 0- S bit and DSIZ bits from Message Flags must be set to 0- R bit from Exchange Flags must be set to 0- I bit from Exchange Flags must be set to 1- Content should be the DUT DNS-SD service instance name",
                    "Commissioning procedure ends with success"
                ]
            }
        },
        {
            "Test Case Name": "8.3.4. [TC-DD-3.4] User Directed Commissioning [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that a Commissioner is able to handle the commissioning procedure initiated by a commissionee using User Directed Commissioning.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Device": [
                    "DUT",
                    "TH",
                    "TH",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3",
                    "5.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT is instructed to advertise Commissioner Discovery service",
                    "TH starts scanning for available commissioners using Commissioner Discovery",
                    "TH is instructed to start the commissioning procedure with the DUT found at Step 2",
                    "DUT verifies the Identification Declaration message",
                    "By any means, DUT prompts user for onboarding payload",
                    "DUT starts the commissioning procedure with TH"
                ],
                "Expected Outcome": [
                    "",
                    "TH must find the DUT Commissioner Discovery DNS-SD advertising using service type _matterd._udp",
                    "TH should send an Identification Declaration message to DUT",
                    "Identification Declaration message should have:- protocol ID 0x0003- protocol opcode 0x00- Session ID field must be set to 0- Session Type bits from Security Flags and Session ID must be set to 0- S bit and DSIZ bits from Message Flags must be set to 0- R bit from Exchange Flags must be set to 0- I bit from Exchange Flags must be set to 1- Content should be the DUT DNS-SD service instance name",
                    "DUT must request onboarding payload",
                    "Commissioning procedure ends with success"
                ]
            }
        },
        {
            "Test Case Name": "8.3.5. [TC-DD-3.5] Commissioning Flow - Concurrent [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Concurrent Commissioning Flow of commissioner that can discover and commission a device in the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Device": [
                    "DUT",
                    "",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    ""
                ],
                "Ref": [
                    "5.5 - 1",
                    "5.5 - 2, 5.4.3.3, 5.4.2.1",
                    "5.5 - 3",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 10",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5"
                ],
                "PICS": [
                    "",
                    "MCORE.DD.DISCOVERY_IP",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner has regulatory and fabric information available and has accurate date, time and timezone",
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.If (MCORE.DD.DISCOVERY_IP), TH device is advertising over IP Network using DNS-based Service Discovery (DNS-SD)",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on TH if needed",
                    "Commissioner configures operational network on TH if TH both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network if not already connected",
                    "Commissioner starts discovery of TH using Operational Discovery",
                    "Commissioner opens a CASE session with TH over operational network",
                    "Commissioner sends CommissioningComplete command",
                    "Commissioning channel between the Commissioner and Commissionee is terminated."
                ],
                "Expected Outcome": [
                    "Check time, date and timezone on DUT",
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "TH arm the Fail-safe timer with success",
                    "TH set the values configured by the Commissioner",
                    "TH generate a new operational key pair",
                    "TH is able to install Trusted Root Certificate if needed",
                    "TH configure the ACL with success",
                    "TH configure the correct operational network credentials",
                    "TH successfully connect to operational network",
                    "",
                    "TH is able to open the CASE session with DUT",
                    "TH respond with success at CommissioningComplete command sent by DUT",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "8.3.6. [TC-DD-3.6] Commissioning Flow - Non-concurrent [DUT - Commissioner] - REMOVED",
            "Test Case ID": "TC-DD-3.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Non-Concurrent Commissioning Flow of commissioner that can commission a device\nin the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Device": [
                    "DUT",
                    "",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.5 - 1",
                    "5.5 - 2",
                    "5.5 - 3",
                    "5.5",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13, 11.8.7.9",
                    "5.5 - 13, 11.8.7.9",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5 - 16"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner has regulatory and fabric information available and has accurate date, time and timezone",
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner reads commissioning information, including SupportsConcurrentConnection attribute from General Commissioning cluster",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on TH if needed",
                    "Commissioner configures operational network on TH if TH both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network",
                    "Commissioning channel between the Commissioner and Commissionee is closed, operational channel started",
                    "Commissioner starts discovery of TH using Operational Discovery",
                    "Commissioner opens a CASE session with TH over operational network",
                    "Commissioner sends CommissioningComplete command"
                ],
                "Expected Outcome": [
                    "Check time, date and timezone on DUT",
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "Verify SupportsConcurrentConnection is false",
                    "TH arm the Fail-safe timer with success",
                    "TH set the values configured by the Commissioner",
                    "TH generate a new operational key pair",
                    "TH is able to install Trusted Root Certificate if needed",
                    "TH configure the ACL with success",
                    "TH configure the correct operational network credentials",
                    "DUT waits for success in the ConnectNetworkResponse command and moves onto the next step",
                    "",
                    "",
                    "TH is able to open the CASE session with DUT",
                    "TH respond with success at CommissioningComplete command sent by DUT"
                ]
            }
        },
        {
            "Test Case Name": "8.3.7. [TC-DD-3.7] Commissioning Flow - Concurrent - Negative Scenario [DUT - Commissioner] - REMOVED",
            "Test Case ID": "TC-DD-3.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Concurrent Commissioning Flow of commissioner that can commission a device in the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Device": [
                    "DUT",
                    "",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    ""
                ],
                "Ref": [
                    "5.5 - 1",
                    "5.5 - 2",
                    "5.5 - 3",
                    "5.5 - 4",
                    "5.5.1",
                    "5.5.1",
                    "5.5 - 3",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 10",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5.1",
                    "5.5.1",
                    "5.5 - 12",
                    "5.5 - 13",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner has regulatory and fabric information available and has accurate date, time and timezone",
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Reboot TH and prepare for commissioning",
                    "Commissioner should return to step 2",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on TH if needed",
                    "Commissioner configures operational network on TH if TH both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network if not already connected",
                    "Reboot TH",
                    "Commissioner should return to the same state as step 13 to continue commissioning (i.e. Commissioner configure operational network on TH if TH both supports and requires)",
                    "Commissioner instructs Commissionee to connect to operational network if not already connected",
                    "Commissioner starts discovery of TH using Operational Discovery",
                    "Commissioner opens a CASE session with TH over operational network",
                    "Commissioner sends CommissioningComplete command",
                    "Commissioning channel between the Commissioner and Commissionee is terminated."
                ],
                "Expected Outcome": [
                    "Check time, date and timezone on DUT",
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "TH arm the Fail-safe timer with success",
                    "",
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "TH arm the Fail-safe timer with success",
                    "TH set the values configured by the Commissioner",
                    "TH generate a new operational key pair",
                    "TH is able to install Trusted Root Certificate if needed",
                    "TH configure the ACL with success",
                    "TH configure the correct operational network credentials",
                    "TH successfully connect to operational network",
                    "",
                    "Commissioner configure operational network on TH if needed",
                    "TH successfully connect to operational network",
                    "",
                    "TH is able to open the CASE session with DUT",
                    "TH respond with success at CommissioningComplete command sent by DUT",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "8.3.8. [TC-DD-3.8] Commissioning Flow - Non-concurrent - Negative Scenario [DUT - Commissioner] - REMOVED",
            "Test Case ID": "TC-DD-3.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of the following test cases is to verify the End to End Non-Concurrent Commissioning Flow of commissioner that can commission a device in the Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Device": [
                    "DUT",
                    "",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "TH",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.5 - 1",
                    "5.5 - 2",
                    "5.5 - 3",
                    "5.5",
                    "5.5 - 4",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13, 11.8.7.9",
                    "5.5",
                    "5.5.1",
                    "5.5 - 3",
                    "5.5 - 3",
                    "5.5 - 5",
                    "5.5 - 8",
                    "5.5 - 9",
                    "5.5 - 11",
                    "5.5 - 12",
                    "5.5 - 13",
                    "5.5",
                    "5.5 - 14",
                    "5.5 - 15",
                    "5.5 - 16"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.COM.WIRELESS",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commissioner has regulatory and fabric information available and has accurate date, time and timezone",
                    "Commissioner and Commissionee discover each other and connect via the discovery mode applicable for the DUT.",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner reads commissioning information, including SupportsConcurrentConnection attribute from General Commissioning cluster",
                    "Commissioner SHALL re-arm Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on TH if needed",
                    "Commissioner configures operational network on TH if TH both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network",
                    "Commissioning channel between the Commissioner and Commissionee is terminated.",
                    "Reboot TH and prepare for commissioning",
                    "Establish encryption keys with Password Authenticated Session Establishment on the commissioning channel",
                    "Commissioner re-arms Fail-safe timer on Commissionee within 60s (the autonomously Fail-safe timer length set by Commissionee)",
                    "Commissioner SHALL configure regulatory information in the Commissionee.",
                    "Commissioner requests operational CSR from Commissionee with OperationalCSRRequest command",
                    "Commissioner configures operational credentials on DUT if not previously installed",
                    "Commissioner configures itself as administrator in ACL on TH if needed",
                    "Commissioner configures operational network on TH if TH both supports and requires",
                    "Commissioner instructs Commissionee to connect to operational network if not already connected",
                    "Commissioning channel between the Commissioner and Commissionee is terminated.",
                    "Commissioner starts discovery of TH using Operational Discovery",
                    "Commissioner opens a CASE session with TH over operational network",
                    "Commissioner sends CommissioningComplete command"
                ],
                "Expected Outcome": [
                    "Check time, date and timezone on DUT",
                    "Commissioner and Commissionee can discover each other and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "Verify SupportsConcurrentConnection is false",
                    "TH arm the Fail-safe timer with success",
                    "TH set the values configured by the Commissioner",
                    "TH generate a new operational key pair",
                    "TH is able to install Trusted Root Certificate if needed",
                    "TH configure the ACL with success",
                    "TH configure the correct operational network credentials",
                    "DUT waits for success in the ConnectNetworkResponse command and moves onto the next step",
                    "",
                    "Commissioner should go to step 2. Commissioner and Commissionee should discover and connect to each other.",
                    "DUT is able to establish encryption keys using PASE",
                    "TH arm the Fail-safe timer with success",
                    "TH set the values configured by the Commissioner",
                    "TH generate a new operational key pair",
                    "TH is able to install Trusted Root Certificate if needed",
                    "TH configure the ACL with success",
                    "TH configure the correct operational network credentials",
                    "TH successfully connect to operational network",
                    "",
                    "",
                    "TH is able to open the CASE session with DUT",
                    "TH respond with success at CommissioningComplete command sent by DUT"
                ]
            }
        },
        {
            "Test Case Name": "8.3.9. [TC-DD-3.9] Commissioning Flow - Custom Flow = 2 [DUT - Commissionee]",
            "Test Case ID": "TC-DD-3.9",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify if a device that is not a commissioner and has a custom commissioning flow is\nable to complete the commissioning procedure with success.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Device": [
                    "TH",
                    "TH",
                    "TH"
                ],
                "Ref": [
                    "5.7.3",
                    "5.7.3",
                    "5.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH receives Onboarding Payload from the DUT",
                    "Follow any custom steps, guided by a service provided by the DUT\u2019s manufacturer for initial device setup, then place the DUT Commissionee into commissioning mode.",
                    "DUT is commissioned by the TH"
                ],
                "Expected Outcome": [
                    "Custom Flow field from Onboarding Payload must be set to value 2.",
                    "Verify the DUT Commissionee is advertising to be commissioned to a Matter network.",
                    "The commissioning procedure ends with success"
                ]
            }
        },
        {
            "Test Case Name": "8.3.10. [TC-DD-3.10] Commissioning Flow - Custom Flow = 2 [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.10",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify if a node that acts as a commissioner is able to properly use custom commissioning\ndata that a commissionee may require in order to complete the commissioning procedure with success.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Device": [
                    "DUT",
                    "TH",
                    "DUT"
                ],
                "Ref": [
                    "5.7.3",
                    "5.7.3",
                    "5.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT receives Onboarding Payload from the TH with Custom Flow field set to value 2",
                    "User follows any TH-specific steps to place the TH Commissionee into commissioning mode.",
                    "DUT commissions TH"
                ],
                "Expected Outcome": [
                    "DUT is triggered to enter the Custom Commissioning Flow",
                    "Verify the TH Commissionee is advertising to be commissioned to a Matter network.",
                    "Commissioning of TH ends with success"
                ]
            }
        },
        {
            "Test Case Name": "8.3.11. [TC-DD-3.11] Commissioning Flow = 0 (Standard Flow) - QR Code [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.11",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Commissioner can scan a device onboarding QR code, successfully parse the QR code and successfully complete the commissioning procedure using Standard commissioning flow.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "1.c",
                    "2.a",
                    "2.b",
                    "2.c",
                    "3.a",
                    "3.b",
                    "3.c"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.1",
                    "5.1.3",
                    "5.1.3",
                    "5.7.1",
                    "5.1.3",
                    "5.1.3",
                    "5.7.1",
                    "5.1.3",
                    "5.1.3"
                ],
                "PICS": [
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_SOFTAP"
                ],
                "Test Step": [
                    "Standard Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 0 and supports BLE for its Discovery Capability. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "Using the DUT, parse the TH\u2019s QR code and follow any steps needed for the Commissioner/Commissionee to complete the commissioning process using BLE",
                    "Standard Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 0, supports IP Network for its Discovery Capability and is already on the same IP network as the DUT commissioner. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "Using the DUT, parse the TH\u2019s QR code and follow any steps needed for the Commissioner/Commissionee to complete the commissioning process using IP Network",
                    "Standard Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 0 and supports SoftAP for its Discovery Capability. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "Using the DUT, parse the TH\u2019s QR code and follow any steps needed for the Commissioner/Commissionee to complete the commissioning process using SoftAP"
                ],
                "Expected Outcome": [
                    "User has a QR code to pass into DUT",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses QR code and DUT commissions TH to the Matter network",
                    "User has a QR code to pass into DUT",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses QR code and DUT commissions TH to the Matter network",
                    "User has a QR code to pass into DUT",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses QR code and DUT commissions TH to the Matter network"
                ]
            }
        },
        {
            "Test Case Name": "8.3.12. [TC-DD-3.12] Commissioning Flow = 1 (User-Intent Flow) - QR Code [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.12",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Commissioner can scan a device onboarding QR code, successfully parse the QR code and successfully complete the commissioning procedure using User-Intent commissioning flow.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "1.c",
                    "1.d",
                    "2.a",
                    "2.b",
                    "2.c",
                    "2.d",
                    "3.a",
                    "3.b",
                    "3.c",
                    "3.d"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.2",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "5.7.2",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "5.7.2",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3"
                ],
                "PICS": [
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP"
                ],
                "Test Step": [
                    "User-Intent Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 1 and supports BLE for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps for putting the TH Commissionee device into commissioning mode and to complete the commissioning process using BLE.",
                    "User-Intent Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 1 and supports IP Network for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps for putting the TH Commissionee device into commissioning mode and to complete the commissioning process using IP Network.",
                    "User-Intent Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 1 and supports SoftAP for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps for putting the TH Commissionee device into commissioning mode and to complete the commissioning process using SoftAP."
                ],
                "Expected Outcome": [
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network.",
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network.",
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.3.13. [TC-DD-3.13] Commissioning Flow = 2 (Custom Flow) - QR Code [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.13",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Commissioner can scan a device onboarding QR code, successfully parse the QR code and successfully complete the commissioning procedure using Custom commissioning flow.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "1.c",
                    "1.d",
                    "2.a",
                    "2.b",
                    "2.c",
                    "2.d",
                    "3.a",
                    "3.b",
                    "3.c",
                    "3.d"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.3",
                    "5.1.3",
                    "5.1.3",
                    "5.7.3",
                    "5.7.3",
                    "5.1.3",
                    "5.1.3",
                    "5.7.3",
                    "5.7.3",
                    "5.1.3",
                    "5.1.3",
                    "5.7.3"
                ],
                "PICS": [
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.DISCOVERY_IP",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.SCAN_QR_CODE",
                    "MCORE.DD.DISCOVERY_SOFTAP",
                    "MCORE.DD.DISCOVERY_SOFTAP"
                ],
                "Test Step": [
                    "Custom Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 2 and supports BLE for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps, unless the DUT has alternative means to guide the user to successful commissioning, for putting the TH Commissionee into commissioning mode, for triggering the DUT Commissioner for commissioning, and for completing the commissioning process using BLE.",
                    "Custom Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 2 and supports IP Network for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps, unless the DUT has alternative means to guide the user to successful commissioning, for putting the TH Commissionee into commissioning mode, for triggering the DUT Commissioner for commissioning, and for completing the commissioning process using IP Network.",
                    "Custom Commissioning Flow: Use a Commissionee with a QR code that has the Custom Flow field set to 2 and supports SoftAP for its Discovery Capability. Commissionee is NOT in commissioning mode. Ensure the Version bit string follows the current Matter spec. documentation.",
                    "Scan the QR code from the previous step using the DUT.",
                    "DUT parses QR code.",
                    "User should follow any TH-specific steps, unless the DUT has alternative means to guide the user to successful commissioning, for putting the TH Commissionee into commissioning mode, for triggering the DUT Commissioner for commissioning, and for completing the commissioning process using SoftAP."
                ],
                "Expected Outcome": [
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network.",
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network.",
                    "User has a QR code to pass into DUT.",
                    "Verify the QR code has been scanned successfully.",
                    "Verify DUT has parsed the QR code. Verify TH has not been commissioned to the Matter network.",
                    "DUT commissions TH to the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.3.14. [TC-DD-3.14] Commissioning Flow - QR Code - Negative Scenario [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.14",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can scan a device onboarding QR code, successfully parse the QR code and prevent the commissioning of any devices when scanning an invalid QR code.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b",
                    "5.a",
                    "5.b"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.4",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "5.1.7.1",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "MCORE.DD.DISCOVERY_BLE",
                    "MCORE.DD.DISCOVERY_BLE",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Locate and scan/read the Commissionee\u2019s QR code using DUT",
                    "Version String: Using the QR code from Step 1, generate a new QR code but substituting out the current Version String with an invalid Version String (i.e. '010' or any non-zero 3-bit value)",
                    "Scan/read the QR code, generated in the previous step, using the DUT",
                    "Using the QR code from Step 1, ensure the TH\u2019s Discovery Capability bit string is NOT set to BLE for discovery (i.e. set to OnNetwork discovery capability)",
                    "Scan/read the QR code of the TH device using the DUT",
                    "Passcode: Using the QR code from Step 1, generate a new QR code using all the same Onboarding Payload components except for the Passcode. For each passcode in the following list, set the Passcode component to one of the invalid Passcodes and generate a new QR code using all the same Onboarding Payload components and one Passcode from the list: 00000000, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999, 12345678, 87654321",
                    "Scan each of the generated QR codes from the previous step using DUT",
                    "Prefix: Using the QR code from Step 1, generate a new QR code but substituting out the current Prefix with an invalid Prefix that is not 'MT:' (i.e. Prefix='AB:')",
                    "Scan/read the QR code, generated in the previous step, using the DUT"
                ],
                "Expected Outcome": [
                    "Verify the DUT is able to scan/read the QR code",
                    "User has a QR code generated to pass into DUT. Using the example provided above, the payload would be \"MT:034J029Q00KA0648G00\".",
                    "DUT parses QR code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a QR code generated to pass into DUT. Using the example provided above, the payload would be \"MT:-24J029Q00KA0648G00\".",
                    "If TH Commissionee\u2019s Discovery Capabilities do not support BLE, ensure that the DUT commissions the TH onto the Matter network over a capability that is NOT BLE. In this example, over OnNetwork.",
                    "User has 12 QR codes (one for each passcode in the list of invalid passcodes) generated to pass into DUTUsing the example provided above, the payloads would be:\n\"MT:-24J029Q00OC0000000\" (00000000),\n\"MT:-24J029Q00KMSP0Z800\" (11111111),\n\"MT:-24J029Q00GWID1WH00\" (22222222),\n\"MT:-24J029Q00C4912TQ00\" (33333333),\n\"MT:-24J029Q008E.Q2QZ00\" (44444444),\n\"MT:-24J029Q004ORE3N610\" (55555555),\n\"MT:-24J029Q000YH24KF10\" (66666666),\n\"MT:-24J029Q00Y58S4HO10\" (77777777),\n\"MT:-24J029Q00UF-F5EX10\" (88888888),\n\"MT:-24J029Q00QPQ36B420\" (99999999),\n\"MT:-24J029Q004QG46Y900\" (12345678),\n\"MT:-24J029Q00YX018EW10\" (87654321)",
                    "DUT parses QR code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a QR code generated to pass into DUT. Using the example provided above, the payload would be \"AB:-24J029Q00KA0648G00\".",
                    "DUT commissioner does not react successfully to scanning the QR code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions."
                ]
            }
        },
        {
            "Test Case Name": "8.3.15. [TC-DD-3.15] Commissioning Flow - Manual Pairing Code [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.15",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can use a Manual Pairing Code, successfully parse the Manual Pairing Code and complete the commissioning procedure with success.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "2.a",
                    "2.b"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.1.4.1",
                    "5.1.4.1",
                    "5.1.4.1",
                    "5.1.4.1"
                ],
                "PICS": [
                    "MCORE.DD.11_MANUAL_PC",
                    "MCORE.DD.11_MANUAL_PC",
                    "MCORE.DD.21_MANUAL_PC",
                    "MCORE.DD.21_MANUAL_PC"
                ],
                "Test Step": [
                    "Verify the TH\u2019s 11-digit Manual Pairing Code meets the following criteria:- VERSION bit string string up to date with the current Matter spec. documentation- VID_PID_PRESENT bit string set to 0",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process.",
                    "Verify the TH\u2019s 21-digit Manual Pairing Code meets the following criteria:- A VERSION bit string string up-to-date with the current Matter spec. documentation- A VID_PID_PRESENT bit string set to 1- A VENDOR_ID present (as defined in section 2.5.2. \"Vendor Identifier\")- A PRODUCT_ID present (as defined in section 2.5.3. \"Product Identifier\")",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process."
                ],
                "Expected Outcome": [
                    "User has the TH\u2019s 11-digit Manual Pairing Code to pass into DUT.",
                    "DUT parses Manual Pairing Code and DUT commissions TH to the Matter network",
                    "User has a Manual Pairing Code to pass into DUT",
                    "DUT parses Manual Pairing Code and DUT commissions TH to the Matter network"
                ]
            }
        },
        {
            "Test Case Name": "8.3.16. [TC-DD-3.16] Commissioning Flow - 11-digit Manual Pairing Code - Negative Scenario [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.16",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can take an 11-digit Manual Pairing Code, successfully parse the Manual Pairing Code and prevent the commissioning of any devices when the Manual Pairing Code is invalid.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b",
                    "5.a",
                    "5.b",
                    "6.a",
                    "6.b"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.7.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Provide the 11-digit Manual Pairing Code from the Commissionee to the DUT in any format supported by DUT",
                    "VERSION: Using the manual code from Step 1, generate a new manual code but substituting out the current VERSION with an invalid VERSION: 2",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "VID_PID_PRESENT: Using the manual code from Step 1, generate a new manual code but substituting out the current VID_PID_PRESENT with an invalid VID_PID_PRESENT set to 1",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "SHORT DISCRIMINATOR: Using the manual code from Step 1, generate a new manual code but substituting out the current SHORT DISCRIMINATOR string with a discriminator value that makes the generated manual code differ from Step 1\u2019s manual code (i.e. Choose a discriminator value that changes any of the 4 most-significant bits of Step 1\u2019s 12-bit discriminator value and adheres to rules of section 5.1.1.5. \"Discriminator value\")",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "Passcode: Using the manual code from Step 1, generate a new manual code using all the same Onboarding Payload components except for the Passcode. For each Passcode in the following list, set the Passcode component to one of the invalid Passcode and generate a new manual code using all the same Onboarding Payload components and one Passcode from the list: 00000000, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999, 12345678, 87654321",
                    "Provide each of the Manual Pairing Codes, generated in the previous step, to the DUT in any format supported by the DUT",
                    "CHECK_DIGIT: Using the manual code from Step 1, generate a new manual code but substituting out the current CHECK_DIGIT with an invalid CHECK_DIGIT (i.e. Any different CHECK_DIGIT than the commissionee\u2019s CHECK_DIGIT while following Table 38. Encoding Method without Vendor and Product ID\u2019s (VID_PID_Present == 0))",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the Manual Pairing Code can be provided to DUT",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"84970112331\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"74970112334\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, for a SHORT DISCRIMINATOR=0xE00, the payload would be \"33331712336\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has 12 manual codes (one for each passcode in the list of invalid passcodes) generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm.Using the example provided above, the payloads would be:\n\"34915200008\" (00000000),\n\"35191106788\" (11111111),\n\"35467013565\" (22222222),\n\"35742920344\" (33333333),\n\"36018827124\" (44444444),\n\"36294733900\" (55555555),\n\"34932240691\" (66666666),\n\"35208147474\" (77777777),\n\"35484054250\" (88888888),\n\"35759961037\" (99999999),\n\"35767807533\" (12345678),\n\"36545753496\" (87654321)",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"34970112331\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions."
                ]
            }
        },
        {
            "Test Case Name": "8.3.17. [TC-DD-3.17] Commissioning Flow - 21-digit Manual Pairing Code - Negative Scenario [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.17",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can take a 21-digit Manual Pairing Code, successfully parse the Manual Pairing Code and prevent the commissioning of any devices when the Manual Pairing Code is invalid.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b",
                    "5.a",
                    "5.b",
                    "6.a",
                    "6.b",
                    "7.a",
                    "7.b",
                    "8.a",
                    "8.b"
                ],
                "Device": [
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT",
                    "DUT"
                ],
                "Ref": [
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.7.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4",
                    "5.1.4.1",
                    "5.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Provide the 21-digit Manual Pairing Code from the Commissionee to the DUT in any format supported by DUT",
                    "VERSION: Using the manual code from Step 1, generate a new manual code but substituting out the current VERSION with an invalid VERSION: 2",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "VID_PID_PRESENT: Using the manual code from Step 1, generate a new manual code but substituting out the current VID_PID_PRESENT with an invalid VID_PID_PRESENT set to 0",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "SHORT DISCRIMINATOR: Using the manual code from Step 1, generate a new manual code but substituting out the current SHORT DISCRIMINATOR string with a discriminator value that makes the generated manual code differ from Step 1\u2019s manual code (i.e. Choose a discriminator value that changes any of the 4 most-significant bits of Step 1\u2019s 12-bit discriminator value and adheres to rules of section 5.1.1.5. \"Discriminator value\")",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "Passcode: Using the manual code from Step 1, generate a new manual code using all the same Onboarding Payload components except for the Passcode. For each Passcode in the following list, set the Passcode component to one of the invalid Passcode and generate a new manual code using all the same Onboarding Payload components and one Passcode from the list: 00000000, 11111111, 22222222, 33333333, 44444444, 55555555, 66666666, 77777777, 88888888, 99999999, 12345678, 87654321",
                    "Provide each of the Manual Pairing Codes, generated in the previous step, to the DUT in any format supported by the DUT",
                    "VENDOR_ID: Using the manual code from Step 1, generate a new manual code using all the same Onboarding Payload components except for the VENDOR_ID. For each VENDOR_ID in the following list, set the VENDOR_ID component to one of the invalid Test VENDOR_IDs and generate a new manual code using all the same Onboarding Payload components and one Test VENDOR_ID from the list: 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4",
                    "Provide each of the Manual Pairing Codes, generated in the previous step, to the DUT in any format supported by the DUT",
                    "PRODUCT_ID: Using the manual code from Step 1, generate a new manual code but substituting out the current PRODUCT_ID with an invalid PRODUCT_ID of 0x0000(i.e. While following section 2.5.3. \"Product Identifier\")",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT",
                    "Check Digit: Using the manual code from Step 1, generate a new manual code but substituting out the current CHECK_DIGIT with an invalid CHECK_DIGIT (i.e. Any different CHECK_DIGIT than the commissionee\u2019s CHECK_DIGIT while following Table 39. Encoding Method with Vendor and Product ID\u2019s included (VID_PID_Present == 1))",
                    "Provide the Manual Pairing Code, generated in the previous step, to the DUT in any format supported by the DUT"
                ],
                "Expected Outcome": [
                    "Verify that the Manual Pairing Code can be provided to DUT",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"849701123365521327693\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"349701123365521327696\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, for a SHORT DISCRIMINATOR=0xE00, the payload would be \"733317123365521327692\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has 12 manual codes (one for each passcode in the list of invalid passcodes) generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm.Using the example provided above, the payloads would be:\n\"749152000065521327698\" (00000000),\n\"751911067865521327698\" (11111111),\n\"754670135665521327694\" (22222222),\n\"757429203465521327699\" (33333333),\n\"760188271265521327697\" (44444444),\n\"762947339065521327695\" (55555555),\n\"749322406965521327695\" (66666666),\n\"752081474765521327697\" (77777777),\n\"754840542565521327693\" (88888888),\n\"757599610365521327695\" (99999999),\n\"757678075365521327695\" (12345678),\n\"765457534965521327696\" (87654321)",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has 4 manual codes (one for each VENDOR_ID in the list of invalid VENDOR_IDs) generated to pass into DUT. The generated Manual Pairing Codes follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm.Using the example provided above, the payloads would be :\"749701123365521327694\" (0xFFF1),\n\"749701123365522327692\" (0xFFF2),\n\"749701123365523327697\" (0xFFF3),\n\"749701123365524327693\" (0xFFF4),",
                    "If the TH\u2019s Vendor ID is an invalid Test Vendor ID, DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions, unless the user is made fully aware of the security risks of providing an uncertified device with operational and networking credentials.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"749701123365521000006\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions.",
                    "User has a manual code generated to pass into DUT. The generated Manual Pairing Code follows all guidelines laid out in the Preconditions #2, above, with special attention to the CHECK_DIGIT using the Verhoeff algorithm. Using the example provided above, the payload would be \"749701123365521327693\".",
                    "DUT attempts to parse the Manual Pairing Code and DUT terminates the commissioning process in a DUT-specific manner according to the DUT manufacturer\u2019s instructions."
                ]
            }
        },
        {
            "Test Case Name": "8.3.18. [TC-DD-3.18] Commissioning Flow - Commissioning Multiple Devices [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.18",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can successfully commission multiple devices onto a Matter network.",
            "Test Procedure": {
                "#": [
                    "1.a",
                    "1.b",
                    "2.a",
                    "2.b",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b"
                ],
                "Device": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Ref": [
                    "",
                    "",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "5.1.3",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Place TH1 into commissioning mode using the TH manufacturer\u2019s means to be discovered by a commissioner",
                    "Place TH2 into commissioning mode using the TH manufacturer\u2019s means to be discovered by a commissioner",
                    "Scan TH1\u2019s QR code using the DUT Commissioner.",
                    "DUT parses TH1\u2019s QR code. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the TH Commissionee\u2019s method of device discovery",
                    "Scan TH2\u2019s QR code using the DUT Commissioner.",
                    "DUT parses TH2\u2019s QR code.  Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the TH Commissionee\u2019s method of device discovery",
                    "Verify the Commissioner can still interact with TH1 (ex: Read any cluster\u2019s attribute from TH1)",
                    "Verify the Commissioner can still interact with TH2 (ex: Read any cluster\u2019s attribute from TH2)"
                ],
                "Expected Outcome": [
                    "Verify that TH1 is advertising and able to be discovered by a commissioner.",
                    "Verify that TH2 is advertising and able to be discovered by a commissioner.",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses TH1\u2019s QR code and DUT commissions TH1 onto the Matter network.- Verify that only TH1 has been commissioned onto the Matter network and that TH2 has not been commissioned.",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses TH2\u2019s QR code and DUT commissions TH2 onto the Matter network.- Verify that only TH2 has been commissioned onto the Matter network in this step.",
                    "Verify TH1 remains commissioned onto the Matter network.",
                    "Verify TH2 remains commissioned onto the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.3.19. [TC-DD-3.19] Commissioning Flow - Commission, Unpair and Re-commission Device [DUT - Commissionee]",
            "Test Case ID": "TC-DD-3.19",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissionee can successfully be commissioned onto a Matter network, unpaired from that Matter network and re-commissioned back onto a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Device": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Ref": [
                    "",
                    "5.1.3",
                    "",
                    "",
                    "5.1.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Place DUT into commissioning mode using the DUT\u2019s manufacturer\u2019s means to be discovered by the TH Commissioner",
                    "Scan DUT\u2019s QR code using the TH Commissioner. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the DUT Commissionee\u2019s method of device discovery",
                    "Using TH Commissioner, unpair the DUT Commissionee from the Matter network.",
                    "Place DUT Commissionee back into commissioning mode using the DUT manufacturer\u2019s means to be discovered by the TH Commissioner",
                    "Scan DUT\u2019s QR code using the TH Commissioner. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the DUT Commissionee\u2019s method of device discovery"
                ],
                "Expected Outcome": [
                    "Verify that the DUT is advertising and able to be discovered by a commissioner.",
                    "TH parses DUT\u2019s QR code and TH commissions DUT to the Matter network.- Verify that the DUT has been commissioned onto the Matter network.",
                    "Verify the DUT is no longer on the Matter network.",
                    "Verify that the DUT is advertising and able to be discovered by a commissioner.",
                    "TH parses DUT\u2019s QR code and TH commissions DUT to the Matter network.- Verify that the DUT has been commissioned onto the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.3.20. [TC-DD-3.20] Commissioning Flow - Commission, Unpair and Re-commission Device [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.20",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can successfully commission a device onto a Matter network, unpair the device from the Matter network and re-commission the device onto a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "3",
                    "4",
                    "5.a",
                    "5.b"
                ],
                "Device": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Ref": [
                    "",
                    "5.1.3",
                    "5.1.3",
                    "",
                    "",
                    "5.1.3",
                    "5.1.3"
                ],
                "PICS": [
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    "",
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    ""
                ],
                "Test Step": [
                    "Place TH into commissioning mode using the TH manufacturer\u2019s means to be discovered by the DUT Commissioner",
                    "Scan TH\u2019s QR code using the DUT Commissioner.",
                    "DUT parses TH\u2019s QR code. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the TH Commissionee\u2019s method of device discovery",
                    "Using DUT Commissioner, unpair the TH Commissionee from the Matter network.",
                    "Place TH Commissionee back into commissioning mode using the TH manufacturer\u2019s means to be discovered by the DUT Commissioner",
                    "Scan TH\u2019s QR code using the DUT Commissioner.",
                    "DUT parses TH\u2019s QR code. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the TH Commissionee\u2019s method of device discovery"
                ],
                "Expected Outcome": [
                    "Verify that the TH is advertising and able to be discovered by a commissioner.",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses TH\u2019s QR code and DUT commissions TH to the Matter network.- Verify that the TH has been commissioned onto the Matter network.",
                    "Verify the TH is no longer on the Matter network.",
                    "Verify that the TH is advertising and able to be discovered by a commissioner.",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses TH\u2019s QR code and DUT commissions TH to the Matter network.- Verify that the TH has been commissioned onto the Matter network."
                ]
            }
        },
        {
            "Test Case Name": "8.3.21. [TC-DD-3.21] Commissioning Flow - Commission Multiple-Endpoint Device [DUT - Commissioner]",
            "Test Case ID": "TC-DD-3.21",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies End to End Commissioning Flows and ensures that the Commissioner can successfully commission a device with multiple endpoints onto a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "3"
                ],
                "Ref": [
                    "",
                    "5.1.3",
                    "5.1.3",
                    ""
                ],
                "PICS": [
                    "",
                    "MCORE.DD.SCAN_QR_CODE",
                    "",
                    ""
                ],
                "Test Step": [
                    "Place TH into commissioning mode using the TH manufacturer\u2019s means to be discovered by the DUT Commissioner",
                    "Scan TH\u2019s QR code using the DUT Commissioner.",
                    "DUT parses TH\u2019s QR code. Follow any steps needed for the Commissioner/Commissionee to complete the commissioning process over the TH Commissionee\u2019s method of device discovery",
                    "For each TH Endpoint that implements the On/Off light device, verify that the DUT acknowledges the existence of the Endpoint through DUT issuing an On command to the respective Endpoint (e.g. through some user action to trigger such command)."
                ],
                "Expected Outcome": [
                    "Verify that the TH is advertising and able to be discovered by the DUT commissioner.",
                    "Verify the QR code has been scanned successfully.",
                    "DUT parses TH\u2019s QR code and DUT commissions TH to the Matter network.- Verify that the TH has been commissioned onto the Matter network.",
                    "TH verifies that the DUT has successfully sent the On command to each of the endpoints which expose an On/Off light device type."
                ]
            }
        }
    ],
    "Basic_Information": [
        {
            "Test Case Name": "12.1.1. [TC-BINFO-2.1] Attributes [DUT-Server]",
            "Test Case ID": "TC-BINFO-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if all the server attributes have been implemented correctly on the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20a",
                    "20b",
                    "20c",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51",
                    "52",
                    "52b",
                    "53",
                    "54",
                    "55",
                    "56",
                    "57",
                    "58",
                    "59",
                    "60",
                    "61",
                    "62",
                    "63",
                    "64",
                    "65",
                    "66",
                    "67"
                ],
                "Ref": [
                    "11.17.7.8",
                    "11.1.6.1-0, 7.18.1.3",
                    "",
                    "",
                    "11.1.6.1-1",
                    "",
                    "",
                    "11.1.6.1-2, 2.5.2, 6.1.3.1",
                    "",
                    "",
                    "11.1.6.1-3",
                    "",
                    "",
                    "11.1.6.1-4, 7.18.1.3, 6.1.3.1",
                    "",
                    "",
                    "11.1.6.1-5",
                    "",
                    "",
                    "11.1.6.1-6",
                    "",
                    "",
                    "11.1.6.1-7, 7.18.1.3",
                    "",
                    "",
                    "11.1.6.1-8",
                    "",
                    "",
                    "11.1.6.1-9, 7.18.1.3, 11.1.6.2",
                    "",
                    "",
                    "11.1.6.1-10",
                    "",
                    "",
                    "11.1.6.1-11",
                    "",
                    "",
                    "11.1.6.1-12",
                    "",
                    "",
                    "11.1.6.1-13",
                    "",
                    "",
                    "11.1.6.1-14",
                    "",
                    "",
                    "11.1.6.1-15",
                    "",
                    "",
                    "11.1.6.1-16, 7.18.1.1",
                    "",
                    "",
                    "11.1.6.1-17,7.18.1.1",
                    "",
                    "",
                    "11.1.6.1-18",
                    "",
                    "",
                    "11.1.6.1-19",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "BINFO.S.A0000(DataModelRevision)",
                    "BINFO.S.A0000(DataModelRevision)",
                    "BINFO.S.A0000(DataModelRevision)",
                    "BINFO.S.A0001(VendorName)",
                    "BINFO.S.A0001(VendorName)",
                    "BINFO.S.A0001(VendorName)",
                    "BINFO.S.A0002(VendorID)",
                    "BINFO.S.A0002(VendorID)",
                    "BINFO.S.A0002(VendorID)",
                    "BINFO.S.A0003(ProductName)",
                    "BINFO.S.A0003(ProductName)",
                    "BINFO.S.A0003(ProductName)",
                    "BINFO.S.A0004(ProductID)",
                    "BINFO.S.A0004(ProductID)",
                    "BINFO.S.A0004(ProductID)",
                    "BINFO.S.A0005(NodeLabel)",
                    "BINFO.S.A0005(NodeLabel)",
                    "BINFO.S.A0005(NodeLabel)",
                    "BINFO.S.A0006(Location)",
                    "BINFO.S.A0006(Location)",
                    "BINFO.S.A0006(Location)",
                    "BINFO.S.A0007(HardwareVersion)",
                    "BINFO.S.A0007(HardwareVersion)",
                    "BINFO.S.A0007(HardwareVersion)",
                    "BINFO.S.A0008(HardwareVersionString)",
                    "BINFO.S.A0008(HardwareVersionString)",
                    "BINFO.S.A0008(HardwareVersionString)",
                    "BINFO.S.A0009(SoftwareVersion)",
                    "BINFO.S.A0009(SoftwareVersion)",
                    "BINFO.S.A0009(SoftwareVersion)",
                    "BINFO.S.A000a(SoftwareVersionString)",
                    "BINFO.S.A000a(SoftwareVersionString)",
                    "BINFO.S.A000a(SoftwareVersionString)",
                    "BINFO.S.A000b(ManufacturingDate)",
                    "BINFO.S.A000b(ManufacturingDate)",
                    "BINFO.S.A000b(ManufacturingDate)",
                    "BINFO.S.A000c(PartNumber)",
                    "BINFO.S.A000c(PartNumber)",
                    "BINFO.S.A000c(PartNumber)",
                    "BINFO.S.A000d(ProductURL)",
                    "BINFO.S.A000d(ProductURL)",
                    "BINFO.S.A000d(ProductURL)",
                    "BINFO.S.A000e(ProductLabel)",
                    "BINFO.S.A000e(ProductLabel)",
                    "BINFO.S.A000e(ProductLabel)",
                    "BINFO.S.A000f(SerialNumber)",
                    "BINFO.S.A000f(SerialNumber)",
                    "BINFO.S.A000f(SerialNumber)",
                    "BINFO.S.A0010(LocalConfigDisabled)",
                    "BINFO.S.A0010(LocalConfigDisabled)",
                    "BINFO.S.A0010(LocalConfigDisabled)",
                    "BINFO.S.A0011(Reachable)",
                    "BINFO.S.A0011(Reachable)",
                    "BINFO.S.A0011(Reachable)",
                    "BINFO.S.A0012(UniqueID)",
                    "BINFO.S.A0012(UniqueID)",
                    "BINFO.S.A0012(UniqueID)",
                    "BINFO.S.A0013(CapabilityMinima)",
                    "BINFO.S.A0013(CapabilityMinima)",
                    "BINFO.S.A0013(CapabilityMinima)",
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0015(SpecificationVersion)",
                    "BINFO.S.A0015(SpecificationVersion)",
                    "BINFO.S.A0015(SpecificationVersion)",
                    "BINFO.S.A0016(MaxPathsPerInvoke)",
                    "BINFO.S.A0016(MaxPathsPerInvoke)",
                    "BINFO.S.A0016(MaxPathsPerInvoke)"
                ],
                "Test Step": [
                    "During Commissioning, TH Saves the CountryCode Information from SetRegulatoryConfig command",
                    "After Commissioning, TH reads DataModelRevision from the DUT.",
                    "TH writes DataModelRevision as \"0x1124\"",
                    "TH reads DataModelRevision from the DUT",
                    "TH reads VendorName from the DUT.",
                    "TH writes VendorName as \"sample\"",
                    "TH reads VendorName",
                    "TH reads VendorID from the DUT.",
                    "TH writes VendorID as \"0x0011\"",
                    "TH reads VendorID",
                    "TH reads ProductName from the DUT.",
                    "TH writes ProductName as \"newproduct\"",
                    "TH reads ProductName",
                    "TH reads ProductID from the DUT.",
                    "TH writes ProductID as \"0x4521\"",
                    "TH reads ProductID",
                    "TH reads NodeLabel from the DUT",
                    "TH writes \"newnode\" to NodeLabel",
                    "TH reads NodeLabel",
                    "TH reads Location from the DUT.",
                    "TH selects a country code value that is different from the CountryCode saved from step1 and known to be supported on the DUT. TH writes this value to Location",
                    "TH reads Location",
                    "TH reads HardwareVersion from the DUT.",
                    "TH writes HardwareVersion as \"0x4531\"",
                    "TH reads HardwareVersion",
                    "TH reads HardwareVersionString from the DUT.",
                    "TH writes HardwareVersionString as \"newhardwareversion\"",
                    "TH reads HardwareVersionString",
                    "TH reads SoftwareVersion from the DUT.",
                    "TH  writes SoftwareVersion as \"0x8213\"",
                    "TH reads SoftwareVersion",
                    "TH reads SoftwareVersionString from the DUT.",
                    "TH writes SoftwareVersionString as \"1.0\"",
                    "TH reads SoftwareVersionString",
                    "TH reads ManufacturingDate from the DUT.",
                    "TH writes ManufacturingDate as \"20210814789452IN\"",
                    "TH reads ManufacturingDate",
                    "TH reads PartNumber from the DUT.",
                    "TH writes PartNumber as \"newpart\"",
                    "TH reads PartNumber",
                    "TH reads ProductURL from the DUT.",
                    "TH writes ProductURL as \"https://www.example.com\"",
                    "TH reads ProductURL",
                    "TH reads ProductLabel from the DUT.",
                    "TH writes ProductLabel as \"newproductlabel\"",
                    "TH reads ProductLabel",
                    "TH reads SerialNumber from the DUT.",
                    "TH writes SerialNumber_test as \"newserialnumber\"",
                    "TH reads SerialNumber",
                    "TH reads LocalConfigDisabled from the DUT.",
                    "TH sets LocalConfigDisabled to True",
                    "TH Reads LocalConfigDisabled",
                    "TH reads Reachable from the DUT.",
                    "TH sends Write request message to DUT to change value of Reachable to \"false\".",
                    "TH reads Reachable from the DUT.",
                    "TH reads UniqueID from the DUT.",
                    "TH writes UniqueID as \"newid\"",
                    "TH reads UniqueID",
                    "TH reads CapabilityMinima attribute from the DUT",
                    "TH writes the CapabilityMinima value with CaseSessionsPerFabric set to 4 and SubscriptionsPerFabric set to 4",
                    "TH reads CapabilityMinima attribute from DUT",
                    "TH reads  ProductAppearance from the DUT.",
                    "TH writes ProductAppearance to the DUT.",
                    "TH reads  ProductAppearance from the DUT.",
                    "TH reads  SpecificationVersion from the DUT.",
                    "TH sends Write request message to DUT to change the value of SpecificationVersion to '0x0103AAF1'.",
                    "TH reads SpecificationVersion attribute from DUT",
                    "TH reads MaxPathsPerInvoke from the DUT.",
                    "TH sends Write request message to DUT to change MaxPathsPerInvoke to a different value.",
                    "TH reads MaxPathsPerInvoke attribute from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the value is 17 (for Matter 1.2)Note: For Matter 1.0 or Matter 1.1 the DataModelRevision should be 1 or 16",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the DataModelRevision remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 32 bytes and meaningful name matching the manufacturer of the product.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the VendorName remains unchanged",
                    "Verify that value is not 0x0000Verify that the value is in the range of 0x0001 to 0xFFF0, and matches the value assigned to this manufacturer",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the VendorID remains unchanged",
                    "Verify it is a human readable string.Verify that the length is less than or equal to 32 bytes.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductName remains unchanged",
                    "Verify that the value is in the inclusive range of 1 to 65534Verify that value is not 0 (0x0000).",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductID remains unchanged",
                    "Verify it is of type string.Verify that the current value has a length between 0 and 32 bytes inclusive.",
                    "Verify that the DUT sends success response",
                    "Verify that the NodeLabel is changed as \"newnode\"",
                    "Verify it is of type string.Verify length is less than or equal to 2 bytes.Verify that the Location is same as CountryCode value saved from step1",
                    "Verify that the DUT sends success response",
                    "Verify that the Location is changed to the value from step 20b",
                    "Verify that the value is in range of 0 to 65534",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the HardwareVersion remains unchanged",
                    "Verify it is of type string.Verify it has a length in the inclusive range of 1 to 64 bytes",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the HardwareVersionString remains unchanged",
                    "Verify that the value is the range of 0 to 4294967294Verify that the SoftwareVersion is not displayed to the end-user through any device specific means (ex: screen, audio)",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SoftwareVersion remains unchanged",
                    "Verify it is of type string.Verify that it has a length of 1 to 64 bytes of UTF-8 characters.Verify that it uses 7-bit ASCII alphanumeric and punctuation characters.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SoftwareVersionString remains unchanged",
                    "Verify it is of type string.Verify it has length in the inclusive range of 8 to 16 bytes.Verify if the first 8 characters specify date according to ISO 8601, i.e, YYYYMMDD.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ManufacturingDate remains unchanged",
                    "Verify it is a human readable string.Verify that the string has a maximum length of 32 bytes",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the PartNumber remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 256 ASCII characters.Verify that it specifies a link to a specific web page.Verify that it follows the syntax rules specified in RFC 3986.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductURL remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 64 bytes.Verify that it does not include the name of the vendor as defined within the VendorName attribute",
                    "Verify  DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductLabel remains unchanged",
                    "Verify it is of type string.Verify it is less than or equal to 32 bytes.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the SerialNumber remains unchanged",
                    "Verify that the value is false",
                    "Verify that the DUT sends success response",
                    "Verify that LocalConfigDisabled is set to True",
                    "Verify it is of type boolVerify that the value is true",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the Reachable flag remains unchanged",
                    "Verify it is of type stringVerify that the value is not be identical to SerialNumber attributeVerify that the value is not be printed on the product or on any included materials.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the UniqueID remains unchanged",
                    "Verify that the CaseSessionsPerFabric is in the inclusive range of 3 to 65535Verify that the SubscriptionsPerFabric is in the inclusive range of 3 to 65535",
                    "Verify that the DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the CapabilityMinima remains unchanged",
                    "Verify it is of type ProductAppearanceStruct.",
                    "Verify DUT responds with UNSUPPORTED_WRITE",
                    "Verify that the ProductAppearance remains unchanged",
                    "If the SpecificationVersion value is absent or zero this step cannot be verified, move on to the next step.else the value should in the inclusive range of (0 to 4294967295) and the initial 7 bits are set to zero.",
                    "Verify DUT responds with UNSUPPORTED_WRITE.",
                    "Verify that SpecificationVersion remains unchanged.",
                    "Verify that the MaxPathsPerInvoke value is in the inclusive range of 1 to 65535.",
                    "Verify DUT responds with UNSUPPORTED_WRITE.",
                    "Verify that MaxPathsPerInvoke remains unchanged."
                ]
            }
        },
        {
            "Test Case Name": "12.1.2. [TC-BINFO-2.2] Events [DUT-Server]",
            "Test Case ID": "TC-BINFO-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if all the events have been implemented correctly on the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "11.1.6.2-0",
                    "11.1.6.2-1"
                ],
                "PICS": [
                    "BINFO.S.E00(StartUp)",
                    "BINFO.S.E01(ShutDown)"
                ],
                "Test Step": [
                    "Reboot the DUTTH reads the StartUp event from DUT",
                    "TH subscribes to the ShutDown event on the DUT. Shutdown DUT."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends the StartUp event before other events to THVerify that the SoftwareVersion field in the event data is equivalent to the preconditionVerify that StartUp event has priority set as CRITICAL",
                    "Verify that ShutDown event is received from DUT and has priority set as CRITICAL"
                ]
            }
        },
        {
            "Test Case Name": "12.1.3. [TC-BINFO-3.1] Appearance Attribute DUT as Server",
            "Test Case ID": "TC-BINFO-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify if the appearance is correctly set within the allowed ranges.\nFinish and PrimaryColor should reasonably reflect the appearance of the product.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0014(ProductAppearance)",
                    "BINFO.S.A0014(ProductAppearance)"
                ],
                "Test Step": [
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT.",
                    "TH reads ProductAppearance from the DUT."
                ],
                "Expected Outcome": [
                    "ProductAppearance.Finish       Value has to be between a range of [min=Other(0), max=Fabric(5)]",
                    "ProductAppearance.PrimaryColor Value has to be between a range of [min=Black(0),         max=Gold(20)        ]",
                    "ProductAppearance.Finish       Value has to be equal to PIXIT.BINFO.Finish",
                    "ProductAppearance.PrimaryColor Value has to be equal to PIXIT.BINFO.PrimaryColor"
                ]
            }
        }
    ],
    "Node_Operational_Credentials": [
        {
            "Test Case Name": "15.1.1. [TC-OPCREDS-3.1] Attribute-NOCs, TrustedRootCertificates list validation [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The following checks are covered by this test:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "54",
                    "55",
                    "56",
                    "57",
                    "58",
                    "59",
                    "60",
                    "61",
                    "62",
                    "63",
                    "64",
                    "65",
                    "66",
                    "67",
                    "68",
                    "69",
                    "70",
                    "71",
                    "72",
                    "73",
                    "74",
                    "75",
                    "76",
                    "77"
                ],
                "Ref": [
                    "C.11.19.8.1",
                    "C.11.10.5.2",
                    "C.4.14.1",
                    "C.11.10.6.2",
                    "C.11.18.6.5",
                    "C.6.4",
                    "C.6.4",
                    "C.6.4",
                    "C.11.18.5.5",
                    "C.11.18.5.2",
                    "C.11.18.5.1",
                    "C.11.18.5.5",
                    "C.11.18.5.5",
                    "C.11.18.6.13",
                    "C.11.18.5.5",
                    "C.11.18.6.13",
                    "C.11.18.5.5",
                    "C.11.18.6.13",
                    "C.11.18.5.5",
                    "C.11.18.5.5",
                    "C.11.18.5.5",
                    "C.11.18.6.8",
                    "C.11.18.6.8",
                    "C.11.18.6.8",
                    "C.11.18.6.8",
                    "C.11.18.5.1",
                    "C.11.18.5.1",
                    "C.11.18.5.1",
                    "C.11.18.6.11",
                    "C.11.18.5.2",
                    "C.11.18.5.2",
                    "C.11.10.6.2",
                    "C.4.14.1",
                    "C.11.18.5.5",
                    "C.11.18.5.1",
                    "C.11.18.5.2",
                    "{REF_CODE}.5.5",
                    "C.11.18.5.5",
                    "C.11.18.5.1",
                    "C.11.18.5.2",
                    "C.9.10.5.3",
                    "C.11.2.7.2",
                    "C.11.18.6.11",
                    "C.11.19.8.1",
                    "{REF_CODE}.5.5",
                    "C.11.18.6.11",
                    "C.11.18.6.11",
                    "C.11.18.5.2",
                    "C.11.10.6.2",
                    "C.11.18.6.13",
                    "C.11.18.6.8",
                    "C.11.10.6.2",
                    "C.11.10.6.2",
                    "C.11.18.6.5",
                    "C.6.4",
                    "C.11.18.6.13",
                    "C.11.18.6.8",
                    "C.11.10.6.2",
                    "C.11.10.6.2",
                    "C.11.18.6.5",
                    "C.6.4",
                    "C.11.18.6.13",
                    "C.11.18.6.8",
                    "C.11.10.6.2",
                    "C.11.18.5.5",
                    "C.11.10.6.2",
                    "C.11.18.6.5",
                    "C.6.4",
                    "C.11.18.6.13",
                    "C.11.18.6.8",
                    "C.11.10.6.2",
                    "C.11.18.5.6",
                    "C.11.18.6.12",
                    "C.11.18.5.2",
                    "C.11.18.5.6",
                    "C.11.18.6.12",
                    "C.11.18.6.12"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH0 opens a commissioning window on the DUT",
                    "TH0 reads the BasicCommissioningInfo field from the General commissioning cluster saves MaxCumulativeFailsafeSeconds asfailsafe_max",
                    "TH1 opens a PASE connection to the DUT",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set tofailsafe_max",
                    "TH1 Sends CSRRequest command with a random 32-byte nonce",
                    "TH1 obtains or generates the NOC, the Root CA Certificate and ICAC using the CSR elements from step5and selects an IPK. The certificates shall have their subjects padded with additional data such that they are each the maximum certificate size of 400 bytes when encoded in the MatterCertificateEncoding.Save RCAC asRoot_CA_Certificate_TH1Save ICAC asIntermediate_Certificate_TH1Save NOC asNode_Operational_Certificate_TH1Save IPK asIPK_TH1Extract the RCAC public key and save asRoot_Public_Key_TH1",
                    "TH1 obtains or generates Root Certificate with a different Root CA ID and the corresponding ICAC, NOC and IPK using the CSR elements from step5Save RCAC asRoot_CA_Certificate_TH1_2Save ICAC asIntermediate_Certificate_TH1_2Save NOC asNode_Operational_Certificate_TH1_2Save IPK asIPK_TH1_2",
                    "TH1 generates an INVALID Root Certificate where the signature does not match the public key and saves it asRoot_CA_Malformed",
                    "TH1 reads the trusted root cert list from the DUT. Save the list size astrusted_root_original_size",
                    "TH1 reads the fabrics attribute from the DUT. Save the list size asfabrics_original_size",
                    "TH1 reads the NOCs attribute from the DUT using a non-fabric-filtered read. Save the list size asnocs_original_size",
                    "TH1 sends AddTrustedRootCertificate command to DUT to installRoot_CA_Malformed",
                    "TH1 reads the TrustedRootCertificate attribute",
                    "TH1 sends AddTrustedRootCertificate command to DUT with RootCACertificate set toRoot_CA_Certificate_TH1",
                    "TH1 reads the TrustedRootCertificate attribute",
                    "TH1 sends AddTrustedRootCertificate command to DUT again with the RootCACertificate field set toRoot_CA_Certificate_TH1",
                    "TH1 reads the TrustedRootCertificate attribute",
                    "TH1 sends AddTrustedRootCertificate command to DUT again with the RootCACertificate field set toRoot_CA_Certificate_TH1_2",
                    "TH1 reads the TrustedRootCertificates list from DUT and saves asTrustedRootsList",
                    "TH1 appendsRoot_CA_Certificate_TH1_2toTrustedRootsListand writes the TrustedRootCertificates attribute with that value",
                    "TH1 reads the TrustedRootCertificates list from DUT",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1_2ICACValue asIntermediate_Certificate_TH1_2IpkValue asIPK_TH1_2CaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1ICACValue asIntermediate_Certificate_TH1IpkValue asIPK_TH1CaseAdminSubject is an invalid NodeID (not an operational Node ID or Case Authenticated Tag - ex. 0)AdminVendorId as the Vendor ID of TH1",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1ICACValue asIntermediate_Certificate_TH1IpkValue asIPK_TH1CaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 re-sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1_1ICACValue asIntermediate_Certificate_TH1_1IpkValue asIPK_TH1_1CaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 reads the NOCs attribute from DUT using a fabric-filtered read and saves the list asNOCList",
                    "TH1 modifies the NOC list to useNode_Operational_Certificate_TH1_2andIntermediate_Certificate_TH1_2",
                    "TH1 reads the NOCs attribute from DUT using a fabric-filtered read",
                    "TH1 sends UpdateFabricLabel command with 'Label 1' as Label field to DUT",
                    "TH1 reads the Fabrics Attribute from DUT using a fabric-filtered read",
                    "",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds field set to 0",
                    "TH1 reconnects to the DUT over PASE",
                    "TH1 reads the TrustedRootCertificates list from DUT",
                    "TH1 reads the NOCs attribute from DUT using a non-fabric-filtered read",
                    "TH1 reads the Fabrics attribute from the DUT using a non-fabric-filtered read",
                    "TH1 fully commissions DUT onto the fabric, using a valid set of certificates",
                    "TH1 reads the TrustedRootCertificates list from DUT",
                    "TH1 reads the NOCs attribute from DUT using a non-fabric-filtered read",
                    "TH1 reads the Fabrics attribute from DUT using a non-fabric-filtered",
                    "TH1 reads the ACL attribute from the Access Control cluster",
                    "TH1 issues a KeySetRead command to the DUT for GroupKeySetID 0",
                    "TH1 sends UpdateFabricLabel command with 'Label 1' as Label field to DUT",
                    "TH1 sends an OpenCommissioningWindow command to the Administrator Commissioning cluster",
                    "TH2 fully commissions the DUT",
                    "TH2 sends UpdateFabricLabel command with 'Label 2' as Label field to DUT",
                    "TH2 sends UpdateFabricLabel command with 'Label 1' as Label field to DUT",
                    "Read the Fabrics List from DUT using a non-fabric-filtered read",
                    "TH1 sends ArmFailSafe command to the DUT  with the ExpiryLengthSeconds field set tofailsafe_max",
                    "TH1 sends AddTrustedRootCertificate command to DUT with RootCACertificate set toRoot_CA_Certificate_TH1_1",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1_1ICACValue asIntermediate_Certificate_TH1_1IpkValue asIPK_TH1_1CaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set tofailsafe_max",
                    "TH1 Sends CSRRequest command with a random 32-byte nonce",
                    "TH1 generates a new RCAC, ICAC, NOC and IPK using the csr returned in step5(ie, NOT the most recent CSR) and saves them asTH1_RCAC_bad_csr,TH1_ICAC_bad_csr,TH1_NOC_bad_csrandTH1_IPK_bad_csr",
                    "TH1 sends the AddTrustedRootCert command usingTH1_RCAC_bad_csr.",
                    "TH1 sends the AddNOC Command to DUT usingTH1_ICAC_bad_csr,TH1_NOC_bad_csrandTH1_IPK_bad_csr",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set tofailsafe_max",
                    "TH1 Sends CSRRequest command with a random 32-byte nonce",
                    "TH1 obtains or generates a NOC and ICAC using the CSR elements from step60with a different NodeID, but the same Root CA Certificate and fabric ID as step6. Save asNode_Operational_Certificates_TH1_fabric_conflictandIntermediate_Certificate_TH1_fabric_conflict",
                    "TH1 sends the AddTrustedRootCert command using the certs generated in step61",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1_fabric_conflictICACValue asIntermediate_Certificate_TH1_fabric_conflictCaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH1 reads the TrustedRootCertificates list from DUT",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set tofailsafe_max",
                    "TH1 Sends CSRRequest command with a random 32-byte nonce and the IsForUpdateNOC field set to true",
                    "TH1 obtains or generates a NOC, Root CA Certificate, ICAC using the CSR elements from the previous stepSave RCAC asRoot_CA_Certificate_TH1_3Save ICAC asIntermediate_Certificate_TH1_3Save NOC asNode_Operational_Certificate_TH1_3",
                    "TH1 sends AddTrustedRootCertificate command to DUT with RootCACertificate set toRoot_CA_Certificate_TH1_3",
                    "TH1 sends the AddNOC Command to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH1_3ICACValue asIntermediate_Certificate_TH1_3CaseAdminSubject as the NodeID of TH1AdminVendorId as the Vendor ID of TH1",
                    "TH1 sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH2 reads its fabric index from the CurrentFabricIndex attribute and saves asFabricIndexTH2",
                    "TH2 sends RemoveFabric command with Fabric Index as FabricIndexTH2 + 5 (Invalid Fabric Index) to DUT",
                    "TH2 reads the Fabrics List from DUT using a non-fabric-filtered read",
                    "TH1 reads its fabric index from the CurrentFabricIndex attribute and saves asFabricIndex_TH1",
                    "TH0 sends RemoveFabric command with Fabric Index as FabricIndex_TH1",
                    "TH0 sends RemoveFabric command with Fabric Index as FabricIndex_TH1"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the DUT sends ArmFailSafeResponse Command to TH1 with field ErrorCode as 'OK'(0)",
                    "Verify that the DUT responds with the CSRResponse Command",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that AddTrustedRootCertificate Command fails by sending the status code as INVALID_COMMAND",
                    "Verify it contains onlytrusted_root_original_sizeentries",
                    "Verify that AddTrustedRootCertificate Command succeeds by sending the status code as SUCCESS",
                    "Verify it containstrusted_root_original_size+ 1 entries",
                    "Verify that the returned Status Code is SUCCESS",
                    "Verify it containstrusted_root_original_size+ 1 entries",
                    "Verify that the returned Status Code is CONSTRAINT_ERROR",
                    "Verify that there aretrusted_root_original_size+ 1 entries",
                    "Verify that the returned status code is UNSUPPORTED_WRITE",
                    "Verify that there aretrusted_root_original_size+ 1 entries",
                    "Verify that DUT responds with NOCResponse command with status code InvalidNOC",
                    "Verify that DUT responds with NOCResponse command with status code InvalidAdminSubject",
                    "Verify that DUT responds with NOCResponse command with status code OK",
                    "Verify that DUT responds with status code CONSTRAINT_ERROR",
                    "Verify that the list contains one entry with NOC fieldNode_Operational_Certificate_TH1and ICAC fieldIntermediate_Certificate_TH1",
                    "Verify that the returned status code is UNSUPPORTED_WRITE",
                    "Verify that the list contains one entry with NOC fieldNode_Operational_Certificate_TH1and ICAC fieldIntermediate_Certificate_TH1",
                    "Verify that the DUT responds with the NOCResponse Command with status OK",
                    "Verify that there is only 1 entry",
                    "Read the other fields from FabricDescriptorStructRootPublicKeyVendorIDFabricIDNodeIDLabelVerify that the size of RootPublicKey is exactly 65 bytesVerify that the RootPublicKey matchesRoot_Public_Key_TH1Verify that the NodeID is the same as the matter-node-id field in the NOC sent with AddNOC CommandVerify that the VendorID is the same as the AdminVendorID sent with AddNOC CommandVerify that the FabricID is the same as the matter-fabric-id field in the NOC sent with AddNOC CommandVerify that the Label field has value \"Label 1\"",
                    "",
                    "",
                    "Verify that list containstrusted_root_original_sizeentries",
                    "Verify that the list containsnocs_original_sizeentries",
                    "Verify that the list containsfabrics_original_sizeentries",
                    "Verify that TH1 successfully completes commissioning",
                    "Verify that there aretrusted_root_original_size+ 1 entries",
                    "Verify that the list containsnocs_original_size+ 1 entries",
                    "Verify that the list containsfabrics_original_size+ 1 entries",
                    "Verify that the returned list includes an entry with:Fabric index ofFabricIndex_TH1Administer privilege (5)CASE AuthMode (2)Includes the NodeID of TH1 in the list of subjects",
                    "Verify that an entry is read-back successfully.",
                    "Verify status OK",
                    "",
                    "",
                    "Verify that the DUT responds with the NOCResponse Command with status OK",
                    "Verify that the DUT responds with the NOCResponse Command with status LabelConflict",
                    "Verify that there are 'fabrics_original_size` + 2 entriesVerify that one entry has Label field 'Label 1'Verify that the other entry has label field 'Label 2'Verify that the list item with Label 'Label 1' has VendorID equal to the vendor ID of TH1Verify that the list item with Label 'Label 2' has VendorID equal to the vendor ID of TH2",
                    "Verify that the DUT sends ArmFailSafeResponse Command to TH1 with field ErrorCode as 'OK'(0)",
                    "Verify that AddTrustedRootCertificate Command succeeds by sending the status code as SUCCESS",
                    "Verify that DUT responds with status code MissingCsr",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that DUT responds with status code InvalidPublicKey",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that DUT responds with status code FabricConflict",
                    "Verify that the DUT sends ArmFailSafeResponse Command to TH1 with field ErrorCode as 'OK'(0)",
                    "Verify that list containstrusted_root_original_size+ 2 entries",
                    "Verify that the DUT sends ArmFailSafeResponse Command to TH1 with field ErrorCode as 'OK'(0)",
                    "",
                    "",
                    "Verify that AddTrustedRootCertificate Command succeeds by sending the status code as SUCCESS",
                    "Verify that DUT responds with status code CONSTRAINT_ERROR",
                    "Verify that the DUT sends ArmFailSafeResponse Command to TH1 with field ErrorCode as 'OK'(0)",
                    "",
                    "Verify that DUT sends NOCResponse Command with StatusCode of InvalidFabricIndex",
                    "Verify that there arefabrics_original_size+ 2 entries",
                    "",
                    "Verify that DUT sends NOCResponse Command with StatusCode of OK",
                    "Verify that DUT sends NOCResponse Command with StatusCode of OK"
                ]
            }
        },
        {
            "Test Case Name": "15.1.2. [TC-OPCREDS-3.2] Attribute-CurrentFabricIndex validation [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To Verify that the CurrentFabricIndex attribute satisfies the following\nconditions:",
            "Test Procedure": {
                "#": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "TestStep": [
                    "Commission DUT to CR1 if not already done",
                    "Create a new controller on a new fabric called CR2.\n         Commission the new controller from CR1 as follows:CR1 sends an ArmFailsafe command, followed by a CSRRequest command.Generate credentials on CR2 using the returned CSR.Save the RCAC asrcac_CR2. Save the ICAC as `icac_CR2. Save the NOC asnoc_CR2. Save the IPK as ipk_CR2.CR1 sends the AddTrustedRootCertificate command withrcac_CR2- CR1 sends the AddNOC command with the fields set as follows:NOCValue:noc_CR2ICACValue:icac_CR2IPKValue:ipk_CR2CaseAdminSubject: CR2 node IDAdminVendorId:    CR2 vendor IDCR2 connects over CASE and sends the commissioning complete commandSave the FabricIndex from the NOCResponse asfabric_index_CR2.",
                    "Create a new controller on a new fabric called CR3.\n         Commission the new controller from CR1 as follows:CR1 sends an ArmFailsafe command, followed by a CSRRequest command.Generate credentials on CR3 using the returned CSR.Save the RCAC asrcac_CR3. Save the ICAC as `icac_CR3. Save the NOC asnoc_CR3. Save the IPK as ipk_CR3.CR1 sends the AddTrustedRootCertificate command withrcac_CR3- CR1 sends the AddNOC command with the fields set as follows:NOCValue:noc_CR3ICACValue:icac_CR3IPKValue:ipk_CR3CaseAdminSubject: CR3 node IDAdminVendorId:    CR3 vendor IDCR3 connects over CASE and sends the commissioning complete commandSave the FabricIndex from the NOCResponse asfabric_index_CR3.",
                    "CR2 reads the CurrentFabricIndex attribute",
                    "CR3 reads the CurrentFabricIndex attribute",
                    "CR2 reads the Fabrics attribute using a fabric-filtered read",
                    "CR3 reads the Fabrics attribute using a fabric-filtered read",
                    "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to fabric_index_CR2.",
                    "CR1 sends the RemoveFabric command to the Node Operational Credentials cluster with the FabricIndex set to fabric_index_CR3."
                ],
                "Expected Outcome": [
                    "",
                    "Verify the commissioning is successful.",
                    "Verify the commissioning is successful.",
                    "Verify the returned value isfabric_index_CR2",
                    "Verify the returned value isfabric_index_CR3",
                    "Verify there is one entry returned. Verify FabricIndex matchesfabric_index_CR2.Verify the RootPublicKey matches the public key for rcac_CR2.Verify the VendorID matches the vendor ID for CR2.Verify the FabricID matches the fabricID for CR2",
                    "Verify there is one entry returned. Verify FabricIndex matchesfabric_index_CR3.Verify the RootPublicKey matches the public key for rcac_CR3.Verify the VendorID matches the vendor ID for CR3.Verify the FabricID matches the fabricID for CR3",
                    "Verify DUT responds w/ status SUCCESS",
                    "Verify DUT responds w/ status SUCCESS"
                ]
            }
        },
        {
            "Test Case Name": "15.1.3. [TC-OPCREDS-3.4] UpdateNOC-Error Condition [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test verifies that the DUT properly handles the following error conditions on UpdateNOC command:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26"
                ],
                "Ref": [
                    "5.5",
                    "11.17.6.1",
                    "11.17.6.5",
                    "11.17.7.9",
                    "11.9.7.2",
                    "11.17.7.9",
                    "11.17.7.5",
                    "6.4.5.1",
                    "11.17.7.9",
                    "11.17.7.5",
                    "11.17.7.9",
                    "6.4.5.1",
                    "6.4.5.1",
                    "11.17.7.9",
                    "6.4.5.1",
                    "11.17.7.9",
                    "6.4.5.1",
                    "11.17.7.9",
                    "11.17.7.13",
                    "11.17.7.9",
                    "11.9.7.2",
                    "11.18.8.1",
                    "",
                    "11.17.7.5",
                    "6.4.5.1",
                    "11.17.7.9"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 fully commissions the DUT",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_originalICACValue is to seticac_original",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_originalICACValue is to seticac_original",
                    "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to false",
                    "TH1 generates a new NOC chain with ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_not_for_updateand is signed by ICA. Save asnoc_not_for_updateICAC must be signed by the original key fortrusted_root_original. Save asicac_not_for_update",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_not_for_updateICACValue is to seticac_not_for_update",
                    "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to true",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_originalICACValue is to seticac_original",
                    "TH1 generates a new Trusted Root Certificate and Private Key and saves asnew_root_certandnew_root_keyso that TH can generate an NOC for UpdateNOC that doesn\u2019t chain to the original root",
                    "TH1 generates a new NOC and ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_updateand is signed by new ICA. Save asnoc_update_new_rootnew ICAC is generated and signed bynew_root_key. Save asicac_update_new_root",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update_new_rootICACValue is to seticac_update_new_root",
                    "TH1 generates a new NOC and ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_updatewith the matter-fabric-id set to a different value thannoc_original. The NOC is signed by new ICA. Save asnoc_update_bad_fabric_on_nocnew ICAC is generated with the and matter-fabric-id omitted. ICAC is signed by the original key fortrusted_root_original. Save asicac_update_bad_fabric_on_noc",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update_bad_fabric_on_nocICACValue is to seticac_update_bad_fabric_on_noc",
                    "TH1 generates a new NOC and ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_updatewith the matter-fabric-id set to the same value asnoc_original. The NOC is signed by new ICA. Save asnoc_update_bad_fabric_on_icacnew ICAC is generated with the and matter-fabric-id included as set to a different value thannoc_original. ICAC is signed by the original key fortrusted_root_original. Save asicac_update_bad_fabric_on_icac",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update_bad_fabric_on_icacICACValue is to seticac_update_bad_fabric_on_icac",
                    "TH1 sends AddTrustedRootCertificate command to DUT again with the RootCACertificate field set tonew_root_cert",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update_new_rootICACValue is to seticac_update_new_root",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0",
                    "TH1 sends an OpenCommissioningWindow command to the DUT",
                    "TH1 connects to the DUT over PASE and sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900. Steps24-26are all performed over the PASE connection.",
                    "TH1 Sends CSRRequest command over PASE with the IsForUpdateNOC field set to true",
                    "TH1 generates a new NOC chain with ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_paseand is signed by ICA. Save asnoc_paseICAC must be signed by the original key fortrusted_root_original. Save asicac_pase",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster over PASE with the following fields:NOCValue is set tonoc_paseICACValue is to seticac_pase"
                ],
                "Expected Outcome": [
                    "Verify that the commissioning completes successfully",
                    "Verify that the returned list has a single entry. Save the NOC field asnoc_originaland the ICAC field asicac_original",
                    "Verify that the returned list has a single entry. Save the entry astrusted_root_original",
                    "Verify that the DUT responds with FAILSAFE_REQUIRED",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the DUT responds with a NOCResponse with the StatusCode field set to MissingCsr",
                    "Verify that the DUT returns a CSRResponse and save ascsr_not_update",
                    "",
                    "Verify that the DUT responds with CONSTRAINT_ERROR",
                    "Verify that the DUT returns a CSRResponse and save ascsr_update",
                    "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidPublicKey",
                    "",
                    "",
                    "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "",
                    "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "",
                    "Verify that the DUT responds with a NOCResponse with the StatusCode field set to InvalidNOC",
                    "Verify that the returned Status Code is SUCCESS",
                    "Verify that the DUT responds with CONSTRAINT_ERROR",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the DUT returns SUCCESS",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK.",
                    "Verify that the DUT returns a CSRResponse and save ascsr_pase",
                    "",
                    "Verify that the DUT responds with UNSUPPORTED_ACCESS"
                ]
            }
        },
        {
            "Test Case Name": "15.1.4. [TC-OPCREDS-3.5] NOC Check for UpdateNOC [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that when TH sends UpdateNOC command the NOC values are updated correctly on the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "5.5",
                    "11.17.6.1",
                    "11.17.6.5",
                    "11.9.7.2",
                    "11.17.7.5",
                    "6.4.5.1",
                    "11.17.7.9",
                    "11.17.6.1",
                    "11.9.7.2",
                    "11.17.6.1",
                    "11.9.7.2",
                    "11.17.7.5",
                    "6.4.5.1",
                    "11.17.7.9",
                    "11.17.6.1",
                    "11.9.7.6",
                    "11.9.7.2",
                    "11.17.6.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 fully commissions the DUT",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH1 reads the TrustedRootCertificates attribute from the Node Operational Credentials cluster",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to true",
                    "TH1 generates a new NOC and ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_update1. The subject is set to matchnoc_original. The NOC is signed by the new ICA. Save asnoc_update1new ICAC must be distinguishable fromicac_original. This can be accomplished by changing any of the following: the subject, subject public key or validity. The certificate must be valid. ICAC is signed by the original key fortrusted_root_original. Save asicac_update1",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update1ICACValue is to seticac_update1",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "TH1 Sends CSRRequest command with the IsForUpdateNOC field set to true",
                    "TH1 generates a new NOC and ICAC with the following properties:new NOC is generated from the NOCSR returned incsr_update2. The subject is set to matchnoc_original. The NOC is signed by new ICA. Save asnoc_update2new ICAC must be distinguishable fromicac_originalandicac_update1. This can be accomplished by changing any of the following: the subject, subject public key or validity. The certificate must be valid. ICAC is signed by the original key fortrusted_root_original. Save asicac_update2",
                    "TH1 sends the UpdateNOC command to the Node Operational Credentials cluster with the following fields:NOCValue is set tonoc_update2ICACValue is to seticac_update2",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH1 sends the CommissioningComplete command to the General Commissioning cluster",
                    "TH1 sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 0 to verify that the CommissioningComplete command successfully persisted the failsafe context.",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read"
                ],
                "Expected Outcome": [
                    "Verify that the commissioning completes successfully",
                    "Verify that the returned list has a single entry. Save the NOC field asnoc_originaland the ICAC field asicac_original",
                    "Verify that the returned list has a single entry. Save the entry astrusted_root_original",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the DUT returns a CSRResponse and save ascsr_update1",
                    "",
                    "Verify that the DUT responds with a NOCResponse having its StatusCode field set to Ok",
                    "Verify that the returned list has a single entry. Verify that the NOC field matchesnoc_update1and the ICAC field matchesicac_update1",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the returned list has a single entry. Verify that the NOC field matchesnoc_originaland the ICAC field matchesicac_original, due to the explicit expiry of the fail-safe done in the previous step, which is expected to have reverted the updated credentials back to their original value.",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the DUT returns a CSRResponse and save ascsr_update2",
                    "",
                    "Verify that the DUT responds with a NOCResponse having its StatusCode field set to Ok",
                    "Verify that the returned list has a single entry. Verify that the NOC field matchesnoc_update2and the ICAC field matchesicac_update2",
                    "Verify that the DUT returns a CommissioningCompleteResponse with the ErrorCode set to OK",
                    "Verify that DUT sends ArmFailSafeResponse with the ErrorCode set to OK",
                    "Verify that the returned list has a single entry. Verify that the NOC field matchesnoc_update2and the ICAC field matchesicac_update2"
                ]
            }
        },
        {
            "Test Case Name": "15.1.5. [TC-OPCREDS-3.6] Last Fabric removal validation [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that when TH sends RemoveFabric command for last Fabric, DUT SHALL delete all Matter related data on the node which was created since it was commissioned.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "5.5",
                    "11.17.7.12",
                    "4.3.2",
                    "4.3.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 fully commissions the DUT",
                    "TH1 sends RemoveFabric command with Fabric Index as FabricIndex_TH1 to DUT",
                    "Verify that the DUT is not advertising as an operational node on DNS-SD with service type _matter._tcp",
                    "If the DUT is advertising as a commissionable node with CM=2 over DNS-SD or advertising the Matter service over BLE, TH commissions the device"
                ],
                "Expected Outcome": [
                    "Verify that the commissioning completes successfully",
                    "",
                    "",
                    "DUT is successfully commissioned"
                ]
            }
        },
        {
            "Test Case Name": "15.1.6. [TC-OPCREDS-3.7] Add Second Fabric over CASE [DUT-Server]",
            "Test Case ID": "TC-OPCREDS-3.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that a DUT can be added to a second fabric using AddNOC command.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13a",
                    "13b",
                    "14"
                ],
                "Ref": [
                    "11.17.5.1",
                    "5.5",
                    "11.17.5.2",
                    "11.9.6.2, 11.9.6.3",
                    "11.17.6.5",
                    "6.4",
                    "11.17.6.13",
                    "11.17.6.8, 11.17.6.10",
                    "5.5 - 13",
                    "5.5 - 14, 4.13.2",
                    "5.5 - 15",
                    "11.17.5.2",
                    "11.17.5.2",
                    "11.17.5.2",
                    "11.17.6.12"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Factory Reset DUT (to ensure NOC list is empty at the beginning of the following steps)",
                    "Start the commissioning process of DUT by TH1 on the first Fabric.",
                    "TH1 does a fabric-filtered read of theFabricsattribute from the Node Operational Credentials cluster. Save the FabricIndex for TH1 asTH1_Fabric_Indexfor future use.",
                    "TH1 sendsArmFailSafecommand to the DUT with theExpiryLengthSecondsfield set to 60 seconds",
                    "TH1 SendsCSRRequestcommand with a random 32-byte nonce",
                    "TH2 generates the NOC, the Root CA Certificate and ICAC using the CSR elements fromStep 5and selects an IPK, all for use by TH2.Save RCAC asRoot_CA_Certificate_TH2Save ICAC asIntermediate_Certificate_TH2Save NOC asNode_Operational_Certificate_TH2Save IPK asIPK_TH2Extract the RCAC public key and save asRoot_Public_Key_TH2",
                    "TH1 sendsAddTrustedRootCertificatecommand to DUT withRootCACertificateset toRoot_CA_Certificate_TH2",
                    "TH1 sends theAddNOCcommand to DUT with the following fields:NOCValue asNode_Operational_Certificate_TH2ICACValue asIntermediate_Certificate_TH2IpkValue asIPK_TH2CaseAdminSubject as the NodeID of TH2AdminVendorId as the Vendor ID of TH2",
                    "TH2 starts discovery of DUT using Operational Discovery",
                    "TH2 opens a CASE session with DUT over operational network",
                    "TH2 sendsCommissioningCompletecommand",
                    "TH2 reads the Current Fabric Index attribute from the Node Operational Credentials cluster. Save the FabricIndex for TH2 asTH2_Fabric_Index.",
                    "TH1 does a fabric-filtered read of theFabricsattribute from the Node Operational Credentials cluster",
                    "TH2 does a fabric-filtered read of theFabricsattribute from the Node Operational Credentials cluster",
                    "TH1 sendsRemoveFabriccommand to DUT with the FabricIndex field set toTH2_Fabric_Index."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that TH1 successfully completes commissioning, including establishing a CASE session on the operational network and issuing aCommissioningCompletecommand.",
                    "Verify that there is a single entry in the list and the FabricIndex for that entry matchesTH1_Fabric_Index.",
                    "Verify that the DUT sendsArmFailSafeResponsecommand to TH1 with field ErrorCode asOK(0)",
                    "Verify that the DUT responds with theCSRResponsecommand",
                    "",
                    "Verify thatAddTrustedRootCertificatecommand succeeds by sending the status code asSUCCESS",
                    "Verify that DUT responds withNOCResponsewith status codeOK",
                    "",
                    "DUT is able to open the CASE session with TH2",
                    "DUT respond withSUCCESSatCommissioningCompletecommand sent by TH2",
                    "",
                    "Verify that there is one entry in the list that matchesTH1_Fabric_Index.",
                    "Verify that there is one entry in the list that matchesTH2_Fabric_Index.",
                    "Verify that DUT sendsNOCResponsecommand with status codeOK"
                ]
            }
        },
        {
            "Test Case Name": "15.2.1. [TC-OPCREDS-3.3] Attribute-NOCs, Commands [DUT-Client]",
            "Test Case ID": "TC-OPCREDS-3.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5a",
                    "5b",
                    "6",
                    "7a",
                    "7b",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "11.17.6.1",
                    "5.5",
                    "11.17.7.1",
                    "11.17.7.3",
                    "11.17.7.5",
                    "",
                    "11.17.7.13",
                    "11.17.7.8",
                    "",
                    "",
                    "",
                    "",
                    "11.17.7.9",
                    "11.17.7.11",
                    "11.17.6.3",
                    "11.17.6.4",
                    "11.17.6.4",
                    "11.17.6.5",
                    "11.17.7.12"
                ],
                "PICS": [
                    "MCORE.UI.FACTORYRESET",
                    "",
                    "",
                    "",
                    "OPCREDS.C.C04.Tx(CSRRequest )",
                    "",
                    "OPCREDS.C.C0b.Tx(AddTrustedRootCertificate)",
                    "OPCREDS.C.C06.Tx(AddNOC)",
                    "",
                    "",
                    "",
                    "",
                    "OPCREDS.C.C07.Tx(UpdateNOC )",
                    "OPCREDS.C.C09.Tx(UpdateFabricLabel)",
                    "OPCREDS.C.A0002(SupportedFabrics)",
                    "OPCREDS.C.A0003(CommissionedFabrics)",
                    "OPCREDS.C.A0004(TrustedRootCertificates)",
                    "OPCREDS.C.A0005(CurrentFabricIndex)",
                    "OPCREDS.C.C0a.Tx(RemoveFabric)"
                ],
                "Test Step": [
                    "Factory Reset DUT (to ensure NOC list is empty at the beginning of the following steps)",
                    "Start the commissioning process of TH with DUT",
                    "Verify that TH receives AttestationRequest Command from DUT",
                    "Verify that TH receives CertificateChainRequest Command from DUT",
                    "Verify that the TH receives CSRRequest command from DUT",
                    "Extract the CSRResponse values for future use from THNOCSRElements -  which contains the Node Operational PublicKey from CSRAttestationSignature",
                    "Verify that TH receives AddTrustedRootCertificate command from DUT",
                    "Verify that TH receives AddNOC Command from DUT",
                    "TH saves the following values as:NOCValue as nocvalue1ICACValue as icacvalue1IpkValue as ipkvalue1CaseAdminSubject as caseadmin1AdminVendorId as adminvendorid1",
                    "Extract the following FabricDescriptorStruct values from THRootPublicKeyVendorIDFabricIDNodeIDLabel",
                    "",
                    "",
                    "Trigger the DUT to send UpdateNOC to TH",
                    "Trigger the DUT to send UpdateFabricLabel to TH",
                    "Trigger the DUT to Read SupportedFabrics from TH",
                    "Trigger the DUT to read CommissionedFabrics attribute from TH",
                    "Trigger the DUT to read TrustedRootCertificates attribute from TH",
                    "Trigger the DUT to read CurrentFabricIndex attribute from TH",
                    "Trigger the DUT to send RemoveFabric command to TH"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that the size of RootPublicKey is within 65 octstrVerify that the NodeID is the same as the chip-node-id in the NOC sent with AddNOC CommandVerify that the VendorID is the same as the AdminVendorID sent with AddNOC CommandVerify that the FabricID is the same as the matter-fabric-id field from the operational certificateVerify that the size of Label has a maximum value of 32 bytes.",
                    "Verify that the public Key extracted NOCValue of the AddNOC matches the Node Operational Public Key extracted from CSRResponse",
                    "Verify that TH receives UpdateNOC Command from DUT successfully.",
                    "Verify that TH receives UpdateFabricLabel Command from DUT successfully.",
                    "Verify that TH receives read SupportedFabrics attribute from DUT successfully",
                    "Verify that TH receives read CommissionedFabrics attribute from DUT successfully.",
                    "Verify that TH receives read TrustedRootCertificates from DUT successfully.",
                    "Verify that TH receives read CurrentFabricIndex from DUT successfully.",
                    "Verify that TH receives RemoveFabric Command for the FabricID saved from FabricDescriptor"
                ]
            }
        }
    ],
    "Network_Commissioning": [
        {
            "Test Case Name": "19.1.1. [TC-CNET-1.3] Global Attributes with DUT as Server",
            "Test Case ID": "TC-CNET-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the behavior of the global attributes of the cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5*",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.7.13.1",
                    "C.7.13.2",
                    "C.7.13.3",
                    "C.7.13.6",
                    "C.7.13.4",
                    "C.7.13.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theClusterRevisionattribute.",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theAttributeListattribute.",
                    "TH reads from the DUT theEventListattribute.",
                    "TH reads from the DUT theAcceptedCommandListattribute.",
                    "TH reads from the DUT theGeneratedCommandListattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the DUT response contains theClusterRevisionattribute and has the value 2.",
                    "Verify that the DUT response contains theFeatureMapattribute and have the following bit set:- bit 0: SHALL be 1 if and only if CNET.S.F00(WI)- bit 1: SHALL be 1 if and only if CNET.S.F01(TH)- bit 2: SHALL be 1 if and only if CNET.S.F02(ET)All remaining bits SHALL be 0",
                    "Verify that the DUT response contains theAttributeListattribute and have the list of supported attributes:The list SHALL include all the mandatory entries:0x0000, 0x0001, 0x0004, 0x0005, 0x0006, 0x0007,\n0xfff8, 0xfff9, 0xfffb, 0xfffc and 0xfffd.The list includes entries based on feature support:- 0x0002: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x0003: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x0008 SHALL be included if and only if CNET.S.F00(WI).- 0x0009 SHALL be included if and only if CNET.S.F01(TH).- 0x000A SHALL be included if and only if CNET.S.F01(TH).",
                    "Verify that the DUT response contains theEventListattribute and have the list of supported events:This cluster has no entries in the standard or scoped range.",
                    "Verify that the DUT response contains theAcceptedCommandListattribute and have the list of Accepted Command:The list includes entries based on feature support:- 0x00: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x02: SHALL be included if CNET.S.F00(WI)\nand SHALL NOT be included otherwise.- 0x03: SHALL be included if CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x04: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x06: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x08: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.",
                    "Verify that the DUT response contains theGeneratedCommandListattribute and have the list of Generated Command:The list includes entries based on feature support:- 0x01: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x05: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise.- 0x07: SHALL be included if CNET.S.F00(WI) or CNET.S.F01(TH)\nand SHALL NOT be included otherwise."
                ]
            }
        },
        {
            "Test Case Name": "19.2.1. [TC-CNET-4.1] [Wi-Fi] Verification for attributes check [DUT-Server]",
            "Test Case ID": "TC-CNET-4.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the DUT is connected with the Wi-Fi interface",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "",
                    "",
                    "9.69.6.4.2",
                    "7.13.2",
                    "11.8.7.1",
                    "",
                    "11.8.7.211.8.6.3",
                    "11.8.7.3",
                    "11.8.7.4",
                    "11.8.7.5",
                    "11.8.7.6",
                    "11.8.7.7",
                    "11.8.7.8",
                    "11.8.7.9"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "CNET.S.A0000(MaxNetworks)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.A0002(ScanMaxTimeSeconds)",
                    "CNET.S.A0003(ConnectMaxTimeSeconds)",
                    "CNET.S.A0004(InterfaceEnabled)",
                    "CNET.S.A0005(LastNetworkingStatus)",
                    "CNET.S.A0006(LastNetworkID)",
                    "CNET.S.A0007(LastConnectErrorValue)",
                    "CNET.S.A0008(SupportedWiFiBands)"
                ],
                "Test Step": [
                    "Factory reset the DUT",
                    "Commission TH and DUT over BLE to setup the Wi-Fi",
                    "TH reads Descriptor Cluster from the DUT with EP0TH reads ServerList from the DUT",
                    "TH reads FeatureMap attribute from the DUT",
                    "TH reads the MaxNetworks attribute from the DUT",
                    "TH saves the MaxNetworks attribute value as 'MaxNetworksValue' for future use",
                    "TH reads the Networks attribute list from the DUT",
                    "TH reads ScanMaxTimeSeconds attribute from the DUT",
                    "TH reads ConnectMaxTimeSeconds Attribute from the DUT",
                    "TH reads InterfaceEnabled attribute from the DUT",
                    "TH reads LastNetworkingStatus attribute from the DUT",
                    "TH reads the LastNetworkID attribute from the DUTTH reads the Networks attribute from the DUT",
                    "TH reads the LastConnectErrorValue attribute from the DUT",
                    "TH reads the SupportedWiFiBands attribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify for the presence of an element with value 49 (0x0031) in the ServerList. If the value is present, then continue with the test case",
                    "Verify that FeatureMap attribute value is equal to 1. If the value is 1, then continue with the test case",
                    "Verify that MaxNetworks attribute value is within a range of 1 to 255",
                    "",
                    "Verify that each element in the Networks attribute list has the following fields:NetworkID field is of type octstr with a length range 1 to 32The connected field is of type boolVerify that only one entry has connected status as TRUE and that entry has the NetworkID set to the hex representation of the ASCII values for the SSID of the Wi-Fi set up during commissioningVerify that the number of entries in theNetworksattribute is less than or equal to 'MaxNetworksValue'",
                    "Verify that ScanMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "Verify that ConnectMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "Verify that InterfaceEnabled attribute value is true",
                    "Verify that LastNetworkingStatus attribute is Success",
                    "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in the Networks attribute list, or if the Networks attribute list is Empty, then LastNetworkID attribute value is null",
                    "Verify that LastConnectErrorValue attribute value is null",
                    "Verify that SupportedWiFiBands attribute value has 1 or more entries, all of which are in the range of WiFiBandEnum."
                ]
            }
        },
        {
            "Test Case Name": "19.2.2. [TC-CNET-4.2] [Thread] Verification for attributes check [DUT-Server]",
            "Test Case ID": "TC-CNET-4.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the DUT is connected with the Thread interface",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Ref": [
                    "",
                    "",
                    "9.69.6.4.2",
                    "7.13.2",
                    "11.8.7.1",
                    "",
                    "11.8.7.211.8.6.3",
                    "11.8.7.3",
                    "11.8.7.4",
                    "11.8.7.5",
                    "11.8.7.6",
                    "11.8.7.7",
                    "11.8.7.8",
                    "11.8.7.10",
                    "11.8.7.11"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "CNET.S.A0000(MaxNetworks)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.A0002(ScanMaxTimeSeconds)",
                    "CNET.S.A0003(ConnectMaxTimeSeconds)",
                    "CNET.S.A0004(InterfaceEnabled)",
                    "CNET.S.A0005(LastNetworkingStatus)",
                    "CNET.S.A0006(LastNetworkID)",
                    "CNET.S.A0007(LastConnectErrorValue)",
                    "CNET.S.A0009(SupportedThreadFeatures)",
                    "CNET.S.A000a(ThreadVersion)"
                ],
                "Test Step": [
                    "Factory reset the DUT",
                    "Commission TH and DUT on Thread network",
                    "TH reads Descriptor Cluster from the DUT with EP0TH reads ServerList from the DUT",
                    "TH reads FeatureMap attribute from the DUT",
                    "TH reads the MaxNetworks attribute from the DUT",
                    "TH saves the MaxNetworks attribute value as 'MaxNetworksValue' for future use",
                    "TH reads the Networks attribute list from the DUT",
                    "TH reads ScanMaxTimeSeconds attribute from the DUT",
                    "TH reads ConnectMaxTimeSeconds Attribute from the DUT",
                    "TH reads InterfaceEnabled attribute from the DUT",
                    "TH reads LastNetworkingStatus attribute from the DUT",
                    "TH reads the LastNetworkID attribute from the DUTTH reads the Networks attribute from the DUT",
                    "TH reads the LastConnectErrorValue attribute from the DUT",
                    "TH reads the SupportedThreadFeatures attribute from the DUT",
                    "TH reads the ThreadVersion attribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify for the presence of an element with value 49 (0x0031) in the ServerList. If the value is present, then continue with the test case",
                    "Verify that FeatureMap attribute value is equal to 2. If the value is 2, then continue with the test case",
                    "Verify that MaxNetworks attribute value is within a range of 1 to 255",
                    "",
                    "Verify that each element in the Networks attribute list has the following fields:NetworkID field is of type octstr with a length range 1 to 32The connected field is of type boolVerify that only one entry has connected status as TRUE and that entry has the NetworkID set to the XPAN of the thread network set up during commissioningVerify that the number of entries in theNetworksattribute is less than or equal to 'MaxNetworksValue'",
                    "Verify that ScanMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "Verify that ConnectMaxTimeSeconds attribute value is within the range of 1 to 255 seconds",
                    "Verify that InterfaceEnabled attribute value is true",
                    "Verify that LastNetworkingStatus attribute value is Success.",
                    "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in theNetworksattribute list, or if the Networks attribute list is Empty, then LastNetworkID attribute value is null",
                    "Verify that LastConnectErrorValue attribute value is null",
                    "Verify that SupportedThreadFeatures attribute value is an empty bitmap (value 0).Verify that Bit 4 (IsSynchronizedSleepyEndDeviceCapable) is only set if bit 2 (IsSleepyEndDeviceCapable) is also set.Verify that Bit 0 (IsBorderRouterCapable) is only set if bit 3 (IsFullThreadDevice) is also setVerify that Bit 1 (IsRouterCapable) is only set if bit 3 (IsFullThreadDevice) is also set.Verify that at least one of the following bits is set: Bit 4 (IsSynchronizedSleepyEndDeviceCapable), Bit 2 (IsSleepyEndDeviceCapable), Bit 3 (IsFullThreadDevice).",
                    "Verify that ThreadVersion attribute value is greater than or equal to 4."
                ]
            }
        },
        {
            "Test Case Name": "19.2.3. [TC-CNET-4.3] [Ethernet] Verification for attributes check [DUT-Server]",
            "Test Case ID": "TC-CNET-4.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the DUT is connected with Ethernet interface",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "9.69.6.4.2",
                    "7.13.2",
                    "11.8.7.1",
                    "",
                    "11.8.7.211.8.6.3",
                    "11.8.7.5",
                    "11.8.7.6",
                    "11.8.7.7",
                    "11.8.7.8"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "CNET.S.A0000(MaxNetworks)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.A0004(InterfaceEnabled)",
                    "CNET.S.A0005(LastNetworkingStatus)",
                    "CNET.S.A0006(LastNetworkID)",
                    "CNET.S.A0007(LastConnectErrorValue)"
                ],
                "Test Step": [
                    "Factory reset the DUT",
                    "Commission TH and DUT on Ethernet setup",
                    "TH reads Descriptor Cluster from the DUT with EP0TH reads ServerList from the DUT",
                    "TH reads FeatureMap attribute from the DUT",
                    "TH reads the MaxNetworks attribute from the DUT",
                    "TH saves the MaxNetworks attribute value as 'MaxNetworksValue' for future use",
                    "TH reads the Networks attribute list from the DUT",
                    "TH reads InterfaceEnabled attribute from the DUT",
                    "TH reads LastNetworkingStatus attribute from the DUT",
                    "TH reads the LastNetworkID attribute from the DUTTH reads the Networks attribute from the DUT",
                    "TH reads the LastConnectErrorValue attribute from the DUT"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify for the presence of an element with value 49 (0x0031) in the ServerList. If the value is present, then continue with the test case",
                    "Verify that FeatureMap attribute value is equal to 4. If the value is 4, If the value is 4, then continue with the test case",
                    "Verify that MaxNetworks attribute value is within a range of 1 to 255",
                    "",
                    "Verify that each element in the Networks attribute list has the following fields:NetworkID field is of type octstr with a length range 1 to 32The connected field is of type boolVerify that only one entry has connected status as TRUEVerify that the number of entries in theNetworksattribute is less than or equal to 'MaxNetworksValue'",
                    "Verify that InterfaceEnabled attribute value is true",
                    "Verify that LastNetworkingStatus attribute value is null",
                    "Verify that LastNetworkID attribute matches the NetworkID value of one of the entries in theNetworksattribute list, or if the Networks attribute list is Empty, then LastNetworkID attribute value is null",
                    "Verify that LastConnectErrorValue attribute value is null"
                ]
            }
        },
        {
            "Test Case Name": "19.2.4. [TC-CNET-4.4] [Wi-Fi] Verification for ScanNetworks command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verification of ScanNetworks command for listing all available Wi-Fi networks within the range using a null value",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "C.11.9.4",
                    "C.11.9.6.9",
                    "C.11.9.6.2",
                    "C.11.9.7.1",
                    "C.11.10.5.1",
                    "C.11.9.7.1",
                    "C.11.10.5.1",
                    "C.11.9.7.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT the Network Commissioning ClusterFeatureMap. If theFeatureMapdoes not include the WI flag (bit 0), skip the remaining steps in this test case",
                    "TH reads from the DUT theSupportedWifiBandsattribute and saves assupported_wifi_bands",
                    "TH reads from the DUT theNetworksattribute.",
                    "TH sends ScanNetworks command to the DUT with the SSID field set to 'null' and Breadcrumb field set to 1",
                    "TH reads from the DUT the Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ScanNetworks Command to the DUT with SSID field set toknown_ssidand Breadcrumb field set to 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ScanNetworks Command to the DUT with SSID field set to a string of 31 random alphabetical characters and Breadcrumb field set to 2"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify at least one entry has Connected set to True. Save the NetworkID of that entry asknown_ssid",
                    "Verify that DUT sends ScanNetworksResponse command to the TH with the following fields:NetworkingStatus is SuccessDebugText is of type string with max length 512 or absentWiFiScanResults contains at least one elementAt least one of the WifiScanResults entries has an SSID ofknown_ssidEach element in the WiFiScanResults list will have the following fields:Security contains only flags supported in the WiFiSecurityBitmap TypeSSID is of type octstr with a length range 0 to 32.BSSID is of type octstr with a length of 6.Channel is of type uint16 with a range 0 to 65,535Wi-Fi Band, if present, is one of the values present in thesupported_wifi_bandsand in the range of values in the WiFiBandEnum.RSSI, if present, is of type int8 with a range of -120 to 0",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends ScanNetworksResponse command to the TH with the following fields:NetworkingStatus is SuccessDebugText is of type string with max length 512 or absentWiFiScanResults contains at least one elementEach element in the WiFiScanResults list will have the following fields:Security contains only flags supported in the WiFiSecurityBitmap TypeSSID isknown_ssidBSSID is of type octstr with a length of 6.Channel is of type uint16 with a range 0 to 65,535Wi-Fi Band, if present, is one of the values present in thesupported_wifi_bandsand in the range of values in the WiFiBandEnum.RSSI, if present, is of type int8 with a range of -120 to 0",
                    "Verify that the Breadcrumb attribute is set to 2",
                    "Verify that the DUT sends the ScanNetworkResponse command with the NetworkingStatus field set to NetworkNotFound."
                ]
            }
        },
        {
            "Test Case Name": "19.2.5. [TC-CNET-4.5] [Wi-Fi] FAILSAFE_REQUIRED message Validation [DUT-Server]",
            "Test Case ID": "TC-CNET-4.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that DUT sends status code FAILSAFE_REQUIRED message for the following commands that are initiated before sending ArmFailSafe command by the TH:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.8.8.4",
                    "11.8.8.8",
                    "11.8.8.10"
                ],
                "PICS": [
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork)",
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork) & CNET.S.C04.Rsp(RemoveNetwork)",
                    "CNET.S.C06.Rsp(ConnectNetwork)"
                ],
                "Test Step": [
                    "TH sends the AddOrUpdateWiFiNetwork command to the DUT with the following fields:SSID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDCredentials field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_CREDENTIALSBreadcrumb field set to 1",
                    "TH sends RemoveNetwork command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH",
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH",
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH"
                ]
            }
        },
        {
            "Test Case Name": "19.2.6. [TC-CNET-4.6] [Thread] FAILSAFE_REQUIRED message Validation [DUT-Server]",
            "Test Case ID": "TC-CNET-4.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that DUT sends status code FAILSAFE_REQUIRED message for the following commands that are initiated before sending ArmFailSafe command by the TH:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.8.8.5",
                    "11.8.8.8",
                    "11.8.8.10"
                ],
                "PICS": [
                    "CNET.S.C03.Rsp(AddOrUpdateThreadNetwork)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "CNET.S.C06.Rsp(ConnectNetwork)"
                ],
                "Test Step": [
                    "TH sends the AddOrUpdateThreadNetwork command to the DUT with the following fields:OperationalDataset field set to PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETBreadcrumb field set to 1",
                    "TH sends RemoveNetwork command to the DUT with NetworkID field set to PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and Breadcrumb field set to 1"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH",
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH",
                    "Verify that DUT sends FAILSAFE_REQUIRED status code message to the TH"
                ]
            }
        },
        {
            "Test Case Name": "19.2.7. [TC-CNET-4.9] [Wi-Fi] Verification for RemoveNetwork Command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.9",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verification for RemoveNetwork Command by removing a Wi-Fi network from the Networks list",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.8.7.2",
                    "11.8.8.811.8.8.9",
                    "11.8.7.2",
                    "11.8.7.6",
                    "11.8.7.6\n*11.8.8.9",
                    "11.8.8.8",
                    "11.8.8.8",
                    "11.8.8.8",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.8.811.8.8.9",
                    "11.9.7.6",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.A0005(LastNetworkingStatus)",
                    "CNET.S.A0006(LastNetworkID)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "CNET.S.C04.Rsp(RemoveNetwork) & CNET.S.C06.Rsp(ConnectNetwork)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH reads Networks attribute from the DUT and saves the number of entries as 'NumNetworks'",
                    "TH finds the index of the Networks list entry with NetworkID field value PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and saves it as 'Userwifi_netidx'",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1",
                    "TH reads Networks attribute from the DUT",
                    "TH reads LastNetworkingStatus attribute from the DUT",
                    "TH reads LastNetworkID attribute from the DUT",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 2",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0 to ensure the CommissioningComplete call properly persisted the failsafe context. This call should have no effect if Commissioning Complete call is handled correctly",
                    "TH reads Networks attribute from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has an entry with the following values:NetworkID field value as PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDConnected field value is of type bool and has the value true",
                    "",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is successNetworkIndex is 'Userwifi_netidx'",
                    "Verify that the Networks attribute list has 'NumNetworks' - 1 entries",
                    "Verify that DUT sends LastNetworkingStatus as Success which is 0 or null if 'NumNetworks' - 1 == 0 entries.",
                    "Verify that DUT sends LastNetworkID as PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID or null if 'NumNetworks' - 1 == 0 entries.",
                    "Verify that the breadcrumb value is set to 1",
                    "Verify that the DUT sends a ConnectNetworkResponse to the command with the NetworkingStatus field set to NetworkIdNotFound",
                    "Verify that the breadcrumb value is set to 1",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list contains 'NumNetworks' entries and has an entry with the following fields:NetworkID is the hex representation of the ASCII values for PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDConnected is of type bool and has the value true",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is successNetworkIndex is 'Userwifi_netidx'",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has 'NumNetworks' - 1 entries and does NOT contain an entry with the NetworkID for PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID"
                ]
            }
        },
        {
            "Test Case Name": "19.2.8. [TC-CNET-4.10] [Thread] Verification for RemoveNetwork Command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.10",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verification for RemoveNetwork Command by removing a thread network from the Networks list",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.8.7.2",
                    "* 11.8.8.8\n* 11.8.8.9",
                    "11.8.7.2",
                    "11.8.7.6",
                    "11.8.7.6\n*11.8.8.9",
                    "11.8.8.8",
                    "11.8.8.8",
                    "11.8.8.8",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.8.811.8.8.9",
                    "11.9.7.6",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.A0005(LastNetworkingStatus)",
                    "CNET.S.A0006(LastNetworkID)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "CNET.S.C04.Rsp(RemoveNetwork) & CNET.S.C06.Rsp(ConnectNetwork)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C04.Rsp(RemoveNetwork)",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH1 reads Networks attribute from the DUT and save the number of entries as 'NumNetworks'",
                    "TH finds the index of the Networks list entry with NetworkID field value PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and saves it as 'Userth_netidx'",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "TH reads Networks attribute from the DUT",
                    "TH reads LastNetworkingStatus attribute from the DUT",
                    "TH reads LastNetworkID attribute from the DUT",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and Breadcrumb field set to 2",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0 to ensure the CommissioningComplete call properly persisted the failsafe context. This call should have no effect if Commissioning Complete call is handled correctly",
                    "TH reads Networks attribute from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has an entry with the following values:NetworkID field value as the extended PAN ID for PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETConnected field value is of type bool and has the value true",
                    "",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is successNetworkIndex is 'Userth_netidx'",
                    "Verify that the Networks attribute list has 'NumNetworks' - 1 entries",
                    "Verify that DUT sends LastNetworkingStatus as Success which is 0 or null if 'NumNetworks' - 1 == 0 entries.",
                    "Verify that DUT sends LastNetworkID as the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET or null if 'NumNetworks' - 1 == 0 entries.",
                    "Verify that the breadcrumb value is set to 1",
                    "Verify that the DUT sends a ConnectNetworkResponse to the command with the NetworkingStatus field set to NetworkIdNotFound",
                    "Verify that the breadcrumb value is set to 1",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list contains 'NumNetworks' entries and has an entry with the following values:NetworkID field value as the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETConnected field value is of type bool and has the value true",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is successNetworkIndex is 'Userth_netidx'",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has 'NumNetworks' - 1 entries and does NOT contain an entry with the NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET"
                ]
            }
        },
        {
            "Test Case Name": "19.2.9. [TC-CNET-4.11] [Wi-Fi] Verification for ConnectNetwork Command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.11",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that the Wi-Fi network is connected using the ConnectNetwork Command",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "23"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.8.7.2",
                    "11.8.8.811.8.8.9",
                    "11.8.8.411.8.8.611.8.8.9",
                    "11.8.7.2",
                    "11.8.8.10",
                    "",
                    "4.3.2",
                    "11.8.8.8",
                    "11.9.7.111.9.7.2",
                    "",
                    "4.3.2",
                    "11.9.7.111.9.7.2",
                    "* 11.8.8.8* 11.8.8.9",
                    "* 11.8.8.4\n* 11.8.8.6\n* 11.8.8.9",
                    "11.8.8.1011.8.8.11",
                    "",
                    "4.3.2",
                    "11.8.8.8",
                    "11.9.7.6",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "",
                    "",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C06.Rsp(ConnectNetwork)CNET.S.C07.Tx(ConnectNetworkResponse)",
                    "",
                    "",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH reads Networks attribute from the DUT and saves the number of entries as 'NumNetworks'",
                    "TH finds the index of the Networks list entry with NetworkID for PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and saves it as 'Userwifi_netidx'",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1",
                    "TH sends AddOrUpdateWiFiNetwork command to the DUT with SSID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, Credentials field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_CREDENTIALS and Breadcrumb field set to 1",
                    "TH reads Networks attribute from the DUT",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID and Breadcrumb field set to 2",
                    "TH changes its WiFi connection to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID",
                    "TH discovers and connects to DUT on the PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID operational network",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0. This forcibly disarms the fail-safe and is expected to cause the changes of configuration to NetworkCommissioning cluster done so far to be reverted.",
                    "TH changes its Wi-Fi connection to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID",
                    "TH discovers and connects to DUT on the PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID operational network",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID and Breadcrumb field set to 1",
                    "TH sends AddOrUpdateWiFiNetwork command to the DUT with SSID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, Credentials field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_CREDENTIALS and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID and Breadcrumb field set to 3",
                    "TH changes its Wi-Fi connection to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID",
                    "TH discovers and connects to DUT on the PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID operational network",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH reads Networks attribute from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has an entry with the following fields:NetworkID is the hex representation of the ASCII values for PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDConnected is of type bool and is TRUE",
                    "",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is SuccessNetworkIndex matches previously saved 'Userwifi_netidx'",
                    "Verify that DUT sends the NetworkConfigResponse command to the TH with the following response fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that the Networks attribute list has an entry with the following fields:NetworkID is the hex representation of the ASCII values for PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSIDConnected is of type bool and is FALSE",
                    "",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that the breadcrumb value is set to 2",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse to command with the following response fields:NetworkingStatus is successNetworkIndex is 'Userwifi_netidx'",
                    "Verify that DUT sends the NetworkConfigResponse command to the TH with the following response fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that the breadcrumb value is set to 3",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that the Networks attribute list has an entry with the following fields:NetworkID is the hex representation of the ASCII values for PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSIDConnected is of type bool and is TRUE"
                ]
            }
        },
        {
            "Test Case Name": "19.2.10. [TC-CNET-4.12] [Thread] Verification for ConnectNetwork Command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.12",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that the time taken by DUT to make successful connectivity is within ConnectMaxTimeSeconds by thread network",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.8.7.2",
                    "11.8.8.811.8.8.9",
                    "11.8.8.511.8.8.611.8.8.9",
                    "11.8.7.2",
                    "11.8.8.10",
                    "4.3.2",
                    "11.8.8.8",
                    "11.9.7.111.9.7.2",
                    "",
                    "4.3.2",
                    "11.9.7.111.9.7.2",
                    "* 11.8.8.8\n* 11.8.8.9",
                    "* 11.8.8.5\n* 11.8.8.6\n* 11.8.8.9",
                    "11.8.8.1011.8.8.11",
                    "4.3.2",
                    "11.8.8.8",
                    "11.9.7.6",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C03.Rsp(AddOrUpdateThreadNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "",
                    "",
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C03.Rsp(AddOrUpdateThreadNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C06.Rsp(ConnectNetwork)CNET.S.C07.Tx(ConnectNetworkResponse)",
                    "",
                    "CNET.S.C06.Rsp(ConnectNetwork)",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH reads Networks attribute from the DUT and saves the number of entries as 'NumNetworks'",
                    "TH saves the index of the Networks list entry from step 2 asUserth_netidx",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set toth_xpanand Breadcrumb field set to 1",
                    "TH sends AddOrUpdateThreadNetwork command to the DUT with operational dataset field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "TH reads Networks attribute from the DUT",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 2",
                    "TH discovers and connects to DUT on the PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET operational network",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH ensures it can communicate on PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET",
                    "TH discovers and connects to DUT on the PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET operational network",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set toth_xpanand Breadcrumb field set to 1",
                    "TH sends AddOrUpdateThreadNetwork command to the DUT with the OperationalDataset field set to PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork command to the DUT with NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET and Breadcrumb field set to 3",
                    "TH discovers and connects to DUT on the PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET operational network",
                    "TH reads Breadcrumb attribute from the General Commissioning cluster of the DUT",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH reads Networks attribute from the DUT"
                ],
                "Expected Outcome": [
                    "Verify that DUT responds with ArmFailSafeResponse to the TH",
                    "Verify that the Networks attribute list has an entry with the following fields:NetworkID isth_xpanConnected is of type bool and is TRUE",
                    "",
                    "Verify that DUT sends NetworkConfigResponse to command with the following response fields:NetworkingStatus is successNetworkIndex isUserth_netidx",
                    "Verify that DUT sends the NetworkConfigResponse command to the TH with the following fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that the Networks attribute list has an entry with the following fields:NetworkID isth_xpanConnected is of type bool and is FALSE",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that the breadcrumb value is set to 2",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse to command with the following fields:NetworkingStatus is successNetworkIndex is 'Userth_netidx'",
                    "Verify that DUT sends the NetworkConfigResponse command to the TH with the following fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "",
                    "Verify that the TH successfully connects to the DUT",
                    "Verify that the breadcrumb value is set to 3",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that the Networks attribute list has an entry with the following values:NetworkID field value as the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASETConnected field value is of type bool and is TRUE"
                ]
            }
        },
        {
            "Test Case Name": "19.2.11. [TC-CNET-4.13] [Wi-Fi] Verification for ReorderNetwork command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.13",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that the Networks list is re-ordered when using ReorderNetwork Command",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "",
                    "* 11.9.7.1\n* 11.9.7.2",
                    "11.8.7.2",
                    "",
                    "",
                    "11.8.8.411.8.8.611.8.8.9",
                    "11.8.7.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.8.411.8.8.611.8.8.9",
                    "11.8.8.1211.8.8.9",
                    "11.9.7.6",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "",
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C02.Rsp(AddOrUpdateWiFiNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH reads MaxNetworks attribute from DUT and is saved as 'MaxNetworksValue' for future use",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH reads Networks attribute from the DUT and saves the number of entries as 'NumNetworks'",
                    "TH calculates the number of remaining network slots as 'MaxNetworksValue' - 'NumNetworks' and saves as 'RemainingNetworkSlots'",
                    "TH calculates the midpoint of the network list as floor(('MaxNetworksValue' + 1)/2) and saves as 'Midpoint'",
                    "TH sends AddOrUpdateWiFiNetwork command to the DUT. This step should be repeated 'RemainingNetworkSlots' times using DIFFERENT SSID and credential values and the Breadcrumb field set to 1. Note that these credentials are NOT required to be connectable.",
                    "TH reads Networks attribute from the DUT and saves the list as 'OriginalNetworkList'",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDNetworkIndex is 'MaxNetworksValue'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is a NetworkID value NOT present in 'OriginalNetworkList'NetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDNetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH reads Networks attribute list from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute list from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends AddOrUpdateWiFiNetwork command to the DUT. This step should be repeated 'RemainingNetworkSlots' times using DIFFERENT SSID and credential values and Breadcrumb field set to 1. Note that these credentials are NOT required to be connectable.",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDNetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute list from the DUT"
                ],
                "Expected Outcome": [
                    "If MaxNetworksValue is < 2, skip the remaining steps.Note: This test case is applicable for MaxNetworksValue >= 2",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has an entry with the following values:NetworkID field value as PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSIDConnected field value is of type bool and has the value true",
                    "",
                    "",
                    "Verify that DUT sends the NetworkConfigResponse to each command with the following fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that the Networks attribute list has 'MaxNetworkValues' entries and contains one entry for each network added in step 5.",
                    "Verify that DUT sends NetworkConfigResponse to the TH with following fields:NetworkingStatus is OutOfRangeDebugText is of type string with max length 512 or empty",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends NetworkConfigResponse to the TH with following fields:NetworkingStatus is NetworkIdNotFoundDebugText is of type string with max length 512 or empty",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends NetworkConfigResponse to the TH with following fields:NetworkingStatus is successDebugText is of type string with max length 512 or emptyNetworkIndex value as 'Midpoint'",
                    "Verify that the Breadcrumb attribute is set to 2",
                    "Verify that Networks attribute list has the following properties:List item with NetworkID value the hex representation of the ASCII values for PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID in position 'Midpoint'Other list items in same relative order as 'OriginalNetworkList'",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that Networks attribute list ordering matches 'OriginalNetworkList'",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends the NetworkConfigResponse command to each command to the TH with the following fields:NetworkingStatus is success which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that DUT sends NetworkConfigResponse Command to the TH with following fields:NetworkingStatus is successDebugText is of type string with max length 512 or emptyNetworkIndex is 'Midpoint'",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that Networks attribute list has the following properties:List item with NetworkID value PIXIT.CNET.WIFI_1ST_ACCESSPOINT_SSID in position 'Midpoint'Other list items in same relative order as 'OriginalNetworkList'"
                ]
            }
        },
        {
            "Test Case Name": "19.2.12. [TC-CNET-4.14] [Thread] Verification for ReorderNetwork command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.14",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that the Networks list is re-ordered when using ReorderNetwork Command",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "",
                    "* 11.9.7.1\n* 11.9.7.2",
                    "11.8.7.2",
                    "",
                    "",
                    "11.8.8.511.8.8.611.8.8.9",
                    "11.8.7.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.8.1211.8.8.9",
                    "11.8.8.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2",
                    "11.9.7.111.9.7.2",
                    "11.8.8.511.8.8.611.8.8.9",
                    "11.8.8.1211.8.8.9",
                    "11.9.7.6",
                    "11.9.7.111.9.7.2",
                    "11.8.7.2"
                ],
                "PICS": [
                    "",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "",
                    "CNET.S.C03.Rsp(AddOrUpdateThreadNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.A0001(Networks)",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.A0001(Networks)",
                    "",
                    "CNET.S.C03.Rsp(AddOrUpdateThreadNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C08.Rsp(ReorderNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "",
                    "",
                    "CNET.S.A0001(Networks)"
                ],
                "Test Step": [
                    "TH reads MaxNetworks attribute from DUT and is saved as 'MaxNetworksValue' for future use",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH reads Networks attribute from the DUT and saves the number of entries as 'NumNetworks'",
                    "TH calculates the number of remaining network slots as 'MaxNetworksValue' - 'NumNetworks' and saves as 'RemainingNetworkSlots'",
                    "TH calculates the midpoint of the network list as floor(('MaxNetworksValue' + 1)/2) and saves as 'Midpoint'",
                    "TH sends AddOrUpdateThreadNetwork command to the DUT. This step should be repeated 'RemainingNetworkSlots' times using DIFFERENT OperationalDataset values and Breadcrumb set to 1. Note that these credentials are NOT required to be connectable.",
                    "TH reads Networks attribute from the DUT and saves the list as 'OriginalNetworkList'",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETNetworkIndex is 'MaxNetworksValue'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is a NetworkID NOT present in 'OriginalNetworkList'NetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETNetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH reads Networks attribute list from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute list from the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 900",
                    "TH sends AddOrUpdateThreadNetwork command to the DUT. This step should be repeated 'RemainingNetworkSlots' times using DIFFERENT OperationalDataset values and Breadcrumb set to 1. Note that these credentials are NOT required to be connectable.",
                    "TH sends ReorderNetwork Command to the DUT with the following fields:NetworkID is the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETNetworkIndex is 'Midpoint'Breadcrumb is 2",
                    "TH sends the CommissioningComplete command to the DUT",
                    "TH sends ArmFailSafe command to the DUT with ExpiryLengthSeconds set to 0",
                    "TH reads Networks attribute list from the DUT"
                ],
                "Expected Outcome": [
                    "If MaxNetworksValue is < 2, skip the remaining steps.Note: This test case is applicable for MaxNetworksValue >= 2",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that the Networks attribute list has an entry with the following values:NetworkID field value as the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASETConnected field value is of type bool and has the value true",
                    "",
                    "",
                    "Verify that DUT sends the NetworkConfigResponse command to each command to the TH with the following fields:NetworkingStatus is success, which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that the Networks attribute list has 'MaxNetworkValues' entries and contains one entry for each network added in step 5.",
                    "Verify that DUT sends NetworkConfigResponse to the TH with following fields:NetworkingStatus is OutOfRangeDebugText is of type string with max length 512 or empty",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends NetworkConfigResponse to the TH with following fields:NetworkingStatus is NetworkIdNotFoundDebugText is of type string with max length 512 or empty",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends NetworkConfigResponse Command to the TH with following fields:NetworkingStatus is successDebugText is of type string with max length 512 or emptyNetworkIndex value as 'Midpoint'",
                    "Verify that the Breadcrumb attribute is set to 2",
                    "Verify that Networks attribute list has the following properties:List item with NetworkID value of the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET in position 'Midpoint'Other list items in same relative order as 'OriginalNetworkList'",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that Networks attribute list ordering matches 'OriginalNetworkList'",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends the NetworkConfigResponse command to each command to the TH with the following fields:NetworkingStatus is success, which is \"0\"DebugText is of type string with max length 512 or empty",
                    "Verify that DUT sends NetworkConfigResponse Command to the TH with following fields:NetworkingStatus is successDebugText is of type string with max length 512 or emptyNetworkIndex value as 'Midpoint'",
                    "Verify that DUT sends CommissioningCompleteResponse with the ErrorCode field set to OK (0)",
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that Networks attribute list has the following properties:List item with NetworkID value with the extended PAN ID of PIXIT.CNET.THREAD_1ST_OPERATIONALDATASET in position 'Midpoint'Other list items in same relative order as 'OriginalNetworkList'"
                ]
            }
        },
        {
            "Test Case Name": "19.2.13. [TC-CNET-4.15] [Wi-Fi] NetworkIDNotFound returned in LastNetworkingStatus field validation [DUT-Server]",
            "Test Case ID": "TC-CNET-4.15",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that DUT responds with LastNetworkingStatus field set to NetworkIDNotFound for the following commands when the NetworkID does not exist:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.8.811.8.8.9",
                    "11.8.8.1011.8.8.9"
                ],
                "PICS": [
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C06.Rsp(ConnectNetwork)CNET.S.C07.Tx(ConnectNetworkResponse)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, which does not match the provisioned network, and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork Command to the DUT with NetworkID field set to PIXIT.CNET.WIFI_2ND_ACCESSPOINT_SSID, which does not match the provisioned network, and Breadcrumb field set to 1"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse command to the TH1 with NetworkingStatus field set as NetworkIDNotFound which is '3'",
                    "Verify that DUT sends ConnectNetworkResponse command to the TH1 with NetworkingStatus field as NetworkIDNotFound which is '3'"
                ]
            }
        },
        {
            "Test Case Name": "19.2.14. [TC-CNET-4.16] [Thread] NetworkIDNotFound returned in LastNetworkingStatus field validation [DUT-Server]",
            "Test Case ID": "TC-CNET-4.16",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that DUT responds with LastNetworkingStatus field set to NetworkIDNotFound for the following commands when the NetworkID does not exist:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.9.7.111.9.7.2",
                    "11.8.8.811.8.8.9",
                    "11.8.8.1011.8.8.9"
                ],
                "PICS": [
                    "",
                    "CNET.S.C04.Rsp(RemoveNetwork)CNET.S.C05.Tx(NetworkConfigResponse)",
                    "CNET.S.C06.Rsp(ConnectNetwork)CNET.S.C07.Tx(ConnectNetworkResponse)"
                ],
                "Test Step": [
                    "TH sends ArmFailSafe command to the DUT with the ExpiryLengthSeconds field set to 900",
                    "TH sends RemoveNetwork Command to the DUT with NetworkID field set to the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET, which does not match the commissioned network, and Breadcrumb field set to 1",
                    "TH sends ConnectNetwork Command to the DUT with NetworkID value as the extended PAN ID of PIXIT.CNET.THREAD_2ND_OPERATIONALDATASET, which does not match the commissioned network, and Breadcrumb field set to 1"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ArmFailSafeResponse command to the TH",
                    "Verify that DUT sends NetworkConfigResponse command to the TH1 with NetworkingStatus field set to NetworkIDNotFound which is '3'",
                    "Verify that DUT sends ConnectNetworkResponse command to the TH1 with NetworkingStatus field set to NetworkIDNotFound which is '3'"
                ]
            }
        },
        {
            "Test Case Name": "19.2.15. [TC-CNET-4.22] [Thread] Verification for ScanNetworks command [DUT-Server]",
            "Test Case ID": "TC-CNET-4.22",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verification of ScanNetworks command for listing all available Thread networks within the range",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "11.8.8.211.8.8.3",
                    "11.8.8.2",
                    "",
                    "11.8.8.2",
                    "",
                    "11.8.8.2"
                ],
                "PICS": [
                    "CNET.S.C00.Rsp(ScanNetworks)CNET.S.C01.Tx(ScanNetworksResponse)",
                    "",
                    "CNET.S.C00.Rsp(ScanNetworks)CNET.S.C01.Tx(ScanNetworksResponse)",
                    "",
                    "CNET.S.C00.Rsp(ScanNetworks)CNET.S.C01.Tx(ScanNetworksResponse)",
                    ""
                ],
                "Test Step": [
                    "TH sends ScanNetworks command to the DUT with the SSID field omitted and the Breadcrumb field set to 1",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ScanNetworks command to the DUT with the SSID field set to null and the Breadcrumb field set to 2",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster",
                    "TH sends ScanNetworks command to the DUT with the SSID field set to a random string of ASCII characters with a size of between 1 and 31 characters and the Breadcrumb field set to 3",
                    "TH reads Breadcrumb attribute from the General Commissioning Cluster"
                ],
                "Expected Outcome": [
                    "Verify that DUT sends ScanNetworksResponse command to the TH with the following fields:NetworkingStatus field value will be any one of the following values: Success, NetworkNotFound, OutOfRange, RegulatoryError, UnknownErrorDebugText is of type string with max length 512 or absentEach element in the ThreadScanResults list will have the following fields:PanId with a range of 0 to 65534ExtendedPanIdNetworkName is a string with a size of 1 to 16 bytesChannel is of type uint16 with a range 0 to 65535Version is a uint8ExtendedAddress is a hwaddr with a size of 8 bytesRSSI is an of type int8 with a range of -120 to 0LQI is a uint8",
                    "Verify that the Breadcrumb attribute is set to 1",
                    "Verify that DUT sends ScanNetworksResponse command to the TH with the following fields:NetworkingStatus is any one of the following values: Success, NetworkNotFound, OutOfRange, RegulatoryError, UnknownErrorDebugText is of type string with max length 512 or absentEach element in the ThreadScanResults list will have the following fields:PanId with a range of 0 to 65534ExtendedPanIdNetworkName is a string with a size of 1 to 16 bytesChannel is of type uint16 with a range 0 to 65535Version is a uint8ExtendedAddress is a hwaddr with a size of 8 bytesRSSI is an of type int8 with a range of -120 to 0LQI is a uint8",
                    "Verify that the Breadcrumb attribute is set to 2",
                    "Verify that DUT sends ScanNetworksResponse command to the TH with the following fields:NetworkingStatus is any one of the following values: Success, NetworkNotFound, OutOfRange, RegulatoryError, UnknownErrorDebugText is of type string with max length 512 or absentEach element in the ThreadScanResults list will have the following fields:PanId with a range of 0 to 65534ExtendedPanIdNetworkName is a string with a size of 1 to 16 bytesChannel is of type uint16 with a range 0 to 65535Version is a uint8ExtendedAddress is a hwaddr with a size of 8 bytesRSSI is an of type int8 with a range of -120 to 0LQI is a uint8",
                    "Verify that the Breadcrumb attribute is set to 3"
                ]
            }
        },
        {
            "Test Case Name": "19.3.1. [TC-CNET-4.20] [Wi-Fi] Verification for commands check  [DUT-Client]",
            "Test Case ID": "TC-CNET-4.20",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify the DUT is able to correctly send all commands to the TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "11.8.8.2",
                    "11.9.7.2",
                    "11.8.8.4",
                    "11.8.8.10",
                    "11.8.8.12",
                    "11.8.8.8"
                ],
                "PICS": [
                    "CNET.C.C00.Tx(ScanNetworks)",
                    "",
                    "CNET.C.C02.Tx(AddOrUpdateWiFiNetwork)",
                    "CNET.C.C06.Tx(ConnectNetwork)",
                    "CNET.C.C08.Tx(ReorderNetwork)",
                    "CNET.C.C04.Tx(RemoveNetwork)"
                ],
                "Test Step": [
                    "DUT sends the ScanNetwork command to the TH",
                    "DUT sends the ArmFailSafe command to the TH",
                    "DUT sends the AddOrUpdateWiFiNetwork command to the TH",
                    "DUT sends the ConnectNetwork command to the TH",
                    "DUT sends the ReorderNetwork command to the TH",
                    "DUT sends the RemoveNetwork command to the TH"
                ],
                "Expected Outcome": [
                    "TH receives the ScanNetwork command from the DUT",
                    "TH receives the ArmFailSafeResponse command from the DUT",
                    "TH receives the AddOrUpdateWiFiNetwork command from the DUT",
                    "TH receives the ConnectNetwork command from the DUT",
                    "TH receives the ReorderNetwork command from the DUT",
                    "TH receives the RemoveNetwork command from the DUT"
                ]
            }
        },
        {
            "Test Case Name": "19.3.2. [TC-CNET-4.21] [Thread] Verification for commands check  [DUT-Client]",
            "Test Case ID": "TC-CNET-4.21",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify the DUT is able to correctly send all commands to the TH",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "11.8.8.2",
                    "11.9.7.2",
                    "11.8.8.5",
                    "11.8.8.10",
                    "11.8.8.12",
                    "11.8.8.8"
                ],
                "PICS": [
                    "CNET.C.C00.Tx(ScanNetworks)",
                    "",
                    "CNET.C.C03.Tx(AddOrUpdateThreadNetwork)",
                    "CNET.C.C06.Tx(ConnectNetwork)",
                    "CNET.C.C08.Tx(ReorderNetwork)",
                    "CNET.C.C04.Tx(RemoveNetwork)"
                ],
                "Test Step": [
                    "DUT sends the ScanNetwork command to the TH",
                    "DUT sends the ArmFailSafe command to the TH",
                    "DUT sends the AddOrUpdateThreadNetwork command to the TH",
                    "DUT sends the ConnectNetwork command to the TH",
                    "DUT sends the ReorderNetwork command to the TH",
                    "DUT sends the RemoveNetwork command to the TH"
                ],
                "Expected Outcome": [
                    "If CNET.C.C00.Tx(ScanNetworks), TH receives the ScanNetwork command from the DUT",
                    "If CGEN.S.C00.Rsp(ArmFailSafe), TH receives the ArmFailSafeResponse command from the DUT",
                    "If CNET.C.C03.Tx(AddOrUpdateThreadNetwork), TH receives the AddOrUpdateThreadNetwork command from the DUT",
                    "If CNET.C.C06.Tx(ConnectNetwork), TH receives the ConnectNetwork command from the DUT",
                    "If CNET.C.C08.Tx(ReorderNetwork), TH receives the ReorderNetwork command from the DUT",
                    "If CNET.C.C04.Tx(RemoveNetwork),TH receives the RemoveNetwork command from the DUT"
                ]
            }
        }
    ],
    "Secure_Channel": [
        {
            "Test Case Name": "22.1.1. [TC-SC-1.1] MRP Max Message Size - REMOVED",
            "Test Case ID": "TC-SC-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT handles large messages as per the specification",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "4.4.4 (Message Size Requirements)",
                    "4.4.4"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a single message to DUT with a message sizeequal to1280 bytes inclusive of headers and reliability flag set to 1",
                    "TH sends a single message to DUT with a message sizelarger than1280 bytes and reliability flag set to 1"
                ],
                "Expected Outcome": [
                    "Verify DUT responds with an acknowledgement of receipt.",
                    "Verify that the DUT ignore the message and no response is sent."
                ]
            }
        },
        {
            "Test Case Name": "22.1.2. [TC-SC-1.2] MRP Message Flows - REMOVED",
            "Test Case ID": "TC-SC-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that MRP handles and processes messages accordingly with flags set in the message header.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "4.11.2.2, 4.11.5.1",
                    "4.11.2.2, 4.11.5.1",
                    "4.11.2.2, 4.11.5.1",
                    "4.11.2.2, 4.11.5.1",
                    "4.11.2.2, 4.11.5.1",
                    "4.11.2.2, 4.11.5.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a reliable (R flag set) MRP message to DUT that requires a data response.",
                    "DUT must respond to the message with a MRP reply packet that piggybacks the ACK(A flag set).",
                    "TH sends a reliable (R flag set) MRP message to DUT that doesn\u2019t require a data response.",
                    "DUT must respond to the message with an ACK message.",
                    "TH sends 5 unreliable (R flag not set) MRP messages to DUT that requires a data response.",
                    "DUT must respond to the message with a MRP reply packet that doesn\u2019t piggyback the ACK (A flag not set)."
                ],
                "Expected Outcome": [
                    "Verify that the DUT receives the message.",
                    "DUT should piggyback the ACKs of the message in the reply to TH.",
                    "DUT must receive the message.",
                    "DUT must sent only the ACK packet to TH.",
                    "DUT may receive the messages.",
                    "DUT should send only a MRP reply packet to TH with no ACK piggybacked or sent in a separate message."
                ]
            }
        },
        {
            "Test Case Name": "22.1.3. [TC-SC-1.3] MRP Retransmissions - REMOVED",
            "Test Case ID": "TC-SC-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the message is dropped after the max number of failed attempts",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "4.11.2.1",
                    "4.11.2.1",
                    "4.11.2.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Simulate TH to ignore all messages received by DUT (100% message loss)",
                    "DUT sends a message to TH with the R flag set to 1",
                    "DUT sends a retransmission of the message in step 2",
                    "DUT continues to send retransmissions of the message in step 2 up to MRP_MAX_TRANSMISSIONS times."
                ],
                "Expected Outcome": [
                    "",
                    "Verify that no reply is received by the DUT.",
                    "Verify that the message is sent after waiting for MRP_RETRY_INTERVAL_IDLE milliseconds.  Verify that no response is received by the DUT.",
                    "Verify that the DUT stops sending messages after a total of MRP_MAX_TRANSMISSIONS - 1 messages have been sent."
                ]
            }
        },
        {
            "Test Case Name": "22.1.4. [TC-SC-1.4] MRP message counter and duplicate messaging - REMOVED",
            "Test Case ID": "TC-SC-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that duplicate messages are discarded.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "4.11.2.3"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a message to DUT with the R flag set to 1.",
                    "TH sends a duplicate message to the DUT, with the R flag set to 1 and the same message counter as the message in step 1."
                ],
                "Expected Outcome": [
                    "Verify DUT responds with an acknowledgement message with the A flag set and the Acknowledged Message Counter field set to the Message Counter of the received message.",
                    "Verify DUT responds with an acknowledgement message with the A flag set and the Acknowledged Message Counter field set to the Message Counter of the received message.Verify that the DUT takes no further action on duplicate messages."
                ]
            }
        },
        {
            "Test Case Name": "22.2.1. [TC-SC-2.1] Session Establishment - Passcode Authenticated Session Establishment (PASE) - REMOVED",
            "Test Case ID": "TC-SC-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully establish a session using a passcode and Password Authenticated Key Agreement (PAKE), which for now is only used when commissioning a node.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2,3.5",
                    "4.13.1.2,3.5,3.3",
                    "4.13.1.2,3.3",
                    "4.13.1.2,4.9.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Initiator constructs and sends a TLV-encoded PBKDFParamRequest message",
                    "Responder verifies the passcodeID, constructs and sends a TLV-encoded PBKDFParamResponse message",
                    "Initiator constructs and sends a TLV-encoded Pake1 message",
                    "Responder constructs and sends a TLV-encoded Pake2 message",
                    "Initiator constructs and sends a TLV-encoded Pake3 message",
                    "Responder validates Pake3, then constructs and sends a status report (PakeFinished) message"
                ],
                "Expected Outcome": [
                    "Verify that the responder receives the PBKDFParamRequest message.Verify that the protocol header is properly constructed:Message Flags: S Flag is set to 0, and DSIZ field is set to 0Session ID is set to 0Security Flags: Session Type bits are set to 0Exchange Flags: I Flag is set to 1Protocol Opcode is set to 32 (0x20)Protocol ID is set to 0Verify, if possible in a debug mode, that the PBKDFParamRequest message contains:initiatorRandom  - randomly generated 32-bit octet stringinitiatorSessionId  - max size 16-bits unsigned integer that does not overlap with existing initiator session identifierspasscodeId  - max size 16-bits unsigned integerhasPBKDFParameters  - booleanIf hasPBKDFParameters is set to true then PBKDF parameters are not known for the given passcodeIdIf hasPBKDFParameters is set to false then PBKDF parameters are known for the given passcodeIdinitiatorSessionParams - optional session-parameter-struct which containsSESSION_IDLE_INTERVAL - max size 32-bits unsigned integerSESSION_ACTIVE_INTERVAL - max size 32-bits unsigned integerSESSION_ACTIVE_THRESHOLD - max size 16-bits unsigned integer",
                    "Verify that the Initiator receives the PBKDFParamResponse message.Verify that the protocol header is properly constructed:Message Flags: S Flag is set to 0, and DSIZ field is set to 0Session ID is set to 0Security Flags: Session Type bits are set to 0Exchange Flags: I Flag is set to 0Protocol Opcode is set to 33 (0x21)Protocol ID is set to 0Verify, if possible in a debug mode, that the PBKDFParamResponse message contains:initiatorRandom  - value from the PBKDFParamRequest messageresponderRandom  - randomly generated 32-bit octet stringresponderSessionId  - max size 16-bits unsigned integer that does not overlap with existing that does not overlap with existing responder session identifierspbkdf_parametersIf  hasPBKDFParameters from the PBKDFParamRequest message is true, then pbkdf_parameters should not be included.If  hasPBKDFParameters from the PBKDFParamRequest message is false, then PBKDFParameters should contain a + Crypto_PBKDFParameterSet struct with values for iterations (max size 32 bit unsigned integer) andsalt (octet string with a minimum of 16 bits and maximum of 32 bits)responderSessionParams - optional session-parameter-structSESSION_IDLE_INTERVAL - max size 32-bits unsigned integerSESSION_ACTIVE_INTERVAL - max size 32-bits unsigned integerSESSION_ACTIVE_THRESHOLD - max size 16-bits unsigned integer",
                    "Verify that the Responder receives the Pake1 message.Verify that the protocol header is properly constructed:1. Message Flags: S Flag is set to 0, and DSIZ field is set to 02. Session ID is set to 03. Security Flags: Session Type bits are set to 04. Exchange Flags: I Flag is set to 15. Protocol Opcode is set to 34 (0x22)6. Protocol ID is set to 0Verify, if possible in a debug mode, that the Pake1 message contains:1. pA - 65 bit octet string",
                    "Verify that the Initiator receives the Pake2 message.Verify that the protocol header is properly constructed:1. Message Flags: S Flag is set to 0, and DSIZ field is set to 02. Session ID is set to 03. Security Flags: Session Type bits are set to 04. Exchange Flags: I Flag is set to 05. Protocol Opcode is set to 35 (0x23)6. Protocol ID is set to 0Verify, if possible in a debug mode, that the Pake1 message contains:1. pB - 65 bit octet string2. cB - 32 bit octet string",
                    "Verify that the Responder receives the Pake3 message.Verify that the protocol header is properly constructed:1. Message Flags: S Flag is set to 0, and DSIZ field is set to 02. Session ID is set to 03. Security Flags: Session Type bits are set to 04. Exchange Flags: I Flag is set to 15. Protocol Opcode is set to 36 (0x24)6. Protocol ID is set to 0Verify, if possible in a debug mode, that the Pake3 message contains:1. cA - 32 bit octet string",
                    "Verify that the Initiator receives the status report/PakeFinished message.Verify that the status report contains:1. GeneralCode - SUCCESS (value 0)2. ProtocolId - SECURE_CHANNEL (value 0x0000)3. ProtocolCode - SESSION_ESTABLISHMENT_SUCCESS (value 0x0000)Verify that the initiator has not sent any encrypted data to the responder prior to receiving PakeFinished."
                ]
            }
        },
        {
            "Test Case Name": "22.2.2. [TC-SC-2.3] PASE Error Handling [DUT_Responder/Commissionee] - REMOVED",
            "Test Case ID": "TC-SC-2.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to error cases during PASE messaging",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "2c",
                    "2b",
                    "2e",
                    "2f"
                ],
                "Ref": [
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH generates and sends PBKDFParamRequest with an invalid passcodeID",
                    "DUT verifies the passcodeID.",
                    "TH generates and sends PBKDFParamRequest with a valid passcodeID",
                    "DUT verifies the passcodeID.",
                    "TH generates and sends Pake1",
                    "DUT generates and sends Pake2",
                    "TH generates and sends Pake3 with an invalid key confirmation message (cA)",
                    "DUT verifies Pake3.cA."
                ],
                "Expected Outcome": [
                    "Verify DUT receives the PBKDFParamRequest message.",
                    "Verify that the DUT fails verification of the passcodeID and sends a status report to the TH with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002). Verify that the DUT performs no further processing after sending the status report.",
                    "Verify DUT receives the PBKDFParamRequest message.",
                    "Verify that the DUT passes verification, then constructs and sends a PBKDFParamResponse message.  Verify that the TH receives the message.",
                    "Verify DUT receives the Pake1 message.",
                    "Verify TH receives the Pake2 message.",
                    "Verify DUT receives the Pake3 message.",
                    "Verify that the DUT fails verification and sends a status report to the TH with a FAILURE general code (value 1), protocol ID of SECURE_CHANNEL (0x0000), and Protocol code of INVALID_PARAMETER (0X0002). Verify that the DUT performs no further processing after sending the status report."
                ]
            }
        },
        {
            "Test Case Name": "22.2.3. [TC-SC-2.4] PASE Error Handling [DUT_Initiator/Commissioner] - REMOVED",
            "Test Case ID": "TC-SC-2.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can properly respond to error cases during PASE messaging",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2",
                    "4.13.1.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT generates and sends PBKDFParamRequest",
                    "TH generates and sends PBKDFParamResponse",
                    "DUT generates and sends Pake1",
                    "TH generates and sends Pake2 with an invalid key confirmation message (cB)",
                    "DUT verifies Pake2.cB."
                ],
                "Expected Outcome": [
                    "Verify TH receives the PBKDFParamRequest message.",
                    "Verify DUT receives the PBKDFParamResponse message.",
                    "Verify TH receives the Pake1 message.",
                    "Verify DUT receives the Pake2 message.",
                    "Verify that the DUT fails verification and sends a status report to the TH with aFAILUREgeneral code (value 1), protocol ID ofSECURE_CHANNEL(0x0000), and Protocol code ofINVALID_PARAMETER(0X0002). Verify that the DUT performs no further processing after sending the status report."
                ]
            }
        },
        {
            "Test Case Name": "22.3.1. [TC-SC-3.1] Session Establishment - REMOVED",
            "Test Case ID": "TC-SC-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the initiator and responder can establish a sessions to successfully send and receive encrypted messages",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.34.4.14.4.3.44.4.3.2",
                    "4.13.2.34.13.2.4",
                    "4.13.2.24.4.14.4.3.44.4.3.2",
                    "4.13.2.33.6.24.9.1.63.5.3.2",
                    "4.13.2.2",
                    "4.13.2.33.6.24.9.1.63.5.3.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH and the DUT are commissioned.",
                    "Send Read Request from Initiator (TH) to Responder (DUT)Note: Example for Read Request could be reading OnOff attribute value from OnOff Cluster",
                    "Initiator (TH) sends a Close Session message to the Responder (DUT)",
                    "Initiator (TH) triggers a CASE session resumption. This can be accomplished in the TH using a read attribute command, which will trigger a session resumption before reading since it has no active session.",
                    "Initiator constructs and sends a TLV-encoded Sigma1 message containing a random initiation value, destination identifier, session identifier, the public key for its ephemeral key pair, and optional MRP parameters and sends the message to the Responder.1. I Flag is set to 1 (Initiator)2. S flag and DSIZ fields of message flags are set to 0 (Source and Destination Node ID not present)3. The message payload follows the sigma-1-struct TLV encoding format4. The Session Type field is set to 0 (Unicast)5. The Protocol ID field is set to 0 (PROTOCOL_ID_SECURE_CHANNEL)6. Protocol Opcode field is set to 48 (0x30) (Case Sigma 1)",
                    "Upon receiving the Sigma1 message the responder proceeds to generate a Sigma 2 message.",
                    "",
                    "Initiator generates a shared secret, generates a S2K key, and decrypts and verifies the message data, node operational certificate (NOC),  and signature data.",
                    "Initiator constructs and sends a TLV-encoded Sigma3 message containing encrypted integrity data.1. I Flag is set to 1 (Initiator)2. S flag and DSIZ fields of message flags are set to 0 (Source and Destination Node ID not present)3. The message payload follows the sigma-3-struct TLV encoding format4. The Session Type field is set to 0 (Unicast)5. The Protocol ID field is set to 0 (PROTOCOL_ID_SECURE_CHANNEL)6.  Protocol Opcode field is set to 50 (0x32) (CASE Sigma3)the initiator moves to the next step to send a Sigma3 message to the Responder.",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "Verify that the responder sends response to Read Request.",
                    "",
                    "",
                    "",
                    "Verify that the Initiator receives Sigma2 message from the Responder.",
                    "Verify that the Sigma 2 message having the following values:1. I flag is set to 0 (Responder)2. S flag and DSIZ fields of message flags are set to 0 (Source and Destination Node ID not present)3. The message payload follows the sigma-2-struct TLV encoding format4. The Session Type field is set to 0 (Unicast)5. The Protocol ID field is set to 0 (PROTOCOL_ID_SECURE_CHANNEL)6. Protocol Opcode field is set to 49 (0x31) (CASE Sigma2)",
                    "",
                    "",
                    "Verify that the session is established and the responder sends a SigmaFinished StatusReport message with GeneralCodeSUCCESS, ProtocolIdPROTOCOL_ID_SECURE_CHANNEL, and ProtocolCodeSessionEstablishmentSuccess."
                ]
            }
        },
        {
            "Test Case Name": "22.3.2. [TC-SC-3.2] CASE Session Resumption [DUT_Responder]",
            "Test Case ID": "TC-SC-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the initiator and responder can successfully resume a CASE exchange",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "3",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Send Read Request from Initiator (TH) to Responder (DUT)Save the value as 'read response'Note: Example for Read Request could be reading OnOff attribute value from OnOff Cluster",
                    "Initiator (TH) sends a Close Session message to the Responder (DUT)",
                    "Initiator triggers a CASE session resumption. This can be accomplished in the TH using a read attribute command, which will automatically trigger a session resumption before reading since it has no active session.",
                    "Initiator constructs and sends a TLV-encoded Sigma1 message to Responder with resumption containinginitiatorRandominitiatorSessionIddestinationIdresumptionIDinitiatorResumeMICinitiatorEphPubKeyinitiatorSessionParams",
                    "Initiator receives the Sigma2_Resume message and extracts the following valuesresumptionIDresponderSessionIDsigma2ResumeMICresponderMRPParams",
                    "Initiator sends SigmaFinished message to Responder",
                    ""
                ],
                "Expected Outcome": [
                    "Verify that the responder sends response to Read Request.",
                    "",
                    "",
                    "Verify that Responder sends Sigma2_Resume message to Initiator",
                    "Verify that the message is properly formatted:I Flag is set to 0S flag and DSIZ fields of message flags are set to 0The Session Key Type field is set to 0The Protocol ID field is set to 0x0000 andThe Protocol Opcode field is set to 0x33Verify that the resumptionID is of Octet String maximum of length 16 bytesVerify that the responderSessionID is of uint16Verify that the sigma2ResumeMIC is of Octet String maximum of length 16 bytes",
                    "",
                    "Verify that the responder sends response to Read Request with the value that is same as 'read response'"
                ]
            }
        },
        {
            "Test Case Name": "22.3.3. [TC-SC-3.3] CASE Session Resumption [DUT_Initiator] - REMOVED",
            "Test Case ID": "TC-SC-3.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the Initiator and Responder can successfully resume a CASE exchange",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2a",
                    "2b",
                    "2c",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "4.13.2.2",
                    "4.13.2.2",
                    "4.13.2.2",
                    "",
                    "4.13.2.2,\n4.13.2.3,\n4.11.8",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Send Read Request from Initiator to ResponderNote: Example for Read Request could be reading OnOff attribute value from OnOff Cluster",
                    "Send a Close Session message from the Initiator to the Responder",
                    "Send Read Request from Initiator to Responder",
                    "",
                    "Responder receives the Sigma1 message and extracts the followinginitiatorRandominitiatorSessionIddestinationIdresumptionIDinitiatorResumeMICinitiatorEphPubKeyinitiatorSessionParams",
                    "Responder sends a TLV-encoded Sigma2_Resume message to Initiator containingresumptionIDresponderSessionIDsigma2ResumeMICresponderMRPParams",
                    "Responder receives the SigmaFinished message and extracts the followingProtocolIdProtocolCode",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the Initiator sends the Sigma1 message to Responder",
                    "Verify that the message is properly formatted:I Flag is set to 1S flag and DSIZ fields of message flags are set to 0The Session Key Type field is set to 0The Protocol ID field is set to 0x0000 andThe Protocol Opcode field is set to 0x30Verify that the initiatorRandom is of Octet String maximum of length 32 bytesVerify that the initiatorSessionId is of uint16Verify that the destinationId is of Octet stringVerify that the resumptionID from the Initiator matches with the preconditionVerify that the resumptionID is of Octet String maximum of length 16 bytesVerify that the initiatorEphPubKey is of Octet stringVerify that the initiatorResumeMIC is of Octet stringVerify that the responderSessionParams is from any one of the following:SESSION_IDLE_INTERVALVerify that it is of uint32SESSION_ACTIVE_INTERVALVerify that it is of uint32SESSION_ACTIVE_THRESHOLDVerify that it is of uint16",
                    "Verify that the Initiator sends a SigmaFinished message to Responder",
                    "Verify that the SigmaFinished Status report with the followingGeneralCode as SUCCESSProtocolId as SECURE_CHANNELProtocolCode as SESSION_ESTABLISHMENT_SUCCESS",
                    "Verify that Responder receives the Read Request Message sent from the Initiator"
                ]
            }
        },
        {
            "Test Case Name": "22.3.4. [TC-SC-3.4] CASE Error Handling [DUT_Responder] - REMOVED",
            "Test Case ID": "TC-SC-3.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can handle CASE error scenarios as a responder",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "4e",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "5e",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "6e",
                    "7a",
                    "7b",
                    "7c",
                    "7d",
                    "7e",
                    "8a",
                    "8b",
                    "8c",
                    "8d",
                    "8e",
                    "9a",
                    "9b",
                    "9c",
                    "9d",
                    "9e"
                ],
                "Ref": [
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH constructs and sends a Sigma1 message with aresumptionIDand noinitiatorResumeMICto DUT",
                    "",
                    "TH constructs and sends a Sigma1 message with ainitiatorResumeMICand noresumptionIDto DUT",
                    "",
                    "TH constructs and sends a Sigma1 message with an invaliddestinationIdto DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with improperly generated encrypted integrity data (TBEData3Encrypted) to DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with invalid initiatorNOC data to DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with invalid signature data to DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with invalid initiatorICAC to DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with invalid initiatorEphPubKey to DUT",
                    "",
                    "TH constructs and sends a properly formatted and encoded Sigma1 message to DUT",
                    "",
                    "",
                    "TH constructs and sends a Sigma3 message with invalid  responderEphPubKey to DUT",
                    ""
                ],
                "Expected Outcome": [
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code , Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002).Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002).Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofNO_SHARED_TRUST_ROOTS(0X0001).Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report.",
                    "Verify that the DUT receives the message.",
                    "DUT sends a Sigma2 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code, Protocol ID ofSECURE_CHANNEL(0x0000), and Protocol Code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report."
                ]
            }
        },
        {
            "Test Case Name": "22.3.5. [TC-SC-3.5] CASE Error Handling [DUT_Initiator] - REMOVED",
            "Test Case ID": "TC-SC-3.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can handle CASE error scenarios as a initiator",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d"
                ],
                "Ref": [
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3",
                    "4.13.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "",
                    "",
                    "TH verifies Sigma1, then constructs and sends a Sigma2 message with improperly formatted encrypted data (TBEData2Encrypted) to DUT",
                    "",
                    "",
                    "",
                    "TH verifies Sigma1, then constructs and sends a Sigma2 message with invalid responderNOC data to DUT",
                    "",
                    "",
                    "",
                    "TH verifies Sigma1, then constructs and sends a Sigma2 message with invalid signature data to DUT",
                    "",
                    "",
                    "",
                    "TH verifies Sigma1, then constructs and sends a Sigma2 message with invalid responderICAC data to DUT",
                    ""
                ],
                "Expected Outcome": [
                    "DUT constructs and sends a Sigma1 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT  sends a status report to the TH with aFAILUREgeneral code (value 1), protocol ID ofSECURE_CHANNEL(0x0000), and Protocol code ofINVALID_PARAMETER(0X0002).Verify that the DUT performs no further processing after sending the status report.",
                    "DUT constructs and sends a Sigma1 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code (value 1), protocol ID ofSECURE_CHANNEL(0x0000), and Protocol code ofINVALID_PARAMETER(0X0002).Verify that the DUT performs no further processing after sending the status report.",
                    "DUT constructs and sends a Sigma1 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code (value 1), protocol ID ofSECURE_CHANNEL(0x0000), and Protocol code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report",
                    "DUT constructs and sends a Sigma1 message to TH",
                    "Verify that the TH receives the message.",
                    "Verify that the DUT receives the message.",
                    "Verify that the DUT sends a status report to the TH with aFAILUREgeneral code (value 1), protocol ID ofSECURE_CHANNEL(0x0000), and Protocol code ofINVALID_PARAMETER(0X0002)Verify that the DUT performs no further processing after sending the status report"
                ]
            }
        },
        {
            "Test Case Name": "22.3.6. [TC-SC-3.6] CASE Resource validation",
            "Test Case ID": "TC-SC-3.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT is able to handle at least three CASE sessions.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "RD1X, RD2X, RD3X, RD4X, RD5X each send 1 Subscribe Request Messages to DUT.(Total - 15 active subscriptions)They can subscribe to any attribute.\nOnce all subscriptions are active, change the value of the attribute that has been subscribed to"
                ],
                "Expected Outcome": [
                    "Verify that all subscribers get data reports.\nVerify on each of these Reference Devices that the appropriate attribute value has been received."
                ]
            }
        },
        {
            "Test Case Name": "22.4.1. [TC-SC-4.1] Commissionable Node Discovery [DUT as Commissionee]",
            "Test Case ID": "TC-SC-4.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a device is able to correctly advertise Commissionable Node Discovery service.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "",
                    "4.3.1.3",
                    "",
                    "4.3.1.3\n4.3.1.1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "MCORE.COM.WIFIMCORE.COM.ETHMCORE.COM.THRMCORE.ICDMCORE.SC.VENDOR_SUBTYPE\nMCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.SII_OP_DISCOVERY_KEY\nMCORE.SC.SAI_OP_DISCOVERY_KEY\nMCORE.SC.SAT_OP_DISCOVERY_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY\nMCORE.SC.RI_KEY\nMCORE.SC.PH_KEY\nMCORE.SC.PI_KEY",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "MCORE.COM.WIFIMCORE.COM.ETHMCORE.COM.THRMCORE.ICDMCORE.SC.VENDOR_SUBTYPE\nMCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.SII_OP_DISCOVERY_KEY\nMCORE.SC.SAI_OP_DISCOVERY_KEY\nMCORE.SC.SAT_OP_DISCOVERY_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY\nMCORE.SC.RI_KEY\nMCORE.SC.PH_KEY\nMCORE.SC.PI_KEY",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "MCORE.COM.WIFIMCORE.COM.ETHMCORE.COM.THRMCORE.ICDMCORE.SC.VENDOR_SUBTYPE\nMCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.SII_OP_DISCOVERY_KEY\nMCORE.SC.SAI_OP_DISCOVERY_KEY\nMCORE.SC.SAT_OP_DISCOVERY_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY\nMCORE.SC.RI_KEY\nMCORE.SC.PH_KEY\nMCORE.SC.PI_KEY",
                    "",
                    "MCORE.SC.EXTENDED_DISCOVERY",
                    "MCORE.SC.EXTENDED_DISCOVERY\nMCORE.COM.WIFIMCORE.COM.ETHMCORE.COM.THRMCORE.ICDMCORE.SC.VENDOR_SUBTYPE\nMCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.SII_OP_DISCOVERY_KEY\nMCORE.SC.SAI_OP_DISCOVERY_KEY\nMCORE.SC.SAT_OP_DISCOVERY_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY\nMCORE.SC.RI_KEY\nMCORE.SC.PH_KEY\nMCORE.SC.PI_KEY"
                ],
                "Test Step": [
                    "DUT is Commissioned and put in Commissioning Mode using Open Basic Commissioning Window command and starts advertising Commissionable Node Discovery service using DNS-SD",
                    "- If MCORE.ICD and ICDM.S.A0002(ActiveModeThreshold), TH reads from the DUT theActiveModeThresholdattribute.- Check DNS-SD subtypes used by DUT",
                    "DUT is rebooted, then put in Commissioning Mode using Open Basic Commissioning Window command, starting advertising Commissionable Node Discovery service using DNS-SD",
                    "- If MCORE.ICD and ICDM.S.A0002(ActiveModeThreshold), TH reads from the DUT theActiveModeThresholdattribute.- Check DNS-SD subtypes used by DUT",
                    "Wait for OpenBasicCommissioningWindow timeout to expire",
                    "DUT is Commissioned and instructed to enter in commissioning mode using Open Commissioning Window command",
                    "Check DNS-SD subtypes used by DUT",
                    "Wait for OCW timeout to expire",
                    "If (MCORE.SC.EXTENDED_DISCOVERY ) enable Extended Discovery",
                    "If (MCORE.SC.EXTENDED_DISCOVERY ),- If MCORE.ICD and ICDM.S.A0002(ActiveModeThreshold), TH reads from the DUT theActiveModeThresholdattribute.- check DNS-SD subtypes used by DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Check DUT advertising for:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters- service type must be _matterc._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- IF (MCORE.COM.WIFI) OR (MCORE.COM.ETH) target hostname is derived from the 48bit or 64bit MAC address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- IF (MCORE.COM.THR) target hostname is derived from the 48bit or 64bit MAC extended address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- subtype _L<dddd> 12-bit long discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- subtype _S<dd> 4-bit short discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- if (MCORE.SC.VENDOR_SUBTYPE) present, subtype _V<ddddd> is present must be 16-bit vendor id, encoded as a variable-length decimal number\nin ASCII text, omitting any leading zeros- if (MCORE.SC.DEVTYPE_SUBTYPE) present, subtype _T<ddd> is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII without leading zeros- subtype _CM must be present- key D must be present and represents the discriminator which must be encoded as a variable-length decimal value with up to 4 digits omitting any leading zeros- if (MCORE.SC.VP_KEY) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.SII_OP_DISCOVERY_KEY) present, SII key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAI_OP_DISCOVERY_KEY ) present, SAI key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and !MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds) and must be encoded as a decimal value omitting any leading zeros. if key is not\navailable or has an invalid value, the default SESSION_ACTIVE_THRESHOLD value shall be used- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds), must be encoded as a decimal value omitting any leading zeros, and equal to ICDM.S.A0002(ActiveModeThreshold)- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) presents, key SAI shall be present.- key CM=1 must be present- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B- if (MCORE.SC.RI_KEY ) present, key RI must include the Rotating Device Identifier encoded as a uppercase string with a maximum length of 100 chars (each octet encoded as a 2-digit hex number, max 50 octets)- if (MCORE.SC.PH_KEY) present, key PH must be encoded as a variable-length decimal number in ASCII text, omitting any leading zeros. If present value must be different of 0- if (MCORE.SC.PI_KEY) present, key PI must be encoded as a valid UTF-8 string with a maximum length of 128 bytesDUT must publish AAAA records for each IPv6 address upon which they are willing to accept Matter messages.",
                    "",
                    "Check DUT advertising for:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters and must be different from the one at step 2- service type must be _matterc._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- IF (MCORE.COM.WIFI) OR (MCORE.COM.ETH) target hostname is derived from the 48bit or 64bit MAC address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- IF (MCORE.COM.THR) target hostname is derived from the 48bit or 64bit MAC extended address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- subtype _L<dddd> 12-bit long discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- subtype _S<dd> 4-bit short discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- if (MCORE.SC.VENDOR_SUBTYPE ) present, subtype _V<ddddd> is present must be 16-bit vendor id, encoded as a variable-length decimal number\nin ASCII text, omitting any leading zeros- if (MCORE.SC.DEVTYPE_SUBTYPE) present, subtype _T<ddd> is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII  without leading zeros- subtype _CM is present- key D must be present and represents the discriminator which must be encoded as a variable-length decimal value with up to 4 digits omitting any leading zeros- if (MCORE.SC.VP_KEY) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.SII_OP_DISCOVERY_KEY ) present, SII key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAI_OP_DISCOVERY_KEY) present, SAI key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and !MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds) and must be encoded as a decimal value omitting any leading zeros. if key is not\navailable or has an invalid value, the default SESSION_ACTIVE_THRESHOLD value shall be used- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds), must be encoded as a decimal value omitting any leading zeros, and equal to ICDM.S.A0002(ActiveModeThreshold)- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) presents, key SAI shall be present.- key CM=1 must be present- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B- if (MCORE.SC.RI_KEY) present, key RI must include the Rotating Device Identifier encoded as a uppercase string with a maximum length of 100 chars (each octet encoded as a 2-digit hex number, max 50 octets)- if (MCORE.SC.PH_KEY) present, key PH must be encoded as a variable-length decimal number in ASCII text, omitting any leading zeros. If present value must be different of 0- if (MCORE.SC.PI_KEY) present, key PI must be encoded as a valid UTF-8 string with a maximum length of 128 bytesDUT must publish AAAA records for each IPv6 address upon which they are willing to accept Matter messages.",
                    "DUT should stop sending DNS-SD advertisements",
                    "DUT should start to send Commissionable Node Discovery DNS-SD advertisements",
                    "Check DUT advertising for:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters- service type must be _matterc._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- IF (MCORE.COM.WIFI) OR (MCORE.COM.ETH) target hostname is derived from the 48bit or 64bit MAC address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- IF (MCORE.COM.THR) target hostname is derived from the 48bit or 64bit MAC extended address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- subtype _L<dddd> 12-bit long discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- subtype _S<dd> 4-bit short discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- if (MCORE.SC.VENDOR_SUBTYPE) present, subtype _V<ddddd> is present must be 16-bit vendor id, encoded as a variable-length decimal number\nin ASCII text, omitting any leading zeros- if (MCORE.SC.DEVTYPE_SUBTYPE) present, subtype _T<ddd> is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII  without leading zeros- subtype _CM is present- key D must be present and represents the discriminator which must be encoded as a variable-length decimal value with up to 4 digits omitting any leading zeros- if (MCORE.SC.VP_KEY ) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.SII_OP_DISCOVERY_KEY) present, SII key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAI_OP_DISCOVERY_KEY) present, SAI key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and !MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds) and must be encoded as a decimal value omitting any leading zeros. if key is not\navailable or has an invalid value, the default SESSION_ACTIVE_THRESHOLD value shall be used- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds), must be encoded as a decimal value omitting any leading zeros, and equal to ICDM.S.A0002(ActiveModeThreshold)- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) presents, key SAI shall be present.- key CM=2 must be present- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B- if (MCORE.SC.RI_KEY) present, key RI must include the Rotating Device Identifier encoded as a uppercase string with a maximum length of 100 chars (each octet encoded as a 2-digit hex number, max 50 octets)- if (MCORE.SC.PH_KEY) present, key PH must be encoded as a variable-length decimal number in ASCII text, omitting any leading zeros. If present value must be different of 0- if (MCORE.SC.PI_KEY) present, key PI must be encoded as a valid UTF-8 string with a maximum length of 128 bytesDUT must publish AAAA records for each IPv6 address upon which they are willing to accept Matter messages.",
                    "DUT should stop sending DNS-SD advertisements",
                    "DUT should start to send Commissionable Node Discovery DNS-SD advertisements",
                    "Check DUT advertising for:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters- service type must be _matterc._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- IF (MCORE.COM.WIFI) OR (MCORE.COM.ETH) target hostname is derived from the 48bit or 64bit MAC address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- IF (MCORE.COM.THR) target hostname is derived from the 48bit or 64bit MAC extended address expressed as a twelve or sixteen capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- subtype _L<dddd> 12-bit long discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- subtype _S<dd> 4-bit short discriminator, encoded as a variable-length decimal number in ASCII text, omitting any leading zeros- if (MCORE.SC.VENDOR_SUBTYPE ) present, subtype _V<ddddd> is present must be 16-bit vendor id, encoded as a variable-length decimal number\nin ASCII text, omitting any leading zeros- if (MCORE.SC.DEVTYPE_SUBTYPE) present, subtype _T<ddd> is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII  without leading zeros- subtype _CM must not be present- key D must be present and represents the discriminator which must be encoded as a variable-length decimal value with up to 4 digits omitting any leading zeros- if (MCORE.SC.VP_KEY) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.SII_OP_DISCOVERY_KEY) present, SII key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAI_OP_DISCOVERY_KEY) present, SAI key must be an unsigned integer with units of milliseconds and shall be encoded as a variable length decimal number in ASCII, omitting leading zeros. Shall not exceed 3600000.- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and !MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds) and must be encoded as a decimal value omitting any leading zeros. if key is not\navailable or has an invalid value, the default SESSION_ACTIVE_THRESHOLD value shall be used- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) and MCORE.ICD, key SAT shall not exceed 65535 (65.535 seconds), must be encoded as a decimal value omitting any leading zeros, and equal to ICDM.S.A0002(ActiveModeThreshold)- if (MCORE.SC.SAT_OP_DISCOVERY_KEY) presents, key SAI shall be present.- key CM=0 may be present- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B- if (MCORE.SC.RI_KEY) present, key RI must include the Rotating Device Identifier encoded as a uppercase string with a maximum length of 100 chars (each octet encoded as a 2-digit hex number, max 50 octets)- if (MCORE.SC.PH_KEY) present, key PH must be encoded as a variable-length decimal number in ASCII text, omitting any leading zeros. If present value must be different of 0- if (MCORE.SC.PI_KEY) present, key PI must be encoded as a valid UTF-8 string with a maximum length of 128 bytes"
                ]
            }
        },
        {
            "Test Case Name": "22.4.2. [TC-SC-4.2] Discovery [DUT as Commissioner]",
            "Test Case ID": "TC-SC-4.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a commissioner is able to discover a node that announce Commissionable Node Discovery service.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "By any means, TH adds an unknown key/value pair in the advertised data(e.g. AB=12345) and is in Commissioning Mode",
                    "DUT attempts to commission TH"
                ],
                "Expected Outcome": [
                    "TH must advertise with new data added",
                    "DUT successfully commissions TH and the unknown key/value pair added at step 1 must be silently discarded"
                ]
            }
        },
        {
            "Test Case Name": "22.4.3. [TC-SC-4.3] Discovery [DUT as Commissionee]",
            "Test Case ID": "TC-SC-4.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a Matter node is discoverable and can advertise its services in a Matter network.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "C.9.17",
                    "C.9.17",
                    "C.9.17",
                    "C.4.3.2",
                    "C.4.3.2",
                    "C.4.3.2",
                    "C.4.3.2",
                    "C.4.3.2",
                    "C.4.3.2",
                    "C.4.3.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT is commissioned on the same fabric as TH",
                    "TH reads from the DUT theServerListattribute from the Descriptor cluster on EP0. If the ICD Management cluster ID (70,0x46) is present in the list, setsupports_icdto true, otherwise setsupports_icdto false.",
                    "Ifsupports_icdis true, TH reads from the DUT theActiveModeThresholdfrom the ICD Management cluster on EP0 and saves asactive_mode_threshold",
                    "Ifsupports_icdis true, TH reads from the DUT theFeatureMapfrom the ICD Management cluster on EP0. If the LITS feature is set, setsupports_litto true. Otherwise setsupports_litto false.",
                    "TH constructs the instance name for the DUT as the 64-bit compressed Fabric identifier, and the assigned 64-bit Node identifier, each expressed as a fixed-length sixteen-character hexadecimal string, encoded as ASCII (UTF-8) text using capital letters, separated by a hyphen. For example, a Matter Node with Matter compressed fabric identifier 2906-C908-D115-D362 and Matter Node identifier 8FC7-7724-01CD-0696 has Matter operational discovery DNS\u2011SD instance name 2906C908D115D362-8FC7772401CD0696. Save the operational instance name as 'instance_name'. TH constructs the instance qname asinstance_name._matter._tcp.local and saves asinstance_qname",
                    "TH performs a query for the SRV record against the qnameinstance_qname",
                    "TH performs a query for the TXT record against the qnameinstance_qname",
                    "TH performs a query for the AAAA record against the target listed in the SRV record",
                    "TH verifies the following from the returned records:",
                    "TH performs a DNS-SD browse for _I<hhhh>._sub._matter._tcp.local, where <hhhh> is the 64-bit compressed Fabric identifier, expressed as a fixed-length, sixteen-character hexadecimal string, encoded as ASCII (UTF-8) text using capital letters.",
                    "TH performs a DNS-SD browse for _matter._tcp.local"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify SRV record is returned",
                    "Verify TXT record is returned",
                    "Verify AAAA record is returned",
                    "Hostname:If (MCORE.COM.WIFI OR MCORE.COM.ETH) target, the hostname must be a 12-character uppercase hexadecimal string.If (MCORE.COM.THR) target, the hostname must be a 16-character hex string using capital letters.ICD TXT key:Ifsupports_litis false, verify that theICDkey is NOT present in the TXT recordIfsupports_litis true, verify theICDkey IS present in the TXT record, and it has the value of0or1(ASCII)SII TXT key:Ifsupports_icdis true andsupports_litis false, setsit_modeto trueIfsupports_icdis true andsupports_litis true, setsit_modeto true if ICD=0 otherwise setsit_modeto falseIfsupports_icdis false, setsit_modeto falseIfsit_modeis true, verify that the SII key IS present in the TXT recordif the SII key is present, verify it is a decimal value with no leading zeros and is less than or equal to 3600000 (1h in ms)SAI TXT key:ifsupports_icdis true, verify that the SAI key is present in the TXT recordIf the SAI key is present,  verify it is a decimal value with no leading zeros and is less than or equal to 3600000 (1h in ms)SAT TXT key:If the SAT key is present, verify that it is a decimal value with no leading zeros and is less than or equal to 65535If the SAT key is present andsupports_icdis true, verify that the value is equal toactive_mode_thresholdT TXT key:If the T key is present, verify if that it is 0.AAAA:Verify the AAAA record contains at least one IPv6 address",
                    "Verify DUT returns a PTR record with DNS-SD instance name setinstance_name",
                    "Verify DUT returns a PTR record with DNS-SD instance name setinstance_name"
                ]
            }
        },
        {
            "Test Case Name": "22.4.4. [TC-SC-4.4] Discovery [DUT as Controller]",
            "Test Case ID": "TC-SC-4.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a Matter controller is able to discover the IP address of nodes that interacted with.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "4.3.2.1",
                    "4.3.2.6",
                    "4.3.2.6",
                    "4.3.2.6"
                ],
                "PICS": [
                    "",
                    "BINFO.C.A0002(VendorID)",
                    "",
                    "BINFO.C.A0002(VendorID)"
                ],
                "Test Step": [
                    "TH starts commissioning process with DUT",
                    "DUT reads Vendor Id attribute from TH",
                    "Change the IP address of TH by any means within the same network",
                    "DUT reads Vendor Id attribute from TH"
                ],
                "Expected Outcome": [
                    "TH is commissioned by DUT",
                    "Verify TH receives the read command and shows Vendor Id value",
                    "",
                    "Verify TH receives the read command and shows Vendor Id value"
                ]
            }
        },
        {
            "Test Case Name": "22.4.5. [TC-SC-4.6]Commissioner Discovery [DUT as Commissioner]",
            "Test Case ID": "TC-SC-4.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a device that support Commissioner Discovery is able to advertise its commissioner service. This feature is optional for both Commissioner and Commissionee and must be run only if the device have support for this.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    "4.3.3-1"
                ],
                "PICS": [
                    "",
                    "MCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY"
                ],
                "Test Step": [
                    "DUT is instructed to start advertising its presence as a commissioner in the network",
                    "Check DNS-SD subtypes used by DUT"
                ],
                "Expected Outcome": [
                    "",
                    "DUT must publish AAAA records for each IPv6 address with the following:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters- service type must be _matterd._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- if (MCORE.SC.DEVTYPE_SUBTYPE) present, _T<ddd> subtype is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII  without leading zeros.- target hostname is derived from the 48bit MAC address expressed as a twelve capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- if (MCORE.SC.VP_KEY) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B"
                ]
            }
        },
        {
            "Test Case Name": "22.4.6. [TC-SC-4.7] Commissioner Discovery [DUT as Commissionee]",
            "Test Case ID": "TC-SC-4.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "The purpose of this test case is to verify that a device that is already connected to an IP network is able to discover a commissioner. This feature is optional for both Commissioner and Commissionee and must be run only if the device have support for this.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "4.3.3-1",
                    ""
                ],
                "PICS": [
                    "",
                    "MCORE.SC.DEVTYPE_SUBTYPE\nMCORE.SC.VP_KEY\nMCORE.SC.DT_KEY\nMCORE.SC.DN_KEY",
                    ""
                ],
                "Test Step": [
                    "TH is instructed to start advertising its presence as a commissioner in the network",
                    "Scan for DNS-SD commissioner advertisements from TH",
                    "Scan for DNS-SD commissioner advertisements from TH"
                ],
                "Expected Outcome": [
                    "",
                    "TH must publish AAAA records for each IPv6 address with the following:- DNS-SD instance name must be 64-bit randomly selected ID expressed as a sixteen-char hex string with capital letters- service type must be _matterd._udp- service domain is .local. For Unicast DNS such as used on Thread the service domain SHALL be as configured automatically by the Thread Border Router- if (MCORE.SC.DEVTYPE_SUBTYPE) present, _T<ddd> subtype is present, <ddd> represents device type from Data Model and must be represented as a variable length decimal number in ASCII  without leading zeros.- target hostname is derived from the 48bit MAC address expressed as a twelve capital letter hex string. If the MAC is randomized for privacy, the randomized version must be used each time.- if (MCORE.SC.VP_KEY ) present, VP key must contain at least Vendor ID and if Product ID is present, values must be separated by a + sign.- if (MCORE.SC.DT_KEY) present, DT key must contain the device type identifier from Data Model Device Types and must be encoded as a variable length decimal ASCII number without leading zeros- if (MCORE.SC.DN_KEY) present, DN key must be a UTF-8 encoded string with a maximum length of 32B",
                    "DUT is able to discover TH"
                ]
            }
        },
        {
            "Test Case Name": "22.4.7. [TC-SC-4.8] Compressed Fabric ID remains the same for Nodes commissioned to the same fabric [DUT as Commissioner]",
            "Test Case ID": "TC-SC-4.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case validates the following conditions:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission TH1 to DUT\u2019s Fabric",
                    "Commission TH2 to DUT\u2019s Fabric",
                    "Send RemoveFabric from DUT to TH1 and commission DUT to TH1 again",
                    "Send RemoveFabric from DUT to TH2 and commission DUT to TH2 again"
                ],
                "Expected Outcome": [
                    "Extract the Compressed\nFabric ID assigned from DUT to TH1 and save the value for future use",
                    "Extract the Compressed\nFabric ID assigned from DUT to TH2 and save the value for future useVerify that the value obtained from TH1 and TH2 are same",
                    "Extract the Compressed Fabric ID assigned from DUT to TH1 and verify it is same as the value obtained in Step1",
                    "Extract the Compressed Fabric ID assigned from DUT to TH2 and verify it is same as the value obtained in Step2"
                ]
            }
        },
        {
            "Test Case Name": "22.4.8. [TC-SC-4.9] Operational Discovery - RIO support [DUT as Commissionee]",
            "Test Case ID": "TC-SC-4.9",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case validates that RIO (Route Information Options) is properly processed by Matter nodes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "4.2.2",
                    "4.2.2",
                    "4.2.2"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Using TH_CR1, commission the DUT_CE onto the Matter network",
                    "Bring the TH_CR2 onto the thread network",
                    "Using TH_CR2, using ICMPv6 echo to ping with a payload >= 32 bytes to the the DUT_CE that is already commissioned to the Matter network. IP address is determined by operational discovery of the DNS-SD operational service record (_matter._tcp service instance) of DUT_CE done by TH_CR2."
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 and is assigned a node ID1, under TH_CR1\u2019s root of trust. Note the compressed fabric ID and node ID of DUT_CE post-commissioning for purposes of constructing an operational service instance name in step 3.",
                    "TH_CR2 is on a thread network whose BR is reachable to TH_CR1",
                    "Successful ping indicates DUT_CE is reachable from TH_CR2 and that it can route an echo response via a border router back to TH_CR2, which is only possible if a preferred route for the destination was properly handled by DUT_CE by processing of a Route Information Option within a Router Advertisement previously sent by BR."
                ]
            }
        }
    ],
    "Group_Communication": [
        {
            "Test Case Name": "26.2.1. [TC-GRPKEY-2.1] Attributes [DUT-Server]",
            "Test Case ID": "TC-GRPKEY-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the Group Key Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "CoreSpec-11.2.6.1",
                    "CoreSpec-11.2.6.1",
                    "CoreSpec-11.2.6.1",
                    "11.2.6.2",
                    "CoreSpec-11.2.6.3",
                    "CoreSpec-11.2.6.4"
                ],
                "PICS": [
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "GRPKEY.S.A0001(GroupTable)",
                    "GRPKEY.S.A0002(MaxGroupsPerFabric)",
                    "GRPKEY.S.A0003(MaxGroupKeysPerFabric)"
                ],
                "Test Step": [
                    "TH reads GroupKeyMap attribute from DUT using a fabric-filtered read.",
                    "TH binds GroupId 0x0103 with GroupKeySetID 0x01a3 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with one entry as follows:List item 1:GroupId: 0x0103GroupKeySetId: 0x01a3",
                    "TH reads GroupKeyMap Attribute from the GroupKeyManagement cluster from DUT using a fabric-filtered read.",
                    "TH reads GroupTable attribute from GroupKeyManagement cluster on DUT.",
                    "TH reads MaxGroupsPerFabric attribute from GroupKeyManagement cluster on DUT.",
                    "TH reads MaxGroupKeysPerFabric attribute from GroupKeyManagement cluster on DUT."
                ],
                "Expected Outcome": [
                    "Verify that TH is able to read the GroupKeyMap attribute list successfully.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the returned list contains a a single list item with structure fields:GroupId: 0x0103GroupKeySetId: 0x01a3",
                    "Verify that TH is able to read the GroupTable attribute list successfully.",
                    "Verify the MaxGroupsPerFabric attribute, Value has to be between a range of [min=0, max=65535].",
                    "Verify that the value is within the range from 1 to 65535."
                ]
            }
        },
        {
            "Test Case Name": "26.2.2. [TC-GRPKEY-2.2] Primary functionality with DUT as Server",
            "Test Case ID": "TC-GRPKEY-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the primary functionality of the Group Key Management cluster server.\nThe test case verifies for the  DUT response when the below commands are sent with different EpochKey,EpochKeyStartTime and GroupKeySetID values covering negative checks.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "16a",
                    "16b",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26"
                ],
                "Ref": [
                    "1.3.6.1",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1."
                ],
                "PICS": [
                    "GRPKEY.S.A0003(MaxGroupKeysPerFabric)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C01.Rsp(KeySetRead),GRPKEY.S.C02.Tx(KeySetReadResponse)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C01.Rsp(KeySetRead)",
                    "GRPKEY.S.C01.Rsp(KeySetRead)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C04.Rsp(KeySetReadAllIndices),GRPKEY.S.C05.Tx(KeySetReadAllIndicesResponse)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)"
                ],
                "Test Step": [
                    "TH reads MaxGroupKeysPerFabric  attribute from GroupKeyManagement cluster on DUT. Save the value as Max_GrpKey for future use.",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:18446744073709551614",
                    "TH sends KeySetRead command to GroupKeyManagement cluster with GroupKeySetID as 0x01a",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: nullEpochStartTime1: nullEpochKey2: nullEpochStartTime2: nullNote: EpochKey1 and  EpochKey2 are null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: nullEpochStartTime2: nullNote: Only EpochKey2 is null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with command fields as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: nullEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:  18446744073709551614Note: EpochKey0 is null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:  d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: nullEpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:  18446744073709551614Note: EpochStartTime0 is null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 0EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:18446744073709551614Note:  EpochStartTime0 is set to 0",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: nullEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:18446744073709551614Note:  EpochKey1 is set to null and EpochStartTime1 is not null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: nullEpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:18446744073709551614Note:  EpochKey1 is not null and EpochStartTime1 is null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:   d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 18446744073709551613EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 1EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614Note: EpochStartTime1 is earlier than EpochStartTime0",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:  d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: nullEpochStartTime1: nullEpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2:  18446744073709551614Note: EpochKey1 and EpochStartTime1 are null when EpochKey2 and EpochStartTime2 are not null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:   d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: nullEpochStartTime2: 18446744073709551614Note:  EpochKey2 is set to null and EpochStartTime2 is not null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:   d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: nullNote:  EpochKey2 is not null and EpochStartTime2 is null",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:   d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 1Note: EpochStartTime2 is earlier than EpochStartTime1",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields are as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0:   d0EpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 1Note1: Repeat the step by sending EpochKey1 and  EpochKey2 with 1 byte value (< 16 bytes)",
                    "Repeat step16by sending KeySetWrite Command with EpochKey0, EpochKey1 and EpochKey2 having 15 bytes value (< 16 byte)",
                    "Repeat step16by sending KeySetWrite Command with EpochKey0, EpochKey1 and EpochKey2 having 17 bytes value (> 16 bytes)",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT on EP0 with GroupKeySet fields  as follows:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d3d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d4d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 17446744073709551613EpochKey2: d5d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 17446744073709551614Note: KeySetWrite command is sent with different EpochKeys,EpochStartTime1 and EpochStartTime2 values",
                    "TH sends KeySetRead command to GroupKeyManagement cluster with GroupKeySetID as 0x01a",
                    "TH sends KeySetRead command to GroupKeyManagement cluster with GroupKeySetID as 0x01b that does not exist in the GroupKeyMap attribute list.",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a.",
                    "TH sends KeySetWrite command to DUT until size of list for TH\u2019s fabric in GroupKeyMap attribute contains Max_GrpKey entries, starting with GroupKeySetID 1 and incrementing by 1 each time.",
                    "TH again sends KeySetWrite command to DUT with any other GroupKeySetID not used yet.",
                    "TH sends KeySetReadAllIndices command to DUT.",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x0",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01b that does not exist in the GroupKeyMap attribute list.",
                    "TH removes all the existing GroupKeySetID that were added in Step 21 by sending a KeySetRemove command starting from GroupKeySetID 1 to the GroupKeyManagement cluster"
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that EpochKey fields are replaced by null.Verify that EpochStartTime values matches the values sent in step 2Verify that the DUT sends a KeySetReadResponse with the GroupKeySet having the following fields:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: nullEpochStartTime0: 1EpochKey1: nullEpochStartTime1: 18446744073709551613EpochKey2: nullEpochStartTime2: 18446744073709551614",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status CONSTRAINT_ERROR(0x87)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that EpochStartTime values matches the values sent in the previous stepVerify that the DUT sends a KeySetReadResponse with the GroupKeySet having the following fields:GroupKeySetID: 0x01aGroupKeySecurityPolicy: TrustFirst (0)EpochKey0: nullEpochStartTime0: 1EpochKey1: nullEpochStartTime1: 17446744073709551613EpochKey2: nullEpochStartTime2: 17446744073709551614",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89)",
                    "Verify that DUT sends KeySetReadAllIndicesResponse Command with Max_GrpKey number of GroupKeySetID.",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b)",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "26.2.3. [TC-SC-5.1] Adding member to a group - TH as Admin and DUT as Group Member",
            "Test Case ID": "TC-SC-5.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that GroupKeySets and Groups can be added and removed from DUT",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5",
                    "6a",
                    "6b",
                    "7",
                    "8",
                    "9a",
                    "9b",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "CoreSpec-9.10.5.3",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "appclusters-1.3.7.5",
                    "appclusters-1.3.6.1",
                    "appclusters-1.3.7.2",
                    "appclusters-1.3.7.2",
                    "CoreSpec-11.2.5.2",
                    "",
                    "CoreSpec-11.2.7.3",
                    "CoreSpec-11.2.7.3",
                    "CoreSpec-11.2.9.4",
                    "CoreSpec-11.2.9.4",
                    "appclusters-1.3.7.5",
                    "CoreSpec-11.2.7.3",
                    "CoreSpec-9.10.5.3"
                ],
                "PICS": [
                    "",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C00.Rsp(AddGroup)",
                    "G.S.F00(GN),G.S.C01.Rsp(ViewGroup)",
                    "!G.S.F00(GN),G.S.C01.Rsp(ViewGroup)",
                    "GRPKEY.S.C01.Rsp(KeySetRead)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "G.S.F00(GN),GRPKEY.S.A0001(GroupTable)",
                    "!G.S.F00(GN),GRPKEY.S.A0001(GroupTable)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "GRPKEY.S.A0001(GroupTable)",
                    ""
                ],
                "Test Step": [
                    "TH writes the ACL attribute in the Access Control cluster to add Operate privileges for group 0x0103 and maintain the current administrative privileges for the TH. The following access control list shall be used:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: TH node id ([N1])Targets: all (null)List item 2 (group operate access):Privilege: Operate (3)AuthMode: Group (3)Subjects: group 0x0103 ([0x0103])Targets: all (null)",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is NOT installed on the TH. This is intended to test that the key set is correctly updated in the next step. GroupKeySet fields are as follows:GroupKeySetID: 0x01a3GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: 00000000000000000000000000000001EpochStartTime0: 111EpochKey1: 00000000000000000000000000000002EpochStartTime1: 222EpochKey2: 00000000000000000000000000000003EpochStartTime2: 333",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a3GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614",
                    "TH binds GroupId 0x0103 with GroupKeySetID 0x01a3 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with one entry as follows:List item 1:GroupId: 0x0103GroupKeySetId: 0x01a3",
                    "TH sends RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH sends AddGroup Command to DUT on PIXIT.G.ENDPOINT with the the following settingsGroupID: 0x0103GroupName: \"Test Group\"",
                    "TH sends ViewGroup command with the GroupID to the Group cluster on the DUT on PIXIT.G.ENDPOINT",
                    "TH sends ViewGroup command with the GroupID to the Group cluster on the DUT on PIXIT.G.ENDPOINT",
                    "TH sends KeySetRead command to GroupKeyManagement cluster with GroupKeySetID as 0x01a3",
                    "TH reads GroupKeyMap Attribute from the GroupKeyManagement cluster from DUT",
                    "TH reads GroupTable attribute from GroupKeyManagement cluster on DUT using a fabric-filtered read.",
                    "TH reads GroupTable attribute from GroupKeyManagement cluster on DUT using a fabric-filtered read.",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a3",
                    "TH verifies that the key set removal in step10also removed the corresponding entries in the GroupKeyMap by Reading the GroupKeyMap attribute from the GroupKeyManagement cluster using a fabric-filtered read.",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH reads verifies the group has been removed by reading the GroupTable attribute from GroupKeyManagement cluster on DUT using a fabric-filtered read.",
                    "TH writes the ACL attribute in the Access Control cluster to remove Operate privileges for group 0x0103 and maintain the current administrative privileges for the TH. The following access control list shall be used:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: TH node id ([N1])Targets: all (null)"
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends a AddGroupResponse with the Status set to SUCCESS and the GroupID set to 0x0103",
                    "Verify DUT sends a ViewGroupResponse command withStatus: SUCCESSGroupID: 0x0103GroupName: \"Test Group\"",
                    "Verify DUT sends a ViewGroupResponse command withStatus: SUCCESSGroupID: 0x0103GroupName: \"\"",
                    "Verify that the DUT sends a KeySetReadResponse with the GroupKeySet having the following fields:GroupKeySetID: 0x01a3GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: nullEpochStartTime0:1EpochKey1: nullEpochStartTime1:18446744073709551613EpochKey2: nullEpochStartTime2:18446744073709551614",
                    "Verify that the returned list contains a a single list item with structure fieldsGroupId: 0x0103GroupKeySetId: 0x01a3",
                    "Verify the returned list has a single item containing a GroupInfoMapStruct with:GroupId: 0x0103Endpoints: [PIXIT.G.ENDPOINT]GroupName: \"Test Group\"",
                    "Verify the returned list has a single item containing a GroupInfoMapStruct with:GroupId: 0x0103Endpoints: [PIXIT.G.ENDPOINT]GroupName: \"\"",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the returned list contains no items",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify the returned list is empty",
                    "Verify DUT responds w/ status SUCCESS(0x00)"
                ]
            }
        },
        {
            "Test Case Name": "26.2.4. [TC-SC-5.2] Receiving a group message - TH to DUT",
            "Test Case ID": "TC-SC-5.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that the DUT can receive group message sent by TH.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "CoreSpec-9.10.5.3",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "appclusters-1.3.7.5",
                    "appclusters-1.3.6.1",
                    "appclusters-1.3.6.1",
                    "appclusters-1.3.7.2",
                    "appclusters-1.3.7.2",
                    "appclusters-1.3.6.1",
                    "appclusters-1.3.7.2",
                    "CoreSpec-11.2.9.4",
                    "appclusters-1.3.7.5",
                    "CoreSpec-9.10.5.3"
                ],
                "PICS": [
                    "",
                    "GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.A0000(GroupKeyMap)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    "G.S.C00.Rsp(AddGroup)",
                    "G.S.C00.Rsp(AddGroup)",
                    "G.S.F00(GN), G.S.C01.Rsp(ViewGroup)",
                    "!G.S.F00(GN), G.S.C01.Rsp(ViewGroup)",
                    "G.S.C03.Rsp(RemoveGroup)",
                    "G.S.C01.Rsp(ViewGroup)",
                    "GRPKEY.S.C03.Rsp(KeySetRemove)",
                    "G.S.C04.Rsp(RemoveAllGroups)",
                    ""
                ],
                "Test Step": [
                    "TH writes the ACL attribute in the Access Control cluster to add Manage privileges for group 0x0103 and maintain the current administrative privileges for the TH. The following access control list shall be used:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: TH node id ([N1])Targets: all (null)List item 2 (group operate access):Privilege: Manage (4)AuthMode: Group (3)Subjects: group 0x0103 ([0x0103])Targets: all (null)",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a3GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0:1EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 18446744073709551613EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 18446744073709551614",
                    "TH binds GroupId 0x0103 and 0x0101 with GroupKeySetID 0x01a3 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with 2 entries as follows:List item 1:GroupId: 0x0103GroupKeySetId: 0x01a3List item 2:GroupId: 0x0101GroupKeySetId: 0x01a3",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH sends AddGroup Command to DUT on PIXIT.G.ENDPOINT with the the following settingsGroupID: 0x0103GroupName: \"Test Group 0103\"",
                    "TH sends a AddGroup Command to the Groups cluster with the GroupID field set to 0x0101 and the GroupName set to an \"Test Group 0101\". The command is sent as a group command using GroupID 0x0103",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0101 to confirm that the AddGroup command from step 6 was successful",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0101 to confirm that the AddGroup command from step 6 was successful",
                    "TH sends a RemoveGroup Command to the Groups cluster with the GroupID field set to 0x0101. The command is sent as a group command using GroupID 0x0103",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0101 to confirm that the RemoveGroup command from step 9 was successful",
                    "TH removes the Group key set that was added by sending a KeySetRemove command to the GroupKeyManagement cluster with the GroupKeySetID field set to 0x01a3",
                    "TH cleans up the groups by sending the RemoveAllGroups command to the DUT on PIXIT.G.ENDPOINT",
                    "TH writes the ACL attribute in the Access Control cluster to remove Manage privileges for group 0x0103 and maintain the current administrative privileges for the TH. The following access control list shall be used:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: TH node id ([N1])Targets: all (null)"
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a AddGroupResponse with the Status set to SUCCESS and the GroupID set to 0x0103",
                    "",
                    "Verify DUT sends a ViewGroupResponse command with\n                            * Status: SUCCESS\n                            * GroupID: 0x0101\n                            * GroupName: \"Test Group 0101\"",
                    "Verify DUT sends a ViewGroupResponse command with\n                            * Status: SUCCESS\n                            * GroupID: 0x0101\n                            * GroupName: \"\"",
                    "",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b)",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SUCCESS response."
                ]
            }
        },
        {
            "Test Case Name": "26.2.5. [TC-SC-5.3] Sending a group message - DUT to TH",
            "Test Case ID": "TC-SC-5.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that the DUT can send group message to TH and validate the Group Message received by TH.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1",
                    "appclusters-1.3.6.1",
                    "",
                    "appclusters-1.3.6.1"
                ],
                "PICS": [
                    "",
                    "",
                    "GRPKEY.C.C00.Tx(KeySetWrite)",
                    "GRPKEY.C.A0000(GroupKeyMap)",
                    "G.C.C00.Tx(AddGroup)",
                    "",
                    "G.C.C00.Tx(AddGroup)"
                ],
                "Test Step": [
                    "TH should have the ACL entry with the AuthMode as Group by DUT",
                    "DUT generates fabric-unique GroupID, GroupName, random key, EpochKey0 and GroupKeySetID.Save the GroupID as GroupID_1, GroupName as GroupName_1 and GroupSetID_1",
                    "DUT sends KeySetWrite command to GroupKeyManagement cluster to TH on EP0",
                    "DUT binds GroupId with GroupKeySetID in the GroupKeyMap attribute list on GroupKeyManagement cluster",
                    "DUT sends AddGroup Command to DUT on EP0 with the the following settingsGroupID: GroupID_1GroupName: GroupName_1",
                    "DUT generates fabric-unique GroupID, GroupName.Save the GroupID as GroupID_2, GroupName as GroupName_2",
                    "DUT sends a AddGroup Command to the Groups cluster with the GroupID field set to GroupID_2 and the GroupName set to an GroupName_2. The command is sent as a group command using GroupID_1"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Test Harness receives the KeySetWrite command from the DUT.",
                    "Test Harness receives the binding of GroupKeySetID with the GroupID from DUT",
                    "Test Harness receives the AddGroup command from the DUT",
                    "",
                    "Validate the group message received from DUT:Verify that the IPv6 Destination Multicast address follows the format \"FF35:0040:FD<Fabric ID>00:<Group ID>Verify the UDP port is 5540Verify the DSIZ flag is set to groupVerify the Destination Node ID matches the GroupID_1"
                ]
            }
        },
        {
            "Test Case Name": "26.2.6. [TC-GRPKEY-5.4] Verification for KeySetReadResponse Command for CacheAndSync",
            "Test Case ID": "TC-GRPKEY-5.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that the DUT sends the correct KeySetReadResponse command for CacheAndSync",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "",
                    "CoreSpec-11.2.6.2"
                ],
                "PICS": [
                    "!GRPKEY.S.F00(CS),GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.S.F00(CS) ,GRPKEY.S.C00.Rsp(KeySetWrite)",
                    "GRPKEY.F00(CS),GRPKEY.S.A0000(GroupKeyMap)",
                    "GRPKEY.S.F00(CS),GRPKEY.S.C01.Rsp(KeySetRead)"
                ],
                "Test Step": [
                    "Admin sends KeySetWrite command by setting  GroupKeySecurityPolicy to CacheAndSync to GroupKeyManagement cluster on the DUTNote: KeySetWrite command is sent by setting the following fields to the corresponding values. Values given below are for reference purpose.groupKeySetID:         0x01a3groupKeySecurityPolicy: CacheAndSync (1)epochKey0:               d0d1d2d3d4d5d6d7d8d9dadbdcdddedfepochStartTime0:        1epochKey1:              d1d1d2d3d4d5d6d7d8d9dadbdcdddedfepochStartTime1:        2220001epochKey2:               d2d1d2d3d4d5d6d7d8d9dadbdcdddedfepochStartTime2:        2220002",
                    "Admin sends KeySetWrite command by setting the values as given in Step 1",
                    "Admin maps GroupId 0x0103 with GroupKeySetID 0x01a3 in the GroupKeyMap attribute list on GroupKeyManagement cluster on the DUT",
                    "Admin sends KeySetRead Command to DUT"
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends INVALID_COMMAND response as CacheAndSync is not supported.",
                    "Verify that the DUT sends SUCCESS response as CacheAndSync is supported",
                    "Verify DUT responds w/ status SUCCESS(0x00)",
                    "Verify that the DUT sends a KeySetReadResponse Command with the GroupKeySetStructure.Verify that GroupKeySetStructure has GroupKeySecurityPolicy value set to CacheAndSync (1)"
                ]
            }
        },
        {
            "Test Case Name": "26.3.1. [TC-SC-6.1] Adding member to a group - DUT as Admin and TH as Group Member [DUT-Client]",
            "Test Case ID": "TC-SC-6.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify that the TH can be added to a group by DUT",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "",
                    "",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1",
                    "appclusters-1.3.6.1",
                    "appclusters-1.3.7.2",
                    "CoreSpec-11.2.5.2",
                    "CoreSpec-11.2.5.2",
                    "CoreSpec-11.2.5.2"
                ],
                "PICS": [
                    "",
                    "",
                    "GRPKEY.C.C00.Tx(KeySetWrite)",
                    "GRPKEY.C.A0000(GroupKeyMap)",
                    "G.C.C00.Tx(AddGroup)",
                    "G.C.C01.Tx(ViewGroup)",
                    "GRPKEY.C.C01.Tx(KeySetRead)",
                    "GRPKEY.C.C03.Tx(KeySetRemove)",
                    "GRPKEY.C.C04.Tx(KeySetReadAllIndices)"
                ],
                "Test Step": [
                    "TH should have the ACL entry with the AuthMode as Group by DUT",
                    "DUT generates fabric-unique GroupID, GroupName, random key, EpochKey0 and GroupKeySetID.Admin sets\nGroupKeySecurityPolicy = TrustFirst (0)\nEpochStartTime0 = 1",
                    "DUT sends KeySetWrite command to GroupKeyManagement cluster to TH on EP0",
                    "DUT binds GroupID with GroupKeySetID in the GroupKeyMap attribute list on GroupKeyManagement cluster",
                    "DUT sends AddGroup Command to TH on EP0",
                    "DUT sends ViewGroup command with the GroupID and GroupName to the Group cluster on the TH on EP0",
                    "DUT sends KeySetRead Command to TH",
                    "DUT sends KeySetRemove Command to TH",
                    "DUT sends KeySetReadAllIndices Command to TH"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Test Harness receives the KeySetWrite command from the DUT.",
                    "Test Harness receives the binding of GroupKeySetID with the GroupID from DUT",
                    "Test Harness receives the AddGroup command from the DUT",
                    "Test Harness receives the ViewGroup command from the DUT",
                    "Test Harness receives the KeySetRead command from the DUT",
                    "Test Harness receives the KeySetRemove command from the DUT",
                    "Test Harness receives the KeySetReadAllIndices command from the DUT"
                ]
            }
        }
    ],
    "Device_Attestation": [
        {
            "Test Case Name": "29.1.1. [TC-DA-1.1] The NOC SHALL be wiped on Factory Reset [DUT - Commissionee]",
            "Test Case ID": "TC-DA-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case validates the following condition:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "11.17.6.1",
                    "11.17.6.2",
                    "",
                    "",
                    "11.17.6",
                    "11.17.6"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "MCORE.UI.FACTORYRESET",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT to TH1\u2019s Fabric",
                    "TH1 does a non-fabric filtered read of theNOCsattribute from the Node Operational Credentials cluster and saves the returned list asnoc_th1",
                    "TH1 does a non-fabric-filtered read of theFabricsattribute from the Node Operational Credentials cluster",
                    "Factory reset DUT\nand perform the necessary actions to put the DUT into a commissionable state",
                    "Commission DUT to TH2\u2019s Fabric",
                    "TH2 does a non-fabric-filtered read ofFabricsattribute list from DUT",
                    "TH2 does a non-fabric-filtered read ofNOCsattribute list from DUT"
                ],
                "Expected Outcome": [
                    "",
                    "Verify that there is a single entry in the list",
                    "Verify that there is a single entry in the list and the FabricID for that entry matches the FabricID for TH1",
                    "",
                    "",
                    "Verify that there is only one entry in the 'Fabrics' ListVerify that the FabricID is the same as the TH2\u2019s Fabric IDVerify that the entry saved in Step 2 for TH1' Fabric does not appear in the list",
                    "Verify that there is only one entry in the 'NOCs' List and the NOC for that entry is different than the NOC entry innoc_th1"
                ]
            }
        },
        {
            "Test Case Name": "29.1.2. [TC-DA-1.2] Device Attestation Request Validation [DUT - Commissionee]",
            "Test Case ID": "TC-DA-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify the following during the Device Attestation procedure:",
            "Test Procedure": {
                "#": [
                    "0",
                    "1",
                    "2",
                    "3a",
                    "3b",
                    "4a",
                    "4b",
                    "5",
                    "5.1",
                    "5.2",
                    "6.1",
                    "6.2",
                    "6.3",
                    "6.4",
                    "6.5",
                    "6.6",
                    "6.7",
                    "6.8",
                    "6.9",
                    "7.1",
                    "7.2",
                    "7.3",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "TestStep": [
                    "Commission DUT if not done",
                    "TH1 generates 32-byte AttestationNonce and saves as `nonce",
                    "TH1 sends AttestationRequest Command to the DUT with AttestationNonce set tononce",
                    "TH1 sends CertificateChainRequest Command with CertificateType field set to DACCertificate (1) to DUT to obtain DAC",
                    "TH1 sends CertificateChainRequest Command with CertificateType field set to PAICertificate (2) to DUT to obtain PAI",
                    "TH1 Reads the VendorID attribute of the Basic Information cluster and saves it asbasic_info_vendor_id",
                    "TH1 Reads the ProductID attribute of the Basic Information cluster and saves it asbasic_info_product_id",
                    "Extract the attestation_elements_message structure fields from the AttestationResponse",
                    "Verify AttestationElements field size",
                    "Verify certification_declaration format",
                    "Verify CD format_version",
                    "Verify CD vendor_id",
                    "Verify CD product_id_array",
                    "Verify CD device_type_id",
                    "Verify CD certificate_id",
                    "Verify CD security level",
                    "Verify CD security_information",
                    "Verify CD version_number",
                    "Verify CD certification_type",
                    "",
                    "If the Certification Declaration has both the dac_origin_vendor_id and the dac_origin_product_id fields, verify dac_origin fields",
                    "If the Certification Declaration has neither the dac_origin_vendor_id nor the dac_origin_product_id fields, verify the vendor_id and product_id_array fields",
                    "If the Certification Declaration has authorized_paa_list, check that the authority_key_id extension of the PAI matches one found in the authorized_paa_list",
                    "Verify that the certification_declaration CMS enveloped can be verified with the well-known Certification Declaration public key used to originally sign the Certification Declaration",
                    "Verify attestation_nonce",
                    "If firmware_information is present, verify firmware information type",
                    "Using Crypto_Verify cryptographic primitive, validate that the AttestationSignature from the AttestationResponse Command is valid if verified against a message constructed by concatenating AttestationElements with the attestation challenge associated with the secure session over which the AttestationResponse was obtained, using the subject public key found in the DAC.",
                    "TH1 sends AttestationRequest Command with Invalid AttestationNonce (size > 32 bytes) as the field to the DUT.",
                    "TH1 sends AttestationRequest Command with invalid AttestationNonce (size < 32 bytes) as the field to the DUT."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Verify AttestationResponse is received",
                    "DUT responds with CertificateChainResponse the DAC certificate in X.509v3 format with size \u21d0 600 bytes",
                    "DUT responds with CertificateChainResponse the PAI certificate in X.509v3 format with size \u21d0 600 bytes",
                    "",
                    "",
                    "",
                    "AttestationElements field size should not be greater than RESP_MAX(900 bytes)",
                    "certification_declaration is present and is an octet string representation CMS-format certification declaration, as described in section 6.3.1",
                    "format_version = 1",
                    "vendor_id field matchesbasic_info_vendor_idand is in the standard vendor ID range",
                    "product_id_array field containsbasic_info_product_id",
                    "device_type_id has a value between 0 and (2^31 - 1)",
                    "certificate_id has a length of 19",
                    "security level = 0",
                    "security_information = 0",
                    "version_number is an integer in range 0..65535",
                    "certification_type has a value between 1..2",
                    "If the dac_origin_vendor_id is present in the CD, confirm the dac_origin_product_id is also present. If the dac_origin_vendor_id is not present in the CD, confirm the dac_origin_product_id is also not present.",
                    "The Vendor ID (VID) in the DAC subject and PAI subject are the same as the dac_origin_vendor_id field in the Certification Declaration.The Product ID (PID) in the DAC subject is same as the dac_origin_product_id field in the Certification Declaration.If it is present in the PAI certificate, the Product ID (PID) in the subject is same as the dac_origin_product_id field in the Certification Declaration.",
                    "The Vendor ID (VID) in the DAC subject and PAI subject are the same as the vendor_id field in the Certification Declaration.The Product ID (PID) subject DN in the DAC is contained in the product_id_array field in the Certification Declaration.If it is present in the PAI certificate, the Product ID (PID) in the subject is contained in the product_id_array field in the Certification Declaration.",
                    "PAA from PAI authority_key_id extension matches one found in authorized_paa_list",
                    "Signature verification passes",
                    "attestation_nonce is present in the attestation_elements_message structureattestation_nonce value matches the AttestationNonce field value sent in the AttestationRequest Command sent by the commissionerattestation_nonce is a 32 byte-long octet string",
                    "firmware_information is an octet string",
                    "Signature is valid",
                    "Verify DUT responds w/ status INVALID_COMMAND(0x85)",
                    "Verify that the DUT reports an INVALID_COMMAND error"
                ]
            }
        },
        {
            "Test Case Name": "29.1.3. [TC-DA-1.3] Device Attestation Request Validation [DUT - Commissioner]",
            "Test Case ID": "TC-DA-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Validate correct handling of a well-formed AttestationResponse Command by the DUT, including all the following fields being valid:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "6.2.3",
                    "6.2.3",
                    "6.2.3",
                    "6.2.3",
                    "",
                    "",
                    "6.2.3",
                    "6.2.3",
                    "6.2.3",
                    "6.2.3",
                    "6.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Start the commissioning process of TH1 on DUT",
                    "DUT generates 32-byte AttestationNonce",
                    "DUT sends AttestationRequest Command with AttestationNonce as field to the TH1.",
                    "TH1 records the AttestationNonce received in AttestationRequest as Nonce_1",
                    "TH1 responds with a well-formed AttestationResponse Command",
                    "",
                    "Factory Reset TH1 so that it is commissionable again",
                    "Start the commissioning process of TH1 on DUT again",
                    "DUT generates 32-byte AttestationNonce",
                    "DUT sends AttestationRequest Command with AttestationNonce as field to the TH1.",
                    "TH1 records the AttestationNonce received in AttestationRequest as Nonce_2",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that DUT Completes the commissioning process successfully",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "Verify that the Nonce_1 and Nonce_2 are different."
                ]
            }
        },
        {
            "Test Case Name": "29.1.4. [TC-DA-1.4] Device Attestation Request Validation-Error Scenario [DUT-Commissioner]",
            "Test Case ID": "TC-DA-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Validate the handling of an invalid AttestationResponse received by the DUT from TH during commissioning process and ensure the DUT responds with correct warning message.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "6.2.3",
                    "6.2.3",
                    "",
                    "",
                    "5.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Start the commissioning process of TH on DUT",
                    "DUT generates 32-byte AttestationNonce",
                    "DUT sends AttestationRequest Command with AttestationNonce as field to the TH.",
                    "TH responds to the DUT with an invalid AttestationResponse Command by setting the following error condition:Commissionee is not yet certified",
                    "Factory Reset TH so that it is commissionable again",
                    "For each of the test cases in theCertificates for TC-DA-1.4 table, start the TH using the appropriate certificate set, commission the TH using the DUT, then factory reset the TH."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that the DUT indicates that the device is not genuine, or otherwise indicates a failure of device attestation, within its error handling APIs or user interface.",
                    "",
                    "Verify that the DUT indicates that the device is not genuine, or otherwise indicates a failure of device attestation, within its error handling APIs or user interface."
                ]
            }
        },
        {
            "Test Case Name": "29.1.5. [TC-DA-1.5] NOCSR Procedure Validation [DUT - Commissionee]",
            "Test Case ID": "TC-DA-1.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify the following checks during the NOCSR procedure:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19"
                ],
                "Ref": [
                    "5.5",
                    "",
                    "11.17.7.3",
                    "11.9.7.2",
                    "11.17.7.5",
                    "11.17.5.6",
                    "11.17.5.7",
                    "11.17.5.7",
                    "11.9.7.2",
                    "11.9.7.2",
                    "11.17.7.5",
                    "11.9.7.2",
                    "11.18.8.1",
                    "5.5",
                    "11.17.5.2",
                    "11.17.5.2",
                    "6.4.6.1",
                    "11.17.5.6",
                    "11.17.6.12"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 fully commissions the DUT",
                    "TH1 establishes a CASE session to the DUT and saves the attestation challenge asattestation_challenge",
                    "TH1 sends a CertificateChainRequest command with the CertificateType field set to DACCertificate.",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster with the ExpiryLengthSeconds field set to 900",
                    "TH1 sends a CSRRequest command to the Node Operational Credentials cluster with the CSRNonce set to a random 32-bit value. The nonce is saved ascsr_nonce",
                    "TH1 extracts extracts the TLV-encoded nocsr_elements_message fromnocsr_elementsand saves the following fields:csr is saved ascsrCSRNonce is saved ascsr_nonce_returnedif present, vendor_reserved fields are saved asvendor1,vendor2andvendor3",
                    "TH1 createsnocsr_tbs=nocsr_elements_message||attestation_challenge",
                    "",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster with the ExpiryLengthSeconds field set to 0",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster with the ExpiryLengthSeconds field set to 900",
                    "TH1 sends a CSRRequest command to the Node Operational Credentials cluster with the CSRNonce set to a random 31-bytes value.",
                    "TH1 sends an ArmFailSafe command to the General Commissioning cluster with the ExpiryLengthSeconds field set to 0",
                    "TH1 sends the OpenCommissioningWindow command to the Administrator Commissioning Cluster",
                    "TH2 fully commissions the DUT",
                    "TH1 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "TH2 reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read",
                    "Extract the pubic keys fromth1_nocandth2_noc",
                    "TH2 reads the CurrentFabricIndex attribute from the Node Operational Credentials cluster and saves asth2_idx",
                    "TH1 sends the RemoveFabric command to the DUT with the FabricIndex set toth2_idx"
                ],
                "Expected Outcome": [
                    "Verify that the DUT is commissioned successfully",
                    "",
                    "Verify that the DUT sends a CertificateChainResponse. TH1 saves the return certificate asdac",
                    "Verify that the DUT returns SUCCESS",
                    "Verify that the DUT returns a CSRResponse command.TH1 saves the NOCSRElements field asnocsr_elementsTH1 saves the AttestationSignature field asnoscr_attestation_signature",
                    "TH1 verifies that:the length of the nocsr_elements_message is < = 900 bytescsris DER-encoded octet stringcsrfollows the encoding and rules from PKCS #10csrspecifies Public Key algorithm id-ecPublicKey with curve prime256v1 (ASN1 OID) / P-256 (NIST)csrspecifies a 256-bit public key (save ascsr_pubkey)csrSignature Algorithm is ecdsa-with-SHA256csrSignature is validcsr_nonce_returnedfield is OCTET string of length 32csr_nonce_returnedmatchescsr_nonce",
                    "TH1 verifiesnocsr_attestation_signaturesignsnocsr_tbsusing the public key indac",
                    "if vendor_reserved fields are present in the nocsr_elements_message, TH1 verifies thatattestation_challengedoes not appear in any of thevendorfields",
                    "Verify that the DUT returns SUCCESS",
                    "Verify that the DUT returns SUCCESS",
                    "Verify that the DUT responds with INVALID_COMMAND",
                    "Verify that the DUT returns SUCCESS",
                    "Verify the command completes successfully",
                    "Verify commissioning completes successfully",
                    "Verify that there is a single element in the list and save the NOC field asth1_noc",
                    "Verify that there is a single element in the list and save the NOC field asth2_noc",
                    "Verify that the public keys do not match",
                    "",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "29.1.6. [TC-DA-1.6] NOCSR Procedure Validation [DUT - Commissioner]",
            "Test Case ID": "TC-DA-1.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "To verify the following checks during the NOCSR procedure",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "6.1",
                    "6.2",
                    "6.3"
                ],
                "Ref": [
                    "6.3.6.1",
                    "6.3.6.1",
                    "6.3.6.1",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT completes the attestation procedure",
                    "DUT generates 32-byte CSRNonce and is sent to TH1 through\nCSRRequest Command",
                    "TH1 generates Invalid NOCSR Information and sends the CSRResponse Command.Refer Steps 6.1 to 6.8",
                    "",
                    "Factory Reset DUT so that it is commissionable again",
                    "Repeat Step1 to Step 4 multiple times. For each time in Step 3 TH1 generates the following error:",
                    "CSRNonce is OCTET string of length > 32",
                    "CSRNonce value does not match the value CSR Nonce field in the\ncorresponding CSRRequest Command",
                    "NOCSRElement size is greater than RESP_MAX"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "Verify that DUT reports error",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "29.1.7. [TC-DA-1.7] Validate CertificateChainRequest [DUT-Commissionee]",
            "Test Case ID": "TC-DA-1.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case validates that the device attestation certificates are properly signed and use different device attestation keys on each individual device.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8"
                ],
                "Ref": [
                    "5.5",
                    "11.17.7.3",
                    "11.17.7.3",
                    "6.2.2.4",
                    "6.2.2.3",
                    "6.2.2.4",
                    "6.2.2.3",
                    "6.2.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Commission DUT1 to TH fabric",
                    "TH sends CertificateChainRequest Command to DUT1 with the CertificateType set to PAICertificate",
                    "TH sends CertificateChainRequest Command to DUT1 with the CertificateType set to DACCertificate",
                    "TH extracts the Authority Key Identifier from the PAI certificate",
                    "TH extracts ASN.1 DER bytes for the entireissuerfield ofdac_certandsubjectfield ofpai_cert.",
                    "TH extracts ASN.1 DER bytes for the entireissuerfield ofpai_certandsubjectfield ofpaa_cert.",
                    "TH extracts the public key from the DAC and saves as 'pk_1' for first DAC.",
                    "Repeat Step 1 to 7 with DUT2, saving the PAI, DAC and public key aspk_2"
                ],
                "Expected Outcome": [
                    "Verify the commissioning completes successfully",
                    "Verify that the DUT returns a CertificateChainResponse. Save the returned Certificate aspai_cert.",
                    "Verify that the DUT returns a CertificateChainResponse. Save the returned Certificate asdac_cert.",
                    "Verify that the Authority Key Identifier is signed by a PAA in the DCL. (Ensure that it is not SDK\u2019s test PAAs)Verify that PAI authority key ID must not be one of:78:5C:E7:05:B8:6B:8F:4E:6F:C7:93:AA:60:CB:43:EA:69:68:82:D56A:FD:22:77:1F:51:1F:EC:BF:16:41:97:67:10:DC:DC:31:A1:71:7ESave the selected PAA certificate aspaa_cert.",
                    "Verify that thedac_cert\u2019s `issuerfield is byte-for-byte equivalent to thepai_cert\u2019s `subjectfield.",
                    "Verify that thepai_cert\u2019s `issuerfield is byte-for-byte equivalent to thepaa_cert\u2019s `subjectfield.",
                    "",
                    "Verify thatpk_1does not matchpk_2"
                ]
            }
        },
        {
            "Test Case Name": "29.1.8. [TC-DA-1.8] Device Attestation Request Validation-Success Scenario [DUT-Commissioner]",
            "Test Case ID": "TC-DA-1.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Validate successful handing of valid certificates with different properties.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "5.5"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "For each of the test cases in theCertificates for TC-DA-1.8 table, start the TH using the appropriate certificate set, commission the TH using the DUT, then factory reset the TH:"
                ],
                "Expected Outcome": [
                    "Verify that the TH is successfully commissioned for each test case"
                ]
            }
        }
    ],
    "Interaction_Data_Model": [
        {
            "Test Case Name": "33.1.1. [TC-IDM-1.1] Invoke Request Action from DUT to TH - [DUT as Client]",
            "Test Case ID": "TC-IDM-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Invoke Request Action sent from the DUT is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "8.8.2.1/10.6.9",
                    "8.8.2.1/10.6.9",
                    "8.8.2.1/10.6.9"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends the Invoke Request Message to the TH.The Message should contain one valid CommandDataIB, which has the specific Endpoint, Specific Cluster and Specific Command.",
                    "DUT sends the Invoke Request Message to the TH.The Message should contain the wildcard for Endpoint, specific Cluster and Specific Command  in the CommandDataIB.",
                    "DUT sends the Invoke Request Message to the TH.The Message should contain one valid CommandDataIB, which has the specific Endpoint, Specific Cluster and Specific Command.Send 2 more Invoke Request Messages to the TH."
                ],
                "Expected Outcome": [
                    "On the TH verify the received request message has the same paths as provided in the command.",
                    "On the TH verify the received request message has the same paths as provided in the command.",
                    "On the TH verify the received request messages have the same paths as provided in the command."
                ]
            }
        },
        {
            "Test Case Name": "33.1.2. [TC-IDM-1.2] Invoke Response Action from DUT to TH - [DUT as Server]",
            "Test Case ID": "TC-IDM-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Invoke Response of the DUT once it receives the Invoke Request Action.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends the Invoke Request Message to the DUT with the path that indicates a specific endpoint that is unsupported.",
                    "TH sends the Invoke Request Message to the DUT with the path that indicates a specific cluster that is unsupported.",
                    "TH sends the Invoke Request Message to the DUT with the path that indicates a specific command that is unsupported.",
                    "Setup the TH such that it should not have the privilege for the cluster in the path.TH sends the Invoke Request Message to the DUT with a valid CommandDataIB",
                    "Setup the TH such that there is no accessing fabricTH sends the Invoke Request Message to the DUT with a valid and fabric-scoped CommandDataIB",
                    "[OPTIONAL] TH sends the Invoke Request Message to the DUT with the command which  requires a data response to be sent back.",
                    "TH sends the Invoke Request Message to the DUT with a valid CommandDataIB and SuppressResponse set to True",
                    "TH sends a Invoke Request Message to the DUT with the TimedRequest set as TRUE.(There should be no previous Timed Invoke action.)",
                    "TH sends Invoke Request Message to the DUT with the command in the path that requires a Timed Invoke transaction to invoke and this action is not part of a Timed Invoke transaction"
                ],
                "Expected Outcome": [
                    "On the TH verify the received response message has the UNSUPPORTED_ENDPOINT Status Code",
                    "On the TH verify the received response message has the UNSUPPORTED_CLUSTER Status Code",
                    "On the TH verify the received response message has the UNSUPPORTED_COMMAND Status Code",
                    "On the TH verify the received response message has the UNSUPPORTED_ACCESS Status Code",
                    "On the TH verify the received response message has the UNSUPPORTED_ACCESS Status Code",
                    "Verify that the DUT generates an InvokeResponseIB with a valid CommandDataIB and sends it to the TH.TH then verifies that this message is valid.",
                    "Verify that the DUT executes the command.Verify that the DUT does not send any response back to the TH.",
                    "On the TH verify DUT sends back a Status Response with the TIMED_REQUEST_MISMATCH status code.",
                    "On the TH verify that the DUT sends a status code NEEDS_TIMED_INTERACTION."
                ]
            }
        },
        {
            "Test Case Name": "33.1.3. [TC-IDM-1.3] Batched Commands Invoke Request Action from DUT to TH - [DUT as Client]",
            "Test Case ID": "TC-IDM-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Batched Commands Invoke Request Action sent from the DUT is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "8.8.2.1/10.6.9",
                    "8.8.2.1/10.6.9/10.6.10.2",
                    "8.8.2.1/10.6.9/10.6.10.2",
                    "8.8.2.1/10.6.9/10.6.10.2",
                    "8.8.2.1/10.6.9"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends the Invoke Request Message to the TH. The Message should contain multiple valid unique paths. For example this could be, Path =Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2TH responds with a single command response message containing responses to both of the messages in the same order",
                    "DUT sends the Invoke Request Message to the TH. The Message should contain multiple valid unique paths. For example this could be, Path =Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2TH SHALL responds in the following manner (some fields omitted, only critical fields for validating spec behavior are mentioned):Invoke Response Message #1:InvokeResponses = [Status = (CommandPath = (Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1), StatusIB = (Status = FAILURE (0x1)))]MoreChunkedMessages = TrueInvoke Response Message #2:InvokeResponses = [Status = (CommandPath = (Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2), StatusIB = (Status = FAILURE (0x1)))]Note there are two Invoke Response Messages, responses are in the same order as the request",
                    "DUT sends the Invoke Request Message to the TH. The Message should contain multiple valid unique paths. For example this could be, Path =Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2TH SHALL responds in the following manner (some fields omitted, only critical fields for validating spec behavior are mentioned):Invoke Response Message #1:InvokeResponses = [Status = (CommandPath = (Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2), StatusIB = (Status = FAILURE (0x1)))]MoreChunkedMessages = TrueInvoke Response Message #2:InvokeResponses = [Status = (CommandPath = (Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1), StatusIB = (Status = FAILURE (0x1)))]Note there are two Invoke Response Messages, the order of responses is the opposite of the order in the request",
                    "DUT sends the Invoke Request Message to the TH. The Message should contain multiple valid unique paths. For example this could be, Path =Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1Endpoint = Endpoint1, Cluster = ClusterID, Command = Command2TH SHALL responds in the following manner (some fields omitted, only critical fields for validating spec behavior are mentioned):Invoke Response Message #1:InvokeResponses = [Status = (CommandPath = (Endpoint = Endpoint1, Cluster = ClusterID, Command = Command1), StatusIB = (Status = FAILURE (0x1)))]Note there is a single Invoke Response Messages, only one request is responded to, the other request never gets a response",
                    "DUT sends the Invoke Request Message to the TH. The Message should contain one valid CommandDataIB, which has thespecific Endpoint, Specific Cluster and Specific Command. TH configured to send normal response to single InvokeRequest"
                ],
                "Expected Outcome": [
                    "On the DUT:Verify it does not crash.Note: If validating response on DUT, responses will be based on TH servers ability to response to those requests.On the TH device (server) verify:* The received request message has the same paths as provided in the command (compare with information provided by the manufacturer) and that the paths are unique.",
                    "On the DUT:Verify it does not crash.Note: If validating response on DUT, it will have received 2 responses with status FAILURE(0x01).On TH device (server) verify:It has not crashed.Verify logs indicate separate Invoke Response Messages and that responses are in same order as requests.",
                    "On the DUT:Verify it does not crash.Note: If validating response on DUT, it will have received 2 responses with status FAILURE(0x01).On TH device (server) verify:It has not crashed.Verify logs indicate separate Invoke Response Messages and that responses are in reverse order.",
                    "On the DUT:Verify it does not crash.Note: If validating response on DUT, it will have received 1 responses with status FAILURE(0x01), the other command will not have been responded and might show up as Status = NO_COMMAND_RESPONSE(0xCC)On TH device (server) verify:It has not crashed.Verify logs indicate single Invoke Response Message and that a response was dropped.",
                    "On the THverify the received request message has the same paths as provided in the command."
                ]
            }
        },
        {
            "Test Case Name": "33.1.4. [TC-IDM-1.4] Batched Commands Invoke Response Action from DUT to TH - [DUT as Server]",
            "Test Case ID": "TC-IDM-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Invoke Response of the DUT once it receives the Invoke Request Action.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "4.12.8",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "8.8.2.3",
                    "11.12.4.1",
                    "11.12.6.9",
                    "8.8.2.3/10.6.10.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.IDM.S: DMTEST"
                ],
                "Test Step": [
                    "TH establishes secure session to the DUT, TH reads session parameters to get reportedMaxPathsPerInvoke.",
                    "TH sends the Invoke Request Message to the DUT withMaxPathsPerInvoke +1invalid but unique CommandPath in CommandDataIBs. This test step will only be executed if we are ableto fitMaxPathsPerInvoke +1command required for test into single MTU.",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two valid but non-unique CommandPath in CommandDataIBs.",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two valid and unique CommandPath in CommandDataIBs, but non-unique CommandRef inCommandDataIBs.",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two valid and unique CommandPath in CommandDataIBs.",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two CommandDataIBs. The first CommandDataIB is valid, while the second CommandDataIB containsa CommandPath that indicates a specific endpoint that is unsupported. The first CommandDataIB MUST have the larger CommandRef than the second CommandDataIB.",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two CommandDataIBs. One of the two CommandDataIBs SHALL be a command that requires timed invoke.The TimedRequest of the Invoke Request Message SHALL be set as TRUE.(There SHALL be no previous Timed Invoke action.)",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with two CommandDataIBs. One of the two CommandDataIBs SHALL be a command that requires timed invoke.The TimedRequest of the Invoke Request Message SHALL be set as TRUE.(There SHALL be a previous Timed Invoke action.)",
                    "IfMaxPathsPerInvoke> 1, TH read FeatureMap attribute from General Diagnostics Cluster.",
                    "IfMaxPathsPerInvoke> 1, TH reads TestEventTriggersEnabled attribute from General Diagnostics Cluster",
                    "IfMaxPathsPerInvoke> 1, TH sends the Invoke Request Message to the DUT with the following two CommandPaths :[Endpoint = 0, Cluster = General Diagnostics Cluster (0x33), Command = PayloadTestRequest (0x03)]The data for PayloadTestRequest must have EnableKey field set to PIXIT.DGGEN.TEST_EVENT_TRIGGER_KEY, Value field set to 65 (value for \"A\" in ASCII), Count field set to 800.[Endpoint = 0, Cluster = Node Operational Credentials Cluster (0x3E), Command = CertificateChainRequest (0x02)]The data for CertificateChainRequest must have the CertificateType field set to 1."
                ],
                "Expected Outcome": [
                    "On the TH verifyMaxPathsPerInvokeis a value between 1 and 65535.",
                    "On the TH verify the received response message has single INVALID_ACTION Status Code",
                    "On the TH verify the received response message hassingle INVALID_ACTION Status Code",
                    "On the TH verify the received response message has single INVALID_ACTION Status Code",
                    "On the TH verify the received response message has twoSUCCESS Status Code",
                    "On the TH verify the received responsemessage has two Status Codes SUCCESS and UNSUPPORTED_ENDPOINT. Verify Status Codes match with the corresponding Commands that were sent out.",
                    "On the TH verify DUT sends back a Status Response with theTIMED_REQUEST_MISMATCH status code.",
                    "On the TH verify the received response message has two path-specific responses.The response to the command that required a timed invoke MAY be a cluster specific error.",
                    "On the TH verify response contains DataModelTest feature bit set.",
                    "Verify that TestEventTriggersEnabled attribute has a value of 1 (True)",
                    "On the TH verify the received response message has two successful responses. On TH verify that we received two separate Invoke Response Messages."
                ]
            }
        },
        {
            "Test Case Name": "33.2.1. [TC-IDM-2.1] Read Request Action from DUT to TH. [DUT as Client]",
            "Test Case ID": "TC-IDM-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Read Request Action sent from the DUT is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "8.4.2.1/10.6.2",
                    "7.19"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_Bool",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_String",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_UnsignedInteger",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_SignedInteger",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_FloatingPoint",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_OctetString",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_Struct",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_List",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_Enum",
                    "MCORE.IDM.C.ReadRequest.Attribute.DataType_Bitmap",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends the Read Request Message to the TH to read one attribute on a given cluster and endpoint.AttributePath = [[Endpoint = Specific Endpoint, Cluster = Specific ClusterID, Attribute = Specific Attribute]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read all attributes on a given cluster and EndpointAttributePath = [[Endpoint = Specific Endpoint, Cluster = Specific ClusterID]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read all attributes in all clusters and all endpointsPath = [[ ]]On receipt of this message, TH should send a report data action with the attribute values to the DUT.",
                    "DUT sends the Read Request Message to the TH to read a specific attribute from all endpoints and all clusters.AttributePath = [[ Attribute = Specific Attribute]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read all attributes from a specific cluster on all endpointsAttributePath = [[ Cluster = Specific ClusterID]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read a specific attribute from a given cluster on all endpoints.AttributePath = [[ Cluster = Specific Cluster, Attribute = specific attribute]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read all attributes from all clusters at a given endpoint.AttributePath = [[ Endpoint = Specific Endpoint]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to a specific endpoint to read a particular attribute from all the clusters at that endpointAttributePath = [[ Endpoint = Specific Endpoint, Attribute = specific attribute]]On receipt of this message, TH should send a report data action with the attribute value to the DUT.",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type bool. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type string. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type unsigned integer. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type signed integer. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type floating point. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type Octet String. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type Struct. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type List. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type enum. +",
                    "DUT sends the Read Request Message to the TH to read an attribute of data type bitmap. +",
                    "DUT sends the Read Request Message to the TH to read an attributeRepeat the above steps 3 times.",
                    "DUT sends the Read Request Message to the TH to read something(Attribute) which is larger than 1 MTU(1280 bytes) and per spec can be chunked.For every chunked data message received, except the last one, DUT sends a status response.",
                    "DUT sends the Read Request Message to the TH  with Manufacturer specific clusters and attributes to read all attributes in all clusters and all endpointsPath = [[ ]].On receipt of this message, TH should send a report data action with the attribute values to the DUT."
                ],
                "Expected Outcome": [
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message. +",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "Verify that the TH receives the right Read Request Message.",
                    "On the TH verify the received Read Request message is same for all the 3 times. +",
                    "Verify on the TH that the DUT sends a status message back to the TH on receipt of the report data action for every chunked message except the last one.Verify that the last chunked message DUT does not send a status response back.",
                    "Verify that the TH receives the right Read Request Message."
                ]
            }
        },
        {
            "Test Case Name": "33.2.2. [TC-IDM-2.2] Report Data Action from DUT to TH. [DUT as Server]",
            "Test Case ID": "TC-IDM-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Report Data Action sent from the DUT in response to the Read Request Action is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32"
                ],
                "Ref": [
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.2.1/10.6.2",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3",
                    "8.4.3.1/10.6.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.IDM.S.Attribute.DataType_Bool",
                    "MCORE.IDM.S.Attribute.DataType_String",
                    "MCORE.IDM.S.Attribute.DataType_UnsignedInteger",
                    "MCORE.IDM.S.Attribute.DataType_SignedInteger",
                    "MCORE.IDM.S.Attribute.DataType_FloatingPoint",
                    "MCORE.IDM.S.Attribute.DataType_OctetString",
                    "MCORE.IDM.S.Attribute.DataType_Struct",
                    "MCORE.IDM.S.Attribute.DataType_List",
                    "MCORE.IDM.S.Attribute.DataType_Enum",
                    "MCORE.IDM.S.Attribute.DataType_Bitmap",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.IDM.S.LargeData",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends the Read Request Message to the DUT to read one attribute on a given cluster and endpoint.AttributePath = [[Endpoint = Specific Endpoint, Cluster = Specific ClusterID, Attribute = Specific Attribute]]On receipt of this message, DUT should send a report data action with the attribute value to the DUT.",
                    "TH sends the Read Request Message to the DUT to read all attributes on a given cluster and EndpointAttributePath = [[Endpoint = Specific Endpoint, Cluster = Specific ClusterID]]On receipt of this message, DUT should send a report data action with the attribute value to the DUT.",
                    "TH sends the Read Request Message to the DUT to read an attribute from a cluster at all EndpointsAttributePath = [[Cluster = Specific ClusterID, Attribute = Specific Attribute]]On receipt of this message, DUT should send a report data action with the attribute value from all the Endpoints to the DUT.",
                    "TH sends the Read Request Message to the DUT to read a global attribute from all clusters at that EndpointAttributePath = [[Endpoint = Specific Endpoint, Attribute = Specific Global Attribute]]On receipt of this message, DUT should send a report data action with the attribute value from all the clusters to the DUT.",
                    "TH sends the Read Request Message to the DUT to read all attributes from all clusters on all EndpointsAttributePath = [[]]On receipt of this message, DUT should send a report data action with the attribute value from all the clusters to the DUT.",
                    "TH sends the Read Request Message to the DUT to read a global attribute from all clusters at all EndpointsAttributePath = [[Attribute = Specific Global Attribute]]On receipt of this message, DUT should send a report data action with the attribute value from all the clusters to the DUT.",
                    "TH sends the Read Request Message to the DUT to read all attributes from a cluster at all EndpointsAttributePath = [[Cluster = Specific ClusterID]]On receipt of this message, DUT should send a report data action with the attribute value from all the Endpoints to the DUT.",
                    "TH sends the Read Request Message to the DUT to read all attributes from all clusters at one EndpointAttributePath = [[Endpoint = Specific Endpoint]]On receipt of this message, DUT should send a report data action with the attribute value from all the Endpoints to the DUT.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type bool.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type string.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type unsigned integer.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type signed integer.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type floating point.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type Octet String.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type Struct.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type List.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type enum.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read an attribute of data type bitmap.DUT responds with the report data action with the right attribute value.",
                    "TH sends the Read Request Message to the DUT to read any attribute to an unsupported Endpoint.DUT responds with the report data action.",
                    "TH sends the Read Request Message to the DUT to read any attribute to an unsupported cluster.DUT responds with the report data action.",
                    "TH sends the Read Request Message to the DUT to read an unsupported attributeDUT responds with the report data action.",
                    "TH sends the Read Request Message to the DUT to read an attributeRepeat the above steps 3 times.",
                    "TH sends a Read Request Message to the DUT  to read a particular attribute with the DataVersionFilter Field not set.DUT sends back the attribute value with the DataVersion of the cluster.TH sends a second read request to the same cluster with the DataVersionFilter Field set with the dataversion value received before.",
                    "TH sends a Read Request Message to the DUT  to read a particular attribute with the DataVersionFilter Field not set.DUT sends back the attribute value with the DataVersion of the cluster.TH sends a write  request to the same cluster to write to any attribute.TH sends a second read request to read an attribute from the same cluster with the DataVersionFilter Field set with the dataversion value received before.",
                    "TH sends a Read Request Message to the DUT  to read all attributes on a cluster with the DataVersionFilter Field not set.DUT sends back the all the attribute values with the DataVersion of the cluster.TH sends a write  request to the same cluster to write to any attribute.TH sends a second read request to read all the attributes from the same cluster with the DataVersionFilter Field set with the dataversion value received before.",
                    "TH sends a Read Request Message to the DUT to read a particular attribute on a particular cluster with the DataVersionFilter Field not set.DUT sends back the attribute value with the DataVersion of the cluster.TH sends a read request to the same cluster to read any attribute with the right DataVersion(received in the previous step) and also an older DataVersion.The Read Request Message should have 2 DataVersionIB filters.",
                    "TH sends a Read Request Message to the DUT to read any supported attribute/wildcard  on a particular cluster say A with the DataVersionFilter Field not set.DUT sends back the attribute value with the DataVersion of the cluster A.TH sends a Read Request Message to read any supported attribute/wildcard on cluster A and any supported attribute/wildcard on another cluster B.DataVersionList field should only contain the DataVersion of cluster A.",
                    "TH sends a Read Request Message to the DUT to read something(Attribute) which is larger than 1 MTU(1280 bytes) and per spec can be chunked  +",
                    "TH sends a Read Request Message to the DUT to read a non global attribute from all clusters at that EndpointAttributePath = [[Endpoint = Specific Endpoint, Attribute = Specific Non Global Attribute]] +",
                    "TH sends a Read Request Message to the DUT to read a non global attribute from all clusters at all EndpointsAttributePath = [[Attribute = Specific Non Global Attribute]] +",
                    "TH should have access to only a single cluster at one Endpoint1.TH sends a Read Request Message to the DUT to read all attributes from all clusters at Endpoint1AttributePath = [[Endpoint = Specific Endpoint]] +",
                    "TH sends a Read Request Message to read all events and attributes from the DUT."
                ],
                "Expected Outcome": [
                    "On the TH verify the received report data message has the right attribute values.",
                    "On the TH verify the received report data message has only the attributes that the TH has privilege to.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "On the TH verify the received report data message has all the right attribute values.",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the right attribute value",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_ENDPOINT",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_CLUSTER",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_ATTRIBUTE",
                    "On the TH verify the received Report data message has the right attribute values for all the 3 times.",
                    "DUT should not send a report data action with the attribute value to the TH if the data version is same as that requested.",
                    "DUT should send a report data action with the attribute value to the TH.",
                    "DUT should  send a report data action with all the attribute values to the TH.",
                    "DUT should send a report data action with the attribute value to the TH.",
                    "Verify that the DUT sends a report data action with the attribute value from the cluster B to the TH.Verify that the DUT does not send the attribute value from cluster A.",
                    "Verify on the TH that the DUT sends a chunked data message with the SuppressResponse field set to False for all the messages except the last one.Verify the last chunked message sent has the SuppressResponse field set to True.",
                    "On the TH verify that the DUT sends an error message and not the value of the attribute.",
                    "On the TH verify that the DUT sends an error message and not the value of the attribute.",
                    "Verify that the DUT sends back data of all attributes only from that one cluster to which it has access.Verify that there are no errors sent back for attributes the TH has no access to.",
                    "Verify that the DUT sends back data of all attributes and events that the TH has access to."
                ]
            }
        },
        {
            "Test Case Name": "33.3.1. [TC-IDM-3.1] Write Request Action from DUT to TH. [DUT as Client]",
            "Test Case ID": "TC-IDM-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Write Request Action sent from the DUT is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Ref": [
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.2.1/10.6.6",
                    "8.7.3.1/10.6.7"
                ],
                "PICS": [
                    "",
                    "",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_Bool",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_String",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_UnsignedInteger",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_SignedInteger",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_FloatingPoint",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_OctetString",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_Struct",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_List",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_Enum",
                    "MCORE.IDM.C.WriteRequest.Attribute.DataType_Bitmap",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends the WriteRequestMessage to the TH to modify one attribute data  +",
                    "DUT sends the WriteRequestMessage to the TH to modify one attribute on all Endpoints.On receipt of this message, TH should modify the attribute and send a WriteResponseMessage to the DUT.",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type bool. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type string. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type unsigned integer. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type signed integer. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type floating point. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type Octet String. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type Struct. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type List. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type enum. +",
                    "DUT sends the WriteRequestMessage to the TH to write an attribute of data type bitmap. +",
                    "DUT sends a WriteRequestMessage to the TH with a large list of attribute data, which is larger than 1 MTU(1280 bytes), that has to be sent in multiple messages.",
                    "DUT sends the WriteRequestMessage to the TH to write one attribute on a given cluster and endpoint.Repeat the above steps 3 times.",
                    "DUT sends a ReadRequest message to the TH to read any attribute on two clusters.TH returns with a report data action with the attribute values and the dataversions of the clusters.DUT sends a  WriteRequestMessage to the DUT to both the clusters with the appropriate dataversions(received in the previous step) to modify the value of an attribute  +"
                ],
                "Expected Outcome": [
                    "Verify on the TH that the correct WriteRequestMessage has been received. +",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received.",
                    "Verify on the TH that the correct WriteRequestMessage has been received and MoreChunkedMessages is set to True. Verify that the DUT waits for the WriteResponse action from the TH before sending the next WriteRequestMessage.",
                    "Verify on the TH that the correct WriteRequestMessage has been received. for all the 3 times.",
                    "Verify that the TH sends a Write Response message with a success back to the DUT.Verify by sending a ReadRequest that the Write Action on TH was successful."
                ]
            }
        },
        {
            "Test Case Name": "33.3.2. [TC-IDM-3.2] Write Response Action from DUT to TH. [DUT as Server]",
            "Test Case ID": "TC-IDM-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Write Response Action sent from the DUT in response to the Write Request Action is according to the specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26"
                ],
                "Ref": [
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7",
                    "8.7.3.1/10.6.7"
                ],
                "PICS": [
                    "",
                    "",
                    "MCORE.IDM.S.Attribute_W.DataType_Bool",
                    "MCORE.IDM.S.Attribute_W.DataType_String",
                    "MCORE.IDM.S.Attribute_W.DataType_UnsignedInteger",
                    "MCORE.IDM.S.Attribute_W.DataType_SignedInteger",
                    "MCORE.IDM.S.Attribute_W.DataType_FloatingPoint",
                    "MCORE.IDM.S.Attribute_W.DataType_OctetString",
                    "MCORE.IDM.S.Attribute_W.DataType_Struct",
                    "MCORE.IDM.S.Attribute_W.DataType_List",
                    "MCORE.IDM.S.Attribute_W.DataType_Enum",
                    "MCORE.IDM.S.Attribute_W.DataType_Bitmap",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends the WriteRequestMessage to the DUT to write one attribute on a given cluster and endpoint.On receipt of this message, DUT should send a write response action.",
                    "TH sends a WriteRequestMessage to the DUT to write to an attribute on all endpoints.On receipt of this message, DUT should send a Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type bool. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type string. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type unsigned integer. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type signed integer. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type floating point. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type Octet String. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type Struct. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type List. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type enum. +",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute of data type bitmap. +",
                    "TH sends the WriteRequestMessage to the DUT to write any attribute on an unsupported node.DUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write any attribute on an unsupported Endpoint.DUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write any attribute on an unsupported cluster.DUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write an unsupported attributeDUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write an attribute which is not writable.DUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write to an attribute  in the path that requires a privilege that is not granted for the cluster in the path.DUT responds with the Write Response action",
                    "TH sends the WriteRequestMessage to the DUT to write one attribute on a given cluster and endpoint.Repeat the above steps 3 times.",
                    "TH sends the WriteRequestMessage to the DUT to modify the value of one attribute on a given cluster and endpoint to null. +",
                    "TH sends the WriteRequestMessage to the DUT to append an attribute value  +",
                    "TH sends the WriteRequestMessage to the DUT to delete an attribute value  +",
                    "TH sends the WriteRequestMessage to the DUT to modify the value of one attribute and Set SuppressResponse to True. +",
                    "TH sends a ReadRequest message to the DUT to read any attribute on any cluster.DUT returns with a report data action with the attribute values and the dataversion of the cluster.TH sends a  WriteRequestMessage to the DUT to modify the value of one attribute with the DataVersion field set to the one received in the prior step. +",
                    "TH sends a ReadRequest message to the DUT to read any attribute on any cluster.DUT returns with a report data action with the attribute values and the dataversion of the cluster.TH sends a  WriteRequestMessage to the DUT to modify the value of one attribute no DataVersion indicated.TH sends a second WriteRequestMessage to the DUT to modify the value of an attribute with the dataversion field set to the value received earlier.",
                    "TH sends the WriteRequestMessage to the DUT to modify the value of a specific attribute data that needs Timed Write transaction to write and this action is not part of a Timed Write transaction."
                ],
                "Expected Outcome": [
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_NODE",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_ENDPOINT",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_CLUSTER",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_ATTRIBUTE",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_WRITE",
                    "Verify on the TH that the DUT sends the status code UNSUPPORTED_ACCESS",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified for all 3 times.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify the DUT sends a WriteResponseMessage with the status set to Success.Verify the updated value by sending a ReadRequestMessage to read the value that was modified.",
                    "On the TH verify that the DUT does not send a Write Response message with a success back to the TH.",
                    "Verify that the DUT sends a Write Response message with a success back to the TH.Verify by sending a ReadRequest that the Write Action on DUT was successful.",
                    "Verify that the DUT sends a Write Response message with the error DATA_VERSION_MISMATCH for the second Write request.",
                    "On the TH verify that the DUT sends a status code NEEDS_TIMED_INTERACTION."
                ]
            }
        },
        {
            "Test Case Name": "33.4.1. [TC-IDM-4.1] SubscriptionRequestMessage from DUT test cases. [DUT as Client]",
            "Test Case ID": "TC-IDM-4.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the subscription request messages sent from the DUT to the target node",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10"
                ],
                "Ref": [
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2",
                    "10.6.4/8.5.2"
                ],
                "PICS": [
                    "MCORE.IDM.C.SubscribeRequest",
                    "MCORE.IDM.C.SubscribeRequest",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_Bool",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_String",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_UnsignedInteger",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_Integer",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_FloatingPoint",
                    "MCORE.IDM.C.SubscribeRequest.Attribute.DataType_List",
                    "MCORE.IDM.C.SubscribeRequest",
                    "MCORE.IDM.C.SubscribeRequest.MultipleAttributes"
                ],
                "Test Step": [
                    "DUT sends a subscription request message to the target node/reference device for a single attribute of any data type supported.",
                    "DUT sends the subscription request message to THTH sends a report dataDUT sends the status response back to TH",
                    "Activate the subscription between the DUT and the TH for an attribute of data type boolean.Modify that attribute on the TH. TH should send the modified data to the DUT.Modify the attribute multiple times (3 times).",
                    "Activate the subscription between the DUT and the TH for an attribute of data type string.Modify that attribute on the TH. TH should send the modified data to the DUT.Modify the attribute multiple times (3 times).",
                    "Activate the subscription between the DUT and the TH for an attribute of data type unsigned integer.Modify that attribute on the TH. TH should send the modified data to the DUT.Modify the attribute multiple times (3 times).",
                    "Activate the subscription between the DUT and the TH for an attribute of data type signed integer.Modify that attribute on the TH.TH should send the modified data to the DUT.Modify the attribute multiple times (3 times)",
                    "Activate the subscription between the DUT and the TH for an attribute of data type Floating Point.Modify that attribute on the TH.TH should send the modified data to the DUT.Modify the attribute multiple times (3 times)",
                    "Activate the subscription between the DUT and the TH for an attribute of data type list.Modify that attribute on the TH. TH should send the modified data to the DUT.Modify the attribute multiple times (3 times)",
                    "Activate the subscription between the DUT and the TH for an attribute.Force the TH to not send any report data for the duration of the maximum interval.After the maximum interval, TH sends a report data with the subscription id created during the subscription activation.",
                    "DUT sends a subscription request message to the target node/reference device for multiple attributes (>1 attributes)."
                ],
                "Expected Outcome": [
                    "On the reference device verify the subscription message received has the following fields.KeepSubscriptions which is of type boolMinIntervalFloor which is of type uint16MaxIntervalCeiling which is of type uint16[Optional]AttributeRequests which is of type list and contains the attribute paths[Optional]DataVersionFilters which is of type list and contains the data versions of the attributes requested.+[Optional]EventRequests which is of type list[Optional]EventFilters which is of type list[Optional]FabricFiltered which is of type bool +",
                    "Verify on the TH that the status response received from the DUT is \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT for every report data sent is a \"Success\"",
                    "Verify on the TH that the status response received from the DUT says \"INVALID_SUBSCRIPTION\".",
                    "On the reference device verify the subscription request message received has the following fields.KeepSubscriptions which is of type boolMinIntervalFloor which is of type uint16MaxIntervalCeiling which is of type uint16AttributeRequests which is of type list and contains the paths for the requested attributes.DataVersionFilters which is of type list and contains the data versions of the attributes requested.[Optional]EventRequests which is of type list[Optional]EventFilters which is of type listFabricFiltered which is of type bool +"
                ]
            }
        },
        {
            "Test Case Name": "33.4.2. [TC-IDM-4.2] Subscription Response Messages from DUT Test Cases. [DUT as Server] - REMOVED",
            "Test Case ID": "TC-IDM-4.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the subscription response messages sent in response to the subscription request messages to activate a subscription are according to specification.",
            "Test Procedure": {
                "#": [
                    "0",
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "C.9.17",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "8.4.3.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "CR1 reads theServerListattribute from the Descriptor cluster on EP0.If the ICD Management cluster ID (70,0x46) is present in the list:* CR1 reads theIdleModeDurationattribute from the DUT and sets SUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT_SEC =IdleModeDurationandmin_interval_floor_sto 0, otherwise,set SUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT_SEC = 60 mins andmin_interval_floor_sto 3.",
                    "CR1 sends a subscription message to the DUT withMaxIntervalCeilingset to a value greater thanSUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT.DUT sends a report data action to the TH.CR1 sends a success status response to the DUT.DUT sends a Subscribe Response Message to the CR1 to activate the subscription.",
                    "CR1 sends a subscription message to the DUT withMaxIntervalCeilingset to a value less thanSUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT.DUT sends a report data action to the CR1.CR1 sends a success status response to the DUT.DUT sends a Subscribe Response Message to the CR1 to activate the subscription.",
                    "Setup CR2 such that it does not have access to a specific cluster.CR2 sends a subscription message to subscribe to an attribute on that cluster for which it does not have access.AttributePath = [[Attribute =  Attribute, Cluster = ClusterID, Endpoint = EndpointID ]].",
                    "Setup CR2 such that it does not have access to all attributes on a specific cluster and endpoint.CR2 sends a subscription request to subscribe to all attributes for which it does not have access.AttributePath = [[Cluster = ClusterID, Endpoint = EndpointID ]].",
                    "Setup CR2 such that it does not have access to an Endpoint.CR2 sends a subscription request to subscribe to all attributes on all clusters on a specific Endpoint for which it does not have access.AttributePath = [[ Endpoint = EndpointID ]].",
                    "Setup CR2 such that it does not have access to the Node.CR2 sends a subscription request to subscribe to all attributes on all clusters on all endpoints on a Node for which it does not have access.AttributePath = [[  ]].",
                    "CR1 sends a subscription request action for an attribute with an empty DataVersionFilters field.DUT sends a report data action with the data of the attribute along with the data version.Tear down the subscription for that attribute.Start another subscription with the DataVersionFilter field set to the data version received above.",
                    "CR1 sends a subscription request action for an attribute and sets the MinIntervalFloor tomin_interval_floor_sand MaxIntervalCeiling to 10.Activate the Subscription between CR1 and DUT and record the time when the priming ReportDataMessage is received ast_report. Save the returned MaxInterval from the SubscribeResponseMessage asmax_interval_s.",
                    "CR1 modifies the attribute which has been subscribed to on the DUT and waits for an incoming ReportDataMessage. Save the time that the report is received ast_update.",
                    "CR1 sends a subscription request action for an attribute and set the MinIntervalFloor value to be greater than MaxIntervalCeiling. +",
                    "CR1 sends a subscription request to subscribe to a specific global attribute from all clusters on all endpoints. AttributePath = [[Attribute = Global Attribute]]. +",
                    "CR1 sends a subscription request to subscribe to a global attribute on an endpoint on all clusters.  AttributePath = [[Attribute = Global Attribute, Endpoint = EndpointID ]]. +",
                    "CR1 sends a subscription request to the DUT with both AttributeRequests and EventRequests as empty"
                ],
                "Expected Outcome": [
                    "",
                    "Verify on the CR1, a report data message is received.Verify it contains the following dataReport data - data of the attribute/event requested earlier.Verify on the CR1 the Subscribe Response has the following fields,SubscriptionId- Verify it is of type uint32.MaxInterval- Verify it is of type uint32.Verify that theMaxIntervalis less than or equal toMaxIntervalCeiling.",
                    "Verify on the CR1, a report data message is received.Verify it contains the following dataReport data - data of the attribute/event requested earlier.Verify on the CR1 the Subscribe Response has the following fields,SubscriptionId- Verify it is of type uint32.MaxInterval- Verify it is of type uint32.Verify that theMaxIntervalis less than or equal toSUBSCRIPTION_MAX_INTERVAL_PUBLISHER_LIMIT.",
                    "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "Verify that the DUT returns a \"INVALID_ACTION\" status response.",
                    "Verify that the subscription is activated between CR1 and DUT.",
                    "",
                    "Verify thatt_update-t_reportis greater thanmin_interval_floor_sand less than the ReadClient SubscriptionTimeout (calculated by the ReadClient usingmax_interval_sand the maximum estimated network delay based on the MRP parameters for retries with backoff)",
                    "Verify that the DUT sends an error message and the subscription is not established.",
                    "Verify that the Subscription succeeds and the DUT sends back the attribute values for the global attribute.",
                    "Verify that the Subscription succeeds and the DUT sends back the attribute values for the global attribute.Verify no data from other endpoints is sent back.",
                    "Verify that the Subscription does not succeed and the DUT sends back a Status Response Action with the INVALID_ACTION Status Code"
                ]
            }
        },
        {
            "Test Case Name": "33.4.3. [TC-IDM-4.3] Report Data Messages post Subscription Activation from DUT Test Cases. [DUT as Server]",
            "Test Case ID": "TC-IDM-4.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages sent from the DUT after activating subscription are according to specification.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21"
                ],
                "Ref": [
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.2.1",
                    "10.6.5/8.5.2.1",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3",
                    "10.6.5/8.5.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.IDM.S.Attribute_W.DataType_Bool",
                    "MCORE.IDM.S.Attribute_W.DataType_String",
                    "MCORE.IDM.S.Attribute_W.DataType_UnsignedInteger",
                    "MCORE.IDM.S.Attribute_W.DataType_SignedInteger",
                    "MCORE.IDM.S.Attribute_W.DataType_FloatingPoint",
                    "MCORE.IDM.S.Attribute_W.DataType_List",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT and TH activate the subscription.",
                    "Change the value of the attribute which has been subscribed on the DUT by manually changing some settings on the device.Example: Temperature sensor may update the value of the room temperature.Turning on/off on a light bulb.",
                    "DUT and TH activate the subscription.Change the value of the attribute which has been subscribed on the DUT by sending an IMWrite or Invoke message to the DUT from the TH. +",
                    "DUT and TH activate the subscription for an attribute.Do not change the value of the attribute which has been subscribed.",
                    "DUT and TH activate the subscription.Change the value of the attribute which has been subscribed on the DUT.TH force sends a status response with an \"invalid subscription\".Change the value of the attribute which has been subscribed on the DUT.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type bool.Modify that attribute on the DUT.DUT should send the report data with the modified attribute value.Modify the attribute multiple times (3 times) before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type string.Modify that attribute on the DUT.DUT should send the report data with the modified attribute valueModify the attribute multiple times (3 times) before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type \"unsigned integer\".Modify that attribute on the DUT.DUT should send the report data with the modified attribute value.Modify the attribute multiple times (3 times) before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type \"signed integer\".Modify that attribute on the DUT.DUT should send the report data with the modified attribute value.Modify the attribute multiple times (3 times)before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type \"floating point\".Modify that attribute on the DUT.DUT should send the report data with the modified attribute value.Modify the attribute multiple times (3 times) before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for an attribute of data type list.Modify that attribute on the DUT.DUT should send the report data with the modified attribute value.Modify the attribute multiple times (3 times) before theMaxIntervaltime specified during the subscription activation.",
                    "Activate the subscription between the DUT and the TH for any attribute.KeepSubscriptions flag should be set to FalseAfter the Maximum interval time is elapsed, TH should send another subscription request message with different parameters than before.KeepSubscriptions flag should be set to FalseChange the value of the attribute requested on the DUT.",
                    "Activate the subscription between the DUT and the TH for any attributeAfter the Maximum interval time is elapsed, change the value of the attribute requested on the DUT.",
                    "Activate the subscription between the DUT and the TH for an attributeThere are no attribute value changes beforeMaxIntervalelapses.",
                    "TH sends a subscription request action for an attribute to the DUT with the KeepSubscriptions flag set to True.Activate the subscription between DUT and the TH. Initiate another subscription request action to the DUT for another attribute with the KeepSubscriptions flag set to True.Change both the attribute values on the DUT.",
                    "TH sends a subscription request action for an attribute to the DUT with the KeepSubscriptions flag set to True. Activate the subscription between DUT and the TH. Initiate another subscription request action to the DUT for another attribute with the KeepSubscriptions flag set to False. Change both the attribute values on the DUT.",
                    "TH sends a subscription request action for an attribute and all events.Set the MinIntervalFloor to some value say \"N\"(seconds).Change the value of the attribute and trigger an action on the DUT to trigger any event.",
                    "TH sends a subscription request action for attribute wildcard -  AttributePath = [[Endpoint = EndpointID, Cluster = ClusterID]].Set the MinIntervalFloor to some value say \"N\"(seconds).Change all or few of the attributes on the DUT",
                    "TH sends a subscription request to subscribe to an attribute on a specific cluster from all endpoints   AttributePath = [[Attribute = Attribute, Cluster = ClusterID ]].Set the MinIntervalFloor to some value say \"N\"(seconds).Change the attribute on the DUT",
                    "TH sends a subscription request to subscribe to all attributes from all clusters from all endpoints.   AttributePath = [[]].Set the MinIntervalFloor to some value say \"N\"(seconds).Change all or few of the attributes on the DUT",
                    "TH sends a subscription request to subscribe to all attributes from all clusters on an endpoint.   AttributePath = [[Endpoint = EndpointID]].Set the MinIntervalFloor to some value say \"N\"(seconds).Change all or few of the attributes on the DUT",
                    "TH sends a subscription request to subscribe to all attributes from a specific cluster on all endpoints.  AttributePath = [[Cluster = ClusterID]].Set the MinIntervalFloor to some value say \"N\"(seconds).Change all or few of the attributes on the DUT"
                ],
                "Expected Outcome": [
                    "Verify on the TH, a report data message is received.Verify on the TH the Subscribe Response has the following fields:SubscriptionIdandMaxIntervalIn the following Steps 2, 3, 5-10, 13, and 15, theMaxIntervaltime reference in each step is theMaxIntervalpresented in the Subscribe Response of the subscription.",
                    "Verify that there is a report data message sent from the DUT for the changed value of the attribute.Verify that the Report Data is sent when the minimum interval time is reached and before theMaxIntervaltime.",
                    "Verify that there is a report data message sent from the DUT for the changed value of the attribute.Verify that the Report Data is sent when the minimum interval time is reached and before theMaxIntervaltime.",
                    "Verify that there is an empty report data message sent from the DUT to the TH after theMinIntervaltime and no later than theMaxIntervaltime plus an additional duration equal to the total retransmission time according to negotiated MRP parameters.",
                    "Verify that DUT does not send report data for the second time after the subscription has been terminated.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify on the TH that the DUT sends the correct value of the attribute.",
                    "Verify that the DUT sends the changed value of the attribute with the newest subscription id sent with the second request.",
                    "Verify that the DUT  sends the changed value of the attribute to the TH after the next MinIntervalFloor time has passed.",
                    "Verify that the DUT sends a Report Data action with no data to keep the subscription alive.",
                    "Verify that both the subscriptions are active and the TH receives reports for both these attributes on both subscriptions.",
                    "Verify that both the subscriptions are active and the TH receives notifications for both these attributes.Verify that the first subscription is terminated after theMaxIntervalof the first subscription is reached.",
                    "Verify on TH that DUT sends a report action data for both the attribute and the event after N seconds.",
                    "Verify that the DUT sends reports for all the attributes that have changed after N seconds.",
                    "Verify that the DUT sends reports for all the attributes that have changed after N seconds.",
                    "Verify that the DUT sends reports for all the attributes that have changed after N seconds.",
                    "Verify that the DUT sends reports for all the attributes that have changed after N seconds.",
                    "Verify that the DUT sends reports for all the attributes that have changed after N seconds."
                ]
            }
        },
        {
            "Test Case Name": "33.4.4. [TC-IDM-4.4] Persistent Subscription Test Cases. [DUT as Server]",
            "Test Case ID": "TC-IDM-4.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify persistent subscription on a server device.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "9.3.1.1/8.5.3",
                    "9.3.1.1/8.5.3"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a subscription request action for an attribute to the DUT. Activate the subscription between DUT and the TH.",
                    "Power off the DUT. Power on the DUT immediately."
                ],
                "Expected Outcome": [
                    "Verify on the TH that the Report data messages are sent from the DUT to the TH.",
                    "Verify on the TH that the subscription between the DUT and TH is reestablished and DUT is able to send report data messages for the attribute which was subscribed to in step 1 within the MaxInterval time."
                ]
            }
        },
        {
            "Test Case Name": "33.5.1. [TC-IDM-5.1] Timed Request Action from DUT to TH. [DUT as Client]",
            "Test Case ID": "TC-IDM-5.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying the Timed Request Action sent from the DUT is according to the specification for various scenarios.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "8.8.2.1/10.6.8",
                    "8.7.2.2/10.6.8",
                    "8.7.2.2/10.6.8"
                ],
                "PICS": [
                    "MCORE.IDM.C.InvokeRequest",
                    "MCORE.IDM.C.WriteRequest",
                    "MCORE.IDM.C.WriteRequest OR MCORE.IDM.C.InvokeRequest"
                ],
                "Test Step": [
                    "DUT sends the Timed Request to the TH and then sends an Invoke Request Message to the TH after receiving the status response message from the TH.The Timed Request Message should contain a timeout value in milliseconds. (Example - 200 milliseconds)",
                    "DUT sends the Timed Request to the TH and then sends a WriteRequestMessage to the TH after receiving the status response message from the TH.The Timed Request Message should contain a timeout value in milliseconds. (Example - 200 milliseconds)",
                    "DUT sends the Timed Request to the THThe Timed Request Message should contain a timeout value in milliseconds. (Example - 200 milliseconds)Force the TH to not send a response back to the DUT for the received timed request."
                ],
                "Expected Outcome": [
                    "On the TH verify the received timed request message has the timeout value as sent by the DUT.Verify that the message is unicast.Verify that the DUT sends the Invoke Request Message to the TH before the specified timeout value.Verify that the Invoke Request has TimedRequest set to True.",
                    "On the TH verify the received timed request message has the timeout value as sent by the DUT.Verify that the message is unicast.Verify that the DUT sends the WriteRequestMessage to the TH before the specified timeout value.Verify the WriteRequestMessage has the TimedRequest field set to TRUE.",
                    "Verify that the DUT does not send a follow up message to the TH as it did not receive the initial response for the Timed request."
                ]
            }
        },
        {
            "Test Case Name": "33.5.2. [TC-IDM-5.2] Status Response from DUT in response to a Timed Request Action from TH.",
            "Test Case ID": "TC-IDM-5.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verifying that the DUT sends a status response when a Timed Request Action is received. Verifies other error conditions as well.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4"
                ],
                "Ref": [
                    "8.8.2.1/10.6.8",
                    "8.7.2.2/10.6.8",
                    "8.7.2.2/10.6.8",
                    "8.7.2.2/10.6.8"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a Timed Request Message with the timeout value set. (Example - 200 milliseconds). +",
                    "TH sends a Timed Request Message(Timed Write Transaction) with the timeout value set. (Example - 200 milliseconds).Wait for the status response message to be received.Send the Write Request Message to the DUT.",
                    "TH sends a Timed Request Message(Timed Invoke Transaction) with the timeout value set. (Example - 200 milliseconds).Wait for the status response message to be received.Wait for 5 seconds(Timer has expired) and then send the Invoke Request Message to the DUT.",
                    "TH sends a Timed Request Message(Timed Write Transaction) with the timeout value set. (Example - 200 milliseconds).Wait for the status response message to be received.Wait for 5 seconds(Timer has expired) and then send the Write Request Message to the DUT."
                ],
                "Expected Outcome": [
                    "On the TH verify the DUT sends a status response back to TH.",
                    "On the TH verify DUT sends back a Write Response after performing the write action.Verify by sending a ReadRequest that the Write action was performed correctly.",
                    "If the device being certified is Matter release 1.4 or later, Verify DUT responds w/ status TIMEOUT(0x94).If the device being certified is Matter release 1.3 or earlier, verify the DUT sends back a Status response with either status TIMEOUT(0x94) or status UNSUPPORTED_ACCESS(0x7e).",
                    "On the TH verify DUT sends back a Write Response with the UNSUPPORTED_ACCESS status code."
                ]
            }
        },
        {
            "Test Case Name": "33.6.1. [TC-IDM-6.1] Events Read Interaction from TH to DUT. [DUT as Server]",
            "Test Case ID": "TC-IDM-6.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages for events sent from the DUT are according to specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "8.4.2.1/8.9.3.2",
                    "8.4.2.1/8.9.3.2",
                    "8.4.2.1/8.9.3.2",
                    "8.4.2.1/8.9.3.2",
                    "8.4.2.1/8.9.3.2",
                    "8.4.2.1/8.9.3.2",
                    "8.4.3.2",
                    "8.4.3.2",
                    "8.4.3.2",
                    "8.4.3.2/8.9.3.1",
                    "8.4.3.2/8.9.3.1",
                    "8.4.3.2/8.9.3.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends Read Request Message to DUT with EventRequests set to a specific event from a specific cluster on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Specific, Event = Specific].",
                    "TH sends Read Request Message to DUT with EventRequests set to all events from a specific cluster on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Specific, Event = Wildcard].",
                    "TH sends Read Request Message to DUT with EventRequests set to all events from all clusters on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Wildcard, Event = Wildcard].",
                    "TH sends Read Request Message to DUT with EventRequests set to a specific event from a specific cluster on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Specific, Event = Specific].",
                    "TH sends Read Request Message to DUT with EventRequests set to all events from a specific cluster on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Specific, Event = Wildcard].",
                    "TH sends Read Request Message to DUT with EventRequests set to all events from all clusters on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Wildcard, Event = Wildcard].",
                    "TH sends Read Request Message to DUT with EventRequests set to path which indicates a cluster event that is not supported.",
                    "TH sends Read Request Message to DUT with EventRequests set to path which requires a privilege that is not granted for the cluster in the path.",
                    "TH sends Read Request Message to DUT with EventRequests set to Wildcard path where reading an event in the path requires a privilege that is not granted for the cluster in the path.",
                    "TH sends a Read Request Message to the DUT to read back events.Note down the largest event number received in the report data message sent back from the DUT.TH sends Read Request Message to DUT with the EventMin field set to a number less than what was received in the previous step.",
                    "TH sends a Read Request Message to the DUT to read back events.Note down the largest event number received in the report data message sent back from the DUT.TH sends Read Request Message to DUT with the EventMin field set to a number much greater than what was received in the previous step.",
                    "[Testing Chunked Event Data] TH sends Read Request Message to DUT with EventRequests set to all events so as to create a very large event data.For every chunked data message received, DUT sends a status response."
                ],
                "Expected Outcome": [
                    "Verify TH receives Report Data Message with the data for specific event in Read Request Message.",
                    "Verify TH receives Report Data Message with the data for events in Read Request Message.",
                    "Verify TH receives Report Data Message with the data for events in Read Request Message.",
                    "Verify TH receives Report Data Message with the data for specific event in Read Request Message.",
                    "Verify TH receives Report Data Message with the data for events in Read Request Message.",
                    "Verify TH receives Report Data Message with the data for events in Read Request Message.",
                    "Verify TH receives Report Data Message for the event with EventStatusIB generated with the UNSUPPORTED_EVENT Status Code.",
                    "Verify TH receives Report Data Message for the event with EventStatusIB generated with the UNSUPPORTED_ACCESS Status Code 0x7e.",
                    "Verify TH receives Report Data Message with no entry for that event in EventReports list.",
                    "Verify TH receives Report Data Message with EventReports for event numbers higher than or equal to the EventMin field.",
                    "Verify TH receives Report Data Message with empty EventReports, or if Events are present, then verify that it contains EventReports with event numbers bigger than the one provided.",
                    "Verify on the TH that the DUT sends a status response back to the TH on receipt of the report data action for every chunked message.The last chunked message should not receive any status response from the DUT."
                ]
            }
        },
        {
            "Test Case Name": "33.6.2. [TC-IDM-6.2] Events Subscribe Interaction from TH to DUT. [DUT as Server]",
            "Test Case ID": "TC-IDM-6.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages for events sent from the DUT are according to specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "16",
                    "15",
                    "16",
                    "17",
                    "18"
                ],
                "Ref": [
                    "8.5.2.1/8.9.3.2",
                    "8.5.2.1/8.9.3.2",
                    "8.5.2.1/8.9.3.2",
                    "8.5.2.1/8.9.3.2",
                    "8.5.2.1/8.9.3.2",
                    "8.5.2.1/8.9.3.2",
                    "8.5.1",
                    "8.5.1",
                    "8.5.1",
                    "8.5.2.3",
                    "8.5.2.1",
                    "8.5.2.1/8.3.1.3",
                    "8.4.3.2",
                    "8.4.3.2",
                    "8.4.3.2",
                    "8.4.3.2/8.9.3.1",
                    "8.4.3.2/8.9.3.1",
                    "8.4.3.2/8.9.3.1",
                    "8.4.3.2/8.9.3.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends Subscribe Request Message to DUT with EventRequests set to a specific event from a specific cluster on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Specific, Event = Specific].",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to all events from a specific cluster on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Specific, Event = Wildcard].",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to all events from all clusters on a specific endpoint on a specific node that is, [Node = Specific, Endpoint = Specific, Cluster = Wildcard, Event = Wildcard].",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to a specific event from a specific cluster on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Specific, Event = Specific].",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to all events from a specific cluster on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Specific, Event = Wildcard].",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to all events from all clusters on all endpoints on a specific node that is, [Node = Specific, Endpoint = Wildcard, Cluster = Wildcard, Event = Wildcard].",
                    "Activate Event subscription from TH to DUT and trigger the subscribed event on the DUT before minimum interval.",
                    "Activate Event subscription from TH to DUT and and trigger the subscribed event on the DUT before minimum interval.'IsUrgent' flag is set to True for a particular event path in the EventPathIB in the SubscribeRequestMessage.",
                    "Activate Event subscription from TH to DUT with no change in event triggering attribute values before maximum interval.",
                    "With an active Event subscription from TH to DUT, TH sends another Subscribe Request Message to DUT with KeepSubscriptions as False.",
                    "TH sends Subscribe Request Message to DUT + DUT sends Report Data message to DUT.TH sends Status Response Message with a success Status code.",
                    "TH sends Subscribe Request Message to DUT.DUT sends Report Data message to DUT + TH sends Status Response Message with an error Status.",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to path which indicates a cluster event that is not supported.",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to path which requires a privilege that is not granted for the cluster in the path.",
                    "TH sends Subscribe Request Message to DUT with EventRequests set to Wildcard path where reading an event in the path requires a privilege that is not granted for the cluster in the path.",
                    "TH sends Subscribe Request Message to DUT with EventFilterIB Node information field matching the node indicated in the path and EventMin field.",
                    "TH sends Subscribe Request Message to DUT with EventFilterIB Node information field matching the node indicated in the path and the event number is less than the EventMin field.",
                    "With an active Event subscription from TH to DUT, trigger events on DUT multiple times.",
                    "With an active Event subscription from TH to DUT, change attribute values on DUT to create events multiple times.Perform a factory data reset on DUT, re-subscribe to events and continue to change attribute values on DUT to create events multiple times."
                ],
                "Expected Outcome": [
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for specific event in Subscribe Request Message.",
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for events in Subscribe Request Message.",
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for events in Subscribe Request Message.",
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for specific event in Subscribe Request Message.",
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for events in Subscribe Request Message.",
                    "Verify TH receives Report Data Message with SubscriptionId which uniquely identifies this subscription on the publisher and data for events in Subscribe Request Message.",
                    "Verify TH receives Report Data Message for event only after the minimum interval has expired.",
                    "Verify TH receives Report Data Message for all subscribed events, including any queued events leading up to (and including) the urgent event, after the minimum interval time.",
                    "Verify TH receives Report Data Message every maximum interval or possibly more frequently to keep the subscription alive.",
                    "All existing or pending subscriptions on the publisher for this subscriber shall be terminated.Verify TH receives report data message for any event changes for the second subscribe request sent by the TH.",
                    "Verify TH receives Subscribe Response action to activate the subscription with fieldsSubscriptionId - identifies the subscription (uint32 type).MaxInterval - the final maximum interval for the subscription in seconds (uint16 type).",
                    "Verify DUT terminates the Subscribe interaction and no further Report Data messages are received.",
                    "Verify TH receives Report Data Message for the event with EventStatusIB generated with the UNSUPPORTED_EVENT Status Code 0xC7.",
                    "Verify TH receives Report Data Message for the event with EventStatusIB generated with the UNSUPPORTED_ACCESS Status Code 0x7E.",
                    "Verify TH receives Report Data Message with no entry for that event in EventReports list.",
                    "Verify TH receives Report Data Message with EventReports for event numbers higher than the EventMin field.Verify that the subsequent ReportData actions as part of the subscription include the latest EventNo associated with each node generating new events.",
                    "Verify TH receives Report Data Message with empty EventReports.Verify that the subsequent ReportData actions as part of the subscription include the latest EventNo associated with each node generating new events.",
                    "Verify that each event record is assigned a number that is exactly 1 greater than the last created event record on that Node.Verify that for all the events that it has either System/Epoch timestamp or Delta System/Epoch Timestamp if this is not first event in current report",
                    "Verify that each event record is assigned a number that is exactly 1 greater than the last created event record on that Node before factory data reset.Verify that this monotonicity is not preserved across factory data reset."
                ]
            }
        },
        {
            "Test Case Name": "33.6.3. [TC-IDM-6.3] Events Read Interaction from DUT to TH. [DUT as Client]",
            "Test Case ID": "TC-IDM-6.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages for events sent from the DUT are according to specification.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "8.4.2.1/8.9.3.2"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "DUT sends Read Request Message to the TH for a supported event."
                ],
                "Expected Outcome": [
                    "Verify on the TH that the Read Request Message received has these fieldsEventRequests - list of request paths to cluster events. Should be a valid EventPathIB from the Valid Event Paths table and not target a group.EventFilters - list of minimum event numbers per specific node. (Optional)FabricFiltered which is of type bool."
                ]
            }
        },
        {
            "Test Case Name": "33.6.4. [TC-IDM-6.4] Events Subscribe Interaction from DUT to TH. [DUT as Client]",
            "Test Case ID": "TC-IDM-6.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages for events sent from the DUT are according to specification.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "8.5.2.1",
                    "8.4.3.4",
                    "8.5.1",
                    "8.5.3",
                    "8.5.1",
                    "8.5.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends Subscribe Request Message to the TH for a supported event.",
                    "DUT sends Subscribe Request Message to the TH.TH sends Report Data message to DUT.",
                    "DUT sends Subscribe Request Message to the TH and TH does not respond with Report Data message to DUT.",
                    "DUT sends Subscribe Request Message to the TH.TH sends Report Data message to DUT.DUT sends Status Response Message to the TH.TH does not respond with Subscribe Response message to DUT.",
                    "With an active Event subscription from DUT to TH, TH sends Report Data message to DUT with an invalid SubscriptionId.",
                    "With an active Event subscription from DUT to TH, TH sends Report Data message to DUT after the maximum interval from the last Report Data."
                ],
                "Expected Outcome": [
                    "Verify on the TH that the Subscribe Request Message received has these fieldsKeepSubscriptions which is of type bool.MinIntervalFloor which is of type uint16.MaxIntervalCeiling which is of type uint16.EventRequests - list of request paths to cluster events. Should be a valid EventPathIB from the Valid Event Paths table and not target a group.EventFilters - list of minimum event numbers per specific node. (Optional)FabricFiltered which is of type bool.",
                    "Verify that the DUT sends Status Response Action with a success Status Code.",
                    "Verify that the Subscribe interaction is terminated and DUT can send another Subscribe Request Message for events.",
                    "Verify that the Subscribe interaction is terminated and DUT can send another Subscribe Request Message for events.",
                    "Verify that the DUT sends Status Response action with an INVALID_SUBSCRIPTION Status Code.",
                    "Verify that the DUT sends Status Response action with an INVALID_SUBSCRIPTION Status Code."
                ]
            }
        },
        {
            "Test Case Name": "33.6.5. [TC-IDM-7.1] Multi Fabric Subscription Test Cases. [DUT as Server]",
            "Test Case ID": "TC-IDM-7.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify the report data messages for subscriptions requested from devices on different fabrics are handled correctly by the DUT.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "4a",
                    "4b"
                ],
                "Ref": [
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1",
                    "8.5.2.1/12.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "RD1, RD2, RD3, RD4, RD5 send 3 Subscribe Request Messages to DUT.(Total - 15 active subscriptions)Each subscribe request should contain 3 different paths.They can subscribe to different attributes and events.Once all subscriptions are active, change the value of all the attributes that have been subscribed or trigger an action on the DUT to generate an event.",
                    "Factory Reset the DUT and  recommission it onto all fabrics.RD1, RD2, RD3, RD4, RD5 should be on separate, distinct fabrics.RD1 and RD1A should be on the same fabric.",
                    "RD1, RD2, RD3, RD4, RD5 send 3 Subscribe Request Messages to DUT.(Total - 15 active subscriptions)Each subscribe requests should contain 3 different paths.The subscription request from RD1 should contain 4 paths. +",
                    "Factory Reset the DUT and  recommission it onto all fabrics.RD1, RD2, RD3, RD4, RD5 should be on separate, distinct fabrics.RD1 and RD1A should be on the same fabric.",
                    "RD2, RD3, RD4, RD5 send 3 Subscribe request messages each with each of them having 3 different paths.Verify that the subscription request messages from all reference devices succeed.Once all the Subscription Requests are activated, RD1 sends 6 subscription request messages with each of them having 3 different paths.",
                    "Factory Reset the DUT and  recommission it onto all fabrics.RD1, RD2, RD3, RD4, RD5 should be on separate, distinct fabrics.RD1 and RD1A should be on the same fabric.",
                    "RD1, RD2, RD3, RD4, RD5 send 3 Subscribe request messages each with each of them having 3 different paths.Verify that the subscription request messages from RD1, RD2, RD3, RD4 and RD5 succeed.Once all the Subscription Requests are activated, send a Subscribe request messages having 3 different paths from RD1A to the DUT."
                ],
                "Expected Outcome": [
                    "Verify that all Subscription Requests succeed.Verify on each of these Reference Devices that the appropriate attribute value has been received.",
                    "DUT should be successfully commissioned.",
                    "Verify that the subscriptions from RD2, RD3, RD4 and RD5 are not affected.",
                    "DUT should be successfully commissioned.",
                    "Verify that the Subscriptions from RD2, RD3, RD4, RD5 are not affected.",
                    "DUT should be successfully commissioned.",
                    "Verify that the Subscription from RD1A gets INVALID_ACTION and the previous subscriptions from RD2, RD3, RD4 and RD5 are not affected."
                ]
            }
        },
        {
            "Test Case Name": "33.6.6. [TC-IDM-8.1] Fabric scoped Test Cases. [DUT as Server]",
            "Test Case ID": "TC-IDM-8.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will test if the DUT handles fabric scoped/sensitive data appropriately when it\u2019s part of multiple fabrics.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "8.4.2.1",
                    "8.7.3.1",
                    "8.8.2.1",
                    "8.4.3.2",
                    "8.5.1",
                    "8.4.3.2",
                    "8.4.3.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Send a Read Request Message from RC1 and RC2 to read the ACL attribute, which is a fabric scoped list, from the DUT. Fabric filtered should be set to false. +",
                    "Use Access control  cluster to verify this test case.Send a fabric-filtered Read Request Message from each of RC1 and RC2 to read the ACL attribute, which is a fabric scoped list, from the DUT.From RC1 send a Write Request message to the DUT to write to an entry in the fabric scoped list associated with its own fabric.Send a fabric-filtered Read Request Message from each of RC1 and RC2 to read the fabric scoped list from the DUT. +",
                    "Send a Read Request Message to the DUT from RC1 and RC2 to read the fabric scoped list \"Fabrics\" from OperationalCredentialsCluster. Fabric filtered should be set to false.RC1 sends an Invoke command(UpdateFabricLabel) to update the label of its fabric.Send a non-filtered Read Request Message from RC1 and RC2 to read the fabric scoped list from the DUT.",
                    "Activate the subscription between RC1 and DUT for an attribute1 whose value is a list of structs which contain some fabric-sensitive dataActivate the subscription between RC2 and DUT for the same attribute1 whose value is a list of structs which contain some fabric-sensitive data.Modify attribute1 on the DUT.",
                    "Activate the subscription between RC1 and DUT for an Event1 which is fabric sensitiveActivate the subscription between RC2 and DUT for the same Event1 which is fabric sensitive.Trigger Event1 on DUT on the fabric where RC1 is present.",
                    "RC1 sends Subscribe Request Message to DUT with EventRequests set to path where an event in the path is fabric-sensitive and the associated fabric does not match the accessing fabric.",
                    "RC1 sends Read Request Message to DUT with EventRequests set to path where an event in the path is fabric-sensitive and the associated fabric does not match the accessing fabric."
                ],
                "Expected Outcome": [
                    "Verify that the number of entries returned by the DUT for both the reads are same.Verify that the response to RC1 does not contain fabric sensitive data belonging to the other fabric. The fabric sensitive fields in the entries belonging to the other fabric should either be null or contain default values.Verify that the response to RC2 does not contain fabric sensitive data belonging to the other fabric. The fabric sensitive fields in the entries belonging to the other fabric should either be null or contain default values.",
                    "Verify that the data received from DUT after the second read request from RC2 is same as the data received after the first read request from RC2.Verify that the data received from the DUT after the second read request from RC1 has the correct modifications to the data.",
                    "Verify that the label only for the fabric on which RC1 and DUT are present is updated.Verify that the label for the other fabric RC2 is on is not modified.",
                    "Verify that the DUT sends a response to RC1 and RC2 with the modified attribute values.Verify that the response to RC1 does not contain fabric sensitive data belonging to the other fabric. The fabric sensitive fields in the entries belonging to the other fabric should either be null or contain default values.Verify that the response to RC2 does not contain fabric sensitive data belonging to the other fabric. The fabric sensitive fields in the entries belonging to the other fabric should either be null or contain default values.",
                    "Verify that the DUT sends a response to RC1 and not RC2.",
                    "Verify that the DUT sends a Report Data Message with no entry for that event in EventReports list.",
                    "Verify that the DUT sends a Report Data Message with no entry for that event in EventReports list."
                ]
            }
        },
        {
            "Test Case Name": "33.6.7. [TC-IDM-9.1] CONSTRAINT_ERROR status response test cases [DUT as Server] - REMOVED",
            "Test Case ID": "TC-IDM-9.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case will verify that the server sends a status response with CONSTRAINT_ERROR when a particular field is out of range.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "2"
                ],
                "Ref": [
                    "8.7.3.2",
                    "8.7.3.2",
                    "8.7.3.2",
                    "8.7.3.2",
                    "8.7.3.2",
                    "8.7.3.2"
                ],
                "PICS": [
                    "MCORE.IDM.S",
                    "MCORE.IDM.S",
                    "MCORE.IDM.S",
                    "MCORE.IDM.S",
                    "MCORE.IDM.S",
                    "MCORE.IDM.S"
                ],
                "Test Step": [
                    "Set the data field of a command of data type uint16 to an out of range value in the Invoke Request message to the DUT from the TH. Example: Command - OpenCommissioningWindow, data field - Discriminator, Constraint - 0 to 4095",
                    "Set the data field of a command of data type octstr to an out of range value in the Invoke Request message to the DUT from the TH. Set the length of the octstr to a value that is larger than the maximum length allowed. Example: Command - OpenCommissioningWindow, data field - Salt, Constraint - 16 to 32",
                    "Set the data field of a command of data type octstr to an out of range value in the Invoke Request message to the DUT from the TH. Set the length of the octstr to a value that is smaller than the minimum length allowed.  Example: Command - OpenCommissioningWindow, data field - Salt, Constraint - 16 to 32",
                    "Set the data field of a command of data type string to an out of range value in the Invoke Request message to the DUT from the TH. Set the length of the string to a value that is larger than the maximum length allowed. Example: Command - SetRegulatoryConfig, data field - CountryCode, Constraint - 2",
                    "Set the data field of a command of data type string to an out of range value in the Invoke Request message to the DUT from the TH. Set the length of the string to a value that is smaller than the minimum length allowed. Example: Command - SetRegulatoryConfig, data field - CountryCode, Constraint - 2",
                    "Read every attribute that is writable with bounds from all the clusters from all the endpoints. For every writable attribute read, set the data field  to an out of bounds value in the Write Request message to the DUT from the TH."
                ],
                "Expected Outcome": [
                    "Verify on the TH that the DUT sends a Status Response with a CONSTRAINT_ERROR Status Code.",
                    "Verify on the TH that the DUT sends a Status Response with a CONSTRAINT_ERROR Status Code.",
                    "Verify on the TH that the DUT sends a Status Response with a CONSTRAINT_ERROR Status Code.",
                    "Verify on the TH that the DUT sends a Status Response with a CONSTRAINT_ERROR Status Code.",
                    "Verify on the TH that the DUT sends a Status Response with a CONSTRAINT_ERROR Status Code.",
                    "Verify on the TH that the DUT sends a Status Response Action with a CONSTRAINT_ERROR Status Code."
                ]
            }
        },
        {
            "Test Case Name": "33.6.8. [TC-IDM-10.1] Cluster requirements - Cluster ID and Global attribute conformance checks [DUT as Server]",
            "Test Case ID": "TC-IDM-10.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests global attribute presence and AttributeList correctness for every cluster on every endpoint",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "For every cluster on every endpoint verify that the cluster includes all the mandatory global attributes:ClusterRevisionFeatureMapAttributeListAcceptedCommandListGeneratedCommandList",
                    "For every cluster on every endpoint verify that the following global attributes do not contain duplicate values and every value in the list is in the required range:AttributeListAcceptedCommandListGeneratedCommandList",
                    "For every cluster on every endpoint, verify that each attribute reported in the AttributeList exactly matches the set of received attributes from the wildcard read. In other words, if an attribute ID is present in the AttributeList, a report for that path must have been seen in the read of step 1, and if an attribute path exists in the read of step 1, its ID must be present in the AttributeList of the associated cluster within the hierarchy.",
                    "For every standard cluster on every endpoint, verify that none of the global attributes contain any additional values in their standard or scoped ranges that are not defined in the cluster specification. The global attributes to be checked and their standard and scoped ranges for the are as follows:AttributeList: (0x0000_0000 - 0x0000_4FFF) and (0x0000_F000 - 0x0000_FFFE)AcceptedCommandList: 0x0000_0000 - 0x0000_00FFGeneratedCommandList: 0x0000_0000 - 0x0000_00FF",
                    "For every cluster on every endpoint, verify that none of the global attributes contain values with prefixes outside the allowed standard or test_vendor MEI prefix range. The disallowed range of values for all global attributes is 0xFFF5_0000 - 0xFFFF_FFFF. The set of global attributes to be checked is as follows:AttributeListAcceptedCommandListGeneratedCommandList",
                    "For every cluster on every endpoint, verify that none of the global attributes contain MEI values outside of the allowed suffix range. The values to be checked and the allowed range of values is as follows:* AttributeList: (0xXXXX_0000 -  0xXXXX_4FFF) and (0xXXXX_F000 - 0xXXXX_FFFE)* AcceptedCommandList: 0xXXXX_0000 - 0xXXXX_00FF* GeneratedCommandList: 0xXXXX_0000 - 0xXXXX_00FFwhere XXXX denotes any prefix value. The prefix of each item should be masked before performing suffix range checks.",
                    "For every cluster on every endpoint, verify that the cluster ID prefix is in the standard or MEI range.",
                    "For every cluster on every endpoint, verify that if the cluster ID is in the standard prefix range, that the ID is a known cluster ID.",
                    "For every cluster on every endpoint, verify that if the cluster ID is in the MEI prefix range, that the suffix is in the manufacturer suffix range (0xFC00 - 0xFFFE)",
                    "For every standard cluster on every endpoint, verify that the FeatureMap contains only known feature flags for that cluster."
                ]
            }
        },
        {
            "Test Case Name": "33.6.9. [TC-IDM-10.2] Cluster requirements - Conformance [DUT as Server]",
            "Test Case ID": "TC-IDM-10.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests cluster conformance for features, attributes and commands across all endpoints.",
            "Test Procedure": {
                "#": [
                    "1",
                    "1a",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "5a",
                    "5b",
                    "5c",
                    "5d"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes (including global attributes) from all endpoints",
                    "For every server cluster on every endpoint, verify that the cluster is not provisional in the specification",
                    "For every server cluster on every endpoint, verify that all features listed in the feature map are known features from the specification",
                    "For every server cluster on every endpoint, assess the conformance of each feature listed in the specification using the generated Data Model XML.",
                    "For every server cluster on every endpoint, for each feature listed in the FeatureMap, ensure that the feature is allowed per the conformance as assessed in step2b",
                    "For every server cluster on every endpoint, for each feature present in the spec, if the feature is required per the conformance in step2b, ensure it is present",
                    "For every server cluster on every endpoint, verify that all attributes in the standard range are known attributes from the specification",
                    "For every server cluster on every endpoint, assess the conformance of each attribute listed in the specification using the generated Data Model XML.",
                    "For every server cluster on every endpoint, for each attribute listed in the AttributeList, ensure that the attribute is allowed per the conformance as assessed in step3b",
                    "For every server cluster on every endpoint, for each attribute present in the spec, if the attribute is required per the conformance in step3b, ensure it is present",
                    "For every server cluster on every endpoint, verify that all commands listed in the AcceptedCommands list in the standard range are known commands from the specification",
                    "For every server cluster on every endpoint, assess the conformance of each client \u21d2 server command listed in the specification using the generated Data Model XML.",
                    "For every server cluster on every endpoint, for each command listed in the AcceptedCommands list, ensure that the command is allowed per the conformance as assessed in step4b",
                    "For every server cluster on every endpoint, for each client \u21d2 server command in the spec, if the command is required per the conformance in step4b, ensure it is present",
                    "For every server cluster on every endpoint, verify that all commands listed in the GeneratedCommands list in the standard range are known commands from the specification",
                    "For every server cluster on every endpoint, assess the conformance of each server \u21d2 client command listed in the specification using the generated Data Model XML.",
                    "For every server cluster on every endpoint, for each command listed in the GeneratedCommands list, ensure that the command is allowed per the conformance as assessed in step5b",
                    "For every server cluster on every endpoint, for each server \u21d2 client command in the spec, if the command is required per the conformance in step5b, ensure it is present"
                ],
                "Expected Outcome": [
                    "",
                    "No provisional clusters are present on the DUT",
                    "No non-spec features are present on the DUT",
                    "",
                    "No disallowed features are present in the feature map",
                    "No required features missing from the DUT",
                    "No non-spec standard attributes are present on the DUT",
                    "",
                    "No disallowed attributes are present in the AttributeList",
                    "No required attributes missing from the DUT",
                    "No non-spec standard commands are present in the AcceptedCommands list",
                    "",
                    "No disallowed commands are present in the AcceptedCommands",
                    "No required AcceptedCommands are missing from the DUT",
                    "No non-spec standard commands are present in the GeneratedCommands list",
                    "",
                    "No disallowed commands are present in the GeneratedCommands",
                    "No required GeneratedCommands are missing from the DUT"
                ]
            }
        },
        {
            "Test Case Name": "33.6.10. [TC-IDM-10.3] Cluster requirements - Revision [DUT as Server]",
            "Test Case ID": "TC-IDM-10.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests the cluster revisions on the DUT are the most recent per the spec.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    "For every server cluster on every endpoint, ensure that the ClusterRevision is the highest cluster revision listed in the spec"
                ],
                "Expected Outcome": [
                    "",
                    "No clusters have ClusterRevisions that do not match the specification"
                ]
            }
        },
        {
            "Test Case Name": "33.6.11. [TC-IDM-10.4] Cluster requirements - PICS [DUT as Server]",
            "Test Case ID": "TC-IDM-10.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests the PICS for clusters, features, attributes, and commands on the DUT match exactly the PICS.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes on the endpoint under test",
                    "For every standard cluster:If the cluster is present on the endpoint, ensure the server-side PICS code for the cluster is present in the PICS file (e.g.OO.Sfor On/Off cluster).If the cluster is not present on the endpoint, ensure the cluster server PICS code is not present in the PICS file.",
                    "For every standard cluster, for every attribute in the cluster:If the cluster is present on the endpoint and the attribute ID is present in theAttributeListglobal attribute within the cluster, ensure the server-side PICS code for the attribute is present in the PICS file (e.g. OO.S.A000 for On/Off cluster\u2019sOnOffattribute).Otherwise, ensure the attribute PICS code is NOT present in the PICS file.",
                    "For every cluster present in the spec, for every client \u2192 server command in the cluster:If the cluster is present on the endpoint and the command id is present in the accepted commands list, ensure the PICS code for the accepted command is present in the PICS file.Otherwise, ensure the accepted command PICS code is not present in the PICS file.",
                    "For every cluster present in the spec, for every server \u2192 client command in the cluster:If the cluster is present on the endpoint and the command id is present in the generated commands list, ensure the PICS code for the generated command is present in the PICS file.Otherwise, ensure the generated command PICS code is not present in the PICS file.",
                    "For every cluster present in the spec, for every feature in the cluster:If the cluster is present on the endpoint and the feature is marked in the feature map, ensure the PICS code for the feature is present in the PICS file.Otherwise, ensure the feature PICS code is not present in the PICS file.",
                    "Check that the PICS_SDK_CI_ONLY PICS is not set."
                ],
                "Expected Outcome": [
                    "",
                    "PICS exactly match for server clusters.",
                    "PICS exactly match for all attributes in all clusters.",
                    "PICS exactly match for all accepted commands in all clusters.",
                    "PICS exactly match for all generated commands in all clusters.",
                    "PICS exactly match for all features in all clusters.",
                    "PICS is not set."
                ]
            }
        },
        {
            "Test Case Name": "33.6.12. [TC-IDM-11.1] Data types - attribute strings [DUT as Server] - data model",
            "Test Case ID": "TC-IDM-11.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that no string attributes on the node contain invalid characters.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    "For every returned attribute, if the attribute type is string and the returned value is not Null or empty, ensure the returned value is a valid UTF-8-encoded string. It is not permitted to have partially encoded codepoints between the last legally-encoded codepoint and the end of the string."
                ],
                "Expected Outcome": [
                    "",
                    "All string-type attributes are valid UTF-8."
                ]
            }
        },
        {
            "Test Case Name": "33.6.13. [TC-IDM-12.1] Device attribute information [DUT as Server]",
            "Test Case ID": "TC-IDM-12.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test is used to create a json file of the wildcard attribute read for certification submission.",
            "Test Procedure": {
                "#": [
                    "0",
                    "1"
                ],
                "TestStep": [
                    "TH performs a wildcard read of all attributes and endpoints on the device",
                    "TH creates a MatterTlvJson dump of the wildcard attributes for submission to certification."
                ],
                "Expected Outcome": [
                    "",
                    ""
                ]
            }
        }
    ],
    "Administrator_Commissioning": [
        {
            "Test Case Name": "37.1.1. [TC-CADMIN-1.1] Administrator Behavior using ECM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Administrators involved in a Multiple Fabrics scenario are behaving properly by fulfilling:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3.a",
                    "3.b",
                    "4.a",
                    "4.b",
                    "4.c",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "CADMIN.M.UserInterfaceDisplay",
                    "CADMIN.C",
                    "",
                    "BINFO.C.A0005(NodeLabel)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "BINFO.C.A0005(NodeLabel)",
                    "BINFO.C.A0005(NodeLabel)",
                    "",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "CADMIN.C",
                    "BINFO.C.A0005(NodeLabel)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with TH_CE",
                    "TH_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM (Enhanced Commissioning Method).",
                    "TH_CR1 sends command to TH_CE to read the list of Fabrics",
                    "Introduce dashes and spaces into the 11 digit Manual Code provided in step 2 and enter it in the userinterfacedisplay of DUT_CR2",
                    "DUT_CR2 starts a commissioning process with TH_CE",
                    "Verify TH_CE is now discoverable over DNS-SD with two SRV Records",
                    "DUT_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to read the list of Fabrics",
                    "TH_CR1 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to read, write and then read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "Turn off TH_CR1",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM (Enhanced Commissioning Method)",
                    "DUT_CR2 sends command to TH_CE to revoke the commissioning window using theRevoke Commissioningcommand",
                    "TH_CR3 attempts to execute a PASE to starts a commissioning process with TH_CE",
                    "DUT_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window using ECM",
                    "Wait for commissioning window that was opened in step 13 to timeout",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window using ECM",
                    "TH_CR1 starts a commissioning process with TH_CE before the timeout from step 15"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by TH_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify TH_CE reports 1 entry in the Fabrics list attribute, and that this entry matches the first commissioning\u2019s information.",
                    "Verify that Manual Code entered in DUT_CR2 contains dashes and spaces",
                    "TH_CE is commissioned by DUT_CR2",
                    "",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE reports 2 entries in the Fabrics list attribute, and that these entries match the commissioning state to date.",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE successfully receives the read and write commands. Verify the initial read reflect the value written in the above step. Verify the subsequent write/read are successful.",
                    "Verify no interactions are received by TH_CE from TH_CR1",
                    "Verify TH_CE opens its Commissioning window to allow a new commissioning",
                    "Verify TH_CE closes its commissioning window",
                    "Verify that either no_matterc._udpcommissionable records exist matching the previously obtained discriminator, or that TH_CE refuses to allow a PASE with the provided passcode from the onboarding payload.",
                    "Verify TH_CE successfully receives the read and write commands",
                    "TH_CE opens its Commissioning window to allow a new commissioning",
                    "Commissioning window opened in the above step should get closed (Timedout)",
                    "TH_CE opens its Commissioning window to allow a new commissioning",
                    "Verify TH_CE shows OperationalCert error code 9 response \"Trying to add a NOC for a fabric that already exists\" as TH_CR1 already commissioned TH_CE in step 1"
                ]
            }
        },
        {
            "Test Case Name": "37.1.2. [TC-CADMIN-1.2] Administrator Behavior using BCM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Administrators involved in a Multiple Fabrics scenario are behaving properly by fulfilling:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4.a",
                    "4.b",
                    "4.c",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "CADMIN.C",
                    "",
                    "BINFO.C.A0005(NodeLabel)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "BINFO.C.A0005(NodeLabel)",
                    "BINFO.C.A0005(NodeLabel)",
                    "",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "CADMIN.C",
                    "BINFO.C.A0005(NodeLabel)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with TH_CE",
                    "TH_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM (Basic Commissioning Method)",
                    "TH_CR1 sends command to TH_CE to read the list of Fabrics",
                    "DUT_CR2 starts a commissioning process with TH_CE",
                    "Verify TH_CE is now discoverable over DNS-SD with two SRV Records",
                    "DUT_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to read the list of Fabrics on TH_CE",
                    "TH_CR1 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to read, write and then read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "Turn off TH_CR1",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM (Basic Commissioning Method)",
                    "DUT_CR2 sends command to TH_CE to revoke the commissioning window using theRevoke Commissioningcommand",
                    "TH_CR3 attempts to execute a PASE to starts a commissioning process with TH_CE",
                    "DUT_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window using BCM",
                    "Wait for commissioning window that was opened in step 13 to timeout",
                    "DUT_CR2 sends command to TH_CE to open a commissioning window using BCM",
                    "TH_CR1 starts a commissioning process with TH_CE before the timeout from step 15"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by TH_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify TH_CE reports 1 entry in the Fabrics list attribute, and that this entry matches the first commissioning\u2019s information.",
                    "TH_CE is commissioned by DUT_CR2",
                    "",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE reports 2 entries in the Fabrics list attribute, and that these entries match the commissioning state to date.",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE successfully receives all the read and write commands. Verify the initial read reflect the value written in the above step. Verify the subsequent write/read are successful.",
                    "Verify no interactions are received by TH_CE from TH_CR1",
                    "TH_CE opens its Commissioning window to allow a new commissioning",
                    "TH_CE closes its commissioning window",
                    "Verify that either no_matterc._udpcommissionable records exist matching the previously obtained discriminator, or that TH_CE refuses to allow a PASE with the provided passcode from the onboarding payload.",
                    "Verify TH_CE successfully receives the read and write commands",
                    "TH_CE opens its Commissioning window to allow a new commissioning",
                    "Commissioning window opened in the above step should get closed (Timedout)",
                    "TH_CE opens its Commissioning window to allow a new commissioning",
                    "Verify TH_CE shows OperationalCert error code 9 response \"Trying to add a NOC for a fabric that already exists\" as TH_CR1 already commissioned TH_CE in step 1"
                ]
            }
        },
        {
            "Test Case Name": "37.1.3. [TC-CADMIN-1.3] Node Behavior using ECM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Node behavior in a Multiple Fabrics scenario:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "2.c",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S",
                    "",
                    "OPCREDS.S.A0001(Fabrics)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "BINFO.S.A0005(NodeLabel)",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "Verify DUT_CE is now discoverable over DNS-SD with two SRV Records",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "TH_CR2 reads the list of Fabrics on DUT_CE",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR2 reads, writes and then reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR2 opens a commissioning window on DUT_CE using ECM",
                    "Wait for the commissioning window in step 9 to timeout",
                    "TH_CR2 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR2 opens a commissioning window on DUT_CE using ECM",
                    "TH_CR1 starts a commissioning process with DUT_CE before the timeout from step 12"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 and is assigned a node ID1, under TH_CR1\u2019s root of trust.",
                    "DUT_CE opens its Commissioning window to allow a second commissioning.",
                    "Verify that the DNS-SD advertisement shows CM=2",
                    "Verify DUT_CE responds to both write/read with a success",
                    "DUT_CE is commissioned by TH_CR2 on Fabric ID2 and is assigned a node ID2, under TH_CR2\u2019s root of trust.",
                    "",
                    "Verify the read is successful to DUT_CE and verify DUT_CE reports 2 entries in theFabricsattribute, matching both NOCs commissioned previously in terms of root of trust, Fabric ID and Node ID: <TH_CR1\u2019s root, Fabric ID1, Node ID1> and <TH_CR2\u2019s root, Fabric ID2, Node ID2>.",
                    "Verify the read is successful to DUT_CE and verify DUT_CE reports 2 entries in theFabricsattribute, matching both NOCs commissioned previously in terms of root of trust, Fabric ID and Node ID: <TH_CR1\u2019s root, Fabric ID1, Node ID1> and <TH_CR2\u2019s root, Fabric ID2, Node ID2>.",
                    "Verify DUT_CE responds to both write/read with a success",
                    "Verify the initial read reflect the value written in the above step. Verify DUT_CE responds to both write/read with a success",
                    "DUT_CE opens its Commissioning window to allow a new commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE opens its Commissioning window to allow a new commissioning",
                    "Since DUT_CE was already commissioned by TH_CR1 in step 1, AddNOC fails with NOCResponse with StatusCode field set to FabricConflict (9)"
                ]
            }
        },
        {
            "Test Case Name": "37.1.4. [TC-CADMIN-1.4] Node Behavior using BCM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies Node behavior in a Multiple Fabrics scenario:",
            "Test Procedure": {
                "#": [
                    "1",
                    "2.a",
                    "2.b",
                    "2.c",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S",
                    "",
                    "OPCREDS.S.A0001(Fabrics)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "BINFO.S.A0005(NodeLabel)",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "Verify DUT_CE is now discoverable over DNS-SD with two SRV Records",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "TH_CR2 reads the list of Fabrics on DUT_CE",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR2 reads, writes and then reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of TH_CE",
                    "TH_CR2 opens a commissioning window on DUT_CE using BCM",
                    "Wait for the commissioning window in step 9 to timeout",
                    "TH_CR2 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR2 opens a commissioning window on DUT_CE using BCM",
                    "TH_CR1 starts a commissioning process with DUT_CE before the timeout from step 12"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify that the DNS-SD advertisement shows CM=1",
                    "Verify DUT_CE responds to both write/read with a success",
                    "DUT_CE is commissioned by TH_CR2 on Fabric ID2 and is assigned a node ID2, under TH_CR2\u2019s root of trust.",
                    "",
                    "Verify the read is successful to DUT_CE and verify DUT_CE reports 2 entries in theFabricsattribute, matching both NOCs commissioned previously in terms of root of trust, Fabric ID and Node ID: <TH_CR1\u2019s root, Fabric ID1, Node ID1> and <TH_CR2\u2019s root, Fabric ID2, Node ID2>.",
                    "Verify the read is successful to DUT_CE and verify DUT_CE reports 2 entries in theFabricsattribute, matching both NOCs commissioned previously in terms of root of trust, Fabric ID and Node ID: <TH_CR1\u2019s root, Fabric ID1, Node ID1> and <TH_CR2\u2019s root, Fabric ID2, Node ID2>.",
                    "Verify DUT_CE responds to both write/read with a success",
                    "Verify the initial read reflect the value written in the above step. Verify DUT_CE responds to both write/read with a success",
                    "DUT_CE opens its Commissioning window to allow a new commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE opens its Commissioning window to allow a new commissioning",
                    "Since DUT_CE was already commissioned by TH_CR1 in step 1, AddNOC fails with NOCResponse with StatusCode field set to FabricConflict (9)"
                ]
            }
        },
        {
            "Test Case Name": "37.1.5. [TC-CADMIN-1.5] Commissioning window handling timeout and revocation using ECM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the commissioning windows is open only during the expected time and can be revoked at any time.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "CADMIN.S",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR2 starts a commissioning process with DUT_CE after PIXIT.CADMIN.CwDuration (that was given in step 2) + 10 seconds",
                    "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM but with wrong PakeVerifier value",
                    "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 opens another commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 tries to revoke the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR3 starts a commissioning process with DUT_CE"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify that the DNS-SD advertisement shows CM=2",
                    "Verify DUT_CE is NOT commissioned by TH_CR2 since the commissioning process started after the timeout",
                    "Verify DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify DUT_CE closes its Commissioning window",
                    "Verify DUT_CE is NOT commissioned by TH_CR2",
                    "Verify DUT_CE does not crash and no actions are done on DUT_CE due to this command",
                    "Verify DUT_CE responds to both write/read with a success",
                    "Verify DUT_CE fails to open Commissioning window with status code 3 (PakeParameterError)",
                    "Verify DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify DUT_CE fails to open Commissioning window with status code 2 (Busy)",
                    "DUT_CE is commissioned by TH_CR2",
                    "Verify DUT_CE fails to revoke giving status code 4 (WindowNotOpen) as there was no window open",
                    "TH_CR3 fails to establish PASE with DUT_CE since in step 10 after a successful commissioning the DUT_CE needs to end its commissioning window"
                ]
            }
        },
        {
            "Test Case Name": "37.1.6. [TC-CADMIN-1.6] Commissioning window handling timeout and revocation using BCM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the commissioning windows is open only during the expected time and can be revoked at any time.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "CADMIN.S",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "BINFO.S.A0005(NodeLabel)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR2 starts a commissioning process with DUT_CE after PIXIT.CADMIN.CwDuration (that was given in step 2) + 10 seconds",
                    "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR1 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR1 opens a new commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR1 opens another commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 tries to revoke the commissioning window on DUT_CE using RevokeCommissioning command",
                    "TH_CR3 starts a commissioning process with DUT_CE"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify that the DNS-SD advertisement shows CM=1",
                    "Verify DUT_CE is NOT commissioned by TH_CR2 since the commissioning process started after the timeout",
                    "Verify DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify DUT_CE closes its Commissioning window",
                    "Verify DUT_CE is NOT commissioned by TH_CR2",
                    "Verify DUT_CE does not crash and no actions are done on DUT_CE due to this command",
                    "Verify DUT_CE responds to both write/read with a success",
                    "Verify DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify DUT_CE fails to open commissioning window with status code 2 (Busy)",
                    "DUT_CE is commissioned by TH_CR2",
                    "Verify DUT_CE fails to revoke with status code 4 (WindowNotOpen) as there was not window open",
                    "TH_CR3 fails to establish PASE with DUT_CE since in step 10 after a successful commissioning the DUT_CE needs to end its commissioning window"
                ]
            }
        },
        {
            "Test Case Name": "37.1.7. [TC-CADMIN-1.7] Commissioning window handling timeout and revocation using ECM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the commissioning windows is open only during the expected time and can be revoked at any time.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3.a",
                    "3.b",
                    "3.c",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.M.UserInterfaceDisplay",
                    "CADMIN.M.UserInterfaceDisplay",
                    "CADMIN.M.AudioInterface",
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "CADMIN.C",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "BINFO.C.A0005(NodeLabel)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C",
                    "CADMIN.C"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "A User Consent screen pops up asking for User\u2019s permission to allow second commissioner to control TH_CE",
                    "11 digit Manual Code is displayed on the screen in textual format for User to see",
                    "A voice prompt of the Manual Code format should be heard",
                    "TH_CR2 starts a commissioning process with TH_CE after PIXIT.CADMIN.CwDuration (that was given in step 2) + 10 seconds",
                    "DUT_CR1 sends command to TH_CE to open a new commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "DUT_CR1 sends command to TH_CE to revoke the commissioning window",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to revoke the commissioning window",
                    "DUT_CR1 sends commands to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "TH_CR3 starts a commissioning process with TH_CE"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify if the User Consent screen pops up asking for permission. Verify the pop up window closes after User gives permission and proceeds with opening commissioning window.",
                    "Verify that the displayed Manual Code is 11 digits long and doesn\u2019t contain Vendor_ID or Product_ID.",
                    "Verify that a voice prompt saying the Manual Code should be uttered in hearable sound. Verify that the user can ask to repeat the Manual Code and it should be repeated.",
                    "Verify TH_CE is NOT commissioned by TH_CR2 since the commissioning process started after the timeout",
                    "Verify TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify TH_CE closes its Commissioning window",
                    "Verify TH_CE is NOT commissioned by TH_CR2",
                    "Verify no actions are done on TH_CE due to this command",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE opens its Commissioning window to allow a second commissioning",
                    "TH_CE is commissioned by TH_CR2",
                    "TH_CE fails the commissioning process with TH_CR3 since in step 10 after a successful commissioning the commissioning window has been closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.8. [TC-CADMIN-1.8] Commissioning window handling timeout and revocation using BCM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the commissioning windows is open only during the expected time and can be revoked at any time.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3.a",
                    "3.b",
                    "3.c",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.M.UserInterfaceDisplay",
                    "CADMIN.M.UserInterfaceDisplay",
                    "CADMIN.M.AudioInterface",
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "CADMIN.C",
                    "CADMIN.C.C02.Tx(RevokeCommissioning)",
                    "BINFO.C.A0005(NodeLabel)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C",
                    "CADMIN.C"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "A User Consent screen pops up asking for User\u2019s permission to allow second commissioner to control TH_CE",
                    "11 digit Manual Code is displayed on the screen in textual format for User to see",
                    "A voice prompt of the Manual Code format should be heard",
                    "TH_CR2 starts a commissioning process with TH_CE after PIXIT.CADMIN.CwDuration (that was given in step 2) + 10 seconds",
                    "DUT_CR1 sends command to TH_CE to open a new commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DUT_CR1 sends command to TH_CE to revoke the commissioning window",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to revoke the commissioning window",
                    "DUT_CR1 sends commands to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR1 sends command to TH_CE to open a new commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "TH_CR3 starts a commissioning process with TH_CE"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify if the User Consent screen pops up asking for permission. Verify the pop up window closes after User gives permission and proceeds with opening commissioning window.",
                    "Verify that the displayed Manual Code is 11 digits long and doesn\u2019t contain Vendor_ID or Product_ID.",
                    "Verify that a voice prompt saying the Manual Code should be uttered in hearable sound. Verify that the user can ask to repeat the Manual Code and it should be repeated.",
                    "Verify TH_CE is NOT commissioned by TH_CR2 since the commissioning process started after the timeout",
                    "Verify TH_CE opens its Commissioning window to allow a second commissioning",
                    "Verify TH_CE closes its Commissioning window",
                    "Verify TH_CE is NOT commissioned by TH_CR2",
                    "Verify no actions are done on TH_CE due to this command",
                    "Verify TH_CE successfully receives the read and write commands",
                    "Verify TH_CE opens its Commissioning window to allow a second commissioning",
                    "TH_CE is commissioned by TH_CR2",
                    "TH_CE fails the commissioning process with TH_CR3 since in step 10 after a successful commissioning the commissioning window has been closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.9. [TC-CADMIN-1.9] Device exit commissioning mode after 20 failed commission attempts [ECM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.9",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT exits its commissioning window after the 20 failed commissioning attempts.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S",
                    "CADMIN.S",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "DNS-SD records shows DUT_CE advertising",
                    "Before the expiration of PIXIT.CADMIN.CwDuration set in step 2, Set up a TH_CR2 to start attempting to do PASE to DUT_CE and failing 20 times. This can be done using a valid onboarding payload with an incorrect setupcode",
                    "Before the expiration of PIXIT.CADMIN.CwDuration set in step 2, TH_CR2 attempts to do PASE to DUT_CE using the correct onboarding payload",
                    "TH_CR3 starts a commissioning process with DUT_CE using the correct PAKEVerifier"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify that the DNS-SD advertisement shows CM=2",
                    "Verify that DUT_CE fails to get commissioned by TH_CR2 in all the 20 attempts",
                    "Verify that after 20 unsuccessful attempts in the previous step, DUT_CE has exited commissioning mode and this attempt shows that you can\u2019t begin PASE (failure at PBKDFRequest, not obtaining a PBKDFResponse).",
                    "Verify commissioning flow fails since the commissioning window must be closed after step 4."
                ]
            }
        },
        {
            "Test Case Name": "37.1.10. [TC-CADMIN-1.10] Device exit commissioning mode after 20 failed commission attempts [BCM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.10",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the DUT exits its commissioning window after the 20 failed commissioning attempts.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S",
                    "CADMIN.S"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DNS-SD records shows DUT_CE advertising",
                    "Before the expiration of PIXIT.CADMIN.CwDuration set in step 2, set up a TH_CR2 to start attempting to do PASE to DUT_CE and failing 20 times. This can be done using a valid onboarding payload with an incorrect setupcode",
                    "Before the expiration of PIXIT.CADMIN.CwDuration set in step 2, TH_CR2 attempts to do PASE to DUT_CE using the correct onboarding payload"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "Verify that the DNS-SD advertisement shows CM=1",
                    "Verify that DUT_CE fails to get commissioned by TH_CR2 in all the 20 attempts",
                    "Verify that after 20 unsuccessful attempts in the previous step, DUT_CE has exited commissioning mode and this attempt shows that you can\u2019t begin PASE (failure at PBKDFRequest, not obtaining a PBKDFResponse)."
                ]
            }
        },
        {
            "Test Case Name": "37.1.11. [TC-CADMIN-1.11] Open commissioning window on DUT twice using ECM then BCM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.11",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies DUT successfully rejects the OCW when it is already available for commissioning during PIXIT.CADMIN.CwDuration.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "OPCREDS.S.A0001(Fabrics)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR3 Commissions with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM and TH_CR2 Commissions with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds which was set in step 5, TH_CR1 opens a 2nd commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 6",
                    "TH_CR1 re-opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DNS-SD records shows DUT_CE advertising",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 10, TH_CR3 opens a 2nd commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 10",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 14, TH_CR2 opens a second commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify that the DNS-SD advertisement shows CM=2",
                    "Verify DUT_CE is commissioned to TH_CR3 on Fabric ID3 with Node ID3",
                    "Verify DUT_CE is commissioned to TH_CR2 on Fabric ID2 with Node ID2",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify DUT_CE rejects this second commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "Verify the list of Fabrics only includes Fabric ID1, Fabric ID3, Fabric ID2",
                    "",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify that the DNS-SD advertisement shows CM=1",
                    "Verify DUT_CE rejects the BCM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "Verify the list of Fabrics only includes Fabric ID1, Fabric ID3, Fabric ID2",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "DUT_CE rejects this second commissioning session with a failure response of \"Busy\" (Value = 2)"
                ]
            }
        },
        {
            "Test Case Name": "37.1.12. [TC-CADMIN-1.12] Open commissioning window on DUT twice using ECM then BCM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.12",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies DUT successfully handle rejections on the OCW and reading attributes windowstatus, adminfabricindex, adminvendorid",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.A0001(AdminFabricIndex)",
                    "CADMIN.C.A0002(AdminVendorId)"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM and TH_CR3 Commissions with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM and TH_CR2 Commissions with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 4, DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 4, DUT_CR1 sends command to TH_CE to open a 2nd commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 4",
                    "DUT_CR1 sends command to TH_CE to re-opens a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 8, DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 8, TH_CR3 sends command to TH_CE to open a 2nd commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 8",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 12, TH_CR2 sends command to open a second commissioning window on TH_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "DUT_CR1 sends command to TH_CE to read AdminFabricIndex attribute",
                    "DUT_CR1 sends command to TH_CE to read AdminVendorId attribute"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "Verify that TH_CE is commissioned to TH_CR3",
                    "Verify that TH_CE is commissioned to TH_CR2",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE successfully reads the WindowStatus",
                    "Verify TH_CE rejects the ECM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE successfully reads the WindowStatus",
                    "Verify TH_CE rejects the BCM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "Verify TH_CE rejects the BCM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "TH_CE successfully reads WindowStatus",
                    "TH_CE successfully reads AdminFabricIndex",
                    "TH_CE successfully reads AdminVendorId"
                ]
            }
        },
        {
            "Test Case Name": "37.1.13. [TC-CADMIN-1.13] Open commissioning window twice on DUT using BCM then ECM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.13",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies DUT successfully rejects the OCW when it is already available for commissioning during PIXIT.CADMIN.CwDuration.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "",
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "TH_CR1 reads AdminFabricIndex attribute from DUT_CE",
                    "TH_CR1 reads AdminVendorId attribute from DUT_CE",
                    "DNS-SD records shows DUT_CE advertising",
                    "TH_CR3 Commissions with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM and TH_CR2 Commissions with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 9, TH_CR1 opens a 2nd commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that was set in step 9",
                    "TH_CR1 re-opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "DNS-SD records shows DUT_CE advertising",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 13, TH_CR3 opens a 2nd commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 13",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 19, TH_CR2 opens a second commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 19",
                    "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "TH_CR1 reads AdminFabricIndex attribute from DUT_CE",
                    "TH_CR1 reads AdminVendorId attribute from DUT_CE"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify TH_CR1 reads the WindowStatus value successfully and verify the value to be 2",
                    "Verify TH_CR1 reads the AdminFabricIndex value successfully and verify the value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "Verify TH_CR1 reads the AdminVendorId value successfully and verify this value to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "Verify that the DNS-SD advertisement shows CM=1",
                    "Verify DUT_CE is commissioned to TH_CR3 on Fabric ID3 with Node ID3",
                    "Verify DUT_CE is commissioned to TH_CR2 on Fabric ID2 with Node ID2",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify DUT_CE rejects this second commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "Verify the list of Fabrics includes Fabric ID1, Fabric ID3, Fabric ID2",
                    "",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "Verify the value to be 1",
                    "Verify that the DNS-SD advertisement shows CM=2",
                    "Verify DUT_CE rejects the ECM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "Verify the list of Fabrics only includes Fabric ID1, Fabric ID3, Fabric ID2",
                    "",
                    "DUT_CE opens its Commissioning window to allow a commissioning",
                    "DUT_CE rejects this second commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "Verify TH_CR1 reads the WindowStatus value successfully and verify the value to be 0",
                    "Verify TH_CR1 reads the AdminFabricIndex value successfully and verify the value to be null",
                    "Verify TH_CR1 reads the AdminVendorId value successfully and verify the value to be null"
                ]
            }
        },
        {
            "Test Case Name": "37.1.14. [TC-CADMIN-1.14] Open commissioning window twice on DUT using BCM then ECM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.14",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies DUT as commissioner successfully handles OCW operation and reading attributes windowstatus, adminfabricindex, adminvendorid",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "",
                    "CADMIN.C.A0000(WindowStatus)",
                    "CADMIN.C.A0001(AdminFabricIndex)",
                    "CADMIN.C.A0002(AdminVendorId)"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM and TH_CR3 Commissions with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM and TH_CR2 Commissions with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 4, DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 4, DUT_CR1 sends command to TH_CE to open a 2nd commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 4",
                    "DUT_CR1 sends command to TH_CE to re-opens a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 8, DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 8, TH_CR3 sends command to TH_CE to open a 2nd commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 8",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Before the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 12, TH_CR2 sends command to TH_CE to open a second commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 12",
                    "DUT_CR1 sends command to TH_CE to read WindowStatus attribute",
                    "DUT_CR1 sends command to TH_CE to read AdminFabricIndex attribute",
                    "DUT_CR1 sends command to TH_CE to read AdminVendorId attribute"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "Verify TH_CE is commissioned to TH_CR3",
                    "Verify TH_CE is commissioned to TH_CR2",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE successfully reads the WindowStatus",
                    "Verify TH_CE rejects the BCM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE successfully reads the WindowStatus",
                    "Verify TH_CE rejects the ECM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "Verify TH_CE rejects the ECM commissioning session with a failure response of \"Busy\" (Value = 2)",
                    "",
                    "TH_CE successfully reads WindowStatus",
                    "TH_CE successfully reads AdminFabricIndex",
                    "TH_CE successfully reads AdminVendorId"
                ]
            }
        },
        {
            "Test Case Name": "37.1.15. [TC-CADMIN-1.15] Removing Fabrics from DUT and Fabric index enumeration using ECM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.15",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the removal of Fabrics.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "OPCREDS.S.A0001(Fabrics)",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)",
                    "BINFO.S.A0005(NodeLabel)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "OPCREDS.S.A0001(Fabrics)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR3 starts a commissioning process with DUT_CE",
                    "TH_CR2 reads the list of Fabrics on DUT_CE",
                    "TH_CR2 sendsRemoveFabricwithFabricIndex = 2command to DUT_CE",
                    "TH_CR2 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 reads the list of Fabrics on DUT_CE"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by TH_CR2",
                    "DUT_CE opens its Commissioning window to allow commissioning",
                    "DUT_CE is commissioned by TH_CR3",
                    "Verify the list shows FabricIndex=1, FabricIndex=2, FabricIndex=3",
                    "Verify DUT_CE responses withNOCResponsewith a StatusCode OK (note that expecting OK should ONLY work if an administrator/commissioner on another fabric than the one being removed is invoking RemoveFabric).",
                    "Verify read/write commands fail as expected since the DUT_CE is no longer on the network",
                    "Verify the list shows FabricIndex=1, FabricIndex=3",
                    "Verify DUT_CE is now discoverable over DNS-SD with 2 Operational service records (_matter._tcp SRV records).",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by TH_CR2",
                    "Verify the list shows FabricIndex=1, FabricIndex=3, FabricIndex=4"
                ]
            }
        },
        {
            "Test Case Name": "37.1.16. [TC-CADMIN-1.16] Removing Fabrics from DUT and Fabric index enumeration using BCM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.16",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the removal of Fabrics.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S",
                    "OPCREDS.S.A0001(Fabrics)",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)",
                    "BINFO.S.A0005(NodeLabel)",
                    "OPCREDS.S.A0001(Fabrics)",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S",
                    "OPCREDS.S.A0001(Fabrics)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR3 starts a commissioning process with DUT_CE",
                    "TH_CR2 reads the list of Fabrics on DUT_CE",
                    "TH_CR2 sendsRemoveFabricwithFabricIndex = 2command to DUT_CE",
                    "TH_CR2 writes and reads the Basic Information Cluster\u2019s NodeLabel mandatory attribute of DUT_CE",
                    "TH_CR1 reads the list of Fabrics on DUT_CE",
                    "",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "TH_CR1 reads the list of Fabrics on DUT_CE"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by TH_CR2",
                    "DUT_CE opens its Commissioning window to allow commissioning",
                    "DUT_CE is commissioned by TH_CR3",
                    "Verify the list shows FabricIndex=1, FabricIndex=2, FabricIndex=3",
                    "Verify DUT_CE responses withNOCResponsewith a StatusCode OK (note that expecting OK should ONLY work if an administrator/commissioner on another fabric than the one being removed is invoking RemoveFabric).",
                    "Verify read/write commands fail as expected since the DUT_CE is no longer on the network",
                    "Verify the list shows FabricIndex=1, FabricIndex=3",
                    "Verify DUT_CE is now discoverable over DNS-SD with 2 Operational service records (_matter._tcp SRV records).",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by TH_CR2",
                    "Verify the list shows FabricIndex=1, FabricIndex=3, FabricIndex=4"
                ]
            }
        },
        {
            "Test Case Name": "37.1.17. [TC-CADMIN-1.17] Removing Fabrics from DUT and Fabric index enumeration using ECM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.17",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the removal of Fabrics.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C",
                    "OPCREDS.C.A0001(Fabrics)",
                    "OPCREDS.C.C0a.Tx(RemoveFabric)",
                    "BINFO.C.A0005(NodeLabel)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "",
                    "CADMIN.C.C00.Tx(OpenCommissioningWindow)",
                    "CADMIN.C",
                    "OPCREDS.C.A0001(Fabrics)"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR3 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to read the list of Fabrics",
                    "DUT_CR1 sendsRemoveFabricwithFabricIndex = 2command to TH_CE",
                    "TH_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR1 sends command to TH_CE to read the list of Fabrics on TH_CE",
                    "",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "TH_CR2 sends command to TH_CE to read the list of Fabrics on TH_CE"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "TH_CE is commissioned by TH_CR2",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE is commissioned by TH_CR3",
                    "Verify TH_CE receives and processes the command successfully",
                    "Verify TH_CE responses with \"RemoveFabric successful\" and \"Expiring all sessions for fabric 0x2\"",
                    "Verify read/write commands fail as expected since the TH_CR2 is no longer on the network",
                    "Verify TH_CE receives and processes the command successfully",
                    "Verify TH_CE is now discoverable over DNS-SD with 2 Operational service records (_matter._tcp SRV records).",
                    "TH_CE opens its Commissioning window to allow a second commissioning and verify success response on DUT_CR1",
                    "TH_CE is commissioned by TH_CR2",
                    "Verify TH_CE receives and processes the command successfully"
                ]
            }
        },
        {
            "Test Case Name": "37.1.18. [TC-CADMIN-1.18] Removing Fabrics from DUT and Fabric index enumeration using BCM [DUT - Commissioner]",
            "Test Case ID": "TC-CADMIN-1.18",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the removal of Fabrics.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.1",
                    "12.1.1",
                    "12.1.1",
                    "12.1.4",
                    "12.1.1"
                ],
                "PICS": [
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C",
                    "OPCREDS.C.A0001(Fabrics)",
                    "OPCREDS.C.C0a.Tx(RemoveFabric)",
                    "BINFO.C.A0005(NodeLabel)",
                    "OPCREDS.C.A0001(Fabrics)",
                    "",
                    "CADMIN.C.C01.Tx(OpenBasicCommissioningWindow)",
                    "CADMIN.C",
                    "OPCREDS.C.A0001(Fabrics)"
                ],
                "Test Step": [
                    "DUT_CR1 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR3 starts a commissioning process with TH_CE",
                    "DUT_CR1 sends command to TH_CE to read the list of Fabrics on TH_CE",
                    "DUT_CR1 sendsRemoveFabricwithFabricIndex = 2command to TH_CE",
                    "TH_CR2 sends command to TH_CE to write and read the Basic Information Cluster\u2019s NodeLabel mandatory attribute",
                    "DUT_CR1 sends command to TH_CE to read the list of Fabrics",
                    "",
                    "DUT_CR1 sends command to TH_CE to open a commissioning window with a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "TH_CR2 starts a commissioning process with TH_CE",
                    "TH_CR2 sends command to TH_CE to read the list of Fabrics"
                ],
                "Expected Outcome": [
                    "TH_CE is commissioned by DUT_CR1",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "TH_CE is commissioned by TH_CR2",
                    "TH_CE opens its Commissioning window to allow commissioning",
                    "TH_CE is commissioned by TH_CR3",
                    "Verify TH_CE receives and processes the command successfully",
                    "Verify TH_CE responses with \"RemoveFabric successful\" and \"Expiring all sessions for fabric 0x2\"",
                    "Verify read/write commands fail as expected since the TH_CR2 is no longer on the network",
                    "Verify TH_CE receives and processes the command successfully",
                    "Verify TH_CE is now discoverable over DNS-SD with 2 Operational service records (_matter._tcp SRV records).",
                    "TH_CE opens its Commissioning window to allow a second commissioning",
                    "TH_CE is commissioned by TH_CR2",
                    "Verify TH_CE receives and processes the command successfully"
                ]
            }
        },
        {
            "Test Case Name": "37.1.19. [TC-CADMIN-1.19] max number of Commissioned Fabrics and SupportedFabrics rollover using ECM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.19",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the max number of CommissionedFabrics based on SupportedFabrics.\nIf the device already has the CommissionedFabrics attribute equal to the SupportedFabrics attribute, then the device\u2019s operational credentials table is considered full and the device SHALL process the error by responding with a StatusCode of TableFull as described in Section 11.17.7.7.2, \u201cHandling Errors\u201d.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using ECM",
                    "THn starts a commissioning process with DUT_CE",
                    "Repeat Step 3 and Step 4 an additional (SupportedFabrics - 2) times to reach an index value of SupportedFabrics on DUT_CE",
                    "THn_1 starts a commissioning process and opens a commissioning window with DUT_CE",
                    "TH_CR1 removes FabricIndex1"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by THn on Fabric IDn and is assigned a node IDn",
                    "Verify DUT_CE has reached an attribute value of CommissionedFabrics=SupportedFabrics",
                    "Verify DUT_CE responds with NOCResponse with a StatusCode field value of TableFull(5)",
                    "Verify CommissionedFabrics=SupportedFabrics-1"
                ]
            }
        },
        {
            "Test Case Name": "37.1.20. [TC-CADMIN-1.20] max number of Commissioned Fabrics and SupportedFabrics rollover using BCM [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.20",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the max number of CommissionedFabrics based on SupportedFabrics.\nIf the device already has the CommissionedFabrics attribute equal to the SupportedFabrics attribute, then the device\u2019s operational credentials table is considered full and the device SHALL process the error by responding with a StatusCode of TableFull as described in Section 11.17.7.7.2, \u201cHandling Errors\u201d.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "12.1.4",
                    "12.1.1",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4",
                    "12.1.4"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using a commissioning timeout of PIXIT.CADMIN.CwDuration seconds using BCM",
                    "THn starts a commissioning process with DUT_CE",
                    "Repeat Step 3 and Step 4 an additional (SupportedFabrics - 2) times to reach an index value of SupportedFabrics on DUT_CE",
                    "THn_1 starts a commissioning process and opens a commissioning window with DUT_CE",
                    "TH_CR1 removes FabricIndex1"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "DUT_CE is commissioned by THn on Fabric IDn and is assigned a node IDn",
                    "Verify DUT_CE has reached an attribute value of CommissionedFabrics=SupportedFabrics",
                    "Verify DUT_CE responds with NOCResponse with a StatusCode field value of TableFull(5)",
                    "Verify CommissionedFabrics=SupportedFabrics-1"
                ]
            }
        },
        {
            "Test Case Name": "37.1.21. [TC-CADMIN-1.21] Open commissioning window - durations max and max+1 [BCM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.21",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies when the Commissioning Timeout parameter of the OCW command is NOT set to less than the allowed maximum (15 minutes) therefore supporting 15 minutes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.A0000(WindowStatus)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with a value of 900 seconds",
                    "Wait 901 seconds for commissioning Window to be closed",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with a value of 901 seconds",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "DUT_CE windows status shows the window is closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.22. [TC-CADMIN-1.22] Open commissioning window - durations max and max+1 [ECM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.22",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies when the Commissioning Timeout parameter of the OCW command is NOT set to less than the allowed maximum (15 minutes) therefore supporting 15 minutes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.A0000(WindowStatus)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 900 seconds",
                    "Wait 901 seconds for commissioning Window to be closed",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 901 seconds",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "DUT_CE windows status shows the window is closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.23. [TC-CADMIN-1.23] Open commissioning window - durations min and min-1 [BCM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.23",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies when the Commissioning Timeout parameter of the OCW command is shorter to the minimum value (3m or 180s).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "CADMIN.S.A0000(WindowStatus)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with a value of 180 seconds",
                    "Wait for 181 seconds for commissioning Window to be closed",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with a value of 179 seconds",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "DUT_CE windows status shows the window is closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.24. [TC-CADMIN-1.24] Open commissioning window - durations min and min-1 [ECM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.24",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies when the Commissioning Timeout parameter of the OCW command is shorter to the minimum value (3m or 180s).",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "CADMIN.S.A0000(WindowStatus)"
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 180 seconds",
                    "Wait for 181 seconds for commissioning Window to be closed",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with a value of 179 seconds",
                    "TH_CR1 reads the window status to verify the DUT_CE window is closed"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1 on Fabric ID1 with Node ID1",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE windows status shows the window is closed",
                    "DUT_CE does not open its Commissioning window to allow a second commissioning. DUT_CE shows 'Failed to open commissioning window. Global status 0x85'",
                    "DUT_CE windows status shows the window is closed"
                ]
            }
        },
        {
            "Test Case Name": "37.1.25. [TC-CADMIN-1.25] Subscription to the attributes - verify subscription response [ECM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.25",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies response to the Subscription to attributes when commissioning window is opened or closed",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "12.1.4",
                    "5.4.2.3",
                    "12.1.1",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "CADMIN.S",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CADMIN.S.C00.Rsp(OpenCommissioningWindow)",
                    "",
                    "",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 subscribes to WindowStatus attribute on DUT_CE",
                    "TH_CR1 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "TH_CR1 subscribes to AdminVendorId attribute on DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 subscribes to WindowStatus attribute on DUT_CE",
                    "TH_CR2 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "TH_CR2 subscribes to AdminVendorId attribute on DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using ECM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 opens a commissioning window on DUT_CE using ECM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 18",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 opens a commissioning window on DUT_CE using ECM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 1, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Before expiration of PIXIT.CADMIN.CwDuration seconds set in step 24, TH_CR1 sendsRemoveFabriccommand to DUT_CE with FabricIndex set to the fabric index of TH_CR2\u2019s fabric",
                    "Verify TH_CR1 receives subscription notifications which show AdminFabricIndex value to be null",
                    "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "TH_CR1 reads AdminVendorID attribute from DUT_CE",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 24",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminVendorId to be null"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "Verify TH_CR1 receives WindowStatus subscription notification",
                    "Verify TH_CR1 receives AdminFabricIndex subscription notification",
                    "Verify TH_CR1 receives AdminVendorId subscription notification",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE is commissioned by TH_CR2",
                    "",
                    "Verify TH_CR2 receives WindowStatus subscription notification",
                    "Verify TH_CR2 receives AdminFabricIndex subscription notification",
                    "Verify TH_CR2 receives AdminVendorId subscription notification",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "Verify DUT_CE closes its Commissioning window",
                    "",
                    "",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "Verify DUT_CE responses withNOCResponsewith a StatusCode OK (note that expecting OK should ONLY work if an administrator/commissioner on another fabric than the one being removed is invoking RemoveFabric).",
                    "",
                    "verify the value to be 1 indicating the window is still open",
                    "verify the value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "",
                    ""
                ]
            }
        },
        {
            "Test Case Name": "37.1.26. [TC-CADMIN-1.26] Subscription to the attributes - verify subscription response [BCM] [DUT - Commissionee]",
            "Test Case ID": "TC-CADMIN-1.26",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies response to the Subscription to attributes when commissioning window is opened or closed",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32"
                ],
                "Ref": [
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "5.4.2.3",
                    "12.1.4",
                    "5.4.2.3",
                    "12.1.1",
                    "12.1.1",
                    "5.4.2.3",
                    "5.4.2.3"
                ],
                "PICS": [
                    "CADMIN.S",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "CADMIN.S",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0001(AdminFabricIndex)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "",
                    "CADMIN.S.C02.Rsp(RevokeCommissioning)",
                    "",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "CADMIN.S.C01.Rsp(OpenBasicCommissioningWindow)",
                    "",
                    "",
                    "OPCREDS.S.C0a.Rsp(RemoveFabric)",
                    "",
                    "CADMIN.S.A0000(WindowStatus)",
                    "CADMIN.S.A0002(AdminVendorId)",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH_CR1 starts a commissioning process with DUT_CE",
                    "TH_CR1 subscribes to WindowStatus attribute on DUT_CE",
                    "TH_CR1 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "TH_CR1 subscribes to AdminVendorId attribute on DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "TH_CR2 starts a commissioning process with DUT_CE",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 subscribes to WindowStatus attribute on DUT_CE",
                    "TH_CR2 subscribes to AdminFabricIndex attribute on DUT_CE",
                    "TH_CR2 subscribes to AdminVendorId attribute on DUT_CE",
                    "TH_CR1 opens a commissioning window on DUT_CE using BCM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show  WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR1\u2019s fabric",
                    "TH_CR1 revokes the commissioning window on DUT_CE using RevokeCommissioning command",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 opens a commissioning window on DUT_CE using BCM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show  WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 18",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 0, AdminFabricIndex value to be null, AdminVendorId to be null",
                    "TH_CR2 opens a commissioning window on DUT_CE using BCM with commissioning timeout of PIXIT.CADMIN.CwDuration seconds",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Verify TH_CR2 receives subscription notifications which show WindowStatus value to be 2, AdminFabricIndex value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric, AdminVendorId to be the same as the Vendor ID field of Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "Before expiration of PIXIT.CADMIN.CwDuration seconds set in step 24, TH_CR1 sendsRemoveFabriccommand to DUT_CE with FabricIndex set to the fabric index of TH_CR2\u2019s fabric",
                    "Verify TH_CR1 receives subscription notifications which show AdminFabricIndex value to be null",
                    "TH_CR1 reads WindowStatus attribute from DUT_CE",
                    "TH_CR1 reads AdminVendorID attribute from DUT_CE",
                    "Wait for the expiration of PIXIT.CADMIN.CwDuration seconds that is set in step 24",
                    "Verify TH_CR1 receives subscription notifications which show WindowStatus value to be 0, AdminVendorId to be null"
                ],
                "Expected Outcome": [
                    "DUT_CE is commissioned by TH_CR1",
                    "Verify TH_CR1 receives WindowStatus subscription notification",
                    "Verify TH_CR1 receives AdminFabricIndex subscription notification",
                    "Verify TH_CR1 receives AdminVendorId subscription notification",
                    "DUT_CE opens its Commissioning window to allow a second commissioning",
                    "",
                    "DUT_CE is commissioned by TH_CR2",
                    "",
                    "Verify TH_CR2 receives WindowStatus subscription notification",
                    "Verify TH_CR2 receives AdminFabricIndex subscription notification",
                    "Verify TH_CR2 receives AdminVendorId subscription notification",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "Verify DUT_CE closes its Commissioning window",
                    "",
                    "",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "DUT_CE opens its Commissioning window to allow a third commissioning",
                    "",
                    "",
                    "Verify DUT_CE responses withNOCResponsewith a StatusCode OK (note that expecting OK should ONLY work if an administrator/commissioner on another fabric than the one being removed is invoking RemoveFabric).",
                    "",
                    "verify the value to be 2 indicating the window is still open",
                    "verify the value to be the same as the Fabric Index of the Fabrics attribute list entry corresponding to TH_CR2\u2019s fabric",
                    "",
                    ""
                ]
            }
        }
    ],
    "Bridge": [
        {
            "Test Case Name": "40.1.1. [TC-BR-1] Basics of bridging (DUT server)",
            "Test Case ID": "TC-BR-1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the basic principles of bridging.",
            "Test Procedure": {
                "#": [
                    "1: check exposed device types",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2: check present endpoints, and search bridged devices",
                    "2a",
                    "2b",
                    "3: check Bridged Device Basic Information cluster",
                    "3a",
                    "3b",
                    "4: check battery information for bridged devices",
                    "4",
                    "5: collect device types of bridged devices",
                    "5",
                    "6: Set the state of a bridged device (actuator)",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "7: Read the state of a bridged device (sensor/switch)",
                    "7a",
                    "7b",
                    "7c",
                    "7d"
                ],
                "Ref": [
                    "",
                    "9.13.2",
                    "",
                    "",
                    "",
                    "",
                    "9.13.2",
                    "",
                    "",
                    "9.13.2",
                    "9.13.2",
                    "",
                    "9.13.2",
                    "",
                    "9.13.2",
                    "",
                    "9.13.4.1",
                    "",
                    "",
                    "",
                    "",
                    "9.13.4.2",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "MCORE.BRIDGE",
                    "",
                    "MCORE.BRIDGE & MCORE.BRIDGE.BatInfo",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "",
                    "Read attribute DeviceTypeList of the Descriptor cluster on endpoint 0",
                    "Read attribute PartsList of the Descriptor cluster on endpoint 0",
                    "For each of the endpoints read in step 1b, read attribute DeviceTypeList of the Descriptor cluster on that endpoint",
                    "",
                    "",
                    "Read attribute PartsList of the Descriptor cluster on endpoint found in step 1c",
                    "For each of the endpoints found in this PartsList attribute, read the DeviceTypeList attribute in the Descriptor cluster on such endpoint, and select those endpoints which have (at least) a device type of Bridged Node in their DeviceTypeList",
                    "",
                    "For each of the endpoints for the bridged devices found in step 2b, read attribute PartsList of the Descriptor cluster.",
                    "For each of the endpoints for the bridged devices found in step 2b,perform thetests for Bridged Device Basic Information cluster",
                    "",
                    "For each of the endpoints found in step 2b,if a Power Source Configuration cluster is present on this endpoint, perform thetestsfor this Power Source Configuration clusterplus thetestsfor the Power Source clusters at the endpoint(s) which this Power Source Configuration cluster refers to",
                    "",
                    "For each of the endpoints found in step 2b, from the DeviceTypeList attribute in their Descriptorcluster, derive the (application) device type(s) of the bridged device",
                    "",
                    "From the list acquired in step 5, choose one of the bridged devices which is an actuator (e.g. light, window covering)",
                    "Read the state of this bridged device (through Matter), e.g. on/off, brightness",
                    "Change the state of this bridged device (through Matter), e.g. change its brightness or toggle its on/off state",
                    "Read the state of this bridged device (through Matter), as in 6b",
                    "",
                    "From the list acquired in step 5, choose one of the bridged devices which is a sensor (e.g. occupancy sensor, contact sensor, temperature sensor) or switch",
                    "Read the state of this bridged device (through Matter), e.g. occupancy status, contact status, current temperature",
                    "Change the state of this sensor (e.g. cover the occupancy sensor, open the contact sensor, heat the temperature sensor)",
                    "Read the state of this bridged device again, as in 7b"
                ],
                "Expected Outcome": [
                    "",
                    "Verify this attribute contains (at least) device type Root Node",
                    "Result will be used in next step",
                    "Track which of those endpoints have a DeviceTypeList containing (at least) device type Aggregator.Verify that the DeviceTypeList on such endpoints does not contain any Application Device Type.",
                    "IF 0 endpoints found in step 1c, FAIL the test (no Aggregator device type found)ELSE Execute test steps 2a..7d for each of the endpoints found in step 1c (i.e. for each of the Aggregator device types)",
                    "",
                    "",
                    "Verify at least two of such endpoints are found - matching the bridged devices supplied by the bridge manufacturer with the DUT",
                    "",
                    "If PartsList is empty verify the following*  Verify that both the Bridged Node and one or more application device types are supported on the same endpoint (following application device type rules).*  Verify that the Endpoint composition SHALL conform to the application device type(s) definition.If PartsList is not empty verify the following* Verify that all application device types are supported on separate endpoints, and not on the Bridged Node endpoint.* Verify that the Bridged Node endpoint\u2019s Descriptor cluster PartsList attribute SHALL indicate a flat list of all endpoints representing the functionality of the bridged node, including the endpoints supporting the application device types.",
                    "",
                    "",
                    "",
                    "",
                    "Verify this matches with the functionality of the bridged device provided for the test",
                    "",
                    "",
                    "Verify that these values match the actual state of the bridged device",
                    "Verify that the actual state of the bridged device changes accordingly",
                    "Verify that these values match with what was set in 6c",
                    "",
                    "",
                    "Verify that this matches the actual physical state of the sensor",
                    "",
                    "Verify that the state has changed (different from reading in 7b) and that it matches the actual physical state of the sensor"
                ]
            }
        },
        {
            "Test Case Name": "40.1.2. [TC-BR-2] Changing the set of bridged devices (DUT server)",
            "Test Case ID": "TC-BR-2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the bridge when bridged devices\nare being added or deleted.",
            "Test Procedure": {
                "#": [
                    "1: preparation",
                    "1a",
                    "1b",
                    "2: add a bridged device",
                    "2a",
                    "2b",
                    "2c",
                    "2d",
                    "3: check newly added bridged device",
                    "3",
                    "4: remove a bridged device",
                    "4a",
                    "4b",
                    "4c",
                    "4d",
                    "restart DUT to check if endpoint allocation does not get impacted by that",
                    "4z",
                    "5: re-add a bridged device",
                    "5a",
                    "5b",
                    "5c",
                    "5d"
                ],
                "Ref": [
                    "",
                    "9.13.6",
                    "",
                    "",
                    "9.13.6",
                    "",
                    "",
                    "",
                    "",
                    "9.13.6",
                    "",
                    "9.13.6",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "9.13.6",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    "",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "MCORE.BRIDGE",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "",
                    "Read PartsList and DeviceTypeList attributes of the Descriptor cluster of endpoint 0For each endpoint listed in the PartsList attribute of the Descriptor cluster of endpoint 0:read the PartsList and DeviceTypeList attributes of the Descriptor cluster at that endpoint",
                    "By inspecting the DeviceTypeList attributes read in step 1a, determine which of those endpoints has a device type of Aggregator",
                    "",
                    "Add a bridged device (using a method indicated by the manufacturer)",
                    "Read the PartsList and DeviceTypeList attributes of the Descriptor cluster on endpoint 0",
                    "Repeat step 2b for endpoint found in step 1b (the Aggregator EP)",
                    "Read PartsList and DeviceTypeList attributes of the Descriptor cluster of all other endpoints listed in the PartsList attribute in the Descriptor cluster of endpoint 0",
                    "",
                    "Perform step 6 (for an actuator) resp. step 7 (for a sensor/switch) ofTC-BR-1for the bridged device added in step 2",
                    "",
                    "Remove one of the bridged devices (but not the one which was added in step 2) (using a method indicated by the manufacturer)",
                    "Read the PartsList and DeviceTypeList attributes in the Descriptor cluster on endpoint 0",
                    "Repeat step 4b for endpoint found in step 1b (the Aggregator EP)",
                    "Read PartsList and DeviceTypeList attributes of the Descriptor cluster of all other endpoints listed in the PartsList attribute in the Descriptor cluster of endpoint 0",
                    "",
                    "restart the DUT",
                    "",
                    "Re-add the bridged device which was removed in the previousstep (using a method indicated by the manufacturer)",
                    "Read the PartsList and DeviceTypeList attributes in the Descriptor cluster on endpoint 0",
                    "Repeat step 5b for endpoint found in step 1b (the Aggregator EP)",
                    "Read PartsList and DeviceTypeList attributes of the Descriptor cluster of all other endpoints listed in the PartsList attribute in the Descriptor cluster of endpoint 0"
                ],
                "Expected Outcome": [
                    "",
                    "(these results will be used in later steps)",
                    "FAIL if no such endpoint(s) foundresult will be used in later steps",
                    "",
                    "",
                    "Verify that DeviceTypeList has not changed compared to step 1aVerify that PartsList contains exactly one endpoint which previously wasnot presentVerify that this new endpoint number is higher than the previously used highestendpoint numberVerify that the endpoint numbers for the previously present bridged devices did notchange",
                    "similar check as 2b",
                    "Verify that the contents of these attributes have not changed relative to step 1a (for those endpoints that were present at that stage)",
                    "",
                    "",
                    "",
                    "",
                    "Verify that DeviceTypeList has not changed compared to step 1aVerify that PartsList lacks exactly one endpoint which previously was presentand which corresponds to the removed device",
                    "same as 4b",
                    "Verify that the contents did not change (i.e. equal to result from step 1a for the original set of bridged devices resp. result from step 2 for the device added in step 2)",
                    "",
                    "",
                    "",
                    "",
                    "Verify that DeviceTypeList has not changed compared to step 1aVerify that PartsList contains exactly one endpoint which previously (4b) was not presentVerify the new endpoint is higher than the previously used highest endpoint number,and different from the endpoint previously (in step 1) assigned to this bridged deviceVerify that the endpoints for the other previously present bridged devices have notchanged",
                    "similar as 5b (compare to results from 4c)",
                    "Verify that the contents did not change (i.e. equal to result from step 1 for the original set of bridged devices resp. result from step 2 for the device added in step 2; for the device removed in step 4 and re-added in step 5, only verify that the DeviceTypeList attribute did not change, even though it is now at the new endpoint)"
                ]
            }
        },
        {
            "Test Case Name": "40.1.3. [TC-BR-3] Changing name and state of a bridged device (DUT server)",
            "Test Case ID": "TC-BR-3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the functionality of the bridge when bridged devices\nare renamed or operated using non-Matter means.",
            "Test Procedure": {
                "#": [
                    "1: Rename a bridged device",
                    "1a",
                    "1b",
                    "1c",
                    "2: Change the state of a bridged device by other means",
                    "2a",
                    "2b",
                    "2c",
                    "2d"
                ],
                "Ref": [
                    "",
                    "9.13.3, 9.13.7",
                    "",
                    "",
                    "",
                    "9.13.4",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "MCORE.BRIDGE & MCORE.BRIDGE.AllowDeviceRename",
                    "",
                    "",
                    "",
                    "MCORE.BRIDGE & MCORE.BRIDGE.OtherControl",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "",
                    "Get the name of a bridged device:Read the NodeLabel attribute of the Bridged Device Basic Informationcluster on the applicable endpoint",
                    "Using manufacturer provided means (i.e. NOT using Matter protocol), update the name of this bridged device",
                    "Read the NodeLabel attribute of the Bridged Device Basic Informationcluster on the same endpoint as in 1a",
                    "",
                    "Choose a bridged device for which the state can be changed through a non-Matter interface (example: bridge manufacturer provides an app which can change the state of the bridged devices, e.g. change a light\u2019s brightness)",
                    "Read the state (e.g. on/off, brightness) of that bridged device",
                    "Change the state (e.g. on/off, brightness) of that bridged device with this \"other\" interface.",
                    "Read the state of that bridged device again (as in 2b)"
                ],
                "Expected Outcome": [
                    "",
                    "(Retrieved name will be used in 1c.)",
                    "",
                    "Verify that the name has changed accordingly (i.e. matching what was entered in 1b and not equal to what was read in 1a)",
                    "",
                    "",
                    "(retrieved result will be used in 2d)",
                    "",
                    "Verify that the state has changed accordingly (i.e. matching what was set in 2c and not equal to what was retrieved in 2b)"
                ]
            }
        },
        {
            "Test Case Name": "40.1.4. [TC-BR-4] DUT client handling of bridges (DUT client)",
            "Test Case ID": "TC-BR-4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the basic principles of bridging - including the handling of DUT of composed devices, and changes in endpoints being exposed.",
            "Test Procedure": {
                "#": [
                    "1: verify DUT client gathers, uses and maintains information about endpoints",
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "1e",
                    "1f",
                    "1g",
                    "1h",
                    "2: verify DUT can control actuator devices",
                    "2a",
                    "3: verify DUT can process changes in set of exposed devices, and changes in names",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "MCORE.DEVLIST.UseDevices",
                    "MCORE.DEVLIST.UseDeviceName",
                    "MCORE.DEVLIST.UseDeviceState",
                    "MCORE.DEVLIST.UseDeviceState",
                    "MCORE.DEVLIST.UseDeviceState",
                    "MCORE.DEVLIST.UseDeviceState",
                    "MCORE.DEVLIST.UseBatInfo",
                    "",
                    "",
                    "",
                    "MCORE.DEVLIST.UseDeviceName",
                    "MCORE.DEVLIST.UseDeviceName",
                    "",
                    "MCORE.DEVLIST.UseDevices",
                    "",
                    "MCORE.DEVLIST.UseDevices"
                ],
                "Test Step": [
                    "",
                    "Start bridge-app on TH.Commission TH to DUT.Monitor traffic between DUT and TH.",
                    "",
                    "",
                    "",
                    "Use TH/bridge-appto change the on/off state of one or more of the bridged On/Off lights(use key 'c' in the console tobridge-app)",
                    "",
                    "Use TH/bridge-appto change the simulated temperature level of the simulated temperature sensors(use key 't' in the console tobridge-app)",
                    "",
                    "",
                    "Use the DUT to change the on/off state of one or more of the bridged On/Off lights",
                    "",
                    "Use TH/bridge-appto rename a bridged light(use key 'b' in the console tobridge-appto renameLight 1toLight 1b)",
                    "",
                    "Use TH/bridge-appto add a bridged light(use key '2' in the console tobridge-appto addLight 2)",
                    "",
                    "Use TH/bridge-appto remove a bridged light(use key '4' in the console tobridge-appto removeLight 1b)",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "Verify DUT reads relevant information from the various endpoints of TH:DUT is expected to read DeviceTypeList and PartsList from all available endpointsDefault setup ofbridge-apphas endpoints 1..13:EP 1 = aggregatorEP 3,10,11,12,13 = On/Off light (5 lights in total)EP 4,5 = Temperature SensorEP 6..9 = composedEP 6 = top of composed device (battery powered device with two temperature sensors)EP 7,8 = Temperature SensorEP 9 = Power Source (battery indication)",
                    "Verify DUT contains the (supported) devices from the above list",
                    "Verify DUT has (during step 1a) read the NodeLabel attribute from the Bridged Device Basic Information cluster on various endpointsVerify DUT contains the names for the (supported) devices from the above list",
                    "Verify DUT has read or reads OnOff attribute from the On/Off cluster for the various endpoints containing an On/Off lightVerify DUT contains the state for the (supported) devices from the above list",
                    "Verify DUT has read or reads OnOff attribute from the On/Off cluster for the various endpoints containing an On/Off light (or receives updates because of a previously set up subscription)Verify DUT contains the updated state for the (supported) devices from the above list",
                    "Verify DUT has read or reads MeasuredValue attribute from the Temperature Measurement cluster for the various endpoints containing a Temperature Sensor (or receives updates because of a previously set up subscription)Verify DUT contains the state for the (supported) device from the above list",
                    "Verify DUT has read or reads MeasuredValue attribute from the Temperature Measurement cluster for the various endpoints containing a Temperature Sensor (or receives updates because of a previously set up subscription)Verify DUT contains the updated state for the (supported) device from the above list",
                    "Verify DUT has read or reads BatChargeLevel attribute from the Power Source cluster from the relevant endpoint (or receives updates because of a previously set up subscription)Verify DUT contains the state of the battery of the (supported) devices from the above list",
                    "",
                    "Verify the DUT sends On command (On/Off cluster)Verify that simulated light in TH changes statethe change of light state (due to DUT command) is shown in log output of bridge-app",
                    "",
                    "Verify DUT reads (or gets the update via a previously set up subscription) an updated version of the NodeLabel attribute in the Bridged Device Basic Information cluster of the bridged device that got renamed",
                    "Verify DUT contains the updated name for the renamed device",
                    "Verify DUT reads (or gets the update via a previously set up subscription) an updated version of the PartsList attribute in the Descriptor cluster on endpoint 0 and the endpoint of the Aggregator device type to be aware of the added deviceVerify DUT reads PartsList and DeviceType attribute of the newly added endpoint",
                    "Verify DUT contains the added device in the list of devices",
                    "Verify DUT reads (or gets the update via a previously set up subscription) an updated version of the PartsList attribute in the Descriptor cluster on endpoint 0 and the endpoint of the Aggregator device type to be aware of the removed device",
                    "Verify DUT no longer contains the removed device in the list of devices"
                ]
            }
        }
    ],
    "Bulk_Data_Exchange_Protocol": [
        {
            "Test Case Name": "43.1.1. [TC-BDX-1.1] Sender Initiated BDX Transfer Session - REMOVED",
            "Test Case ID": "TC-BDX-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the SendInit message contains the necessary information to initiate the BDX transfer session.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.21.5.1"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "DUT sends a SendInit message to TH."
                ],
                "Expected Outcome": [
                    "Verify that the SendInit message has the following mandatory fields.Proposed Transfer Control - At least one of the PTC[RECEIVER_DRIVE] or PTC[SENDER_DRIVE] field bits shall be set.Range Control.Proposed Max Block Size.Start Offset - Optional.Proposed Max Length - Optional.File Designator Length.File Designator.Metadata - Optional."
                ]
            }
        },
        {
            "Test Case Name": "43.1.2. [TC-BDX-1.2] Receiver Initiated BDX Transfer Session",
            "Test Case ID": "TC-BDX-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the ReceiveInit message contains the necessary information to initiate the BDX transfer session.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.21.5.1"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "DUT sends a ReceiveInit message to TH."
                ],
                "Expected Outcome": [
                    "Verify that the ReceiveInit message has the following mandatory fields.Proposed Transfer Control - At least one of the PTC[RECEIVER_DRIVE] or PTC[SENDER_DRIVE] field bits shall be set.Range Control.Proposed Max Block Size.Start Offset - Optional.Proposed Max Length - Optional.File Designator Length.File Designator.Metadata - Optional."
                ]
            }
        },
        {
            "Test Case Name": "43.1.3. [TC-BDX-1.3] Response to Sender Initiated BDX Transfer Session - REMOVED",
            "Test Case ID": "TC-BDX-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the SendAccept message contains the necessary information to initiate the BDX transfer session.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.21.5.4"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "TH sends a SendInit message to DUT + DUT sends a SendAccept message back to TH."
                ],
                "Expected Outcome": [
                    "Verify that the SendAccept message has the following mandatory fields.Transfer Control - Exactly one mode shall be chosen out of the original proposed transfer methods sent by the Initiator, and version shall be the newest version supported by Responder that is not newer than the proposed version sent by the Initiator.Max Block Size - Must be less than or equal to the proposed max block size.Metadata - Optional."
                ]
            }
        },
        {
            "Test Case Name": "43.1.4. [TC-BDX-1.4] Response to Receiver Initiated BDX Transfer Session",
            "Test Case ID": "TC-BDX-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the ReceiveAccept message contains the necessary information to initiate the BDX transfer session.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.21.5.4"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "TH sends a ReceiveInit message to DUT + DUT sends a ReceiveAccept message back to TH."
                ],
                "Expected Outcome": [
                    "Verify that the ReceiveAccept message has the following mandatory fields.Transfer Control - Exactly one mode shall be chosen out of the original proposed transfer methods sent by the Initiator, and version shall be the newest version supported by Responder that is not newer than the proposed version sent by the Initiator.Range Control.Max Block Size - Must be less than or equal to the proposed max block size.Length - If this field is present, and the Initiator indicated a definite length, this length shall either be: * equal to the proposed definite length, if the remaining data in the file beyond the Start Offset is larger or equal to the proposed length; * smaller than the proposed definite length, if the remaining data in the file beyond the Start Offset is smaller than the proposed length.Metadata - Optional."
                ]
            }
        },
        {
            "Test Case Name": "43.1.5. [TC-BDX-1.5] Response to Sender Initiated BDX Transfer Session - Negative Scenario - REMOVED",
            "Test Case ID": "TC-BDX-1.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT aborts the BDX transfer session with an appropriate error.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a SendInit message to DUT with a file designator not supported by DUT.",
                    "TH sends a SendInit message to DUT with an invalid start offset or one that is not supported by DUT.",
                    "TH sends a SendInit message to DUT with definite length field too large for DUT.",
                    "TH sends a SendInit message to DUT with definite length field too short for DUT.",
                    "TH sends a SendInit message to DUT with a missing definite length field.",
                    "TH sends a SendInit message to DUT with proposed transfer control method not supported by DUT.",
                    "TH sends a SendInit message to DUT when the DUT is too busy to process another transfer."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends back StatusReport message to TH with Error FILE_DESIGNATOR_UNKNOWN.",
                    "Verify that the DUT sends back StatusReport message to TH with Error START_OFFSET_NOT_SUPPORTED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error LENGTH_TOO_LARGE.",
                    "Verify that the DUT sends back StatusReport message to TH with Error LENGTH_TOO_SHORT.",
                    "Verify that the DUT sends back StatusReport message to TH with Error LENGTH_REQUIRED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error TRANSFER_METHOD_NOT_SUPPORTED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error RESPONDER_BUSY."
                ]
            }
        },
        {
            "Test Case Name": "43.1.6. [TC-BDX-1.6] Response to Receiver Initiated BDX Transfer Session - Negative Scenario - REMOVED",
            "Test Case ID": "TC-BDX-1.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT aborts the BDX transfer session with an appropriate error.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1",
                    "11.21.5.1"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a ReceiveInit message to DUT with a file designator not supported by DUT.",
                    "TH sends a ReceiveInit message to DUT with an invalid start offset or one that is not supported by DUT.",
                    "TH sends a ReceiveInit message to DUT with definite length field too large for DUT.",
                    "TH sends a ReceiveInit message to DUT with a missing definite length field.",
                    "TH sends a ReceiveInit message to DUT with proposed transfer control method not supported by DUT.",
                    "TH sends a ReceiveInit message to DUT when the DUT is too busy to process another transfer."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends back StatusReport message to TH with Error FILE_DESIGNATOR_UNKNOWN.",
                    "Verify that the DUT sends back StatusReport message to TH with Error START_OFFSET_NOT_SUPPORTED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error LENGTH_TOO_LARGE.",
                    "Verify that the DUT sends back StatusReport message to TH with Error LENGTH_REQUIRED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error TRANSFER_METHOD_NOT_SUPPORTED.",
                    "Verify that the DUT sends back StatusReport message to TH with Error RESPONDER_BUSY."
                ]
            }
        },
        {
            "Test Case Name": "43.2.1. [TC-BDX-2.1] Synchronous File Sending",
            "Test Case ID": "TC-BDX-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully send files in Synchronous mode.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.21.6.4",
                    "11.21.6.4",
                    "11.21.6.5"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends the first Block message to TH + TH sends a BlockAck message back to DUT.",
                    "DUT sends further Block messages to TH + TH sends BlockAck messages back to DUT.",
                    "DUT sends a BlockEOF message to TH + TH sends a BlockAckEOF message back to DUT."
                ],
                "Expected Outcome": [
                    "Verify that the Block message has the following mandatory fieldsBlock Counter - Must start at 0 at the start of the transfer.Data - The length must be in the range [0 < Length \u21d0 Max Block Size], where Max Block Size is the negotiated Max Block Size matching the SendAccept message that initiated the transfer.",
                    "Verify that the Blocks are sent in ascending and sequential block counter order.",
                    "Verify that the BlockEOF message has the following mandatory fields.Block Counter.Data - The length must be in the range [0 \u21d0 Length \u21d0 Max Block Size], where Max Block Size is the negotiated Max Block Size matching the SendAccept message that initiated the transfer.Verify that the pre-negotiated file size was transferred, if a definite size had been given."
                ]
            }
        },
        {
            "Test Case Name": "43.2.2. [TC-BDX-2.2] Synchronous File Receiving",
            "Test Case ID": "TC-BDX-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully receive files in Synchronous mode.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.21.6.6",
                    "11.21.6.2",
                    "11.21.6.2",
                    "11.21.6.3",
                    "11.21.6.7"
                ],
                "PICS": [
                    "",
                    "MCORE.BDX.Driver",
                    "MCORE.BDX.Driver",
                    "MCORE.BDX.BlockQueryWithSkip",
                    ""
                ],
                "Test Step": [
                    "TH sends the first Block message to DUT + DUT sends a BlockAck message back to TH.",
                    "DUT sends the first BlockQuery message to TH + TH sends a Block message back to DUT.",
                    "DUT sends further BlockQuery messages to TH + TH sends further Block messages back to DUT.",
                    "DUT sends a BlockQueryWithSkip message to TH + TH sends a Block message back to DUT.",
                    "TH sends a BlockEOF message to DUT + DUT sends a BlockAckEOF message back to TH"
                ],
                "Expected Outcome": [
                    "Verify that the BlockAck message has the following mandatory fields.Block Counter - Must correspond to the Block Counter which was embedded in the Block being acknowledged.",
                    "Verify that the BlockQuery message has the following mandatory fields.Block Counter - Must start at 0 at the start of the transfer.",
                    "Verify that the BlockQuery messages are sent in ascending and sequential block counter order.",
                    "Verify that the BlockQueryWithSkip message has the following mandatory fields.Block Counter.BytesToSkip.",
                    "Verify that the BlockAckEOF message has the following mandatory fields.Block Counter - Must correspond to the Block Counter which was embedded in the BlockEOF being acknowledged."
                ]
            }
        },
        {
            "Test Case Name": "43.2.3. [TC-BDX-2.3] Restart Synchronous File Receiving - REMOVED",
            "Test Case ID": "TC-BDX-2.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully restart receiving files in Synchronous mode.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.21.6.4",
                    "11.21.6.4",
                    "11.21.6.7"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends a ReceiveInit message to TH + TH sends a ReceiveAccept message back to DUT.",
                    "TH sends a Block message to DUT + DUT sends a BlockAck message back to TH.",
                    "TH sends a BlockEOF message to DUT + DUT sends a BlockAckEOF message back to TH."
                ],
                "Expected Outcome": [
                    "Verify that the that the ReceiveInit message has the following fields.Proposed Transfer Control - At least one of the PTC[RECEIVER_DRIVE] or PTC[SENDER_DRIVE] field bits shall be set.Range Control.Proposed Max Block Size.Start Offset - Should be set to the offset of the first byte desired in the first block transferred.Proposed Max Length - Optional.File Designator Length.File Designator.Metadata - Optional.",
                    "Verify that the BlockAck message has the following mandatory fields.Block Counter - Must correspond to the Block Counter which was embedded in the Block being acknowledged.",
                    "Verify that the BlockAckEOF message has the following mandatory fields.Block Counter - Must correspond to the Block Counter which was embedded in the BlockEOF being acknowledged."
                ]
            }
        },
        {
            "Test Case Name": "43.2.4. [TC-BDX-2.4] Asynchronous File Sending - REMOVED",
            "Test Case ID": "TC-BDX-2.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully send files in Asynchronous mode.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.21.6.4",
                    "11.21.6.4",
                    "11.21.6.4"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends a SendInit message to TH + TH sends a SendAccept message back to DUT + DUT sends a Block message to TH.",
                    "DUT sends a Block message to TH.",
                    "DUT sends a BlockEOF message to TH + TH sends a BlockAckEOF message back to DUT."
                ],
                "Expected Outcome": [
                    "Verify that the Block message has the following mandatory fields.Block Counter - Must start at 0 at the start of the transfer.Data - The length must be in the range [0 < Length \u21d0 Max Block Size], where Max Block Size is the negotiated Max Block Size matching the SendAccept message that initiated the transfer.",
                    "Verify that the Blocks are sent in ascending and sequential block counter order.",
                    "Verify that the BlockEOF message has the following mandatory fieldsBlock Counter.Data - The length must be in the range [0 \u21d0 Length \u21d0 Max Block Size], where Max Block Size is the negotiated Max Block Size matching the SendAccept message that initiated the transfer.Verify that the pre-negotiated file size was transferred, if a definite size had been given."
                ]
            }
        },
        {
            "Test Case Name": "43.2.5. [TC-BDX-2.5] Asynchronous File Receiving - REMOVED",
            "Test Case ID": "TC-BDX-2.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT can successfully receive files in Asynchronous mode.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "11.21.5.1",
                    "11.21.6.7"
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends a ReceiveInit message to TH + TH sends a ReceiveAccept message back to DUT + TH sends a Block message to DUT.",
                    "TH sends a BlockEOF message to DUT + DUT sends a BlockAckEOF message back to TH."
                ],
                "Expected Outcome": [
                    "Verify that the ReceiveInit message has the following fields.Proposed Transfer Control - PTC[ASYNC] field bit shall be set.",
                    "Verify that the BlockAckEOF message has the following mandatory fields.Block Counter - Must correspond to the Block Counter which was embedded in the BlockEOF being acknowledged."
                ]
            }
        }
    ],
    "OTA_Software_Update": [
        {
            "Test Case Name": "46.1.1. [TC-SU-1.1] Invoke AnnounceOTAProvider from Admin(DUT) to OTA-R",
            "Test Case ID": "TC-SU-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT is able to invoke the AnnounceOTAProvider command on the OTA-R.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.19.7.7"
                ],
                "PICS": [
                    "OTAR.C.M.AnnounceOTAProvider"
                ],
                "Test Step": [
                    "Commission OTA-P/TH2 to DUT/same fabric as in test setup."
                ],
                "Expected Outcome": [
                    "Verify that the DUT invokesAnnounceOTAProvidercommand on the OTA-R.Verify that the command received contains the following mandatory fields.ProviderNodeID of the OTA-P/TH2 on the accessing fabric.Vendor Id of the node invoking this command. Should be same as it appears in the Node\u2019s Basic Information Cluster.AnnouncementReason - Should be SimpleAnnouncement.MetadataForNode - Optional.Endpoint number of the OTA-P/TH2 on the ProviderNodeID."
                ]
            }
        },
        {
            "Test Case Name": "46.2.1. [TC-SU-2.1] QueryImage Command from DUT to OTA-P",
            "Test Case ID": "TC-SU-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT is able to successfully send a QueryImage command to the OTA-P",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.19.6.7",
                    "11.19.3.2",
                    "11.19.7.7"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends aQueryImagecommand to the TH/OTA-P",
                    "DUT sends aQueryImagecommand to the TH/OTA-P.Wait for 2 minutes.",
                    "TH2/Administrator sends anAnnounceOTAProvidercommand to the DUT."
                ],
                "Expected Outcome": [
                    "Verify theQueryImagecommand received on the server has the following mandatory fieldsVendorID - Should match the value reported by the Basic Information ClusterVendorIDattribute of the DUT.ProductID - Should match the value reported by the Basic Information ClusterProductIDattribute of the DUT.SoftwareVersion - Should match the value reported by the Basic Information ClusterSoftwareVersionattribute of the DUT.Verify the field ProtocolsSupported lists the BDX Synchronous protocol.IF (MCORE.OTA.HTTPS) HTTPS protocol should be listed.HardwareVersion - If present, verify that it matches the value reported by the Basic Information ClusterHardwareVersionattribute of the DUT.If the Location field is present, verify that the value is same as Basic Information ClusterLocationAttribute of the DUT.IF (MCORE.OTA.RequestorConsent) RequestorCanConsent field should be set to True. Otherwise it should be False.MetadataForProvider - Optional.",
                    "On the TH/OTA-P verify that theQueryImagecommand is sent only once in that 2 minutes interval.",
                    "Verify that the DUT queries the indicated OTA Provider at the ProviderLocation at its next upcoming OTA Provider query."
                ]
            }
        },
        {
            "Test Case Name": "46.2.2. [TC-SU-2.2] Handling Different QueryImageResponse Scenarios on Requestor",
            "Test Case ID": "TC-SU-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec on different scenarios of the QueryImageResponse Command from the OTA-P.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.3.2",
                    "11.19.3.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "MCORE.OTA.HTTPS",
                    "",
                    ""
                ],
                "Test Step": [
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\". Set ImageURI to the location where the image is located.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"Busy\", DelayedActionTime is set to 60 seconds.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"NotAvailable\".",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to Busy, Set DelayedActionTime to 3 minutes. On the subsequentQueryImagecommand, TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\".",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\", ImageURI should have the https url from where the image can be downloaded.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\", Software Version should be set to the same or an older (numerically lower) version.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\", ImageURI field contains an invalid BDX ImageURI."
                ],
                "Expected Outcome": [
                    "Verify that there is a transfer of the software image from the TH/OTA-P to the DUT.",
                    "Verify that the DUT does not send aQueryImagecommand before the minimum interval defined by spec which is 2 minutes (120 seconds) from the lastQueryImagecommand.",
                    "Verify that the DUT does not send aQueryImagecommand before the minimum interval defined by spec which is 2 minutes (120 seconds) from the lastQueryImagecommand.",
                    "Verify that the DUT waits for at least the time mentioned in the DelayedActionTime (3 minutes) before issuing anotherQueryImagecommand to the TH/OTA-P.Verify that there is a transfer of the software image after the secondQueryImageResponsewith UpdateAvailable status from the TH/OTA-P to the DUT.",
                    "Verify that the DUT queries the https url and downloads the software image.",
                    "Verify that the DUT does not start transferring the software image.",
                    "Verify that the DUT does not start transferring the software image."
                ]
            }
        },
        {
            "Test Case Name": "46.3.1. [TC-SU-2.3] Transfer of Software Update Images between DUT and TH/OTA-P",
            "Test Case ID": "TC-SU-2.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it is transferring images from the TH/OTA-P.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.19.6.6",
                    "11.19.3.5",
                    "11.19.3.5",
                    "11.19.3.5",
                    "11.19.3.5"
                ],
                "PICS": [
                    "MCORE.OTA.RequestorConsent",
                    "",
                    "MCORE.OTA.HTTPS",
                    "",
                    "MCORE.OTA.Resume"
                ],
                "Test Step": [
                    "DUT sends aQueryImagecommand to the TH/OTA-P. RequestorCanConsent is set to True by DUT. OTA-P/TH responds with aQueryImageResponsewith UserConsentNeeded field set to True.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\". Set ImageURI to the location where the image is located.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\". Set ImageURI with the https url of the software image.",
                    "During the transfer of the image to the DUT, force fail the transfer before it completely transfers the image. Wait for the Idle timeout so that reading theUpdateStateAttribute of the OTA Requestor returns the value as Idle. Initiate anotherQueryImageCommand from DUT to the TH/OTA-P.",
                    "During the transfer of the image to the DUT, force fail the transfer before it completely transfers the image. Initiate anotherQueryImageCommand from DUT to the TH/OTA-P. Set the RC[STARTOFS] bit and associated STARTOFS field in the ReceiveInit Message to indicate the resumption of a transfer previously aborted."
                ],
                "Expected Outcome": [
                    "Verify that the DUT obtains the User Consent from the user prior to transfer of software update image. This step is vendor specific.",
                    "Verify that there is a transfer of the software image from the TH/OTA-P to the DUT. Verify that the Maximum Block Size requested by DUT should be- no larger than 1024 (2^10) bytes over non-TCP transports.- no larger than 8192 (2^13) bytes over TCP transport.",
                    "Verify that there is a transfer of the software image from the TH/OTA-P to the DUT from the https url and not from the OTA-P.",
                    "Verify that the BDX Idle timeout should be no less than 5 minutes.Verify that the DUT starts a new transfer of software image when sending anotherQueryImagerequest.",
                    "Verify that the DUT starts receiving the rest of the software image after resuming the image transfer."
                ]
            }
        },
        {
            "Test Case Name": "46.4.1. [TC-SU-2.4] ApplyUpdateRequest Command from DUT to OTA-P",
            "Test Case ID": "TC-SU-2.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it is applying the software update.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.19.6.10"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "DUT sends aQueryImagecommand to the TH/OTA-P. TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"UpdateAvailable\". Set ImageURI to the location where the image is located. After the DUT transfers the image, the DUT should sendApplyUpdateRequestto the OTA-P."
                ],
                "Expected Outcome": [
                    "Verify that the request received on the OTA-P has the following mandatory fields.UpdateToken - verify that it is same as the one sent in theQueryImageResponse.NewVersion - verify that this is the same as the software version that was downloaded."
                ]
            }
        },
        {
            "Test Case Name": "46.4.2. [TC-SU-2.5] Handling Different ApplyUpdateResponse Scenarios on Requestor",
            "Test Case ID": "TC-SU-2.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it is applying the software update.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.19.6.11",
                    "11.19.6.11",
                    "11.19.6.11",
                    "11.19.6.11",
                    "11.19.6.11"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"Proceed\", DelayedActionTime is set to 0.",
                    "OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"Proceed\", DelayedActionTime is set to 3 minutes.",
                    "OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"AwaitNextAction\", DelayedActionTime is set to 1 minute.",
                    "OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"AwaitNextAction\", DelayedActionTime is set to 3 minutes. On the subsequentApplyUpdateRequestcommand, TH/OTA-P sends theApplyUpdateResponseback to DUT. Action field is set to \"Proceed\".",
                    "OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"Discontinue\"."
                ],
                "Expected Outcome": [
                    "Verify that the DUT starts updating its software.Once the update is finished, verify theSoftwareVersionattribute from the Basic Information cluster on the DUT to match the version downloaded for the software update.Verify on the OTA-P/TH that there is no otherApplyUpdateRequestfrom the DUT.",
                    "Verify that the DUT starts updating its software after 3 minutes. Once the update is finished, verify theSoftwareVersionattribute from the Basic Information cluster on the DUT to match the version downloaded for the software update.",
                    "Verify that the DUT waits for the minimum interval defined by spec which is 2 minutes before re-sending theApplyUpdateRequestto the OTA-P.Verify that the DUT does not apply the software update within this time.",
                    "Verify that the DUT waits for 3 minutes before sending theApplyUpdateRequestto the OTA-P.Verify that the DUT starts updating its software after the secondApplyUpdateResponsewith Proceed action.Once the update is finished, verify theSoftwareVersionattribute from the Basic Information cluster on the DUT to match the version downloaded for the software update.",
                    "Verify that the DUT clears its previously downloaded software image, and resets theUpdateStateAttribute to Idle.Verify that the DUT does not send theNotifyUpdateAppliedwithin a reasonable time.Verify theSoftwareVersionattribute from the Basic Information cluster of the DUT to be the same as it was previously."
                ]
            }
        },
        {
            "Test Case Name": "46.4.3. [TC-SU-2.6] NotifyUpdateApplied Command from DUT to OTA-P",
            "Test Case ID": "TC-SU-2.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it is applying the software update.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.19.6.12"
                ],
                "PICS": [
                    "OTAR.C.M.NotifyUpdateApplied"
                ],
                "Test Step": [
                    "DUT sends theNotifyUpdateAppliedCommand to the OTA-P after installing the software update."
                ],
                "Expected Outcome": [
                    "Verify that theNotifyUpdateAppliedmessage received on the OTA-P has the following fields.UpdateToken - verify that it is the same as the one provided by the OTA provider in theQueryImageResponse.SoftwareVersion - verify the software version on the DUT to match the version downloaded for the software update."
                ]
            }
        },
        {
            "Test Case Name": "46.5.1. [TC-SU-2.7] Verifying Events on OTA-R(DUT)",
            "Test Case ID": "TC-SU-2.7",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when events are generated.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7"
                ],
                "Ref": [
                    "11.19.7.8",
                    "11.19.7.8",
                    "11.19.7.8",
                    "11.19.7.8",
                    "11.19.7.8",
                    "11.19.7.8",
                    "11.19.7.8"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "MCORE.OTA.RequestorConsent",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Perform a software update on the DUT.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P.TH/OTA-P sends aQueryImageResponseback to DUT. QueryStatus is set to \"Busy\".",
                    "DUT sends aQueryImagecommand to the TH/OTA-P.TH/OTA-P does not respond back to DUT.",
                    "DUT sends aQueryImagecommand to the TH/OTA-P. RequestorCanConsent is set to True by DUT. OTA-P/TH responds with aQueryImageResponsewith UserConsentNeeded field set to True.",
                    "Force an error during the download of the OTA image to the DUT. Wait for the Idle timeout which should be no less than 5 minutes.",
                    "After the OTA image is transferred, DUT sendsApplyUpdateRequestto the OTA-P. OTA-P/TH sends theApplyUpdateResponseCommand to the DUT. Action field is set to \"AwaitNextAction\".",
                    "DUT successfully finishes applying a software update, and the new software image version is being executed on the DUT. OTA-Subscriber sends a read request to read theVersionAppliedevent from the DUT."
                ],
                "Expected Outcome": [
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for all the state changes i.e. Querying, Downloading, Applying, Idle (optional).",
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for the state change to DelayedOnQuery.",
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for the state change to Idle.",
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for the state change to DelayedOnUserConsent.",
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for the state change to Idle.Verify that the OTA-Subscriber receives aDownloadErrorevent notification on BDX Idle timeout.Verify that the data in this event has the following.SoftwareVersion - Set to the value of the SoftwareVersion being downloaded.BytesDownloaded - Number of bytes that have been downloaded.ProgressPercent - Nearest Integer percent value reflecting how far within the transfer the failure occurred. IF the total length of the transfer is unknown, the value can be NULL.PlatformCode - Internal product-specific error code or NULL.",
                    "Verify that the OTA-Subscriber receives aStateTransitionevent notification for the state change to DelayedOnApply.",
                    "Verify that theVersionAppliedevent is generated whenever a new version starts executing after being applied due to a software update.Verify that the data in this event has the following.SoftwareVersion - Same as the one available in theSoftwareVersionattribute of the Basic Information Cluster for the newly executing version.ProductID - Same as what is available in theProductIDattribute of the Basic Information Cluster."
                ]
            }
        },
        {
            "Test Case Name": "46.6.1. [TC-SU-2.8] OTA Functionality in Multi Fabric Scenario",
            "Test Case ID": "TC-SU-2.8",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT is able to successfully send a QueryImage command to the OTA-P in multi fabric scenario.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.19.3.1",
                    "11.19.3.1",
                    "11.19.7.7"
                ],
                "PICS": [
                    "",
                    "MCORE.OTA.Retry",
                    ""
                ],
                "Test Step": [
                    "DUT sends aQueryImagecommand to TH1/OTA-P.",
                    "DUT sends aQueryImagecommand to TH1/OTA-P. TH1/OTA-P does not respond withQueryImageResponse.",
                    "DUT sends aQueryImagecommand to TH2/OTA-P. TH2/OTA-P sends aQueryImageResponseback to the DUT. Status is set to UpdateAvailable."
                ],
                "Expected Outcome": [
                    "Verify theQueryImagecommand received on the server has the following mandatory fieldsVendorId - Should match the value reported by the Basic Information ClusterVendorIDattribute of the DUT.ProductId - Should match the value reported by the Basic Information ClusterProductIDattribute of the DUT.HardwareVersion - If present, verify that it matches the value reported by the Basic Information ClusterHardwareVersionattribute of the DUT.SoftwareVersion - Should match the value reported by the Basic Information ClusterSoftwareVersionattribute of the DUT.Verify the field ProtocolsSupported lists the BDX Synchronous protocol.IF (MCORE.OTA.HTTPS_Supported) HTTPS protocol should be listed.Verify the default value of RequestorCanConsent is set to False unless DUT sets it to True.If the Location field is present, verify that the value is same as Basic Information ClusterLocationAttribute of the DUT.",
                    "Verify that the DUT sends aQueryImagecommand to TH2/OTA-P when failing to reach out to TH1/OTA-P after a finite number of unsuccessful attempts.",
                    "Verify that there is a transfer of the software image from TH2/OTA-P to the DUT."
                ]
            }
        },
        {
            "Test Case Name": "46.7.1. [TC-SU-3.1] QueryImageResponse from DUT to OTA-R",
            "Test Case ID": "TC-SU-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it receives a QueryImageRequest from the OTA-R.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    "11.19.6.7"
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "OTA-R/TH sends aQueryImageCommand to the DUT.UserConsentNeeded field is set to False."
                ],
                "Expected Outcome": [
                    "Verify that the DUT is able to query the server where the software update image is located. DUT should obtain the User Consent from the user. DUT should respond with theQueryImageResponseto the OTA-R/TH."
                ]
            }
        },
        {
            "Test Case Name": "46.7.2. [TC-SU-3.2] Handling Different QueryImageResponse Scenarios on Provider",
            "Test Case ID": "TC-SU-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec in sending the correct QueryImageResponse to the OTA-R.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8",
                    "11.19.6.8"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "OTAP.S.M.DelayedActionTime"
                ],
                "Test Step": [
                    "OTA-R/TH sends aQueryImageCommand to the DUT.RequestorCanConsent field can be set to either True or False in theQueryImageCommand.DUT responds with theQueryImageResponseto the OTA-R/TH.",
                    "There should not be any new software update available for the OTA-R/TH. OTA-R/TH sends aQueryImageCommand to the DUT.DUT responds with theQueryImageResponseto the OTA-R/TH.",
                    "OTA-R/TH sends aQueryImageCommand to the DUT.ProtocolSupported field should list BDX. DUT responds with theQueryImageResponseto the OTA-R/TH.",
                    "OTA-R/TH sends aQueryImageCommand to the DUT. ProtocolSupported field should list \"https\". DUT responds with aQueryImageResponseto the OTA-R/TH.",
                    "OTA-R/TH sends aQueryImageCommand to the DUT.DUT responds with theQueryImageResponsewith QueryStatus set to \"Busy\", DelayedActionTime set to 3 minutes. On the subsequentQueryImagecommand, DUT sends aQueryImageResponseback to OTA-R/TH. QueryStatus is set to \"UpdateAvailable\"."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends aQueryImageResponseCommand to the OTA-R/TH.Verify if the following fields are populated correctly.Status - UpdateAvailable - Mandatory.ImageURI - Mandatory - contain a URI where the OTA Requestor SHOULD download a Software Image.SoftwareVersion - Mandatory - Verify this is the same as the new software image version.SoftwareVersionString - Mandatory - This is the string type of the Software version.UpdateToken - verify it is within 8-32 bytes.UserConsentNeeded if present should be of type bool.MetadataForRequestor - Optional.",
                    "Verify that the DUT sends aQueryImageResponseCommand to the OTA-R/TH.Verify if the following fields are populated correctly.Status - NotAvailable - Mandatory.Rest of the fields are optional.",
                    "Verify that the DUT sends aQueryImageResponseCommand to the OTA-R/TH.Verify the following fields in the image URI field.Verify the URI\u2019s scheme field is \u201cbdx\u201d in lowercase characters.Verify the URI\u2019s authority field contains only the string representation of the Operational Node ID of the Node where to proceed with the download.Verify that the encoding of the Node ID in the host field uses an uppercase hexadecimal format, using exactly 16 characters to encode the network byte order value of the NodeID.Verify that the Operational Node ID in the host field matches with the NodeID of the OTA Provider responding with theQueryImageResponse.Verify that the the user section of the authority field is absent.Verify that the URI does not containQuery field.Fragment field.Verify that the path field has the absolute path to the software image.Verify that the path has only valid URI characters.Verify that the URI is 24 characters or longer.Verify the presence of prefix 'bdx://'.",
                    "Verify the URI should be a valid https string.",
                    "Verify that the DUT sends aQueryImageResponseCommand to the OTA-R/THVerify if the following fields are populated correctly.Status - Busy.DelayedActionTime - 3 minutes.Verify that the OTA-R/TH starts the download from the DUT after the secondQueryImageResponsewith UpdateAvailable status.Verify that the Image downloaded by the OTA-R/TH is valid and is the same image that was supposed to be downloaded."
                ]
            }
        },
        {
            "Test Case Name": "46.8.1. [TC-SU-3.3] Transfer of Software Update Images between DUT and OTA-R",
            "Test Case ID": "TC-SU-3.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec when it is transferring images to the TH/OTA-R.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "11.19.3.5",
                    "11.19.6.6",
                    "11.19.6.6",
                    "11.19.3.5",
                    "11.19.3.5"
                ],
                "PICS": [
                    "",
                    "OTAP.S.M.UserConsentNeeded",
                    "OTAP.S.M.UserConsentNeeded",
                    "",
                    ""
                ],
                "Test Step": [
                    "OTA-R/TH sends aQueryImageCommand to the DUT. Protocol supported should only list \"BDX\". DUT responds with theQueryImageResponseto the OTA-R/TH.",
                    "TH sends aQueryImagecommand to the DUT.RequestorCanConsent is set to True by TH. DUT responds with aQueryImageResponsewith UserConsentNeeded field set to True.",
                    "TH sends aQueryImagecommand to the DUT. RequestorCanConsent is set to True by TH. DUT responds with aQueryImageResponsewith UserConsentNeeded field set to False.",
                    "During the transfer of the image from the DUT, force fail the transfer before it completely transfers the image. Wait for the Idle timeout. Initiate anotherQueryImageCommand from OTA-R/TH to the DUT.",
                    "During the transfer of the image from the DUT, force fail the transfer before it completely transfers the image. Initiate anotherQueryImageCommand from OTA-R/TH to the DUT. Set the RC[STARTOFS] bit and associated STARTOFS field in the ReceiveInit Message sent from the TH to indicate the resumption of a transfer previously aborted."
                ],
                "Expected Outcome": [
                    "Verify that the OTA-R/TH starts the download from the DUT. Verify that the DUT uses- Receiver-Drive mode for transfers on non-TCP transport.- Asynchronous mode for transfers on TCP transport.Verify that the Actual Block Size should the negotiated Maximum Block Size for every block except the last one.Verify that the Maximum Block sizes constraints are followed as below- should be a power of two if OTA-R/TH requests larger than 128 bytes.- should be exact requested value for value between 16 and 128 bytes.- support at least 1024 bytes over non-TCP transports.- support at least 4096 (2^12) bytes over TCP transports.Verify that the Image downloaded by the OTA-R/TH is valid and is the same image that was supposed to be downloaded.",
                    "Verify that the DUT does not try to obtain User Consent from the user prior to transfer of software update image.",
                    "Verify that the DUT tries to obtain User Consent from the user prior to transfer of software update image.",
                    "Verify that the DUT stops sending the image and can restart sending from the beginning when a newQueryImagerequest is received. Verify that the BDX Idle timeout should be no less than 5 minutes.",
                    "Verify that the DUT resumes the previously aborted transfer.Verify that the DUT finishes sending the image to the TH."
                ]
            }
        },
        {
            "Test Case Name": "46.9.1. [TC-SU-3.4] Handling Different ApplyUpdateResponse Scenarios on Provider",
            "Test Case ID": "TC-SU-3.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec on when a software update should be applied by the OTA-R.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "11.19.6.11",
                    "11.19.6.11",
                    "11.19.6.11"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "OTA-R/TH on completion of image download sends anApplyUpdateRequestCommand to the DUT.",
                    "OTA-R/TH on completion of image download sends anApplyUpdateRequestcommand to the DUT. DUT responds with theApplyUpdateResponsewith Action set to \"AwaitNextAction\", DelayedActionTime set to 3 minutes. On the subsequentApplyUpdateRequestcommand, DUT sends aApplyUpdateResponseback to DUT. Action is set to Proceed.",
                    "OTA-R/TH on completion of image download sends anApplyUpdateRequestcommand to the DUT. DUT responds with theApplyUpdateResponsewith Action set to \"Discontinue\". Initiate anotherQueryImageCommand from OTA-R/TH to the DUT."
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends anApplyUpdateResponseCommand to the OTA Requestor.Verify that the following fields are non emptyAction - Proceed.DelayedActionTime - Zero or non zero.",
                    "Verify that the DUT sends anApplyUpdateResponseCommand to the OTA-R/THVerify if the following fields are populated correctly.Action - AwaitNextAction.DelayedActionTime - 3 minutes.",
                    "Verify that the DUT sends anApplyUpdateResponseCommand to the OTA Requestor with \"Discontinue\" in the action field of the response.Verify that the entire OTA process is restarted on DUT when OTA-R/TH sends anotherQueryImageRequest."
                ]
            }
        },
        {
            "Test Case Name": "46.10.1. [TC-SU-4.1] Verifying Cluster Attributes on OTA-R(DUT)",
            "Test Case ID": "TC-SU-4.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT behaves according to the spec with the Cluster attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9"
                ],
                "Ref": [
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5",
                    "11.19.7.5"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends a write request for theDefaultOTAProvidersAttribute on the first fabric to the DUT. TH2 is set as the default Provider for the fabric.",
                    "TH sends a read request to read theDefaultOTAProvidersAttribute on the first fabric to the DUT.",
                    "TH sends a write request for theDefaultOTAProvidersAttribute on the second fabric to the DUT. TH3 is set as the default Provider for the fabric.",
                    "TH sends a read request to read theDefaultOTAProvidersAttribute on the first and second fabric to the DUT.",
                    "TH sends a write request for theDefaultOTAProvidersAttribute on the first fabric to the DUT. TH4 is the first Provider location and TH2 is the second Provider location in the same write request on the first fabric. TH sends a read request to read theDefaultOTAProvidersAttribute on the first and second fabric to the DUT.",
                    "TH sends a write request for theDefaultOTAProvidersAttribute with an empty provider list on the second fabric to the DUT. TH sends a read request to read theDefaultOTAProvidersAttribute on the first and second fabric to the DUT.",
                    "TH sends a read request to read theUpdatePossibleattribute from the DUT.",
                    "TH sends a read request to read theUpdateStateAttribute from the DUT.",
                    "DUT should start initiating the Software update process. While the DUT is downloading the image, TH sends a read request to read theUpdateStateProgressattribute from the DUT."
                ],
                "Expected Outcome": [
                    "Verify that the write operation for the attribute works and DUT does not respond with any errors.",
                    "Verify that the attribute value is set to TH2 as the default OTA provider for the fabric.",
                    "Verify that the write operation for the attribute works and DUT does not respond with any errors.",
                    "Verify that the attribute value is set to TH2 as the default OTA provider for the first fabric and TH3 for the second fabric.",
                    "Verify that the write operation fails with CONSTRAINT_ERROR status code 0x87.Verify that the attribute value is set to TH3 as the default OTA provider for the second fabric and either of TH2 or TH4 for the first fabric.",
                    "Verify that the write operation for the attribute works and DUT does not respond with any errors.Verify that the attribute value is set to TH4 as the default OTA provider for the first fabric and none for the second fabric.",
                    "Verify that the attribute value is set to True when there is an update possible.",
                    "Verify that the attribute value is set to one of the following values.Unknown, Idle, Querying, DelayedOnQuery, Downloading, Applying, DelayedOnApply, RollingBack, DelayedOnUserConsent.",
                    "Verify that the attribute value is a percentage value of the download progress."
                ]
            }
        },
        {
            "Test Case Name": "46.11.1. [TC-SU-5.1] Verifying vendor specific OTA implementation on DUT",
            "Test Case ID": "TC-SU-5.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the DUT is able to successfully perform software update by vendor specific means if OTA Requestor cluster is not supported.",
            "Test Procedure": {
                "#": [
                    "1"
                ],
                "Ref": [
                    ""
                ],
                "PICS": [
                    ""
                ],
                "Test Step": [
                    "Perform the OTA Update on DUT using vendor specific mechanism."
                ],
                "Expected Outcome": [
                    "Verify that the DUT starts updating its software.Once the update is finished, verify theSoftwareVersionattribute from the Basic Information cluster on the DUT to match the version downloaded for the software update."
                ]
            }
        }
    ],
    "Access_Control_Enforcement": [
        {
            "Test Case Name": "50.1.1. [TC-ACE-1.1] Privileges",
            "Test Case ID": "TC-ACE-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced for reading attributes.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH writes the ACL attribute with a list of AccessControlEntryStruct entries containing 1 elements, granting itself administer privileges on all of Endpoint 0:structFabric Index: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: null, Endpoint: 0, DeviceType: null}]",
                    "TH reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-scoped read (requires administer privilege)",
                    "TH writes the Location attribute in the Basic Information cluster with \"XX\" (requires administer privilege)",
                    "TH sends the UpdateFabricLabel command to the Node Operational Credentials cluster with the Label field set to \"TestFabric\" (requires administer privilege)",
                    "TH writes the NodeLabel attribute in the Basic Information cluster with the string \"TestNode\" (requires manage privilege)",
                    "TH sends the TestEventTrigger command to the General Diagnostics cluster with the EnableKey set to 0 and the EventTrigger set to 0 (requires manage privilege). Note that this will cause an error to be returned because the EnableKey is invalid, but still indicates that the TH passed the ACL check.",
                    "TH reads the VendorID attribute from the Basic Information cluster (requires view privilege)",
                    "TH writes the ACL attribute with a list of AccessControlEntryStruct entries containing 2 elements, giving itself administer privilege only on the Access Control cluster and manage privilege on everything else on EP0.structFabric Index: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: 0x001F, Endpoint: 0}]structFabric Index: 1Privilege field: Manage (4)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]",
                    "TH reads the NOCs attribute from the Node Operational Credentials cluster using a fabric-filtered read (requires administer privilege)",
                    "TH writes the Location attribute in the Basic Information cluster with \"XX\" (requires administer privilege)",
                    "TH sends the UpdateFabricLabel command to the operational credentials cluster with the Label field set to \"TestFabric\" (requires administer privilege)",
                    "Repeat steps6to8to confirm that TH still has access associated with manage and view privileges",
                    "TH writes the ACL attribute with a list of AccessControlEntryStruct entries containing 2 elements, giving itself administer privilege only on the Access Control cluster and operate privilege on everything else on EP0.structFabric Index: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: 0x001F, Endpoint: 0}]structFabric Index: 1Privilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]",
                    "Repeat steps10to12to confirm that TH still does not have administer privileges",
                    "TH writes the NodeLabel attribute in the Basic Information cluster with the string \"TestNode\" (requires manage privilege)",
                    "TH sends the TestEventTrigger command to the General Diagnostics cluster with the EnableKey set to 0 and the EventTrigger set to 0. (requires manage privilege)",
                    "Repeat step8to confirm that the TH still has view privileges",
                    "TH1 writes the ACL attribute with a list of AccessControlEntryStruct entries containing 2 elements, giving itself administer privilege only on the Access Control cluster and view privilege on everything else on EP0.structFabric Index: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: 0x001F, Endpoint: 0}]structFabric Index: 1Privilege field: View (1)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]",
                    "Repeat steps10to12to confirm that TH still does not have administer privileges",
                    "Repeat steps16to17to confirm that TH still does not have manage privileges",
                    "Repeat step8to confirm that the TH still has view privileges",
                    "TH writes the ACL attribute with a list of AccessControlEntryStruct entries containing a single element, granting Administer privilege on only the Access Control cluster and no other access.structFabric Index: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: 0x001F, Endpoint: 0}]",
                    "Repeat steps10to12to confirm that TH still does not have administer privileges",
                    "Repeat steps16to17to confirm that TH still does not have manage privileges",
                    "TH reads the VendorID attribute from the Basic Information cluster (requires view privilege)",
                    "TH writes the ACL attribute with a list of AccessControlEntryStruct entries containing a single element, restoring full access to the node.. struct- Fabric Index: 1- Privilege field: Administer (5)- AuthMode field: CASE (2)- Subjects field: [N1]- Targets field: null"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESS",
                    "DUT returns a list of NOCs containing 1 entry",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is CONSTRAINT_ERROR",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "",
                    "Result is SUCCESS",
                    "",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "",
                    "Result is SUCCESS",
                    "",
                    "",
                    "",
                    "Result is SUCCESS",
                    "",
                    "",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS"
                ]
            }
        },
        {
            "Test Case Name": "50.1.2. [TC-ACE-1.2] Subscriptions",
            "Test Case ID": "TC-ACE-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced for new subscriptions.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29"
                ],
                "Ref": [
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "11.17.6.1",
                    "9.10.7.1",
                    "11.17.6.1",
                    "8.4.3.1",
                    "8.4.3.1",
                    "11.9.6.1",
                    "8.4.3.1",
                    "9.10.5.3",
                    "",
                    "11.17.6.1",
                    "9.10.7.1",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "",
                    "",
                    "",
                    "",
                    "9.10.5.3",
                    "",
                    "",
                    "",
                    "",
                    "9.10.5.3",
                    "",
                    "9.10.5.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT",
                    "TH1 writes AccessControl cluster ACL attribute,value is a list of AccessControlEntryStruct containing 1 element:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1,N2]Targets field: [{Endpoint: 0}]",
                    "TH2 subscribes to the General Commissioning cluster Breadcrumb attribute,min interval 1, max interval 30, keep subscriptions false.",
                    "TH2 subscribes to the Access Control cluster ACL attribute,min interval 1, max interval 5, keep subscriptions false, fabric-filtered false.",
                    "TH2 subscribes to the Access Control cluster AccessControlEntryChanged event,min interval 1, max interval 5, keep subscriptions true, fabric-filtered false.",
                    "TH1 selects a node idN_unusedthat is different thanN1andN2. This node ID does notneed to correspond to an actual node, it is used as a placeholder to allow changing theACL attribute without affecting the access ofN1andN2.TH1 writes Access Control cluster ACL attribute,value is a list of AccessControlEntryStruct Containing 1 element:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1,N2,N_unused]Targets field: [{Endpoint: 0}]",
                    "TH2 waits for a subscription report from the DUT onsubscription_acl",
                    "TH2 waits for a subscription report from the DUT onsubscription_ace",
                    "TH1 writes the Breadcrumb attribute on the General Commissioning cluster, setting the value to 1",
                    "TH2 waits for a subscription report from the DUT",
                    "TH1 writes AccessControl cluster ACL attribute,value is a list of AccessControlEntryStruct containing 2 elements:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]structPrivilege field: Manage (4)AuthMode field: CASE (2)Subjects field: [N2]Targets field: [{Endpoint: 0}]",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "TH2 subscribes to the Access Control cluster ACL attribute,min interval 1, max interval 5, keep subscriptions false, fabric-filtered false.",
                    "TH2 subscribes to the Access Control cluster AccessControlEntryChanged event,min interval 1, max interval 5, keep subscriptions false",
                    "TH2 subscribes to the General Commissioning cluster Breadcrumb attribute,min interval 1, max interval 5, keep subscriptions false",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "TH1 writes AccessControl cluster ACL attribute,value is a list of AccessControlEntryStruct containing 2 elements:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [N2]Targets field: [{Endpoint: 0}]",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "Repeat steps13to14to ensure TH2 still does not have permissions to subscribe to administer-privilege attributes and events",
                    "Repeat step3to ensure TH2 can still subscribe to view events",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "TH1 writes AccessControl cluster ACL attribute,value is a list of AccessControlEntryStruct containing 2 elements:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N2]Targets field: [{Endpoint: 0}]",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "Repeat steps13to14to ensure TH2 still does not have permissions to subscribe to administer-privilege attributes and events",
                    "Repeat step3to ensure TH2 can still subscribe to view events",
                    "Repeat steps9to10, incrementing the Breadcrumb value from the last write, to verify that TH2 can still receive view-privilege attribute reports.",
                    "TH1 writes AccessControl cluster ACL attribute,value is a list of AccessControlEntryStruct containing 1 elementstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: []",
                    "Repeat steps13to14to ensure TH2 still does not have permissions to subscribe to administer-privilege attributes and events",
                    "TH2 subscribes to the General Commissioning cluster Breadcrumb attribute,min interval 1, max interval 5, keep subscriptions false"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESS",
                    "Result is SUCCESS, save SubscriptionId assubscription_breadcrumb",
                    "Result is SUCCESS, save SubscriptionId assubscription_acl",
                    "Result is SUCCESS, save SubscriptionId assubscription_ace",
                    "",
                    "TH2 receives a report from the DUT forsubscription_ace. The AttributeReports list contains an entry with AttributeData field present. That should contain a Path to the Access Control cluster AccessControlEntryStruct event.",
                    "TH2 receives a report from the DUT forsubscription_ace. The EventReports list contains an entry with EventData field present. That should contain a Path to the Access Control cluster AccessControlEntryStruct event.",
                    "",
                    "TH2 receives a report from the DUT forsubscription_breadcrumb. The AttributeReports list contains an entry with the AttributeData field present. That should contain a Path to the General Commissioning cluster Breadcrumb attribute.",
                    "Result is SUCCESS",
                    "",
                    "Result is INVALID_ACTION",
                    "Result is INVALID_ACTION",
                    "Result is SUCCESS, save SubscriptionId assubscription_breadcrumb",
                    "",
                    "Result is SUCCESS",
                    "",
                    "",
                    "",
                    "",
                    "Result is SUCCESS",
                    "",
                    "",
                    "",
                    "",
                    "Result is SUCCESS",
                    "",
                    "Result is INVALID_ACTION"
                ]
            }
        },
        {
            "Test Case Name": "50.1.3. [TC-ACE-1.3] Subjects",
            "Test Case ID": "TC-ACE-1.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced for wildcard subjects.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48",
                    "49",
                    "50",
                    "51",
                    "52",
                    "53",
                    "54",
                    "55",
                    "56",
                    "57",
                    "58"
                ],
                "Ref": [
                    "",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "Precondition: TH0 commissions DUT using admin node IDN0",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N2]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 1 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 1 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 1 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N3]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N1,N2]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N1,N3]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N2,N3]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [N1,N2,N3]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT1v1_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT1v2_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT1v3_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT2v1_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT2v2_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [CAT2v3_subject]Targets field: [{Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH3 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH0 writes DUT Endpoint 0 AccessControl cluster ACL attribute to resetit back to the default State.Value is list of AccessControlEntryStruct containing 1 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N0]Targets field: null"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH0 fabric",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS"
                ]
            }
        },
        {
            "Test Case Name": "50.1.4. [TC-ACE-1.4] Targets",
            "Test Case ID": "TC-ACE-1.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced for wildcard targets.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                    "21",
                    "22",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "28",
                    "29",
                    "30",
                    "31",
                    "32",
                    "33",
                    "34",
                    "35",
                    "36",
                    "37",
                    "38",
                    "39",
                    "40",
                    "41",
                    "42",
                    "43",
                    "44",
                    "45",
                    "46",
                    "47",
                    "48"
                ],
                "Ref": [
                    "",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "APPDEVICE.S",
                    "",
                    "",
                    "",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "",
                    "",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    "APPDEVICE.S",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: null",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Descriptor (0x001d)}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: PIXIT.ACE.APPCLUSTER (AppClusterId)}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Descriptor (0x001d), Endpoint: PIXIT.ACE.APPENDPOINT}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: PIXIT.ACE.APPCLUSTER (AppClusterId), Endpoint: PIXIT.ACE.APPENDPOINT}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Endpoint: PIXIT.ACE.APPENDPOINT}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{DeviceType: RootNode (0x0016)}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{DeviceType: PIXIT.ACE.APPDEVTYPEID}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Descriptor (0x001d), DeviceType: PIXIT.ACE.APPDEVTYPEID}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: PIXIT.ACE.APPCLUSTER (AppClusterId), DeviceType: PIXIT.ACE.APPDEVTYPEID}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Descriptor (0x001d), Endpoint: 0},{Cluster: PIXIT.ACE.APPCLUSTER (AppClusterId), Endpoint: PIXIT.ACE.APPENDPOINT}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint PIXIT.ACE.APPENDPOINT Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT attribute PIXIT.ACE.APPATTRIBUTE from cluster PIXIT.ACE.APPCLUSTER on endpoint PIXIT.ACE.APPENDPOINT",
                    "TH1 reads DUT wildcard Endpoint Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT wildcard Endpoint PIXIT.ACE.APPCLUSTER cluster PIXIT.ACE.APPATTRIBUTE attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute to resetit back to the default State.Value is list of AccessControlEntryStruct containing 1 elementsstructPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: null"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result isEndpoint 0: SUCCESSEndpoint PIXIT.ACE.APPENDPOINT: MUST NOT report any status, not even UNSUPPORTED_ACCESS",
                    "Result isEndpoint 0: MUST NOT report any statusEndpoint PIXIT.ACE.APPENDPOINT: SUCCESS",
                    "Result is SUCCESS"
                ]
            }
        },
        {
            "Test Case Name": "50.1.5. [TC-ACE-1.5] Multi-fabric",
            "Test Case ID": "TC-ACE-1.5",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced using only ACLs from appropriate fabric.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "9.10.5.3",
                    "11.17.7.12"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH1 commissions DUT using admin node IDN1",
                    "TH1 opens the commissioning window on the DUT",
                    "TH2 commissions DUT using admin node IDN2",
                    "TH2 reads its fabric index from the Operational Credentials clusterCurrentFabricIndex attribute",
                    "TH1 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructFabricIndex: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structFabricIndex: 1Privilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Descriptor (0x001d), Endpoint: 0}]",
                    "TH2 writes DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 2 elementsstructFabricIndex:th2FabricIndexPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N2]Targets field: [{Cluster: AccessControl (0x001f), Endpoint: 0}]structFabricIndex:th2FabricIndexPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: nullTargets field: [{Cluster: Basic (0x0028), Endpoint: 0}]",
                    "TH1 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH1 reads DUT Endpoint 0 Basic Information cluster VendorID attribute",
                    "TH2 reads DUT Endpoint 0 Descriptor cluster DeviceTypeList attribute",
                    "TH2 reads DUT Endpoint 0 Basic Information cluster VendorID attribute",
                    "TH1 resets the ACLs to the default value bywriting DUT Endpoint 0 AccessControl cluster ACL attribute,value is list of AccessControlEntryStruct containing 1 elementsstructFabricIndex: 1Privilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [N1]Targets field: null",
                    "TH1 removes the TH2 fabric by sending the RemoveFabric commandto the DUT with the FabricIndex set toth2FabricIndex"
                ],
                "Expected Outcome": [
                    "DUT is commissioned on TH1 fabric",
                    "",
                    "DUT is commissioned on TH2 fabric",
                    "Read successful, save asth2FabricIndex",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is UNSUPPORTED_ACCESS (0x7e)",
                    "Result is SUCCESS",
                    "Result is SUCCESS",
                    "Result is SUCCESS"
                ]
            }
        },
        {
            "Test Case Name": "50.1.6. [TC-ACE-1.6] Group auth mode",
            "Test Case ID": "TC-ACE-1.6",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Verify that access control is correctly enforced during group messaging\nusing only ACLs with group auth mode.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "Ref": [
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.5.1.",
                    "CoreSpec-11.2.7.2",
                    "AppSpec-1.3.7.2",
                    "CoreSpec-9.10.5.3",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.2",
                    "CoreSpec-9.10.5.3",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.2",
                    "AppSpec-1.3.7.5",
                    "CoreSpec-11.2.7.2",
                    "CoreSpec-11.2.8.4",
                    "CoreSpec-11.2.8.4"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a3GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: d0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 2220000EpochKey1: d1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 2220001EpochKey2: d2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 2220002",
                    "TH sends KeySetWrite command in the GroupKeyManagement cluster to DUT using a key that is pre-installed on the TH. GroupKeySet fields are as follows:GroupKeySetID: 0x01a1GroupKeySecurityPolicy: TrustFirst (0)EpochKey0: a0d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime0: 2220000EpochKey1: b1d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime1: 2220001EpochKey2: c2d1d2d3d4d5d6d7d8d9dadbdcdddedfEpochStartTime2: 2220002",
                    "TH binds GroupIds 0x0101 and 0x0102 with GroupKeySetID 0x01a1 and GroupId 0x0103 with GroupKeySetID 0x01a3 in the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with three entries as follows:List item 1:GroupId: 0x0101GroupKeySetId: 0x01a1List item 2:GroupId: 0x0102GroupKeySetId: 0x01a1List item 3:GroupId: 0x0103GroupKeySetId: 0x01a3",
                    "TH sends a AddGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID field set to 0x0103 and the GroupName set to an empty string",
                    "TH writes The ACL attribute in the Access Control cluster to add Manage privileges for group 0x0103 and maintain the current administrative privileges for the TH on the Access Control cluster. The following access control list shall be used:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: [N1]Targets: [{Cluster: AccessControl (0x001f), Endpoint: 0}]List item 2 (group Manage access):Privilege: Manage (4)AuthMode: Group (3)Subjects: group 0x0103 ([0x0103])Targets: {Cluster: Groups (0x0004), Endpoint: PIXIT.G.ENDPOINT}",
                    "TH sends a AddGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID field set to 0x0104 and the GroupName set to an empty string",
                    "TH sends a AddGroup Command to the Groups cluster with the GroupID field set to 0x0101 and the GroupName set to an empty string. The command is sent as a group command using GroupID 0x0103",
                    "TH sends a AddGroup Command to the Groups cluster with the GroupID field set to 0x0102 and the GroupName set to an empty string. The command is sent as a group command using GroupID 0x0101",
                    "TH writes The ACL attribute in the Access Control cluster to revoke groups Management access and restore full access over CASE by setting the following ACL list items:List item 1 (TH admin):Privilege: Administer (5)AuthMode: CASE (2)Subjects: [N1]Targets: null",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0101 to confirm that the AddGroup command from step6was successful",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0102 to confirm that the AddGroup command from step7was not successful",
                    "TH sends a AddGroup Command to the Groups cluster with the GroupID field set to 0x0105 and the GroupName set to an empty string. The command is sent as a group command using GroupID 0x0103",
                    "TH sends a ViewGroup Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE with the GroupID set to 0x0105 to confirm that the AddGroup command from step11was not successful",
                    "TH sends the RemoveAllGroups Command to the Groups cluster on Endpoint PIXIT.G.ENDPOINT over CASE",
                    "TH resets the GroupKeyMap attribute list on GroupKeyManagement cluster by writing the GroupKeyMap attribute with an empty list",
                    "TH resets the key set by sending the KeySetRemove command to the GroupKeyManagement cluster over CASE with the following fields:GroupKeySetID: 0x01a3",
                    "TH resets the key set by sending the KeySetRemove command to the GroupKeyManagement cluster over CASE with the following fields:GroupKeySetID: 0x01a1"
                ],
                "Expected Outcome": [
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SUCCESS response",
                    "Verify that the DUT sends SUCCESS response.",
                    "DUT responds with SUCCESS",
                    "Verify that the DUT sends SUCCESS response.",
                    "DUT responds with UNSUPPORTED_ACCESS",
                    "",
                    "",
                    "Verify that the DUT sends SUCCESS response.",
                    "DUT responds with SUCCESS",
                    "DUT responds with NOT_FOUND",
                    "",
                    "DUT responds with NOT_FOUND",
                    "DUT responds with SUCCESS",
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify that the DUT sends SUCCESS response.",
                    "Verify that the DUT sends SUCCESS response."
                ]
            }
        },
        {
            "Test Case Name": "50.1.7. [TC-ACE-2.1] Attribute read privilege enforcement - [DUT as Server]",
            "Test Case ID": "TC-ACE-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that all attributes on the DUT require the appropriate access control privilege for reading.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "3a",
                    "3b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH_commissioner performs a wildcard read of the DUT to establish the set of endpoints, cluster, and attributes to test",
                    "TH_commissioner reads the ACL attribute from the Access Control Cluster and saves it asdefault_acl",
                    "Repeat steps 3a and 3b for each privilege level in the set of supported privilege levels (view, operate, manage, administer) usingacl_privilegeto denote the current privilege level under test:",
                    "TH_commissioner appends an entry todefault_aclto give limited permissions to TH_second_controller and writes the new list to the ACL attribute. The new entry is as follows:structprivilege:acl_privilegeauthmode: CASEsubjects: [second_controller_nodeid]targets: []",
                    "For each endpoint on the DUT, for each standard cluster on the endpoint, and for each standard and global attribute on the cluster, TH_second_controller reads the attribute"
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "Ifacl_privilegeis greater than or equal to the minimum required privilege for read as defined in the spec, verify that an attribute value is returned. Otherwise, verify that UNSUPPORTED_ACCESS is returned."
                ]
            }
        },
        {
            "Test Case Name": "50.1.8. [TC-ACE-2.2] Attribute write privilege enforcement - [DUT as Server]",
            "Test Case ID": "TC-ACE-2.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that all attributes on the DUT require the appropriate access control privilege for writing and that non-writeable attributes cannot be written.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH_commissioner performs a wildcard read of the DUT to establish the set of endpoints, cluster, and attributes to test",
                    "TH_commissioner reads the ACL attribute from the Access Control Cluster and saves it asdefault_acl",
                    "TH_commissioner appends an entry todefault_aclto give admin permissions to TH_second_controller and writes the new list to the ACL attribute. The new entry is as follows:structprivilege: administerauthmode: CASEsubjects: [second_controller_nodeid]targets: []",
                    "TH_second_controller performs a wildcard read of the DUT to establish a viable set of attribute values for writing",
                    "Repeat steps 5a and 5b for each privilege level in the set of supported privilege levels (view, operate, manage, administer) usingacl_privilegeto denote the current privilege level under test:",
                    "TH_commissioner appends an entry todefault_aclto give limited permissions to TH_second_controller and writes the new list to the ACL attribute. The new entry is as follows:structprivilege:acl_privilegeauthmode: CASEsubjects: [second_controller_nodeid]targets: []",
                    "For each endpoint on the DUT, for each standard cluster on the endpoint, and for each standard and global attribute on the cluster, TH_second_controller writes the attribute as follows:If the attribute is the ACL andacl_privilegeis administer, skip this stepIf the attribute is a list, write an empty listIf the attribute is not a list, write back the value read during step4.Save the returned value aswrite_response.Ifwrite_responseis SUCCESS and the attribute is a list, write the attribute with the value read during step4."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "If the attribute is NOT writeable per the spec, verifywrite_responseis UNSUPPORTED_WRITEIf the attribute is OPTIONALLY writeable per the spec,write_responseMAY be UNSUPPORTED_WRITE. Otherwise, treat as a writeable attribute.If the attribute is writable per the spec andacl_privilegeis greater than or equal to the minimum required privilege for write, verifywrite_responseis NOT UNSUPPORTED_ACCESS. Other error codes are acceptable.If the attribute is writeable per the spec andacl_privilegeis less than the minimum required privilege for write, verifywrite_responseis UNSUPPORTED_ACCESS."
                ]
            }
        }
    ],
    "ICD_Management": [
        {
            "Test Case Name": "55.1.1. [TC-ICDM-2.1] Attributes with DUT as Server",
            "Test Case ID": "TC-ICDM-2.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the non-global attributes of the ICD Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11"
                ],
                "Ref": [
                    "",
                    "C.7.13.2",
                    "C.9.17.6.3",
                    "C.9.17.6.2",
                    "C.9.17.6.1",
                    "C.9.17.6.6",
                    "C.9.17.6.4",
                    "C.9.17.6.5",
                    "C.9.17.6.7",
                    "C.9.17.6.8",
                    "C.9.17.6.9",
                    "C.9.17.6.10"
                ],
                "PICS": [
                    "",
                    "",
                    "ICDM.S.A0002(ActiveModeThreshold)",
                    "ICDM.S.A0001(ActiveModeDuration)",
                    "ICDM.S.A0000(IdleModeDuration)",
                    "ICDM.S.A0005(ClientsSupportedPerFabric)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.A0004(ICDCounter)",
                    "ICDM.S.A0006(UserActiveModeTriggerHint)",
                    "ICDM.S.A0007(UserActiveModeTriggerInstruction)",
                    "ICDM.S.A0008(OperatingMode)",
                    "ICDM.S.A0009(MaximumCheckInBackoff)"
                ],
                "Test Step": [
                    "Commission DUT to TH (can be skipped if done in a preceding test).",
                    "TH reads from the DUT theFeatureMapattribute.",
                    "TH reads from the DUT theActiveModeThresholdattribute.",
                    "TH reads from the DUT theActiveModeDurationattribute.",
                    "TH reads from the DUT theIdleModeDurationattribute.",
                    "TH reads from the DUT theClientsSupportedPerFabricattribute.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH reads from the DUT theICDCounterattribute.",
                    "TH reads from the DUT theUserActiveModeTriggerHintattribute.",
                    "TH reads from the DUT theUserActiveModeTriggerInstructionattribute.",
                    "TH reads from the DUT theOperatingModeattribute.",
                    "TH reads from the DUT theMaximumCheckInBackoffattribute."
                ],
                "Expected Outcome": [
                    "",
                    "Store the value of bit 2 LITS tosupport_lits.",
                    "Verify that the DUT response contains an uint16.Ifsupport_litsis set to 1, the ActiveModeThreshold SHALL NOT be smaller than 5 seconds.",
                    "Verify that the DUT response contains an uint32.The ActiveModeDuration does not include the ActiveModeThreshold.",
                    "Verify that the DUT response contains an uint32.Value has to be between a range of 1 and 64800.IdleModeDuration shall not be smaller than ActiveModeDuration",
                    "Verify that the DUT response contains an uint16.Value has to be between a range of 1 and up",
                    "Verify that the DUT response contains a list.",
                    "Verify that the DUT response contains an uint32",
                    "Verify that the DUT response contains an bitmap32.- Multiple bits in the bitmap maybe set at the same time.- No more than one bit which has dependency on the UserActiveModeTriggerInstruction shall be set: bit 2, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16.",
                    "The value is encoded as a valid UTF-8 string with max length of 128 bytes.IfUserActiveModeTriggerHintin step 8 is one of the following, DUT responses a value consists solely of an encoding of N as decimal unsigned integer using the ASCII digits 0-9, and without leading zeros.5  - ActuateSensorSeconds6  - ActuateSensorTimes10 - ResetButtonSeconds11 - ResetButtonTimes13 - SetupButtonSeconds15 - SetupButtonTimesIf bit 2 inUserActiveModeTriggerHintin step 8 is set,UserActiveModeTriggerInstructionSHALL indicate a user instruction text string.If one of bit 7, 9, 14 inUserActiveModeTriggerHintin step 8 is set,UserActiveModeTriggerInstructionSHALL indicate a text string (color of LED)",
                    "Verify that the DUT response contains an enum8.",
                    "Verify that the DUT response contains an uint32.Value has to be between a range of IdleModeDuration and 64800."
                ]
            }
        },
        {
            "Test Case Name": "55.2.1. [TC-ICDM-3.1] Register/Unregister Clients with DUT as Server",
            "Test Case ID": "TC-ICDM-3.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the limit of ClientsSupportedPerFabric with RegisterClient and UnregisterClient commands.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12"
                ],
                "Ref": [
                    "",
                    "C.9.17.6.6",
                    "C.9.17.6.5",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.7.3",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "C.9.17.7.3"
                ],
                "PICS": [
                    "",
                    "ICDM.S.A0005(ClientsSupportedPerFabric)",
                    "ICDM.S.A0004(ICDCounter)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C02.Rsp(UnregisterClient)"
                ],
                "Test Step": [
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH reads from the DUT theClientsSupportedPerFabricattribute.",
                    "TH reads from the DUT theICDCounterattribute.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID: registering client\u2019s node ID- MonitoredSubject:MonitoredSubID- Key: shared secret between the client and the ICD- ClientType : Ephemeral(1)",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "Iflen(RegisteredClients)is less thanClientsSupportedPerFabric, TH repeatsRegisterClientcommand with different CheckInNodeID(s) and the Permanent(0) ClientType until the number of entries inRegisteredClientsequalsClientsSupportedPerFabric.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand with a different CheckInNodeID.",
                    "TH sendsUnregisterClientcommand with the CheckInNodeID from Step 6.",
                    "TH sendsUnregisterClientcommand with the CheckInNodeID from Step 2.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "Repeat Step 9 with the rest of CheckInNodeIDs from the list ofRegisteredClientsfrom Step 4, if any.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand with the CheckInNodeID from Step 2."
                ],
                "Expected Outcome": [
                    "RegisteredClientsis empty. If not empty, TH sends commandUnregisterClientto clear all clients inRegisteredClients.",
                    "Store the value ofClientsSupportedPerFabric.",
                    "Store the value ofICDCounter.",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response contains the value ofICDCounterwhich should be equal or higher than theIcdCounterin Step 1b.",
                    "Verify that the DUT response contains the value ofRegisteredClientswhich includes an entry with the CheckInNodeID, MonitoredSubject and ClientType from Step 2.",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response contains the value(s) ofICDCounter(s)which should be equal or higher than theIcdCounterin Step 1b.",
                    "Verify that the DUT response contains the value ofRegisteredClientswhich includes entry(s) of CheckInNodeID(s), MonitoredSubject(s) and ClientType(s) from Step 4.",
                    "Verify DUT responds w/ status RESOURCE_EXHAUSTED(0x89).",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains the value ofRegisteredClientswhere CheckInNodeID, MonitoredSubject and ClientType from Step 2 is not present inRegisteredClients.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains an empty list.",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b)."
                ]
            }
        },
        {
            "Test Case Name": "55.2.2. [TC-ICDM-3.2] Verify RegisterClient Command with DUT as Server",
            "Test Case ID": "TC-ICDM-3.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Verify RegisterClient command functionality/constraints of the ICD Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2a",
                    "2b",
                    "3a",
                    "3b",
                    "3c",
                    "3d",
                    "3e",
                    "3f",
                    "4a",
                    "4b",
                    "5",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "7"
                ],
                "Ref": [
                    "",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "",
                    "C.9.17.7.1",
                    "C.9.17.7.1",
                    "C.9.17.7.1",
                    "C.9.17.7.1",
                    "C.9.17.7.3"
                ],
                "PICS": [
                    "",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0003(RegisteredClients)",
                    "",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.C02.Rsp(UnregisterClient)"
                ],
                "Test Step": [
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID1- Key:Key1",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "Power cycle DUT",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID1as in Step 1a and differentMonitoredSubID2andKey2.- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID2- Key:Key2",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID1as in Step 1a and differentMonitoredSubID3andKey3, and an invalidVerificationKey3- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID3- Key:Key3- VerificationKey:VerificationKey3+",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID1as in Step 1a and differentMonitoredSubID4andKey4, and a valid wrongVerificationKey4- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID4- Key:Key4- VerificationKey:VerificationKey4+",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand withCheckInNodeID1.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "Set the TH to Manage privilege for ICDM cluster.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID5- MonitoredSubject:MonitoredSubID5- Key:Key5- VerificationKey:VerificationKey5",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID5as in Step 6a and differentMonitoredSubID6andKey6, and an invalidVerificationKey6- CheckInNodeID:CheckInNodeID5- MonitoredSubject:MonitoredSubID6- Key:Key6- VerificationKey:VerificationKey6",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID5as in Step 6a and differentMonitoredSubID7andKey7, and an valid wrongVerificationKey7- CheckInNodeID:CheckInNodeID5- MonitoredSubject:MonitoredSubID7- Key:Key7- VerificationKey:VerificationKey7",
                    "TH sendsRegisterClientcommand with sameCheckInNodeID5andVerificationKey5as in Step 6a and differentMonitoredSubID9andKey9- CheckInNodeID:CheckInNodeID5- MonitoredSubject:MonitoredSubID9- Key:Key9- VerificationKey:VerificationKey5",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID5andVerificationKey5."
                ],
                "Expected Outcome": [
                    "RegisteredClientsis empty. If not empty, TH sends commandUnregisterClientto clear all clients inRegisteredClients.",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining an entry of registered client with theCheckInNodeID1andMonitoredSubID1from Step 1a.",
                    "",
                    "Verify that the DUT response contains the same value ofRegisteredClientsas in Step 1b.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the updated registered client entry ofCheckInNodeID1andMonitoredSubID2from Step 3a.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.The invalidVerificationKey3is ignored.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the updated registered client entry ofCheckInNodeID1andMonitoredSubID3from Step 3c.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.The valid wrongVerificationKey4is ignored.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the updated registered client entry ofCheckInNodeID1andMonitoredSubID4from Step 3e.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains the value ofRegisteredClientswhere the registered client entry ofCheckInNodeID1is removed.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify DUT responds w/ status FAILURE(0x01).",
                    "Verify DUT responds w/ status FAILURE(0x01).",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "55.2.3. [TC-ICDM-3.3] Verify UnregisterClient Command with DUT as Server",
            "Test Case ID": "TC-ICDM-3.3",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Verify UnregisterClient command functionality/constraints of the ICD Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a",
                    "2b",
                    "3",
                    "4a",
                    "4b",
                    "5a",
                    "5b",
                    "5c",
                    "5d",
                    "6a",
                    "6b",
                    "6c",
                    "6d",
                    "7",
                    "8a",
                    "8b",
                    "8c",
                    "8d"
                ],
                "Ref": [
                    "",
                    "C.9.17.7.3",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.3",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "C.9.17.7.1",
                    "C.9.17.6.4",
                    "C.9.17.7.3",
                    "C.9.17.6.4",
                    "",
                    "C.9.17.7.1",
                    "C.9.17.7.3",
                    "C.9.17.7.3",
                    "C.9.17.7.3"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand withCheckInNodeID1, whereCheckInNodeID1can be any random node ID.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID2- MonitoredSubject:MonitoredSubID2- Key:Key2",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID3.",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID2.",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID4- MonitoredSubject:MonitoredSubID4- Key:Key4, a 16-byte octstr, eg,hex:1234567890abcdef1234567890abcdef",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID4as in Step 5a and an invalidVerificationKey5.- CheckInNodeID:CheckInNodeID4- VerificationKey:VerificationKey5, a 16-byte octstr, eg,hex:abcdef1234567890abcdef1234567890",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID6- MonitoredSubject:MonitoredSubID6- Key:Key6+",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID6as in Step 6a and a wrongVerificationKey7.- CheckInNodeID:CheckInNodeID6- VerificationKey:VerificationKey7",
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "Set the TH to Manage privilege for ICDM cluster.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID8- MonitoredSubject:MonitoredSubID8- Key:Key8+",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID8from Step 8a and an invalidVerificationKey9.- CheckInNodeID:CheckInNodeID8- VerificationKey:VerificationKey9",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID8from Step 8a and a valid wrongVerificationKey10.- CheckInNodeID:CheckInNodeID8- VerificationKey:VerificationKey10",
                    "TH sendsUnregisterClientcommand with theCheckInNodeID8andVerificationKey8from Step 8a.- CheckInNodeID:CheckInNodeID8- VerificationKey:VerificationKey8"
                ],
                "Expected Outcome": [
                    "RegisteredClientsis empty. If not empty, TH sends commandUnregisterClientto clear all clients inRegisteredClients.",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b).",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the new registered client entry ofCheckInNodeID2andMonitoredSubID2from Step 2a.",
                    "Verify DUT responds w/ status NOT_FOUND(0x8b).",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains the value ofRegisteredClientswhere the registered client entry ofCheckInNodeID2andMonitoredSubID2is removed.",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the new registered client entry ofCheckInNodeID4andMonitoredSubID4from Step 5a.",
                    "Verify DUT responds w/ status SUCCESS(0x00).The invalidVerificationKey5is ignored.",
                    "Verify that the DUT response contains the value ofRegisteredClientswhere the registered client entry ofCheckInNodeID4andMonitoredSubID4is removed.",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains the value ofRegisteredClientscontaining the new registered client entry ofCheckInNodeID6andMonitoredSubID6from Step 6a.",
                    "Verify DUT responds w/ status SUCCESS(0x00).The wrongVerificationKey7is ignored.",
                    "Verify that the DUT response contains the value ofRegisteredClientswhere the registered client entry ofCheckInNodeID6andMonitoredSubID6is removed.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsICDCounter.",
                    "Verify DUT responds w/ status FAILURE(0x01).",
                    "Verify DUT responds w/ status FAILURE(0x01).",
                    "Verify DUT responds w/ status SUCCESS(0x00)."
                ]
            }
        },
        {
            "Test Case Name": "55.2.4. [TC-ICDM-3.4] ICDCounter Persistence with DUT as Server",
            "Test Case ID": "TC-ICDM-3.4",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Verify ICDCounter persistence after reboot of the ICD Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2a",
                    "2b"
                ],
                "Ref": [
                    "C.9.17.6.5",
                    "",
                    "C.9.17.6.5"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theICDCounterattribute.",
                    "Reboot DUT",
                    "TH reads from the DUT theICDCounterattribute."
                ],
                "Expected Outcome": [
                    "Verify that the DUT response contains value ofICDCounterofIcdCounter1.",
                    "",
                    "Verify that the DUT response contains value ofICDCounterand stores inIcdCounter2.IcdCounter2is greater or equal toIcdCounter1.ICDCounterattribute can roll over. If the attribute rolls over, it will be greater or equal to 0."
                ]
            }
        },
        {
            "Test Case Name": "55.2.5. [TC-ICDM-4.1] Stay Active Request with DUT as Server",
            "Test Case ID": "TC-ICDM-4.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the Stay Active Request functionality of the ICD Management cluster server.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "2a"
                ],
                "Ref": [
                    "C.9.17.7.4",
                    "",
                    "C.9.17.7.4"
                ],
                "PICS": [
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH sendsStayActiveRequestcommand withStayActiveDurationgreater than or equal 30000 milliseconds.",
                    "Wait for minimum ofPromisedActiveDuration1.",
                    "TH sendsStayActiveRequestcommand withStayActiveDurationless than 30000 milliseconds."
                ],
                "Expected Outcome": [
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsPromisedActiveDuration1, which shall be greater than or equal to 30000 milliseconds.",
                    "",
                    "Verify DUT responds w/ status SUCCESS(0x00).Verify that the DUT response containsPromisedActiveDuration2, which shall be greater than or equal toStayActiveDuration."
                ]
            }
        },
        {
            "Test Case Name": "55.2.6. [TC-ICDM-5.1] Operating Mode with DUT as Server",
            "Test Case ID": "TC-ICDM-5.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LIT devices operating mode functionality with single fabric.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "2",
                    "3a",
                    "3b",
                    "4",
                    "5a",
                    "5b"
                ],
                "Ref": [
                    "",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.1",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.3",
                    "C.9.17.6.9",
                    ""
                ],
                "PICS": [
                    "",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0008(OperatingMode)",
                    ""
                ],
                "Test Step": [
                    "TH reads from the DUT theRegisteredClientsattribute.",
                    "TH reads from the DUT theOperatingModeattribute.",
                    "Verify that the ICD DNS-SD TXT key is present.",
                    "TH sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID1- Key:Key1",
                    "TH reads from the DUT theOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key.",
                    "TH sendsUnregisterClientcommand withCheckInNodeID1.",
                    "TH reads from the DUT theOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key."
                ],
                "Expected Outcome": [
                    "RegisteredClientsis empty. If not empty, TH sends commandUnregisterClientto clear all clients inRegisteredClients.",
                    "Verify that the DUT response contains value ofOperatingMode=0 (SIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=0.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains value ofOperatingMode=1 (LIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=1.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains value ofOperatingMode=0 (SIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=0."
                ]
            }
        },
        {
            "Test Case Name": "55.2.7. [TC-ICDM-5.2] Operating Mode with DUT as Server - Multi-Fabrics",
            "Test Case ID": "TC-ICDM-5.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the LIT devices operating mode functionality with multi-fabrics.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.1",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.1",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.3",
                    "C.9.17.6.9",
                    "",
                    "C.9.17.7.3",
                    "C.9.17.6.9"
                ],
                "Ref": [
                    "TH1 reads from the DUT theRegisteredClientsattribute.RegisteredClientsis empty.",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C00.Rsp(RegisterClient)",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0008(OperatingMode)",
                    "",
                    "ICDM.S.C02.Rsp(UnregisterClient)",
                    "ICDM.S.A0008(OperatingMode)"
                ],
                "PICS": [
                    "1b",
                    "TH1 and TH2 read from the DUTOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key.",
                    "TH1 sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID1- MonitoredSubject:MonitoredSubID1- Key:Key1",
                    "TH1 and TH2 read from the DUTOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key.",
                    "TH2 sendsRegisterClientcommand.- CheckInNodeID:CheckInNodeID2- MonitoredSubject:MonitoredSubID2- Key:Key2",
                    "TH1 and TH2 read from the DUTOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key.",
                    "TH1 sendsUnregisterClientcommand withCheckInNodeID1.",
                    "TH1 and TH2 read from the DUTOperatingModeattribute.",
                    "Verify that mDNS is advertising ICD key.",
                    "TH2 sendsUnregisterClientcommand withCheckInNodeID2.",
                    "TH reads from the DUT theOperatingModeattribute."
                ],
                "Test Step": [
                    "TH2 reads from the DUT theRegisteredClientsattribute.RegisteredClientsis empty.",
                    "Verify that the DUT response contains value ofOperatingMode=0 (SIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=0.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains value ofOperatingMode=1 (LIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=1.",
                    "Verify DUT responds w/ status SUCCESS(0x00);Verify that the DUT response containsICDCounter.",
                    "Verify that the DUT response contains value ofOperatingMode=1 (LIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=1.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains value ofOperatingMode=1 (LIT Operating Mode).",
                    "Verify that ICD DNS-SD TXT key showsICD=1.",
                    "Verify DUT responds w/ status SUCCESS(0x00).",
                    "Verify that the DUT response contains value ofOperatingMode=0 (SIT Operating Mode)."
                ],
                "Expected Outcome": [
                    "1c",
                    "1d",
                    "2",
                    "3a",
                    "3b",
                    "4",
                    "5a",
                    "5b",
                    "6",
                    "7a",
                    "7b",
                    "8",
                    "5a",
                    "5b"
                ]
            }
        },
        {
            "Test Case Name": "55.2.8. [TC-ICDM-6.1] Functionality with DUT as Client",
            "Test Case ID": "TC-ICDM-6.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies the register/unregister client functionality of the cluster client.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3"
                ],
                "Ref": [
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "ICDM.C.C00.Tx(RegisterClient)",
                    "ICDM.C.C02.Tx(UnregisterClient)",
                    "ICDM.C.C03.Tx(StayActiveRequest)"
                ],
                "Test Step": [
                    "DUT issues anC_REGISTER_CLIENTcommand to the Test Harness.",
                    "DUT issues anC_UNREGISTER_CLIENTcommand to the Test Harness.",
                    "DUT issues anC_STAY_ACTIVE_REQUESTcommand to the Test Harness."
                ],
                "Expected Outcome": [
                    "If ICDM.C.C00.Tx(RegisterClient), Test Harness receives theC_REGISTER_CLIENTcommand from the DUT.Verify the command has following parameters:- ID 0 (CheckInNodeID): the type is a validnode-id.- ID 1 (MonitoredSubject): the type is a validsubject-id.- ID 2 (Key): the type is anoctstr.- Optional ID 3 (VerificationKey): the type is anoctstr.",
                    "If ICDM.C.C02.Tx(UnregisterClient), Test Harness receives theC_UNREGISTER_CLIENTcommand from the DUT.Verify the command has following parameters:- ID 0 (CheckInNodeID): the type is anode-id.- Optional ID 1 (VerificationKey): the type is anoctstr.",
                    "If ICDM.C.C03.Tx(StayActiveRequest), Test Harness receives theC_STAY_ACTIVE_REQUESTcommand from the DUT.Verify the command has following parameters:- ID 0 (StayActiveDuration): the type is auint32."
                ]
            }
        }
    ],
    "Minimal_Resource_Requirements": [
        {
            "Test Case Name": "62.1.1. [TC-RR-1.1] Minimal Resource Requirements for Matter Node",
            "Test Case ID": "TC-RR-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "This test case verifies that the device meets the minimal requirements for each resource type from the list of various resources required by a Matter Node implementation.",
            "Test Procedure": {
                "#": [
                    "1a",
                    "1b",
                    "1c",
                    "1d",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15"
                ],
                "Ref": [
                    "11.17.6, 6.1.3",
                    "11.17.6, 6.1.3",
                    "11.17.6, 6.1.3",
                    "11.17.6, 6.1.3",
                    "11.17.5.3, 11.1.6.3",
                    "9.10.5",
                    "4.13.2.8",
                    "2.11.2.2",
                    "2.11.2.1",
                    "2.11.2.2",
                    "2.11.2.1",
                    "9.7.5.1, 9.9.4.1",
                    "9.10.5",
                    "2.11.1.2, 11.2, 9.5.4",
                    "2.11.1.2, 11.2",
                    "2.11.1.2, 11.2",
                    "11.2",
                    "11.2"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "ULABEL.S.A0000(LabelList)",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH begins the process of commissioning the DUT. After receiving the CSRResponse TH obtains or generates a NOC, the Root CA Certificate, ICAC and IPK.The certificates shall have their subjects padded with additional data such that they are each the maximum certificate size of 400 bytes when encoded in the MatterCertificateEncoding.",
                    "TH sends AddNOC command with CaseAdminSubject as 0xFFFF_FFFD_0001_0001, IpkValue with 3 Epoch Keys and NOC must have CAT 0x0001_0001.",
                    "TH then reads the unfiltered list of fabrics on the DUT and removes any fabric found that isn\u2019t the one the TH just commissioned.",
                    "Repeat the process to commission DUT to 5 different fabrics. If, for a given fabric, it is not possible for all certificates in the chain to be of length 400 bytes, then at least 1 of the set must be larger or equal to 370 bytes and at least one of the set must be larger or equal to 350 bytes, and at least one must be exactly 400 bytes. All certificate chains have to be valid.",
                    "TH writes the user-visible Label field for Fabrics to maximum size of 32 characters. TH writes theNodeLabelAttribute to maximum size of 32 characters.",
                    "Add 4 Access Control entries on DUT with a list of 4 Subjects and 3 Targets with the following parameters:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [0xFFFF_FFFD_0001_0001, 0x2000_0000_0000_0001, 0x2000_0000_0000_0002, 0x2000_0000_0000_0003]Targets field: [{Endpoint: 0}, {Cluster: 0xFFF1_FC00, DeviceType: 0xFFF1_BC30}, {Cluster: 0xFFF1_FC00, DeviceType: 0xFFF1_BC31}]structPrivilege field: Manage (4)AuthMode field: CASE (2)Subjects field: [0x1000_0000_0000_0001, 0x1000_0000_0000_0002, 0x1000_0000_0000_0003, 0x1000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC00, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC01, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC02, DeviceType: 0xFFF1_BC22}]structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0x3000_0000_0000_0001, 0x3000_0000_0000_0002, 0x3000_0000_0000_0003, 0x3000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC40, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC41, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC02, DeviceType: 0xFFF1_BC42}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [0x4000_0000_0000_0001, 0x4000_0000_0000_0002, 0x4000_0000_0000_0003, 0x4000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC80, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC81, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC82, DeviceType: 0xFFF1_BC22}]Repeat the process for all 5 fabrics.",
                    "Initiate CASE sessions from 3 different client nodes per fabric to DUT for a total of 15 sessions.",
                    "Each client subscribes to 3 different attribute/events paths which includes theNodeLabelAttribute on each fabric to DUT.",
                    "Send Read Request Message containing 9 separate paths to cover the first 9 attributes (IDs 0 through 8) of the Basic Information cluster on Endpoint which includes theNodeLabelAttribute, from all clients on each fabric to DUT. Record Local and peer session ID for each client for later use.",
                    "TH writes theNodeLabelAttribute to a different value than the one used in Step 2.",
                    "Send Read Request Message for theNodeLabelAttribute from all clients on each fabric to DUT. Record peer session ID for each client.",
                    "TH writes 4 entries per endpoint where LabelList is supported with both Label and Value fields set to max 16 characters.",
                    "Add 4 Access Control entries on DUT with a list of 4 Subjects and 3 Targets. Note this is different from above ACL as we are allowing the group cluster to be read across all endpoints in order for the next step to run properly. Use the following parameters:structPrivilege field: Administer (5)AuthMode field: CASE (2)Subjects field: [0xFFFF_FFFD_0001_0001, 0x2000_0000_0000_0001, 0x2000_0000_0000_0002, 0x2000_0000_0000_0003]Targets field: [{Endpoint: 0}, {Cluster: 0x0000_0004}, {Cluster: 0xFFF1_FC00, DeviceType: 0xFFF1_BC31}]structPrivilege field: Manage (4)AuthMode field: CASE (2)Subjects field: [0x1000_0000_0000_0001, 0x1000_0000_0000_0002, 0x1000_0000_0000_0003, 0x1000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC00, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC01, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC02, DeviceType: 0xFFF1_BC22}]structPrivilege field: Operate (3)AuthMode field: CASE (2)Subjects field: [0x3000_0000_0000_0001, 0x3000_0000_0000_0002, 0x3000_0000_0000_0003, 0x3000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC40, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC41, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC02, DeviceType: 0xFFF1_BC42}]structPrivilege field: View (1)AuthMode field: CASE (2)Subjects field: [0x4000_0000_0000_0001, 0x4000_0000_0000_0002, 0x4000_0000_0000_0003, 0x4000_0000_0000_0004]Targets field: [{Cluster: 0xFFF1_FC80, DeviceType: 0xFFF1_BC20}, {Cluster: 0xFFF1_FC81, DeviceType: 0xFFF1_BC21}, {Cluster: 0xFFF1_FC82, DeviceType: 0xFFF1_BC22}]Repeat the process for all 5 fabrics.",
                    "TH counts all Groups cluster entries (cluster ID 0x0004) in every Descriptor\u2019sServerListinstance within every endpoint found in all 'PartsList' instances. TH records Groups cluster instances counted ascounted_groups_clusters.",
                    "Ifcounted_groups_clustersequals 0, TH skips this step. TH readsMaxGroupKeysPerFabricfrom the Group Key Management Cluster.",
                    "Ifcounted_groups_clustersequals 0, TH skips this step. TH writesMaxGroupKeysPerFabric-1valid and unique group key sets per fabric to the Group Key Management Cluster, which is the minimum number of group key sets required, notwithstanding the reserved Identity Protection Key (IPK) key set.",
                    "Ifcounted_groups_clustersequals 0, TH skips this step. TH writesMaxGroupsPerFabricvalid and unique entries per fabric intoGroupKeyMapreferring to the key sets from step 12.",
                    "Ifcounted_groups_clustersequals 0, TH skips this step. TH addsMaxGroupsPerFabricvalid and unique groups per fabric. TH distributes the groups across all endpoints as follows:TH iterates over all 5 fabrics.TH stores the remainder when calculatingMaxGroupsPerFabric / counted_groups_clustersasgroups_remainder.TH iterates over all endpoints.If no Groups cluster is found in the endpoint\u2019sServerList, TH continues to the next endpoint.TH addsfloor(MaxGroupsPerFabric / counted_groups_clusters)valid and unique groups by invoking theAddGroupcommand on the Groups cluster.Ifgroups_remainderequals 0, TH continues to the next endpoint.TH adds 1 more valid and unique group by invoking theAddGroupcommand on the Groups cluster.TH decreases the value ofgroups_remainderby 1."
                ],
                "Expected Outcome": [
                    "",
                    "",
                    "Ensure that only 1 fabric remains on the device and is the TH\u2019s before continuing.",
                    "Verify that the device can be commissioned to the minimum value ofSupportedFabricsAttribute on the Node Operational Credentials Cluster which is 5.",
                    "Verify that the device supports minimum constraints of Fabric Label andNodeLabelAttribute as mentioned in spec.",
                    "Verify that the Subjects have access control privilege on the Targets according to the ACL entries for each fabric and the device supports minimum constraints for each ofAccessControlEntriesPerFabricAttribute,SubjectsPerAccessControlEntryAttribute andTargetsPerAccessControlEntryAttribute on the Access Control Cluster.",
                    "Verify that the device supports minimum constraints of 3 CASE session contexts per fabric.",
                    "Verify that the device supports minimum constraints of Subscribe Interaction Limits as mentioned in spec.",
                    "Verify that the device supports minimum constraints of Read Interaction Limits as mentioned in spec.",
                    "Verify that all the other clients on all fabrics receive Report Data message for this value change.",
                    "Verify that the Local and peer session ID used for each read, for each client, must have remained the same from Step 7.",
                    "Verify that the device supports minimum constraints ofLabelListAttribute as mentioned in spec.",
                    "Verify that the Subjects have access control privilege on the Targets according to the ACL entries for each fabric and the device supports minimum constraints for each ofAccessControlEntriesPerFabricAttribute,SubjectsPerAccessControlEntryAttribute andTargetsPerAccessControlEntryAttribute on the Access Control Cluster.",
                    "Verify the value ofMaxGroupsPerFabricread from the Group Key Management Cluster is no less than the Group Limits requirements of 4 (groups) *counted_groups_clusters.",
                    "Verify the value ofMaxGroupKeysPerFabricis no less than 3, which is the minimum of group key sets per fabric required by the Group Limits.",
                    "Verify that aKeySetReadAllIndicesResponseis received and that itsGroupKeySetIDslist hasMaxGroupKeysPerFabricentries present that match the written values.",
                    "After all data is written, verify the contents ofGroupKeyMapmatch the values written and quantity of entries written.",
                    "Verify the entries inGroupTablecontain all groups added. Verify theEndpointslist of eachGroupTableentry contains a single entry equal to the endpoint that the theAddGroupcommand was invoked on."
                ]
            }
        }
    ],
    "System_Model": [
        {
            "Test Case Name": "65.1.1. [TC-SM-1.1] Device composition - Root Node [DUT as Server]",
            "Test Case ID": "TC-SM-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests root node requirements",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                ],
                "Ref": [
                    "",
                    "C.2.10",
                    "C.2.10",
                    "{REF_SM_ENDPOINT}",
                    "C.2.10"
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    "",
                    "",
                    "",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "Verify that endpoint 0 exists in the returned data",
                    "Verify that the endpoint 0 descriptor cluster DeviceTypeList includes the Root Node device type id (0x0016)",
                    "For each of the non-root endpoints, verify that the descriptor cluster DeviceTypeList does NOT include the Root Node device type id (0x0016)",
                    "Validate all the mandatory clusters for the Root Node Device Type exist on the Root Node endpoint."
                ]
            }
        },
        {
            "Test Case Name": "65.1.2. [TC-SM-1.2] Device composition - Topology [DUT as Server]",
            "Test Case ID": "TC-SM-1.2",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that the topology indicated by the descriptor cluster PartsList matches the requirements in {REF_SM_ENDPOINT}.",
            "Test Procedure": {
                "#": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6"
                ],
                "Ref": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes on all endpoints",
                    "",
                    "",
                    "",
                    "",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "Verify the Descriptor cluster PartsList on endpoint 0 exactly lists all the other (non-0) endpoints on the DUT - i.e. the endpoints returned in step 1 (except EP 0) must be listed in the PartsList, and all endpoints listed in the PartsList must be amongst the endpoint(s) returned in step 1",
                    "For each endpoint on the DUT (including EP 0), verify the PartsList in the Descriptor cluster on that endpoint does not include itself",
                    "Create two empty list variablesflatandtreeFor each non-root endpoint on the DUTIf the DeviceTypeList attribute in the Descriptor cluster for that endpoint includes the Aggregator device type(0x000e), add the endpoint id to theflatlistOtherwise, add the endpoint id to thetreelist",
                    "For each endpointein thetreelist, walk the entire PartsList tree and ensureedoes not appear in any descendants.",
                    "For each endpointein theflatlist:* for each endpoint idsub_idpresent in the in the PartsList ofe, ensure that every id listed in the PartsList for endpointsub_idappears in the PartsList ofe"
                ]
            }
        }
    ],
    "Device_Types": [
        {
            "Test Case Name": "68.1.1. [TC-DT-1.1] Base Device Type [DUT as Server]",
            "Test Case ID": "TC-DT-1.1",
            "Test Plan": "Core testcase",
            "PICS": [
                "Nil"
            ],
            "Pre-condition": "Nil",
            "Purpose": "Tests that every device type conforms to the requirements of the base device type",
            "Test Procedure": {
                "#": [
                    "1",
                    "2"
                ],
                "Ref": [
                    "",
                    ""
                ],
                "PICS": [
                    "",
                    ""
                ],
                "Test Step": [
                    "TH performs a wildcard read of all attributes and endpoints",
                    ""
                ],
                "Expected Outcome": [
                    "",
                    "Verify that each endpoint includes a Descriptor cluster"
                ]
            }
        }
    ]
}